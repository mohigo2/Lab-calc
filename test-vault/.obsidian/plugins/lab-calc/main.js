/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/types.ts
var types_exports = {};
__export(types_exports, {
  CONCENTRATION_CONVERSION_FACTORS: () => CONCENTRATION_CONVERSION_FACTORS,
  ConcentrationInputMode: () => ConcentrationInputMode,
  ConcentrationUnit: () => ConcentrationUnit,
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  ErrorType: () => ErrorType,
  MASS_CONVERSION_FACTORS: () => MASS_CONVERSION_FACTORS,
  MassUnit: () => MassUnit,
  StepDisplayFormat: () => StepDisplayFormat,
  TemplateCategory: () => TemplateCategory,
  VOLUME_CONVERSION_FACTORS: () => VOLUME_CONVERSION_FACTORS,
  VolumeUnit: () => VolumeUnit,
  WarningType: () => WarningType
});
var VolumeUnit, ConcentrationUnit, MassUnit, WarningType, ErrorType, DEFAULT_SETTINGS, VOLUME_CONVERSION_FACTORS, MASS_CONVERSION_FACTORS, CONCENTRATION_CONVERSION_FACTORS, TemplateCategory, StepDisplayFormat, ConcentrationInputMode;
var init_types = __esm({
  "src/types.ts"() {
    VolumeUnit = /* @__PURE__ */ ((VolumeUnit2) => {
      VolumeUnit2["LITER"] = "L";
      VolumeUnit2["MILLILITER"] = "mL";
      VolumeUnit2["MICROLITER"] = "\xB5L";
      VolumeUnit2["NANOLITER"] = "nL";
      return VolumeUnit2;
    })(VolumeUnit || {});
    ConcentrationUnit = /* @__PURE__ */ ((ConcentrationUnit2) => {
      ConcentrationUnit2["MOLAR"] = "M";
      ConcentrationUnit2["MILLIMOLAR"] = "mM";
      ConcentrationUnit2["MICROMOLAR"] = "\xB5M";
      ConcentrationUnit2["NANOMOLAR"] = "nM";
      return ConcentrationUnit2;
    })(ConcentrationUnit || {});
    MassUnit = /* @__PURE__ */ ((MassUnit2) => {
      MassUnit2["GRAM"] = "g";
      MassUnit2["MILLIGRAM"] = "mg";
      MassUnit2["MICROGRAM"] = "\xB5g";
      MassUnit2["NANOGRAM"] = "ng";
      return MassUnit2;
    })(MassUnit || {});
    WarningType = /* @__PURE__ */ ((WarningType2) => {
      WarningType2["HIGH_CONCENTRATION"] = "high_concentration";
      WarningType2["LOW_CONCENTRATION"] = "low_concentration";
      WarningType2["SMALL_VOLUME"] = "small_volume";
      WarningType2["LARGE_VOLUME"] = "large_volume";
      WarningType2["MISSING_MOLECULAR_WEIGHT"] = "missing_molecular_weight";
      WarningType2["UNUSUAL_DILUTION_FACTOR"] = "unusual_dilution_factor";
      WarningType2["OLD_REAGENT"] = "old_reagent";
      WarningType2["VOLUME_OVERFLOW"] = "volume_overflow";
      return WarningType2;
    })(WarningType || {});
    ErrorType = /* @__PURE__ */ ((ErrorType2) => {
      ErrorType2["IMPOSSIBLE_CONCENTRATION"] = "impossible_concentration";
      ErrorType2["INVALID_CONCENTRATION"] = "invalid_concentration";
      ErrorType2["INVALID_VOLUME"] = "invalid_volume";
      ErrorType2["NEGATIVE_VALUE"] = "negative_value";
      ErrorType2["MISSING_REQUIRED_FIELD"] = "missing_required_field";
      ErrorType2["INVALID_MOLECULAR_WEIGHT"] = "invalid_molecular_weight";
      ErrorType2["CONCENTRATION_UNIT_MISMATCH"] = "concentration_unit_mismatch";
      ErrorType2["VOLUME_OVERFLOW"] = "volume_overflow";
      ErrorType2["CALCULATION_ERROR"] = "calculation_error";
      return ErrorType2;
    })(ErrorType || {});
    DEFAULT_SETTINGS = {
      defaultVolumeUnit: "mL" /* MILLILITER */,
      defaultConcentrationUnit: "mM" /* MILLIMOLAR */,
      decimalPlaces: 2,
      enableSuggestions: true,
      showCalculationSteps: false,
      customReagents: [],
      defaultTemplate: "buffer",
      recipeTemplates: [],
      enableTemplates: true,
      calculationHistory: [],
      enableHistory: true,
      maxHistoryEntries: 100,
      customReagentCategories: [],
      enableCustomCategories: true
    };
    VOLUME_CONVERSION_FACTORS = {
      ["L" /* LITER */]: 1,
      ["mL" /* MILLILITER */]: 1e3,
      ["\xB5L" /* MICROLITER */]: 1e6,
      ["nL" /* NANOLITER */]: 1e9
    };
    MASS_CONVERSION_FACTORS = {
      ["g" /* GRAM */]: 1,
      ["mg" /* MILLIGRAM */]: 1e3,
      ["\xB5g" /* MICROGRAM */]: 1e6,
      ["ng" /* NANOGRAM */]: 1e9
    };
    CONCENTRATION_CONVERSION_FACTORS = {
      ["M" /* MOLAR */]: 1,
      ["mM" /* MILLIMOLAR */]: 1e3,
      ["\xB5M" /* MICROMOLAR */]: 1e6,
      ["nM" /* NANOMOLAR */]: 1e9
    };
    TemplateCategory = /* @__PURE__ */ ((TemplateCategory2) => {
      TemplateCategory2["COMMON_BUFFERS"] = "common_buffers";
      TemplateCategory2["PROTEIN_BUFFERS"] = "protein_buffers";
      TemplateCategory2["MOLECULAR_BIOLOGY"] = "molecular_biology";
      TemplateCategory2["CELL_CULTURE"] = "cell_culture";
      TemplateCategory2["ANALYTICAL"] = "analytical";
      TemplateCategory2["CUSTOM"] = "custom";
      return TemplateCategory2;
    })(TemplateCategory || {});
    StepDisplayFormat = /* @__PURE__ */ ((StepDisplayFormat2) => {
      StepDisplayFormat2["TEXT"] = "text";
      StepDisplayFormat2["TABLE"] = "table";
      return StepDisplayFormat2;
    })(StepDisplayFormat || {});
    ConcentrationInputMode = /* @__PURE__ */ ((ConcentrationInputMode2) => {
      ConcentrationInputMode2["STANDARD"] = "standard";
      ConcentrationInputMode2["EXPONENTIAL"] = "exponential";
      return ConcentrationInputMode2;
    })(ConcentrationInputMode || {});
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BufferCalcPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");
init_types();

// src/settings.ts
var import_obsidian7 = require("obsidian");
init_types();

// src/ui/settings-import-export-modal.ts
var import_obsidian2 = require("obsidian");

// src/utils/settings-manager.ts
var import_obsidian = require("obsidian");
var SettingsManager = class {
  /**
   * 設定をJSONファイルとしてエクスポート
   */
  static exportSettings(settings, customReagents = [], recipeTemplates = []) {
    const exportData = {
      version: this.EXPORT_VERSION,
      exportDate: new Date().toISOString(),
      settings: {
        ...settings,
        // 機密データを除外
        customReagents: [],
        recipeTemplates: []
      },
      customReagents,
      recipeTemplates,
      metadata: {
        pluginVersion: this.PLUGIN_VERSION,
        exportSource: "Buffer Calc Plugin",
        totalTemplates: recipeTemplates.length,
        totalCustomReagents: customReagents.length
      }
    };
    return JSON.stringify(exportData, null, 2);
  }
  /**
   * エクスポートデータをファイルとしてダウンロード
   */
  static downloadSettingsFile(settings, customReagents = [], recipeTemplates = []) {
    try {
      const exportJson = this.exportSettings(settings, customReagents, recipeTemplates);
      const blob = new Blob([exportJson], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `buffer-calc-settings-${new Date().toISOString().split("T")[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      new import_obsidian.Notice("\u8A2D\u5B9A\u30D5\u30A1\u30A4\u30EB\u3092\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3057\u307E\u3057\u305F");
    } catch (error) {
      console.error("Settings export error:", error);
      new import_obsidian.Notice("\u8A2D\u5B9A\u306E\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u306B\u5931\u6557\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  /**
   * インポートしたJSONデータを検証
   */
  static validateImportData(jsonString) {
    try {
      const data = JSON.parse(jsonString);
      if (!data.version || !data.settings) {
        return { valid: false, error: "\u7121\u52B9\u306A\u30D5\u30A1\u30A4\u30EB\u5F62\u5F0F\u3067\u3059" };
      }
      if (data.version !== this.EXPORT_VERSION) {
        return {
          valid: false,
          error: `\u30B5\u30DD\u30FC\u30C8\u3055\u308C\u3066\u3044\u306A\u3044\u30D0\u30FC\u30B8\u30E7\u30F3\u3067\u3059 (${data.version})`
        };
      }
      const requiredFields = ["defaultVolumeUnit", "defaultConcentrationUnit", "decimalPlaces"];
      for (const field of requiredFields) {
        if (!(field in data.settings)) {
          return {
            valid: false,
            error: `\u5FC5\u9808\u8A2D\u5B9A\u9805\u76EE\u304C\u4E0D\u8DB3\u3057\u3066\u3044\u307E\u3059: ${field}`
          };
        }
      }
      return { valid: true, data };
    } catch (error) {
      return {
        valid: false,
        error: "JSON\u30D5\u30A1\u30A4\u30EB\u306E\u89E3\u6790\u306B\u5931\u6557\u3057\u307E\u3057\u305F: " + error.message
      };
    }
  }
  /**
   * 設定をインポート
   */
  static importSettings(jsonString, currentSettings, options = {
    mergeSettings: true,
    replaceReagents: false,
    replaceTemplates: false
  }) {
    const validation = this.validateImportData(jsonString);
    if (!validation.valid) {
      return {
        success: false,
        message: validation.error || "\u4E0D\u660E\u306A\u30A8\u30E9\u30FC"
      };
    }
    const importData = validation.data;
    const warnings = [];
    let importedReagents = 0;
    let importedTemplates = 0;
    try {
      let newSettings;
      if (options.mergeSettings) {
        newSettings = {
          ...currentSettings,
          ...importData.settings,
          // 配列項目は別途処理
          customReagents: currentSettings.customReagents,
          recipeTemplates: currentSettings.recipeTemplates
        };
      } else {
        newSettings = { ...importData.settings };
      }
      if (importData.customReagents && importData.customReagents.length > 0) {
        if (options.replaceReagents) {
          newSettings.customReagents = [...importData.customReagents];
          importedReagents = importData.customReagents.length;
        } else {
          const existingNames = new Set(currentSettings.customReagents.map((r) => r.name));
          const newReagents = importData.customReagents.filter((r) => !existingNames.has(r.name));
          newSettings.customReagents = [...currentSettings.customReagents, ...newReagents];
          importedReagents = newReagents.length;
          if (newReagents.length < importData.customReagents.length) {
            warnings.push(`${importData.customReagents.length - newReagents.length}\u500B\u306E\u8A66\u85AC\u304C\u91CD\u8907\u306E\u305F\u3081\u30B9\u30AD\u30C3\u30D7\u3055\u308C\u307E\u3057\u305F`);
          }
        }
      }
      if (importData.recipeTemplates && importData.recipeTemplates.length > 0) {
        if (options.replaceTemplates) {
          newSettings.recipeTemplates = [...importData.recipeTemplates];
          importedTemplates = importData.recipeTemplates.length;
        } else {
          const existingIds = new Set(currentSettings.recipeTemplates.map((t) => t.id));
          const newTemplates = importData.recipeTemplates.filter((t) => !existingIds.has(t.id));
          newSettings.recipeTemplates = [...currentSettings.recipeTemplates, ...newTemplates];
          importedTemplates = newTemplates.length;
          if (newTemplates.length < importData.recipeTemplates.length) {
            warnings.push(`${importData.recipeTemplates.length - newTemplates.length}\u500B\u306E\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u304C\u91CD\u8907\u306E\u305F\u3081\u30B9\u30AD\u30C3\u30D7\u3055\u308C\u307E\u3057\u305F`);
          }
        }
      }
      return {
        success: true,
        message: "\u8A2D\u5B9A\u3092\u6B63\u5E38\u306B\u30A4\u30F3\u30DD\u30FC\u30C8\u3057\u307E\u3057\u305F",
        warnings: warnings.length > 0 ? warnings : void 0,
        importedSettings: true,
        importedReagents,
        importedTemplates
      };
    } catch (error) {
      console.error("Settings import error:", error);
      return {
        success: false,
        message: "\u30A4\u30F3\u30DD\u30FC\u30C8\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message
      };
    }
  }
  /**
   * 設定をクリップボードにコピー
   */
  static async copySettingsToClipboard(settings, customReagents = [], recipeTemplates = []) {
    try {
      const exportJson = this.exportSettings(settings, customReagents, recipeTemplates);
      await navigator.clipboard.writeText(exportJson);
      new import_obsidian.Notice("\u8A2D\u5B9A\u3092\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC\u3057\u307E\u3057\u305F");
    } catch (error) {
      console.error("Clipboard copy error:", error);
      new import_obsidian.Notice("\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u3078\u306E\u30B3\u30D4\u30FC\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
    }
  }
  /**
   * ファイルからのインポート処理
   */
  static readFileAsText(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        var _a;
        if ((_a = event.target) == null ? void 0 : _a.result) {
          resolve(event.target.result);
        } else {
          reject(new Error("\u30D5\u30A1\u30A4\u30EB\u306E\u8AAD\u307F\u8FBC\u307F\u306B\u5931\u6557\u3057\u307E\u3057\u305F"));
        }
      };
      reader.onerror = () => reject(new Error("\u30D5\u30A1\u30A4\u30EB\u8AAD\u307F\u8FBC\u307F\u30A8\u30E9\u30FC"));
      reader.readAsText(file);
    });
  }
  /**
   * 設定の差分を表示用に生成
   */
  static generateSettingsDiff(current, imported) {
    const changes = [];
    const additions = [];
    const removals = [];
    const basicSettings = [
      "defaultVolumeUnit",
      "defaultConcentrationUnit",
      "decimalPlaces",
      "enableSuggestions",
      "showCalculationSteps",
      "enableTemplates"
    ];
    for (const key of basicSettings) {
      if (current[key] !== imported[key]) {
        changes.push(`${key}: ${current[key]} \u2192 ${imported[key]}`);
      }
    }
    return { changes, additions, removals };
  }
};
SettingsManager.EXPORT_VERSION = "1.0";
SettingsManager.PLUGIN_VERSION = "3.0.0";

// src/ui/settings-import-export-modal.ts
var SettingsImportExportModal = class extends import_obsidian2.Modal {
  constructor(app, settings, customReagents, recipeTemplates, onSettingsUpdate) {
    super(app);
    this.settings = settings;
    this.customReagents = customReagents;
    this.recipeTemplates = recipeTemplates;
    this.onSettingsUpdate = onSettingsUpdate;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("settings-import-export-modal");
    this.setTitle("\u8A2D\u5B9A\u306E\u30A4\u30F3\u30DD\u30FC\u30C8/\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8");
    this.createExportSection();
    this.createImportSection();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  createExportSection() {
    const { contentEl } = this;
    const exportSection = contentEl.createEl("div", { cls: "settings-export-section" });
    exportSection.createEl("h3", { text: "\u8A2D\u5B9A\u306E\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8" });
    exportSection.createEl("p", {
      text: "\u30D7\u30E9\u30B0\u30A4\u30F3\u306E\u8A2D\u5B9A\u3001\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u3001\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u30D5\u30A1\u30A4\u30EB\u307E\u305F\u306F\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u307E\u3059\u3002",
      cls: "setting-item-description"
    });
    const statsContainer = exportSection.createEl("div", { cls: "export-stats" });
    statsContainer.createEl("div", {
      text: `\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC: ${this.customReagents.length}\u500B`,
      cls: "export-stat-item"
    });
    statsContainer.createEl("div", {
      text: `\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8: ${this.recipeTemplates.length}\u500B`,
      cls: "export-stat-item"
    });
    const exportActions = exportSection.createEl("div", { cls: "export-actions" });
    const downloadButton = exportActions.createEl("button", {
      text: "\u30D5\u30A1\u30A4\u30EB\u3068\u3057\u3066\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
      cls: "mod-cta"
    });
    downloadButton.addEventListener("click", () => {
      SettingsManager.downloadSettingsFile(
        this.settings,
        this.customReagents,
        this.recipeTemplates
      );
    });
    const clipboardButton = exportActions.createEl("button", {
      text: "\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC"
    });
    clipboardButton.addEventListener("click", async () => {
      await SettingsManager.copySettingsToClipboard(
        this.settings,
        this.customReagents,
        this.recipeTemplates
      );
    });
  }
  createImportSection() {
    const { contentEl } = this;
    const importSection = contentEl.createEl("div", { cls: "settings-import-section" });
    importSection.createEl("h3", { text: "\u8A2D\u5B9A\u306E\u30A4\u30F3\u30DD\u30FC\u30C8" });
    importSection.createEl("p", {
      text: "\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u305F\u8A2D\u5B9A\u30D5\u30A1\u30A4\u30EB\u307E\u305F\u306FJSON\u30C6\u30AD\u30B9\u30C8\u304B\u3089\u8A2D\u5B9A\u3092\u30A4\u30F3\u30DD\u30FC\u30C8\u3057\u307E\u3059\u3002",
      cls: "setting-item-description"
    });
    const optionsContainer = importSection.createEl("div", { cls: "import-options" });
    let mergeSettings = true;
    let replaceReagents = false;
    let replaceTemplates = false;
    new import_obsidian2.Setting(optionsContainer).setName("\u8A2D\u5B9A\u3092\u30DE\u30FC\u30B8").setDesc("\u65E2\u5B58\u306E\u8A2D\u5B9A\u3068\u65B0\u3057\u3044\u8A2D\u5B9A\u3092\u30DE\u30FC\u30B8\u3057\u307E\u3059\uFF08\u7121\u52B9\u306B\u3059\u308B\u3068\u65E2\u5B58\u8A2D\u5B9A\u3092\u5B8C\u5168\u306B\u7F6E\u63DB\uFF09").addToggle(
      (toggle) => toggle.setValue(mergeSettings).onChange((value) => {
        mergeSettings = value;
      })
    );
    new import_obsidian2.Setting(optionsContainer).setName("\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u3092\u7F6E\u63DB").setDesc("\u65E2\u5B58\u306E\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u3092\u5B8C\u5168\u306B\u7F6E\u63DB\u3057\u307E\u3059\uFF08\u7121\u52B9\u306B\u3059\u308B\u3068\u91CD\u8907\u3057\u306A\u3044\u9805\u76EE\u306E\u307F\u8FFD\u52A0\uFF09").addToggle(
      (toggle) => toggle.setValue(replaceReagents).onChange((value) => {
        replaceReagents = value;
      })
    );
    new import_obsidian2.Setting(optionsContainer).setName("\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u7F6E\u63DB").setDesc("\u65E2\u5B58\u306E\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u5B8C\u5168\u306B\u7F6E\u63DB\u3057\u307E\u3059\uFF08\u7121\u52B9\u306B\u3059\u308B\u3068\u91CD\u8907\u3057\u306A\u3044\u9805\u76EE\u306E\u307F\u8FFD\u52A0\uFF09").addToggle(
      (toggle) => toggle.setValue(replaceTemplates).onChange((value) => {
        replaceTemplates = value;
      })
    );
    const fileImportContainer = importSection.createEl("div", { cls: "file-import-container" });
    fileImportContainer.createEl("h4", { text: "\u30D5\u30A1\u30A4\u30EB\u304B\u3089\u30A4\u30F3\u30DD\u30FC\u30C8" });
    const fileInput = fileImportContainer.createEl("input", {
      type: "file",
      attr: {
        accept: ".json",
        multiple: false
      }
    });
    const fileImportButton = fileImportContainer.createEl("button", {
      text: "\u30D5\u30A1\u30A4\u30EB\u3092\u30A4\u30F3\u30DD\u30FC\u30C8",
      cls: "mod-cta"
    });
    fileImportButton.addEventListener("click", async () => {
      var _a;
      const file = (_a = fileInput.files) == null ? void 0 : _a[0];
      if (!file) {
        new import_obsidian2.Notice("\u30D5\u30A1\u30A4\u30EB\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044");
        return;
      }
      try {
        const content = await SettingsManager.readFileAsText(file);
        await this.processImport(content, {
          mergeSettings,
          replaceReagents,
          replaceTemplates
        });
      } catch (error) {
        console.error("File import error:", error);
        new import_obsidian2.Notice("\u30D5\u30A1\u30A4\u30EB\u306E\u8AAD\u307F\u8FBC\u307F\u306B\u5931\u6557\u3057\u307E\u3057\u305F: " + error.message);
      }
    });
    const textImportContainer = importSection.createEl("div", { cls: "text-import-container" });
    textImportContainer.createEl("h4", { text: "\u30C6\u30AD\u30B9\u30C8\u304B\u3089\u30A4\u30F3\u30DD\u30FC\u30C8" });
    const textArea = textImportContainer.createEl("textarea", {
      placeholder: "\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u305FJSON\u8A2D\u5B9A\u3092\u3053\u3053\u306B\u8CBC\u308A\u4ED8\u3051\u3066\u304F\u3060\u3055\u3044...",
      cls: "import-textarea"
    });
    const textImportButton = textImportContainer.createEl("button", {
      text: "\u30C6\u30AD\u30B9\u30C8\u3092\u30A4\u30F3\u30DD\u30FC\u30C8",
      cls: "mod-cta"
    });
    textImportButton.addEventListener("click", async () => {
      const content = textArea.value.trim();
      if (!content) {
        new import_obsidian2.Notice("\u30A4\u30F3\u30DD\u30FC\u30C8\u3059\u308B\u30C6\u30AD\u30B9\u30C8\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
        return;
      }
      await this.processImport(content, {
        mergeSettings,
        replaceReagents,
        replaceTemplates
      });
    });
  }
  async processImport(content, options) {
    try {
      const result = SettingsManager.importSettings(content, this.settings, options);
      if (result.success) {
        let message = result.message;
        if (result.importedReagents > 0) {
          message += `
- \u30AB\u30B9\u30BF\u30E0\u8A66\u85AC: ${result.importedReagents}\u500B`;
        }
        if (result.importedTemplates > 0) {
          message += `
- \u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8: ${result.importedTemplates}\u500B`;
        }
        if (result.warnings && result.warnings.length > 0) {
          message += "\n\n\u8B66\u544A:\n" + result.warnings.join("\n");
        }
        new import_obsidian2.Notice(message);
        this.close();
      } else {
        new import_obsidian2.Notice("\u30A4\u30F3\u30DD\u30FC\u30C8\u30A8\u30E9\u30FC: " + result.message);
      }
    } catch (error) {
      console.error("Import processing error:", error);
      new import_obsidian2.Notice("\u30A4\u30F3\u30DD\u30FC\u30C8\u51E6\u7406\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
    }
  }
};

// src/ui/calculation-history-modal.ts
var import_obsidian4 = require("obsidian");

// src/utils/history-manager.ts
var import_obsidian3 = require("obsidian");
var HistoryManager = class {
  /**
   * 計算履歴エントリを作成
   */
  static createHistoryEntry(type, name, inputData, result, notes, tags) {
    return {
      id: this.generateId(),
      timestamp: new Date(),
      type,
      name: name || `${type}\u8A08\u7B97`,
      inputData: { ...inputData },
      result: { ...result },
      notes,
      tags: tags || [],
      starred: false
    };
  }
  /**
   * 履歴に計算結果を追加
   */
  static addToHistory(settings, entry) {
    if (!settings.enableHistory) {
      return settings;
    }
    const newHistory = [entry, ...settings.calculationHistory];
    if (newHistory.length > settings.maxHistoryEntries) {
      newHistory.splice(settings.maxHistoryEntries);
    }
    return {
      ...settings,
      calculationHistory: newHistory
    };
  }
  /**
   * 履歴エントリを更新
   */
  static updateHistoryEntry(settings, id, updates) {
    const updatedHistory = settings.calculationHistory.map(
      (entry) => entry.id === id ? { ...entry, ...updates } : entry
    );
    return {
      ...settings,
      calculationHistory: updatedHistory
    };
  }
  /**
   * 履歴エントリを削除
   */
  static removeHistoryEntry(settings, id) {
    return {
      ...settings,
      calculationHistory: settings.calculationHistory.filter((entry) => entry.id !== id)
    };
  }
  /**
   * 履歴をクリア
   */
  static clearHistory(settings) {
    return {
      ...settings,
      calculationHistory: []
    };
  }
  /**
   * 履歴をフィルタリング
   */
  static filterHistory(history, filter) {
    let filtered = [...history];
    if (filter.type && filter.type !== "all") {
      filtered = filtered.filter((entry) => entry.type === filter.type);
    }
    if (filter.dateRange) {
      const dateRange = filter.dateRange;
      filtered = filtered.filter((entry) => {
        const entryDate = new Date(entry.timestamp);
        return entryDate >= dateRange.start && entryDate <= dateRange.end;
      });
    }
    if (filter.searchQuery) {
      const query = filter.searchQuery.toLowerCase();
      filtered = filtered.filter(
        (entry) => {
          var _a;
          return entry.name.toLowerCase().includes(query) || entry.notes && entry.notes.toLowerCase().includes(query) || ((_a = entry.tags) == null ? void 0 : _a.some((tag) => tag.toLowerCase().includes(query))) || this.searchInInputData(entry.inputData, query);
        }
      );
    }
    if (filter.tags && filter.tags.length > 0) {
      const tags = filter.tags;
      filtered = filtered.filter(
        (entry) => tags.some((tag) => {
          var _a;
          return ((_a = entry.tags) == null ? void 0 : _a.includes(tag)) || false;
        })
      );
    }
    if (filter.starred !== void 0) {
      filtered = filtered.filter((entry) => entry.starred === filter.starred);
    }
    return filtered;
  }
  /**
   * 履歴統計を生成
   */
  static generateHistoryStats(history) {
    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1e3);
    const totalCalculations = history.length;
    const bufferCalculations = history.filter((e) => e.type === "buffer").length;
    const stockCalculations = history.filter((e) => e.type === "stock").length;
    const dilutionCalculations = history.filter((e) => e.type === "dilution").length;
    const serialDilutionCalculations = history.filter((e) => e.type === "serial-dilution").length;
    const recentHistory = history.filter((entry) => new Date(entry.timestamp) >= thirtyDaysAgo);
    const averageCalculationsPerDay = recentHistory.length / 30;
    const reagentCounts = /* @__PURE__ */ new Map();
    history.forEach((entry) => {
      if (entry.type === "buffer") {
        const bufferData = entry.inputData;
        if (bufferData.components && Array.isArray(bufferData.components)) {
          bufferData.components.forEach((component) => {
            if (typeof component === "object" && component.name) {
              reagentCounts.set(component.name, (reagentCounts.get(component.name) || 0) + 1);
            }
          });
        }
      }
      if (entry.type === "stock") {
        const stockData = entry.inputData;
        if (stockData.reagentName) {
          reagentCounts.set(stockData.reagentName, (reagentCounts.get(stockData.reagentName) || 0) + 1);
        }
      }
    });
    const mostUsedReagents = Array.from(reagentCounts.entries()).map(([name, count]) => ({ name, count })).sort((a, b) => b.count - a.count).slice(0, 10);
    const activityMap = /* @__PURE__ */ new Map();
    recentHistory.forEach((entry) => {
      const dateKey = new Date(entry.timestamp).toISOString().split("T")[0];
      activityMap.set(dateKey, (activityMap.get(dateKey) || 0) + 1);
    });
    const recentActivity = Array.from(activityMap.entries()).map(([date, count]) => ({ date, count })).sort((a, b) => a.date.localeCompare(b.date)).slice(-14);
    return {
      totalCalculations,
      bufferCalculations,
      stockCalculations,
      dilutionCalculations,
      serialDilutionCalculations,
      averageCalculationsPerDay: Math.round(averageCalculationsPerDay * 10) / 10,
      mostUsedReagents,
      recentActivity
    };
  }
  /**
   * 履歴をエクスポート
   */
  static exportHistory(history, format = "json") {
    switch (format) {
      case "json":
        return JSON.stringify(history, null, 2);
      case "csv":
        return this.exportToCSV(history);
      case "markdown":
        return this.exportToMarkdown(history);
      default:
        return JSON.stringify(history, null, 2);
    }
  }
  /**
   * 履歴をファイルとしてダウンロード
   */
  static downloadHistory(history, format = "json") {
    try {
      const content = this.exportHistory(history, format);
      const mimeType = {
        json: "application/json",
        csv: "text/csv",
        markdown: "text/markdown"
      }[format];
      const blob = new Blob([content], { type: mimeType });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `buffer-calc-history-${new Date().toISOString().split("T")[0]}.${format}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      new import_obsidian3.Notice(`\u5C65\u6B74\u3092${format.toUpperCase()}\u5F62\u5F0F\u3067\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3057\u307E\u3057\u305F`);
    } catch (error) {
      console.error("History export error:", error);
      new import_obsidian3.Notice("\u5C65\u6B74\u306E\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
    }
  }
  /**
   * 履歴から計算を再実行
   */
  static recreateCalculationFromHistory(entry) {
    const data = entry.inputData;
    let yaml = "";
    if (entry.type === "buffer") {
      yaml = `\`\`\`buffer
name: ${data.name || entry.name}
totalVolume: ${data.totalVolume || 1e3}
volumeUnit: ${data.volumeUnit || "mL"}
components:`;
      if (data.components && Array.isArray(data.components)) {
        data.components.forEach((comp) => {
          yaml += `
  - name: ${comp.name}
    stockConc: ${comp.stockConc}
    stockUnit: ${comp.stockUnit}
    finalConc: ${comp.finalConc}
    finalUnit: ${comp.finalUnit}`;
        });
      }
      if (entry.notes) {
        yaml += `
notes: ${entry.notes}`;
      }
      yaml += "\n```";
    } else if (entry.type === "stock") {
      yaml = `\`\`\`stock
name: ${data.name || entry.name}
reagentName: ${data.reagentName || ""}
molecularWeight: ${data.molecularWeight || 0}
targetConcentration: ${data.targetConcentration || 0}
concentrationUnit: ${data.concentrationUnit || "M"}
volume: ${data.volume || 100}
volumeUnit: ${data.volumeUnit || "mL"}`;
      if (data.purity) {
        yaml += `
purity: ${data.purity}`;
      }
      if (data.solvent) {
        yaml += `
solvent: ${data.solvent}`;
      }
      if (entry.notes) {
        yaml += `
notes: ${entry.notes}`;
      }
      yaml += "\n```";
    } else if (entry.type === "dilution") {
      yaml = `\`\`\`dilution
name: ${data.name || entry.name}
stockConcentration: ${data.stockConcentration || 0}
stockConcentrationUnit: ${data.stockConcentrationUnit || "M"}
finalConcentration: ${data.finalConcentration || 0}
finalConcentrationUnit: ${data.finalConcentrationUnit || "mM"}
finalVolume: ${data.finalVolume || 100}
volumeUnit: ${data.volumeUnit || "mL"}`;
      if (entry.notes) {
        yaml += `
notes: ${entry.notes}`;
      }
      yaml += "\n```";
    }
    return yaml;
  }
  // プライベートメソッド
  static generateId() {
    return `hist_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  static searchInInputData(data, query) {
    const searchObject = (obj) => {
      if (typeof obj === "string") {
        return obj.toLowerCase().includes(query);
      }
      if (Array.isArray(obj)) {
        return obj.some((item) => searchObject(item));
      }
      if (typeof obj === "object" && obj !== null) {
        return Object.values(obj).some((value) => searchObject(value));
      }
      return false;
    };
    return searchObject(data);
  }
  static exportToCSV(history) {
    const headers = [
      "Timestamp",
      "Type",
      "Name",
      "Notes",
      "Tags",
      "Starred",
      "Input Data",
      "Result Summary"
    ];
    const rows = history.map((entry) => {
      var _a;
      return [
        entry.timestamp.toISOString(),
        entry.type,
        entry.name,
        entry.notes || "",
        ((_a = entry.tags) == null ? void 0 : _a.join("; ")) || "",
        entry.starred ? "Yes" : "No",
        JSON.stringify(entry.inputData),
        this.summarizeResult(entry.result)
      ];
    });
    return [headers, ...rows].map((row) => row.map((cell) => `"${cell.toString().replace(/"/g, '""')}"`).join(",")).join("\n");
  }
  static exportToMarkdown(history) {
    let markdown = "# Buffer Calc \u8A08\u7B97\u5C65\u6B74\n\n";
    history.forEach((entry) => {
      markdown += `## ${entry.name}

`;
      markdown += `- **\u30BF\u30A4\u30D7**: ${entry.type}
`;
      markdown += `- **\u65E5\u6642**: ${entry.timestamp.toLocaleString("ja-JP")}
`;
      if (entry.tags && entry.tags.length > 0) {
        markdown += `- **\u30BF\u30B0**: ${entry.tags.join(", ")}
`;
      }
      if (entry.starred) {
        markdown += `- **\u30B9\u30BF\u30FC\u4ED8\u304D**: \u2B50
`;
      }
      if (entry.notes) {
        markdown += `- **\u30E1\u30E2**: ${entry.notes}
`;
      }
      markdown += "\n";
      const yamlContent = this.recreateCalculationFromHistory(entry);
      markdown += yamlContent + "\n\n";
      markdown += "---\n\n";
    });
    return markdown;
  }
  static summarizeResult(result) {
    if (result.errors.length > 0) {
      return `Error: ${result.errors[0]}`;
    }
    const componentCount = result.components.length;
    const solventVol = result.solventVolume || 0;
    return `${componentCount} components, ${solventVol} solvent`;
  }
};

// src/ui/calculation-history-modal.ts
var CalculationHistoryModal = class extends import_obsidian4.Modal {
  constructor(app, settings, onSettingsUpdate, onInsertCalculation) {
    super(app);
    this.currentFilter = { type: "all" };
    this.filteredHistory = [];
    this.settings = settings;
    this.onSettingsUpdate = onSettingsUpdate;
    this.onInsertCalculation = onInsertCalculation;
    this.filteredHistory = [...settings.calculationHistory];
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("calculation-history-modal");
    this.setTitle("\u8A08\u7B97\u5C65\u6B74");
    if (!this.settings.enableHistory) {
      this.showHistoryDisabled();
      return;
    }
    if (this.settings.calculationHistory.length === 0) {
      this.showEmptyHistory();
      return;
    }
    this.createStatsSection();
    this.createFilterSection();
    this.createHistoryList();
    this.createActionButtons();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  showHistoryDisabled() {
    const { contentEl } = this;
    const disabledSection = contentEl.createEl("div", { cls: "history-disabled-section" });
    disabledSection.createEl("h3", { text: "\u8A08\u7B97\u5C65\u6B74\u304C\u7121\u52B9\u306B\u306A\u3063\u3066\u3044\u307E\u3059" });
    disabledSection.createEl("p", {
      text: "\u8A08\u7B97\u5C65\u6B74\u6A5F\u80FD\u3092\u4F7F\u7528\u3059\u308B\u306B\u306F\u3001\u30D7\u30E9\u30B0\u30A4\u30F3\u8A2D\u5B9A\u3067\u6709\u52B9\u306B\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
      cls: "setting-item-description"
    });
    const enableButton = disabledSection.createEl("button", {
      text: "\u5C65\u6B74\u3092\u6709\u52B9\u306B\u3059\u308B",
      cls: "mod-cta"
    });
    enableButton.addEventListener("click", () => {
      const newSettings = { ...this.settings, enableHistory: true };
      this.onSettingsUpdate(newSettings);
      this.close();
      new import_obsidian4.Notice("\u8A08\u7B97\u5C65\u6B74\u304C\u6709\u52B9\u306B\u306A\u308A\u307E\u3057\u305F");
    });
  }
  showEmptyHistory() {
    const { contentEl } = this;
    const emptySection = contentEl.createEl("div", { cls: "history-empty-section" });
    emptySection.createEl("h3", { text: "\u8A08\u7B97\u5C65\u6B74\u304C\u307E\u3060\u3042\u308A\u307E\u305B\u3093" });
    emptySection.createEl("p", {
      text: "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97\u3001\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u3001\u5E0C\u91C8\u8A08\u7B97\u3092\u5B9F\u884C\u3059\u308B\u3068\u3001\u3053\u3053\u306B\u5C65\u6B74\u304C\u8868\u793A\u3055\u308C\u307E\u3059\u3002",
      cls: "setting-item-description"
    });
  }
  createStatsSection() {
    const { contentEl } = this;
    const statsSection = contentEl.createEl("div", { cls: "history-stats-section" });
    statsSection.createEl("h3", { text: "\u7D71\u8A08\u60C5\u5831" });
    const stats = HistoryManager.generateHistoryStats(this.settings.calculationHistory);
    const statsGrid = statsSection.createEl("div", { cls: "stats-grid" });
    this.createStatCard(statsGrid, "\u7DCF\u8A08\u7B97\u6570", stats.totalCalculations.toString(), "history-stat-total");
    this.createStatCard(statsGrid, "\u30D0\u30C3\u30D5\u30A1\u30FC", stats.bufferCalculations.toString(), "history-stat-buffer");
    this.createStatCard(statsGrid, "\u30B9\u30C8\u30C3\u30AF", stats.stockCalculations.toString(), "history-stat-stock");
    this.createStatCard(statsGrid, "\u5E0C\u91C8", stats.dilutionCalculations.toString(), "history-stat-dilution");
    if (stats.mostUsedReagents.length > 0) {
      const reagentsSection = statsSection.createEl("div", { cls: "most-used-reagents" });
      reagentsSection.createEl("h4", { text: "\u3088\u304F\u4F7F\u7528\u3055\u308C\u308B\u8A66\u85AC" });
      const reagentsList = reagentsSection.createEl("div", { cls: "reagents-list" });
      stats.mostUsedReagents.slice(0, 5).forEach((reagent) => {
        const reagentItem = reagentsList.createEl("div", { cls: "reagent-item" });
        reagentItem.createEl("span", { text: reagent.name, cls: "reagent-name" });
        reagentItem.createEl("span", { text: `${reagent.count}\u56DE`, cls: "reagent-count" });
      });
    }
  }
  createStatCard(container, label, value, className) {
    const card = container.createEl("div", { cls: `stat-card ${className}` });
    card.createEl("div", { text: value, cls: "stat-value" });
    card.createEl("div", { text: label, cls: "stat-label" });
  }
  createFilterSection() {
    const { contentEl } = this;
    const filterSection = contentEl.createEl("div", { cls: "history-filter-section" });
    filterSection.createEl("h3", { text: "\u30D5\u30A3\u30EB\u30BF\u30FC" });
    const filtersContainer = filterSection.createEl("div", { cls: "filters-container" });
    new import_obsidian4.Setting(filtersContainer).setName("\u8A08\u7B97\u30BF\u30A4\u30D7").addDropdown((dropdown) => {
      dropdown.addOption("all", "\u3059\u3079\u3066");
      dropdown.addOption("buffer", "\u30D0\u30C3\u30D5\u30A1\u30FC");
      dropdown.addOption("stock", "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2");
      dropdown.addOption("dilution", "\u5E0C\u91C8\u8A08\u7B97");
      dropdown.setValue(this.currentFilter.type || "all");
      dropdown.onChange((value) => {
        this.currentFilter.type = value;
        this.applyFilters();
      });
    });
    new import_obsidian4.Setting(filtersContainer).setName("\u691C\u7D22").addText((text) => {
      text.setPlaceholder("\u540D\u524D\u3001\u30E1\u30E2\u3001\u30BF\u30B0\u3067\u691C\u7D22...");
      text.setValue(this.currentFilter.searchQuery || "");
      text.onChange((value) => {
        this.currentFilter.searchQuery = value || void 0;
        this.applyFilters();
      });
    });
    new import_obsidian4.Setting(filtersContainer).setName("\u30B9\u30BF\u30FC\u4ED8\u304D\u306E\u307F").addToggle((toggle) => {
      toggle.setValue(this.currentFilter.starred || false);
      toggle.onChange((value) => {
        this.currentFilter.starred = value || void 0;
        this.applyFilters();
      });
    });
    const clearButton = filtersContainer.createEl("button", {
      text: "\u30D5\u30A3\u30EB\u30BF\u30FC\u3092\u30AF\u30EA\u30A2",
      cls: "history-clear-filters-button"
    });
    clearButton.addEventListener("click", () => {
      this.currentFilter = { type: "all" };
      this.applyFilters();
      this.createFilterSection();
    });
  }
  createHistoryList() {
    const { contentEl } = this;
    let listContainer = contentEl.querySelector(".history-list-container");
    if (listContainer) {
      listContainer.remove();
    }
    listContainer = contentEl.createEl("div", { cls: "history-list-container" });
    listContainer.createEl("h3", { text: `\u5C65\u6B74 (${this.filteredHistory.length}\u4EF6)` });
    if (this.filteredHistory.length === 0) {
      listContainer.createEl("div", {
        text: "\u30D5\u30A3\u30EB\u30BF\u30FC\u6761\u4EF6\u306B\u4E00\u81F4\u3059\u308B\u5C65\u6B74\u304C\u3042\u308A\u307E\u305B\u3093",
        cls: "history-no-results"
      });
      return;
    }
    const historyList = listContainer.createEl("div", { cls: "history-list" });
    this.filteredHistory.forEach((entry) => {
      this.createHistoryItem(historyList, entry);
    });
  }
  createHistoryItem(container, entry) {
    const item = container.createEl("div", { cls: "history-item" });
    item.setAttribute("data-entry-id", entry.id);
    const header = item.createEl("div", { cls: "history-item-header" });
    const titleSection = header.createEl("div", { cls: "history-item-title-section" });
    titleSection.createEl("h4", { text: entry.name, cls: "history-item-title" });
    const badges = titleSection.createEl("div", { cls: "history-item-badges" });
    badges.createEl("span", {
      text: entry.type,
      cls: `history-badge history-badge-${entry.type}`
    });
    if (entry.starred) {
      badges.createEl("span", { text: "\u2B50", cls: "history-star" });
    }
    const actions = header.createEl("div", { cls: "history-item-actions" });
    const starButton = actions.createEl("button", {
      text: entry.starred ? "\u2B50" : "\u2606",
      cls: "history-action-button history-star-button"
    });
    starButton.addEventListener("click", () => {
      this.toggleStar(entry.id);
    });
    const insertButton = actions.createEl("button", {
      text: "\u633F\u5165",
      cls: "history-action-button history-insert-button"
    });
    insertButton.addEventListener("click", () => {
      const yaml = HistoryManager.recreateCalculationFromHistory(entry);
      this.onInsertCalculation(yaml);
      this.close();
      new import_obsidian4.Notice("\u8A08\u7B97\u3092\u633F\u5165\u3057\u307E\u3057\u305F");
    });
    const deleteButton = actions.createEl("button", {
      text: "\u524A\u9664",
      cls: "history-action-button history-delete-button"
    });
    deleteButton.addEventListener("click", () => {
      this.deleteEntry(entry.id);
    });
    const details = item.createEl("div", { cls: "history-item-details" });
    details.createEl("div", {
      text: `\u65E5\u6642: ${entry.timestamp.toLocaleString("ja-JP")}`,
      cls: "history-item-timestamp"
    });
    if (entry.notes) {
      details.createEl("div", {
        text: `\u30E1\u30E2: ${entry.notes}`,
        cls: "history-item-notes"
      });
    }
    if (entry.tags && entry.tags.length > 0) {
      const tagsContainer = details.createEl("div", { cls: "history-item-tags" });
      tagsContainer.createEl("span", { text: "\u30BF\u30B0: ", cls: "tags-label" });
      entry.tags.forEach((tag) => {
        tagsContainer.createEl("span", { text: tag, cls: "history-tag" });
      });
    }
    const resultSummary = item.createEl("div", { cls: "history-item-result" });
    if (entry.result.errors.length > 0) {
      resultSummary.createEl("div", {
        text: `\u30A8\u30E9\u30FC: ${entry.result.errors[0]}`,
        cls: "history-result-error"
      });
    } else {
      resultSummary.createEl("div", {
        text: `\u6210\u5206\u6570: ${entry.result.components.length}, \u6EB6\u5A92: ${entry.result.solventVolume || 0}`,
        cls: "history-result-summary"
      });
    }
  }
  createActionButtons() {
    const { contentEl } = this;
    const actionsSection = contentEl.createEl("div", { cls: "history-actions-section" });
    const exportButton = actionsSection.createEl("button", {
      text: "\u5C65\u6B74\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8",
      cls: "history-export-button"
    });
    exportButton.addEventListener("click", () => {
      this.showExportOptions();
    });
    const clearButton = actionsSection.createEl("button", {
      text: "\u5C65\u6B74\u3092\u30AF\u30EA\u30A2",
      cls: "history-clear-button"
    });
    clearButton.addEventListener("click", () => {
      this.clearHistory();
    });
  }
  applyFilters() {
    this.filteredHistory = HistoryManager.filterHistory(
      this.settings.calculationHistory,
      this.currentFilter
    );
    this.createHistoryList();
  }
  toggleStar(entryId) {
    const entry = this.settings.calculationHistory.find((e) => e.id === entryId);
    if (!entry)
      return;
    const newSettings = HistoryManager.updateHistoryEntry(
      this.settings,
      entryId,
      { starred: !entry.starred }
    );
    this.settings = newSettings;
    this.onSettingsUpdate(newSettings);
    this.applyFilters();
  }
  deleteEntry(entryId) {
    if (!confirm("\u3053\u306E\u5C65\u6B74\u30A8\u30F3\u30C8\u30EA\u3092\u524A\u9664\u3057\u307E\u3059\u304B\uFF1F")) {
      return;
    }
    const newSettings = HistoryManager.removeHistoryEntry(this.settings, entryId);
    this.settings = newSettings;
    this.onSettingsUpdate(newSettings);
    this.applyFilters();
    new import_obsidian4.Notice("\u5C65\u6B74\u30A8\u30F3\u30C8\u30EA\u3092\u524A\u9664\u3057\u307E\u3057\u305F");
  }
  showExportOptions() {
    const exportModal = new HistoryExportModal(
      this.app,
      this.filteredHistory.length > 0 ? this.filteredHistory : this.settings.calculationHistory
    );
    exportModal.open();
  }
  clearHistory() {
    if (!confirm("\u3059\u3079\u3066\u306E\u8A08\u7B97\u5C65\u6B74\u3092\u524A\u9664\u3057\u307E\u3059\u304B\uFF1F\u3053\u306E\u64CD\u4F5C\u306F\u5143\u306B\u623B\u305B\u307E\u305B\u3093\u3002")) {
      return;
    }
    const newSettings = HistoryManager.clearHistory(this.settings);
    this.settings = newSettings;
    this.onSettingsUpdate(newSettings);
    this.close();
    new import_obsidian4.Notice("\u8A08\u7B97\u5C65\u6B74\u3092\u30AF\u30EA\u30A2\u3057\u307E\u3057\u305F");
  }
};
var HistoryExportModal = class extends import_obsidian4.Modal {
  constructor(app, history) {
    super(app);
    this.history = history;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    this.setTitle("\u5C65\u6B74\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8");
    contentEl.createEl("p", {
      text: `${this.history.length}\u4EF6\u306E\u5C65\u6B74\u30A8\u30F3\u30C8\u30EA\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u307E\u3059\u3002`,
      cls: "setting-item-description"
    });
    const formatSection = contentEl.createEl("div", { cls: "export-format-section" });
    formatSection.createEl("h4", { text: "\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u5F62\u5F0F" });
    const jsonButton = formatSection.createEl("button", {
      text: "JSON\u5F62\u5F0F\u3067\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
      cls: "export-format-button mod-cta"
    });
    jsonButton.addEventListener("click", () => {
      HistoryManager.downloadHistory(this.history, "json");
      this.close();
    });
    const csvButton = formatSection.createEl("button", {
      text: "CSV\u5F62\u5F0F\u3067\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
      cls: "export-format-button"
    });
    csvButton.addEventListener("click", () => {
      HistoryManager.downloadHistory(this.history, "csv");
      this.close();
    });
    const markdownButton = formatSection.createEl("button", {
      text: "Markdown\u5F62\u5F0F\u3067\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
      cls: "export-format-button"
    });
    markdownButton.addEventListener("click", () => {
      HistoryManager.downloadHistory(this.history, "markdown");
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/reagent-category-modal.ts
var import_obsidian5 = require("obsidian");

// src/utils/category-manager.ts
var CategoryManager = class {
  /**
   * デフォルトの組み込みカテゴリを取得
   */
  static getBuiltInCategories() {
    return [
      {
        id: "buffers",
        name: "\u30D0\u30C3\u30D5\u30A1\u30FC\u985E",
        description: "pH\u8ABF\u6574\u7528\u306E\u30D0\u30C3\u30D5\u30A1\u30FC\u8A66\u85AC",
        color: "#4CAF50",
        icon: "\u2696\uFE0F",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "salts",
        name: "\u5869\u985E",
        description: "\u5404\u7A2E\u7121\u6A5F\u5869\u30FB\u6709\u6A5F\u5869",
        color: "#2196F3",
        icon: "\u{1F9C2}",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "acids_bases",
        name: "\u9178\u30FB\u5869\u57FA",
        description: "\u5F37\u9178\u30FB\u5F37\u5869\u57FA\u30FB\u5F31\u9178\u30FB\u5F31\u5869\u57FA",
        color: "#FF9800",
        icon: "\u2697\uFE0F",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "organic_solvents",
        name: "\u6709\u6A5F\u6EB6\u5A92",
        description: "\u30E1\u30BF\u30CE\u30FC\u30EB\u3001\u30A8\u30BF\u30CE\u30FC\u30EB\u3001\u30A2\u30BB\u30C8\u30F3\u306A\u3069",
        color: "#E91E63",
        icon: "\u{1F9EA}",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "detergents",
        name: "\u754C\u9762\u6D3B\u6027\u5264",
        description: "SDS\u3001Triton X-100\u306A\u3069",
        color: "#9C27B0",
        icon: "\u{1FAE7}",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "enzymes",
        name: "\u9175\u7D20\u985E",
        description: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u5206\u89E3\u9175\u7D20\u3001\u5236\u9650\u9175\u7D20\u306A\u3069",
        color: "#607D8B",
        icon: "\u{1F9EC}",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "proteins",
        name: "\u30BF\u30F3\u30D1\u30AF\u8CEA",
        description: "BSA\u3001\u6297\u4F53\u3001\u6A19\u6E96\u30BF\u30F3\u30D1\u30AF\u8CEA\u306A\u3069",
        color: "#795548",
        icon: "\u{1F52C}",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "indicators",
        name: "\u6307\u793A\u85AC\u30FB\u67D3\u6599",
        description: "pH\u6307\u793A\u85AC\u3001\u86CD\u5149\u8272\u7D20\u306A\u3069",
        color: "#FF5722",
        icon: "\u{1F308}",
        isBuiltIn: true,
        createdAt: new Date()
      },
      {
        id: "general",
        name: "\u305D\u306E\u4ED6",
        description: "\u5206\u985E\u3055\u308C\u3066\u3044\u306A\u3044\u8A66\u85AC",
        color: "#9E9E9E",
        icon: "\u{1F4E6}",
        isBuiltIn: true,
        createdAt: new Date()
      }
    ];
  }
  /**
   * カテゴリーを作成
   */
  static createCategory(name, description, color, icon) {
    return {
      id: this.generateCategoryId(name),
      name,
      description,
      color: color || "#2196F3",
      icon: icon || "\u{1F4C2}",
      isBuiltIn: false,
      createdAt: new Date()
    };
  }
  /**
   * 設定にカテゴリーを追加
   */
  static addCategory(settings, category) {
    const existingCategory = settings.customReagentCategories.find(
      (cat) => cat.name === category.name || cat.id === category.id
    );
    if (existingCategory) {
      throw new Error(`\u30AB\u30C6\u30B4\u30EA\u30FC\u300C${category.name}\u300D\u306F\u65E2\u306B\u5B58\u5728\u3057\u307E\u3059`);
    }
    return {
      ...settings,
      customReagentCategories: [...settings.customReagentCategories, category]
    };
  }
  /**
   * カテゴリーを更新
   */
  static updateCategory(settings, categoryId, updates) {
    const updatedCategories = settings.customReagentCategories.map(
      (category) => category.id === categoryId ? { ...category, ...updates } : category
    );
    return {
      ...settings,
      customReagentCategories: updatedCategories
    };
  }
  /**
   * カテゴリーを削除
   */
  static removeCategory(settings, categoryId) {
    const categoryToRemove = settings.customReagentCategories.find((cat) => cat.id === categoryId);
    if (categoryToRemove == null ? void 0 : categoryToRemove.isBuiltIn) {
      throw new Error("\u7D44\u307F\u8FBC\u307F\u30AB\u30C6\u30B4\u30EA\u30FC\u306F\u524A\u9664\u3067\u304D\u307E\u305B\u3093");
    }
    const updatedReagents = settings.customReagents.map(
      (reagent) => reagent.category === categoryId ? { ...reagent, category: "general" } : reagent
    );
    return {
      ...settings,
      customReagentCategories: settings.customReagentCategories.filter(
        (category) => category.id !== categoryId
      ),
      customReagents: updatedReagents
    };
  }
  /**
   * 全てのカテゴリーを取得（組み込み + カスタム）
   */
  static getAllCategories(settings) {
    const builtInCategories = this.getBuiltInCategories();
    const customCategories = settings.customReagentCategories || [];
    return [...builtInCategories, ...customCategories];
  }
  /**
   * カテゴリー別の統計を生成
   */
  static generateCategoryStats(settings) {
    const allCategories = this.getAllCategories(settings);
    const reagents = settings.customReagents || [];
    return allCategories.map((category) => {
      const categoryReagents = reagents.filter(
        (reagent) => reagent.category === category.id
      );
      return {
        categoryId: category.id,
        categoryName: category.name,
        reagentCount: categoryReagents.length,
        recentlyUsed: categoryReagents.slice(0, 5).map((reagent) => reagent.name)
      };
    });
  }
  /**
   * 試薬をカテゴリーに分類
   */
  static categorizeReagent(settings, reagentName, categoryId) {
    const allCategories = this.getAllCategories(settings);
    const categoryExists = allCategories.some((cat) => cat.id === categoryId);
    if (!categoryExists) {
      throw new Error(`\u30AB\u30C6\u30B4\u30EA\u30FC ID\u300C${categoryId}\u300D\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093`);
    }
    const updatedReagents = settings.customReagents.map(
      (reagent) => reagent.name === reagentName ? { ...reagent, category: categoryId } : reagent
    );
    return {
      ...settings,
      customReagents: updatedReagents
    };
  }
  /**
   * カテゴリー別に試薬を取得
   */
  static getReagentsByCategory(settings, categoryId) {
    const reagents = settings.customReagents || [];
    const allCategories = this.getAllCategories(settings);
    if (categoryId) {
      return {
        [categoryId]: reagents.filter((reagent) => reagent.category === categoryId)
      };
    }
    const result = {};
    allCategories.forEach((category) => {
      result[category.id] = reagents.filter(
        (reagent) => reagent.category === category.id
      );
    });
    const uncategorized = reagents.filter(
      (reagent) => !reagent.category || !allCategories.some((cat) => cat.id === reagent.category)
    );
    if (uncategorized.length > 0) {
      result["general"] = [...result["general"] || [], ...uncategorized];
    }
    return result;
  }
  /**
   * カテゴリーの自動推定
   */
  static suggestCategory(reagentName) {
    const name = reagentName.toLowerCase();
    if (name.includes("tris") || name.includes("hepes") || name.includes("bis-tris") || name.includes("mops") || name.includes("pipes") || name.includes("tricine")) {
      return "buffers";
    }
    if (name.includes("nacl") || name.includes("kcl") || name.includes("mgcl2") || name.includes("cacl2") || name.includes("salt") || name.includes("chloride") || name.includes("sulfate") || name.includes("phosphate")) {
      return "salts";
    }
    if (name.includes("hcl") || name.includes("naoh") || name.includes("koh") || name.includes("acid") || name.includes("base") || name.includes("hydroxide")) {
      return "acids_bases";
    }
    if (name.includes("methanol") || name.includes("ethanol") || name.includes("acetone") || name.includes("dmso") || name.includes("glycerol") || name.includes("alcohol")) {
      return "organic_solvents";
    }
    if (name.includes("sds") || name.includes("triton") || name.includes("tween") || name.includes("detergent") || name.includes("surfactant")) {
      return "detergents";
    }
    if (name.includes("ase") || name.includes("enzyme") || name.includes("kinase") || name.includes("phosphatase") || name.includes("protease")) {
      return "enzymes";
    }
    if (name.includes("bsa") || name.includes("albumin") || name.includes("antibody") || name.includes("protein") || name.includes("immunoglobulin")) {
      return "proteins";
    }
    if (name.includes("indicator") || name.includes("dye") || name.includes("fluorescein") || name.includes("rhodamine") || name.includes("methylene")) {
      return "indicators";
    }
    return "general";
  }
  /**
   * カテゴリー検索
   */
  static searchCategories(settings, query) {
    const allCategories = this.getAllCategories(settings);
    const searchQuery = query.toLowerCase();
    return allCategories.filter(
      (category) => category.name.toLowerCase().includes(searchQuery) || category.description && category.description.toLowerCase().includes(searchQuery)
    );
  }
  // プライベートメソッド
  static generateCategoryId(name) {
    const cleanName = name.toLowerCase().replace(/[^a-z0-9]/g, "_").replace(/_+/g, "_").replace(/^_|_$/g, "");
    return `custom_${cleanName}_${Date.now()}`;
  }
};

// src/ui/reagent-category-modal.ts
var ReagentCategoryModal = class extends import_obsidian5.Modal {
  constructor(app, settings, onSave) {
    super(app);
    this.categories = [];
    this.categoryStats = [];
    this.settings = settings;
    this.onSave = onSave;
    this.categories = CategoryManager.getAllCategories(settings);
    this.categoryStats = CategoryManager.generateCategoryStats(settings);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("reagent-category-modal");
    contentEl.createEl("h2", { text: "\u8A66\u85AC\u30AB\u30C6\u30B4\u30EA\u30FC\u7BA1\u7406" });
    this.renderStatsSection(contentEl);
    this.renderCategoriesSection(contentEl);
    this.renderCreateCategorySection(contentEl);
    this.renderActionButtons(contentEl);
  }
  renderStatsSection(container) {
    const statsSection = container.createDiv("category-stats-section");
    statsSection.createEl("h3", { text: "\u30AB\u30C6\u30B4\u30EA\u30FC\u7D71\u8A08" });
    const statsGrid = statsSection.createDiv("stats-grid");
    const totalCard = statsGrid.createDiv("stat-card");
    totalCard.createDiv("stat-value").setText(this.categories.length.toString());
    totalCard.createDiv("stat-label").setText("\u7DCF\u30AB\u30C6\u30B4\u30EA\u30FC\u6570");
    const customCount = this.categories.filter((cat) => !cat.isBuiltIn).length;
    const customCard = statsGrid.createDiv("stat-card");
    customCard.createDiv("stat-value").setText(customCount.toString());
    customCard.createDiv("stat-label").setText("\u30AB\u30B9\u30BF\u30E0\u30AB\u30C6\u30B4\u30EA\u30FC");
    const totalReagents = this.settings.customReagents.length;
    const reagentCard = statsGrid.createDiv("stat-card");
    reagentCard.createDiv("stat-value").setText(totalReagents.toString());
    reagentCard.createDiv("stat-label").setText("\u767B\u9332\u8A66\u85AC\u6570");
    const categorizedReagents = this.settings.customReagents.filter((r) => r.category).length;
    const categorizedCard = statsGrid.createDiv("stat-card");
    categorizedCard.createDiv("stat-value").setText(categorizedReagents.toString());
    categorizedCard.createDiv("stat-label").setText("\u5206\u985E\u6E08\u307F\u8A66\u85AC");
  }
  renderCategoriesSection(container) {
    const categoriesSection = container.createDiv("categories-section");
    categoriesSection.createEl("h3", { text: "\u30AB\u30C6\u30B4\u30EA\u30FC\u4E00\u89A7" });
    const categoriesList = categoriesSection.createDiv("categories-list");
    this.categories.forEach((category) => {
      const categoryItem = categoriesList.createDiv("category-item");
      const header = categoryItem.createDiv("category-header");
      const titleSection = header.createDiv("category-title-section");
      const icon = titleSection.createSpan("category-icon");
      icon.setText(category.icon || "\u{1F4C2}");
      if (category.color) {
        icon.style.color = category.color;
      }
      const nameEl = titleSection.createSpan("category-name");
      nameEl.setText(category.name);
      if (category.isBuiltIn) {
        titleSection.createSpan("built-in-badge").setText("\u7D44\u307F\u8FBC\u307F");
      }
      const stats = this.categoryStats.find((s) => s.categoryId === category.id);
      const statsEl = header.createDiv("category-stats");
      statsEl.setText(`${(stats == null ? void 0 : stats.reagentCount) || 0} \u500B\u306E\u8A66\u85AC`);
      const actions = header.createDiv("category-actions");
      if (!category.isBuiltIn) {
        const editBtn = actions.createEl("button", {
          text: "\u7DE8\u96C6",
          cls: "category-action-button"
        });
        editBtn.onclick = () => this.editCategory(category);
        const deleteBtn = actions.createEl("button", {
          text: "\u524A\u9664",
          cls: "category-action-button category-delete-button"
        });
        deleteBtn.onclick = () => this.deleteCategory(category);
      }
      if (category.description) {
        const description = categoryItem.createDiv("category-description");
        description.setText(category.description);
      }
      if (stats && stats.recentlyUsed.length > 0) {
        const recentSection = categoryItem.createDiv("category-recent");
        recentSection.createSpan("recent-label").setText("\u6700\u8FD1\u306E\u8A66\u85AC: ");
        const recentList = recentSection.createSpan("recent-reagents");
        recentList.setText(stats.recentlyUsed.slice(0, 3).join(", "));
        if (stats.recentlyUsed.length > 3) {
          recentList.appendText(` \u306A\u3069 ${stats.recentlyUsed.length} \u500B`);
        }
      }
    });
  }
  renderCreateCategorySection(container) {
    const createSection = container.createDiv("create-category-section");
    createSection.createEl("h3", { text: "\u65B0\u898F\u30AB\u30C6\u30B4\u30EA\u30FC\u4F5C\u6210" });
    let categoryName = "";
    let categoryDescription = "";
    let categoryColor = "#2196F3";
    let categoryIcon = "\u{1F4C2}";
    new import_obsidian5.Setting(createSection).setName("\u30AB\u30C6\u30B4\u30EA\u30FC\u540D").setDesc("\u65B0\u3057\u3044\u30AB\u30C6\u30B4\u30EA\u30FC\u306E\u540D\u524D\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044").addText((text) => {
      text.onChange((value) => categoryName = value);
      text.inputEl.placeholder = "\u4F8B: \u30DE\u30A4\u30AB\u30C6\u30B4\u30EA\u30FC";
    });
    new import_obsidian5.Setting(createSection).setName("\u8AAC\u660E\uFF08\u30AA\u30D7\u30B7\u30E7\u30F3\uFF09").setDesc("\u30AB\u30C6\u30B4\u30EA\u30FC\u306E\u8AAC\u660E\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044").addTextArea((text) => {
      text.onChange((value) => categoryDescription = value);
      text.inputEl.placeholder = "\u3053\u306E\u30AB\u30C6\u30B4\u30EA\u30FC\u306E\u7528\u9014\u3084\u7279\u5FB4\u3092\u8AAC\u660E...";
      text.inputEl.rows = 2;
    });
    new import_obsidian5.Setting(createSection).setName("\u30A2\u30A4\u30B3\u30F3").setDesc("\u30AB\u30C6\u30B4\u30EA\u30FC\u3092\u8868\u3059\u30A2\u30A4\u30B3\u30F3\uFF08\u7D75\u6587\u5B57\uFF09").addText((text) => {
      text.setValue(categoryIcon);
      text.onChange((value) => categoryIcon = value || "\u{1F4C2}");
      text.inputEl.placeholder = "\u{1F4C2}";
      text.inputEl.style.width = "60px";
    });
    new import_obsidian5.Setting(createSection).setName("\u8272").setDesc("\u30AB\u30C6\u30B4\u30EA\u30FC\u306E\u30C6\u30FC\u30DE\u30AB\u30E9\u30FC").addColorPicker((color) => {
      color.setValue(categoryColor);
      color.onChange((value) => categoryColor = value);
    });
    const createButton = createSection.createEl("button", {
      text: "\u30AB\u30C6\u30B4\u30EA\u30FC\u3092\u4F5C\u6210",
      cls: "mod-cta"
    });
    createButton.onclick = () => {
      if (!categoryName.trim()) {
        new import_obsidian5.Notice("\u30AB\u30C6\u30B4\u30EA\u30FC\u540D\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
        return;
      }
      try {
        const newCategory = CategoryManager.createCategory(
          categoryName.trim(),
          categoryDescription.trim() || void 0,
          categoryColor,
          categoryIcon.trim()
        );
        this.settings = CategoryManager.addCategory(this.settings, newCategory);
        new import_obsidian5.Notice(`\u30AB\u30C6\u30B4\u30EA\u30FC\u300C${categoryName}\u300D\u3092\u4F5C\u6210\u3057\u307E\u3057\u305F`);
        this.refresh();
      } catch (error) {
        new import_obsidian5.Notice(`\u30A8\u30E9\u30FC: ${error.message}`);
      }
    };
  }
  renderActionButtons(container) {
    const buttonContainer = container.createDiv("modal-button-container");
    const saveButton = buttonContainer.createEl("button", {
      text: "\u5909\u66F4\u3092\u4FDD\u5B58",
      cls: "mod-cta"
    });
    saveButton.onclick = () => {
      this.onSave(this.settings);
      this.close();
    };
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u30AD\u30E3\u30F3\u30BB\u30EB"
    });
    cancelButton.onclick = () => {
      this.close();
    };
  }
  editCategory(category) {
    if (category.isBuiltIn) {
      new import_obsidian5.Notice("\u7D44\u307F\u8FBC\u307F\u30AB\u30C6\u30B4\u30EA\u30FC\u306F\u7DE8\u96C6\u3067\u304D\u307E\u305B\u3093");
      return;
    }
    const editModal = new CategoryEditModal(
      this.app,
      category,
      (updatedCategory) => {
        this.settings = CategoryManager.updateCategory(
          this.settings,
          category.id,
          {
            name: updatedCategory.name,
            description: updatedCategory.description,
            color: updatedCategory.color,
            icon: updatedCategory.icon
          }
        );
        this.refresh();
        new import_obsidian5.Notice(`\u30AB\u30C6\u30B4\u30EA\u30FC\u300C${updatedCategory.name}\u300D\u3092\u66F4\u65B0\u3057\u307E\u3057\u305F`);
      }
    );
    editModal.open();
  }
  deleteCategory(category) {
    if (category.isBuiltIn) {
      new import_obsidian5.Notice("\u7D44\u307F\u8FBC\u307F\u30AB\u30C6\u30B4\u30EA\u30FC\u306F\u524A\u9664\u3067\u304D\u307E\u305B\u3093");
      return;
    }
    const stats = this.categoryStats.find((s) => s.categoryId === category.id);
    const reagentCount = (stats == null ? void 0 : stats.reagentCount) || 0;
    let confirmMessage = `\u30AB\u30C6\u30B4\u30EA\u30FC\u300C${category.name}\u300D\u3092\u524A\u9664\u3057\u307E\u3059\u304B\uFF1F`;
    if (reagentCount > 0) {
      confirmMessage += `

\u6CE8\u610F: \u3053\u306E\u30AB\u30C6\u30B4\u30EA\u30FC\u306B\u306F ${reagentCount} \u500B\u306E\u8A66\u85AC\u304C\u542B\u307E\u308C\u3066\u3044\u307E\u3059\u3002\u524A\u9664\u3059\u308B\u3068\u3001\u3053\u308C\u3089\u306E\u8A66\u85AC\u306F\u300C\u305D\u306E\u4ED6\u300D\u30AB\u30C6\u30B4\u30EA\u30FC\u306B\u79FB\u52D5\u3055\u308C\u307E\u3059\u3002`;
    }
    if (confirm(confirmMessage)) {
      try {
        this.settings = CategoryManager.removeCategory(this.settings, category.id);
        new import_obsidian5.Notice(`\u30AB\u30C6\u30B4\u30EA\u30FC\u300C${category.name}\u300D\u3092\u524A\u9664\u3057\u307E\u3057\u305F`);
        this.refresh();
      } catch (error) {
        new import_obsidian5.Notice(`\u30A8\u30E9\u30FC: ${error.message}`);
      }
    }
  }
  refresh() {
    this.categories = CategoryManager.getAllCategories(this.settings);
    this.categoryStats = CategoryManager.generateCategoryStats(this.settings);
    this.onOpen();
  }
};
var CategoryEditModal = class extends import_obsidian5.Modal {
  constructor(app, category, onSave) {
    super(app);
    this.category = { ...category };
    this.onSave = onSave;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("category-edit-modal");
    contentEl.createEl("h2", { text: "\u30AB\u30C6\u30B4\u30EA\u30FC\u7DE8\u96C6" });
    new import_obsidian5.Setting(contentEl).setName("\u30AB\u30C6\u30B4\u30EA\u30FC\u540D").addText((text) => {
      text.setValue(this.category.name);
      text.onChange((value) => this.category.name = value);
    });
    new import_obsidian5.Setting(contentEl).setName("\u8AAC\u660E").addTextArea((text) => {
      text.setValue(this.category.description || "");
      text.onChange((value) => this.category.description = value);
      text.inputEl.rows = 3;
    });
    new import_obsidian5.Setting(contentEl).setName("\u30A2\u30A4\u30B3\u30F3").addText((text) => {
      text.setValue(this.category.icon || "\u{1F4C2}");
      text.onChange((value) => this.category.icon = value);
      text.inputEl.style.width = "60px";
    });
    new import_obsidian5.Setting(contentEl).setName("\u8272").addColorPicker((color) => {
      color.setValue(this.category.color || "#2196F3");
      color.onChange((value) => this.category.color = value);
    });
    const buttonContainer = contentEl.createDiv("modal-button-container");
    const saveButton = buttonContainer.createEl("button", {
      text: "\u4FDD\u5B58",
      cls: "mod-cta"
    });
    saveButton.onclick = () => {
      if (!this.category.name.trim()) {
        new import_obsidian5.Notice("\u30AB\u30C6\u30B4\u30EA\u30FC\u540D\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
        return;
      }
      this.onSave(this.category);
      this.close();
    };
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u30AD\u30E3\u30F3\u30BB\u30EB"
    });
    cancelButton.onclick = () => {
      this.close();
    };
  }
};

// src/ui/dataview-integration-modal.ts
var import_obsidian6 = require("obsidian");

// src/integrations/dataview-integration.ts
var DataViewIntegration = class {
  constructor(app) {
    this.app = app;
    this.cache = app.metadataCache;
  }
  /**
   * 全てのBuffer Calcブロックを抽出してDataView用データとして返す
   */
  async getAllBufferCalcData() {
    const files = this.app.vault.getMarkdownFiles();
    const allData = [];
    for (const file of files) {
      const bufferCalcData = await this.extractBufferCalcDataFromFile(file);
      allData.push(...bufferCalcData);
    }
    return allData;
  }
  /**
   * 特定のファイルからBuffer Calcデータを抽出
   */
  async extractBufferCalcDataFromFile(file) {
    var _a;
    const cache = this.cache.getFileCache(file);
    if (!cache) {
      return [];
    }
    try {
      const text = await this.app.vault.cachedRead(file);
      const results = [];
      const bufferRegex = /```(?:buffer|stock|dilution)\n([\s\S]*?)\n```/g;
      let match;
      while ((match = bufferRegex.exec(text)) !== null) {
        const blockType = (_a = match[0].match(/```(\w+)/)) == null ? void 0 : _a[1];
        const blockContent = match[1];
        try {
          const parsedData = this.parseBlockContent(blockType, blockContent);
          const dataViewData = this.convertToDataViewFormat(
            file,
            blockType,
            parsedData,
            cache
          );
          if (dataViewData) {
            results.push(dataViewData);
          }
        } catch (error) {
          console.warn(`Failed to parse Buffer Calc block in ${file.path}:`, error);
        }
      }
      return results;
    } catch (error) {
      console.warn(`Failed to read file ${file.path}:`, error);
      return [];
    }
  }
  /**
   * ブロックコンテンツをパース
   */
  parseBlockContent(blockType, content) {
    const lines = content.split("\n").filter((line) => line.trim());
    const data = {};
    let currentSection = null;
    let components = [];
    lines.forEach((line) => {
      line = line.trim();
      if (line === "components:") {
        currentSection = "components";
        return;
      }
      if (line.startsWith("- name:")) {
        if (currentSection === "components") {
          const componentData = {};
          components.push(componentData);
        }
        return;
      }
      const colonIndex = line.indexOf(":");
      if (colonIndex > 0) {
        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim();
        if (currentSection === "components" && components.length > 0) {
          const lastComponent = components[components.length - 1];
          if (key.startsWith("  ")) {
            const propKey = key.replace(/^\s+/, "");
            lastComponent[propKey] = this.parseValue(value);
          }
        } else {
          data[key] = this.parseValue(value);
        }
      }
    });
    if (components.length > 0) {
      data.components = components;
    }
    return data;
  }
  /**
   * 値を適切な型に変換
   */
  parseValue(value) {
    const num = parseFloat(value);
    if (!isNaN(num) && value.trim() === num.toString()) {
      return num;
    }
    const lower = value.toLowerCase();
    if (lower === "true")
      return true;
    if (lower === "false")
      return false;
    return value;
  }
  /**
   * Buffer CalcデータをDataView形式に変換
   */
  convertToDataViewFormat(file, type, data, cache) {
    var _a, _b;
    const baseData = {
      file: file.name,
      path: file.path,
      name: data.name || `${type}\u8A08\u7B97`,
      type,
      createdDate: new Date(file.stat.ctime),
      modifiedDate: new Date(file.stat.mtime),
      notes: data.notes,
      tags: ((_a = cache == null ? void 0 : cache.tags) == null ? void 0 : _a.map((tag) => tag.tag)) || []
    };
    if (type === "buffer") {
      const bufferData = data;
      return {
        ...baseData,
        totalVolume: bufferData.totalVolume,
        volumeUnit: bufferData.volumeUnit,
        components: (_b = bufferData.components) == null ? void 0 : _b.map((comp) => ({
          name: comp.name,
          stockConc: comp.stockConc,
          stockUnit: comp.stockUnit,
          finalConc: comp.finalConc,
          finalUnit: comp.finalUnit
        }))
      };
    }
    if (type === "stock") {
      const stockData = data;
      return {
        ...baseData,
        reagentName: stockData.reagentName,
        molecularWeight: stockData.molecularWeight,
        targetConcentration: stockData.targetConcentration,
        concentrationUnit: stockData.concentrationUnit,
        totalVolume: stockData.volume,
        volumeUnit: stockData.volumeUnit
      };
    }
    if (type === "dilution") {
      const dilutionData = data;
      return {
        ...baseData,
        stockConcentration: dilutionData.stockConcentration,
        finalConcentration: dilutionData.finalConcentration,
        concentrationUnit: dilutionData.finalConcentrationUnit,
        finalVolume: dilutionData.finalVolume,
        volumeUnit: dilutionData.volumeUnit
      };
    }
    return null;
  }
  /**
   * 特定の試薬を使用している計算を検索
   */
  async findCalculationsByReagent(reagentName) {
    const allData = await this.getAllBufferCalcData();
    const results = [];
    allData.forEach((calc) => {
      let found = false;
      if (calc.type === "buffer" && calc.components) {
        found = calc.components.some(
          (comp) => comp.name.toLowerCase().includes(reagentName.toLowerCase())
        );
      }
      if (calc.type === "stock" && calc.reagentName) {
        found = calc.reagentName.toLowerCase().includes(reagentName.toLowerCase());
      }
      if (found) {
        results.push(calc);
      }
    });
    return results;
  }
  /**
   * 特定の濃度範囲の計算を検索
   */
  async findCalculationsByConcentrationRange(minConc, maxConc, unit) {
    const allData = await this.getAllBufferCalcData();
    return allData.filter((calc) => {
      if (calc.type === "stock" && calc.targetConcentration && calc.concentrationUnit === unit) {
        return calc.targetConcentration >= minConc && calc.targetConcentration <= maxConc;
      }
      if (calc.type === "dilution" && calc.finalConcentration && calc.concentrationUnit === unit) {
        return calc.finalConcentration >= minConc && calc.finalConcentration <= maxConc;
      }
      return false;
    });
  }
  /**
   * 特定の体積範囲の計算を検索
   */
  async findCalculationsByVolumeRange(minVol, maxVol, unit) {
    const allData = await this.getAllBufferCalcData();
    return allData.filter((calc) => {
      if (calc.totalVolume && calc.volumeUnit === unit) {
        return calc.totalVolume >= minVol && calc.totalVolume <= maxVol;
      }
      return false;
    });
  }
  /**
   * 日付範囲で計算を検索
   */
  async findCalculationsByDateRange(startDate, endDate) {
    const allData = await this.getAllBufferCalcData();
    return allData.filter((calc) => {
      const calcDate = calc.modifiedDate || calc.createdDate;
      return calcDate >= startDate && calcDate <= endDate;
    });
  }
  /**
   * タグで計算を検索
   */
  async findCalculationsByTag(tag) {
    const allData = await this.getAllBufferCalcData();
    return allData.filter((calc) => {
      var _a;
      return (_a = calc.tags) == null ? void 0 : _a.some(
        (t) => t.toLowerCase().includes(tag.toLowerCase())
      );
    });
  }
  /**
   * 統計情報を生成
   */
  async generateStatistics() {
    const allData = await this.getAllBufferCalcData();
    const stats = {
      totalCalculations: allData.length,
      bufferCount: allData.filter((d) => d.type === "buffer").length,
      stockCount: allData.filter((d) => d.type === "stock").length,
      dilutionCount: allData.filter((d) => d.type === "dilution").length,
      mostUsedReagents: [],
      averageVolume: 0,
      calculationsByMonth: []
    };
    const reagentCounts = /* @__PURE__ */ new Map();
    allData.forEach((calc) => {
      if (calc.type === "buffer" && calc.components) {
        calc.components.forEach((comp) => {
          reagentCounts.set(comp.name, (reagentCounts.get(comp.name) || 0) + 1);
        });
      }
      if (calc.type === "stock" && calc.reagentName) {
        reagentCounts.set(calc.reagentName, (reagentCounts.get(calc.reagentName) || 0) + 1);
      }
    });
    stats.mostUsedReagents = Array.from(reagentCounts.entries()).map(([name, count]) => ({ name, count })).sort((a, b) => b.count - a.count).slice(0, 10);
    const volumeData = allData.filter((d) => d.totalVolume).map((d) => d.totalVolume);
    if (volumeData.length > 0) {
      stats.averageVolume = volumeData.reduce((sum, vol) => sum + vol, 0) / volumeData.length;
    }
    const monthCounts = /* @__PURE__ */ new Map();
    allData.forEach((calc) => {
      const date = calc.modifiedDate || calc.createdDate;
      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}`;
      monthCounts.set(monthKey, (monthCounts.get(monthKey) || 0) + 1);
    });
    stats.calculationsByMonth = Array.from(monthCounts.entries()).map(([month, count]) => ({ month, count })).sort((a, b) => a.month.localeCompare(b.month));
    return stats;
  }
  /**
   * DataViewプラグインが利用可能かチェック
   */
  isDataViewAvailable() {
    return this.app.plugins.enabledPlugins.has("dataview");
  }
  /**
   * DataViewプラグインのAPIを取得
   */
  getDataViewAPI() {
    var _a;
    if (!this.isDataViewAvailable()) {
      return null;
    }
    return (_a = this.app.plugins.plugins.dataview) == null ? void 0 : _a.api;
  }
  /**
   * DataViewにBuffer Calcデータを登録
   */
  registerWithDataView() {
    if (!this.isDataViewAvailable()) {
      console.warn("DataView plugin is not available");
      return;
    }
    const api = this.getDataViewAPI();
    if (!api) {
      console.warn("DataView API is not available");
      return;
    }
    try {
      api.index.on("file-changed", (file) => {
        if (file.extension === "md") {
          this.reindexFile(file);
        }
      });
      console.log("Buffer Calc data registered with DataView");
    } catch (error) {
      console.error("Failed to register with DataView:", error);
    }
  }
  /**
   * ファイルを再インデックス
   */
  reindexFile(file) {
    this.extractBufferCalcDataFromFile(file);
  }
};

// src/integrations/dataview-queries.ts
var DataViewQueries = class {
  /**
   * 全てのBuffer Calc計算を表示するクエリ
   */
  static getAllCalculationsQuery() {
    return `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",
  totalVolume + " " + volumeUnit as "\u4F53\u7A4D",
  notes as "\u30E1\u30E2"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
SORT calc.modifiedDate DESC
\`\`\`
`;
  }
  /**
   * 特定の試薬を使用している計算を表示するクエリ
   */
  static getReagentUsageQuery(reagentName) {
    return `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",
  file as "\u30D5\u30A1\u30A4\u30EB",
  notes as "\u30E1\u30E2"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE contains(string(calc), "${reagentName}")
SORT calc.modifiedDate DESC
\`\`\`
`;
  }
  /**
   * バッファー計算のみを表示するクエリ
   */
  static getBufferCalculationsQuery() {
    return `
\`\`\`dataview
TABLE
  name as "\u30D0\u30C3\u30D5\u30A1\u30FC\u540D",
  totalVolume + " " + volumeUnit as "\u7DCF\u4F53\u7A4D",
  length(components) as "\u6210\u5206\u6570",
  notes as "\u30E1\u30E2"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE calc.type = "buffer"
SORT calc.totalVolume DESC
\`\`\`
`;
  }
  /**
   * ストック溶液計算のみを表示するクエリ
   */
  static getStockCalculationsQuery() {
    return `
\`\`\`dataview
TABLE
  name as "\u6EB6\u6DB2\u540D",
  reagentName as "\u8A66\u85AC\u540D",
  targetConcentration + " " + concentrationUnit as "\u6FC3\u5EA6",
  totalVolume + " " + volumeUnit as "\u4F53\u7A4D"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE calc.type = "stock"
SORT calc.targetConcentration DESC
\`\`\`
`;
  }
  /**
   * 希釈計算のみを表示するクエリ
   */
  static getDilutionCalculationsQuery() {
    return `
\`\`\`dataview
TABLE
  name as "\u5E0C\u91C8\u540D",
  stockConcentration + " \u2192 " + finalConcentration + " " + concentrationUnit as "\u6FC3\u5EA6\u5909\u5316",
  finalVolume + " " + volumeUnit as "\u6700\u7D42\u4F53\u7A4D",
  notes as "\u30E1\u30E2"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE calc.type = "dilution"
SORT calc.finalVolume DESC
\`\`\`
`;
  }
  /**
   * 最近の計算を表示するクエリ
   */
  static getRecentCalculationsQuery(days = 7) {
    return `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",
  file as "\u30D5\u30A1\u30A4\u30EB",
  date(modifiedDate) as "\u66F4\u65B0\u65E5"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE calc.modifiedDate >= date(today) - dur(${days} days)
SORT calc.modifiedDate DESC
LIMIT 20
\`\`\`
`;
  }
  /**
   * 濃度範囲で検索するクエリ
   */
  static getConcentrationRangeQuery(minConc, maxConc, unit) {
    return `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",
  targetConcentration + " " + concentrationUnit as "\u6FC3\u5EA6",
  file as "\u30D5\u30A1\u30A4\u30EB"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE (calc.targetConcentration >= ${minConc} AND calc.targetConcentration <= ${maxConc} AND calc.concentrationUnit = "${unit}") OR
      (calc.finalConcentration >= ${minConc} AND calc.finalConcentration <= ${maxConc} AND calc.concentrationUnit = "${unit}")
SORT calc.targetConcentration DESC
\`\`\`
`;
  }
  /**
   * 体積範囲で検索するクエリ
   */
  static getVolumeRangeQuery(minVol, maxVol, unit) {
    return `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",
  totalVolume + " " + volumeUnit as "\u4F53\u7A4D",
  file as "\u30D5\u30A1\u30A4\u30EB"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
WHERE calc.totalVolume >= ${minVol} AND calc.totalVolume <= ${maxVol} AND calc.volumeUnit = "${unit}"
SORT calc.totalVolume DESC
\`\`\`
`;
  }
  /**
   * 統計情報を表示するクエリ
   */
  static getStatisticsQuery() {
    return `
\`\`\`dataview
TABLE WITHOUT ID
  "\u8A08\u7B97\u30BF\u30A4\u30D7" as type,
  length(rows) as count
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
GROUP BY calc.type
SORT count DESC
\`\`\`

### \u6700\u3082\u4F7F\u7528\u3055\u308C\u308B\u8A66\u85AC
\`\`\`dataview
TABLE WITHOUT ID
  reagent as "\u8A66\u85AC\u540D",
  length(rows) as "\u4F7F\u7528\u56DE\u6570"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
FLATTEN calc.components as comp
GROUP BY comp.name as reagent
SORT length(rows) DESC
LIMIT 10
\`\`\`

### \u6708\u5225\u8A08\u7B97\u6570
\`\`\`dataview
TABLE WITHOUT ID
  dateformat(date(calc.modifiedDate), "yyyy-MM") as "\u6708",
  length(rows) as "\u8A08\u7B97\u6570"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
GROUP BY dateformat(date(calc.modifiedDate), "yyyy-MM")
SORT key DESC
LIMIT 12
\`\`\`
`;
  }
  /**
   * 特定のタグを持つ計算を表示するクエリ
   */
  static getTaggedCalculationsQuery(tag) {
    return `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",
  file as "\u30D5\u30A1\u30A4\u30EB",
  join(tags, ", ") as "\u30BF\u30B0"
FROM #${tag}
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc
SORT calc.modifiedDate DESC
\`\`\`
`;
  }
  /**
   * カスタム検索クエリを生成
   */
  static generateCustomQuery(options) {
    var _a, _b, _c, _d;
    let query = `
\`\`\`dataview
TABLE
  name as "\u8A08\u7B97\u540D",
  type as "\u7A2E\u985E",`;
    if (options.calculationType === "buffer" || !options.calculationType) {
      query += `
  totalVolume + " " + volumeUnit as "\u4F53\u7A4D",`;
    }
    if (options.calculationType === "stock" || !options.calculationType) {
      query += `
  targetConcentration + " " + concentrationUnit as "\u6FC3\u5EA6",`;
    }
    if (options.calculationType === "dilution" || !options.calculationType) {
      query += `
  finalConcentration + " " + concentrationUnit as "\u6700\u7D42\u6FC3\u5EA6",`;
    }
    query += `
  file as "\u30D5\u30A1\u30A4\u30EB",
  notes as "\u30E1\u30E2"
FROM "/"
WHERE file.path != this.file.path
FLATTEN file.bufferCalc as calc`;
    const conditions = [];
    if (options.calculationType) {
      conditions.push(`calc.type = "${options.calculationType}"`);
    }
    if (options.reagentName) {
      conditions.push(`contains(string(calc), "${options.reagentName}")`);
    }
    if (options.minVolume !== void 0 || options.maxVolume !== void 0) {
      const minVol = (_a = options.minVolume) != null ? _a : 0;
      const maxVol = (_b = options.maxVolume) != null ? _b : 999999;
      conditions.push(`calc.totalVolume >= ${minVol} AND calc.totalVolume <= ${maxVol}`);
    }
    if (options.minConcentration !== void 0 || options.maxConcentration !== void 0) {
      const minConc = (_c = options.minConcentration) != null ? _c : 0;
      const maxConc = (_d = options.maxConcentration) != null ? _d : 999999;
      conditions.push(
        `((calc.targetConcentration >= ${minConc} AND calc.targetConcentration <= ${maxConc}) OR (calc.finalConcentration >= ${minConc} AND calc.finalConcentration <= ${maxConc}))`
      );
    }
    if (options.tag) {
      conditions.push(`contains(calc.tags, "${options.tag}")`);
    }
    if (options.dateFrom) {
      conditions.push(`calc.modifiedDate >= date("${options.dateFrom}")`);
    }
    if (options.dateTo) {
      conditions.push(`calc.modifiedDate <= date("${options.dateTo}")`);
    }
    if (conditions.length > 0) {
      query += `
WHERE ` + conditions.join(" AND ");
    }
    if (options.sortBy) {
      const sortField = {
        name: "calc.name",
        date: "calc.modifiedDate",
        volume: "calc.totalVolume",
        concentration: "calc.targetConcentration"
      }[options.sortBy];
      const sortDirection = options.sortOrder === "asc" ? "ASC" : "DESC";
      query += `
SORT ${sortField} ${sortDirection}`;
    } else {
      query += `
SORT calc.modifiedDate DESC`;
    }
    if (options.limit) {
      query += `
LIMIT ${options.limit}`;
    }
    query += `
\`\`\``;
    return query;
  }
  /**
   * よく使用されるクエリのテンプレート集
   */
  static getQueryTemplates() {
    return {
      "all-calculations": this.getAllCalculationsQuery(),
      "buffer-only": this.getBufferCalculationsQuery(),
      "stock-only": this.getStockCalculationsQuery(),
      "dilution-only": this.getDilutionCalculationsQuery(),
      "recent-7days": this.getRecentCalculationsQuery(7),
      "recent-30days": this.getRecentCalculationsQuery(30),
      "statistics": this.getStatisticsQuery()
    };
  }
};

// src/ui/dataview-integration-modal.ts
var DataViewIntegrationModal = class extends import_obsidian6.Modal {
  constructor(app, settings, onClose) {
    super(app);
    // フォームの状態
    this.calculationType = "all";
    this.reagentName = "";
    this.minVolume = "";
    this.maxVolume = "";
    this.volumeUnit = "mL";
    this.minConcentration = "";
    this.maxConcentration = "";
    this.concentrationUnit = "mM";
    this.tag = "";
    this.dateFrom = "";
    this.dateTo = "";
    this.sortBy = "date";
    this.sortOrder = "desc";
    this.limitResults = "50";
    this.settings = settings;
    this.dataViewIntegration = new DataViewIntegration(app);
    this.onCloseCallback = onClose;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("dataview-integration-modal");
    contentEl.createEl("h2", { text: "DataView\u7D71\u5408" });
    this.renderDataViewStatus(contentEl);
    this.renderQuickQueries(contentEl);
    this.renderCustomQueryBuilder(contentEl);
    this.renderStatistics(contentEl);
    this.renderActionButtons(contentEl);
  }
  renderDataViewStatus(container) {
    const statusSection = container.createDiv("dataview-status-section");
    statusSection.createEl("h3", { text: "DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u72B6\u614B" });
    const isAvailable = this.dataViewIntegration.isDataViewAvailable();
    const statusEl = statusSection.createDiv("status-indicator");
    statusEl.addClass(isAvailable ? "status-success" : "status-warning");
    if (isAvailable) {
      statusEl.createSpan("status-icon").setText("\u2705");
      statusEl.createSpan("status-text").setText("DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u5229\u7528\u53EF\u80FD\u3067\u3059");
    } else {
      statusEl.createSpan("status-icon").setText("\u26A0\uFE0F");
      statusEl.createSpan("status-text").setText("DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093");
      const helpText = statusSection.createDiv("status-help");
      helpText.setText("DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u3092\u30B3\u30DF\u30E5\u30CB\u30C6\u30A3\u30D7\u30E9\u30B0\u30A4\u30F3\u304B\u3089\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3057\u3066\u6709\u52B9\u5316\u3057\u3066\u304F\u3060\u3055\u3044\u3002");
    }
    this.dataViewIntegration.getAllBufferCalcData().then((allData) => {
      const statsEl = statusSection.createDiv("data-stats");
      statsEl.createEl("p", { text: `\u691C\u51FA\u3055\u308C\u305FBuffer Calc\u8A08\u7B97: ${allData.length} \u4EF6` });
    }).catch(() => {
      const errorEl = statusSection.createDiv("data-stats-error");
      errorEl.setText("\u30C7\u30FC\u30BF\u306E\u8AAD\u307F\u8FBC\u307F\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
    });
  }
  renderQuickQueries(container) {
    const quickSection = container.createDiv("quick-queries-section");
    quickSection.createEl("h3", { text: "\u30AF\u30A4\u30C3\u30AF\u30AF\u30A8\u30EA" });
    const templates = DataViewQueries.getQueryTemplates();
    const queryGrid = quickSection.createDiv("query-grid");
    const queryButtons = [
      { key: "all-calculations", label: "\u5168\u3066\u306E\u8A08\u7B97", desc: "\u5168\u3066\u306EBuffer Calc\u8A08\u7B97\u3092\u8868\u793A" },
      { key: "buffer-only", label: "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97", desc: "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97\u306E\u307F\u8868\u793A" },
      { key: "stock-only", label: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2", desc: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97\u306E\u307F\u8868\u793A" },
      { key: "dilution-only", label: "\u5E0C\u91C8\u8A08\u7B97", desc: "\u5E0C\u91C8\u8A08\u7B97\u306E\u307F\u8868\u793A" },
      { key: "recent-7days", label: "\u6700\u8FD17\u65E5", desc: "\u904E\u53BB7\u65E5\u9593\u306E\u8A08\u7B97\u3092\u8868\u793A" },
      { key: "statistics", label: "\u7D71\u8A08\u60C5\u5831", desc: "\u8A08\u7B97\u306E\u7D71\u8A08\u60C5\u5831\u3092\u8868\u793A" }
    ];
    queryButtons.forEach((btn) => {
      const queryCard = queryGrid.createDiv("query-card");
      queryCard.createEl("h4", { text: btn.label });
      queryCard.createEl("p", { text: btn.desc });
      const insertBtn = queryCard.createEl("button", {
        text: "\u30AF\u30A8\u30EA\u3092\u633F\u5165",
        cls: "query-insert-button"
      });
      insertBtn.onclick = () => {
        this.insertQueryIntoEditor(templates[btn.key]);
        new import_obsidian6.Notice(`${btn.label}\u30AF\u30A8\u30EA\u3092\u633F\u5165\u3057\u307E\u3057\u305F`);
      };
    });
  }
  renderCustomQueryBuilder(container) {
    const customSection = container.createDiv("custom-query-section");
    customSection.createEl("h3", { text: "\u30AB\u30B9\u30BF\u30E0\u30AF\u30A8\u30EA\u30D3\u30EB\u30C0\u30FC" });
    new import_obsidian6.Setting(customSection).setName("\u8A08\u7B97\u30BF\u30A4\u30D7").setDesc("\u8868\u793A\u3059\u308B\u8A08\u7B97\u306E\u7A2E\u985E\u3092\u9078\u629E").addDropdown((dropdown) => {
      dropdown.addOption("all", "\u5168\u3066");
      dropdown.addOption("buffer", "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97");
      dropdown.addOption("stock", "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2");
      dropdown.addOption("dilution", "\u5E0C\u91C8\u8A08\u7B97");
      dropdown.setValue(this.calculationType);
      dropdown.onChange((value) => this.calculationType = value);
    });
    new import_obsidian6.Setting(customSection).setName("\u8A66\u85AC\u540D").setDesc("\u7279\u5B9A\u306E\u8A66\u85AC\u3092\u542B\u3080\u8A08\u7B97\u3092\u691C\u7D22\uFF08\u90E8\u5206\u4E00\u81F4\uFF09").addText((text) => {
      text.setValue(this.reagentName);
      text.onChange((value) => this.reagentName = value);
      text.inputEl.placeholder = "\u4F8B: Tris, NaCl";
    });
    const volumeContainer = customSection.createDiv("range-container");
    volumeContainer.createEl("label", { text: "\u4F53\u7A4D\u7BC4\u56F2" });
    const volumeInputs = volumeContainer.createDiv("range-inputs");
    const minVolInput = volumeInputs.createEl("input", { type: "number", placeholder: "\u6700\u5C0F" });
    minVolInput.value = this.minVolume;
    minVolInput.oninput = () => this.minVolume = minVolInput.value;
    volumeInputs.createSpan().setText(" \uFF5E ");
    const maxVolInput = volumeInputs.createEl("input", { type: "number", placeholder: "\u6700\u5927" });
    maxVolInput.value = this.maxVolume;
    maxVolInput.oninput = () => this.maxVolume = maxVolInput.value;
    const volUnitSelect = volumeInputs.createEl("select");
    ["mL", "L", "\xB5L"].forEach((unit) => {
      const option = volUnitSelect.createEl("option", { value: unit, text: unit });
      if (unit === this.volumeUnit)
        option.selected = true;
    });
    volUnitSelect.onchange = () => this.volumeUnit = volUnitSelect.value;
    const concContainer = customSection.createDiv("range-container");
    concContainer.createEl("label", { text: "\u6FC3\u5EA6\u7BC4\u56F2" });
    const concInputs = concContainer.createDiv("range-inputs");
    const minConcInput = concInputs.createEl("input", { type: "number", placeholder: "\u6700\u5C0F" });
    minConcInput.value = this.minConcentration;
    minConcInput.oninput = () => this.minConcentration = minConcInput.value;
    concInputs.createSpan().setText(" \uFF5E ");
    const maxConcInput = concInputs.createEl("input", { type: "number", placeholder: "\u6700\u5927" });
    maxConcInput.value = this.maxConcentration;
    maxConcInput.oninput = () => this.maxConcentration = maxConcInput.value;
    const concUnitSelect = concInputs.createEl("select");
    ["mM", "M", "\xB5M", "mg/mL"].forEach((unit) => {
      const option = concUnitSelect.createEl("option", { value: unit, text: unit });
      if (unit === this.concentrationUnit)
        option.selected = true;
    });
    concUnitSelect.onchange = () => this.concentrationUnit = concUnitSelect.value;
    new import_obsidian6.Setting(customSection).setName("\u30BD\u30FC\u30C8").setDesc("\u7D50\u679C\u306E\u4E26\u3073\u9806\u3092\u8A2D\u5B9A").addDropdown((dropdown) => {
      dropdown.addOption("date", "\u66F4\u65B0\u65E5");
      dropdown.addOption("name", "\u540D\u524D");
      dropdown.addOption("volume", "\u4F53\u7A4D");
      dropdown.addOption("concentration", "\u6FC3\u5EA6");
      dropdown.setValue(this.sortBy);
      dropdown.onChange((value) => this.sortBy = value);
    }).addDropdown((dropdown) => {
      dropdown.addOption("desc", "\u964D\u9806");
      dropdown.addOption("asc", "\u6607\u9806");
      dropdown.setValue(this.sortOrder);
      dropdown.onChange((value) => this.sortOrder = value);
    });
    new import_obsidian6.Setting(customSection).setName("\u7D50\u679C\u6570\u5236\u9650").setDesc("\u8868\u793A\u3059\u308B\u7D50\u679C\u306E\u6700\u5927\u6570").addText((text) => {
      text.setValue(this.limitResults);
      text.onChange((value) => this.limitResults = value);
      text.inputEl.type = "number";
      text.inputEl.placeholder = "50";
    });
    const generateBtn = customSection.createEl("button", {
      text: "\u30AB\u30B9\u30BF\u30E0\u30AF\u30A8\u30EA\u3092\u751F\u6210",
      cls: "mod-cta"
    });
    generateBtn.onclick = () => {
      const options = {
        calculationType: this.calculationType === "all" ? void 0 : this.calculationType,
        reagentName: this.reagentName || void 0,
        minVolume: this.minVolume ? parseFloat(this.minVolume) : void 0,
        maxVolume: this.maxVolume ? parseFloat(this.maxVolume) : void 0,
        volumeUnit: this.volumeUnit,
        minConcentration: this.minConcentration ? parseFloat(this.minConcentration) : void 0,
        maxConcentration: this.maxConcentration ? parseFloat(this.maxConcentration) : void 0,
        concentrationUnit: this.concentrationUnit,
        sortBy: this.sortBy,
        sortOrder: this.sortOrder,
        limit: this.limitResults ? parseInt(this.limitResults) : void 0
      };
      const query = DataViewQueries.generateCustomQuery(options);
      this.insertQueryIntoEditor(query);
      new import_obsidian6.Notice("\u30AB\u30B9\u30BF\u30E0\u30AF\u30A8\u30EA\u3092\u633F\u5165\u3057\u307E\u3057\u305F");
    };
  }
  renderStatistics(container) {
    const statsSection = container.createDiv("statistics-section");
    statsSection.createEl("h3", { text: "\u30C7\u30FC\u30BF\u7D71\u8A08" });
    this.dataViewIntegration.generateStatistics().then((stats) => {
      const statsGrid = statsSection.createDiv("stats-grid");
      const basicStats = statsGrid.createDiv("stat-group");
      basicStats.createEl("h4", { text: "\u57FA\u672C\u7D71\u8A08" });
      basicStats.createEl("p", { text: `\u7DCF\u8A08\u7B97\u6570: ${stats.totalCalculations}` });
      basicStats.createEl("p", { text: `\u30D0\u30C3\u30D5\u30A1\u30FC: ${stats.bufferCount}` });
      basicStats.createEl("p", { text: `\u30B9\u30C8\u30C3\u30AF: ${stats.stockCount}` });
      basicStats.createEl("p", { text: `\u5E0C\u91C8: ${stats.dilutionCount}` });
      basicStats.createEl("p", { text: `\u5E73\u5747\u4F53\u7A4D: ${stats.averageVolume.toFixed(1)} mL` });
      if (stats.mostUsedReagents.length > 0) {
        const reagentStats = statsGrid.createDiv("stat-group");
        reagentStats.createEl("h4", { text: "\u3088\u304F\u4F7F\u7528\u3055\u308C\u308B\u8A66\u85AC" });
        stats.mostUsedReagents.slice(0, 5).forEach((reagent) => {
          reagentStats.createEl("p", { text: `${reagent.name}: ${reagent.count}\u56DE` });
        });
      }
    }).catch((error) => {
      statsSection.createEl("p", {
        text: "\u30C7\u30FC\u30BF\u306E\u8AAD\u307F\u8FBC\u307F\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F",
        cls: "error-message"
      });
      console.error("Statistics error:", error);
    });
  }
  renderActionButtons(container) {
    const buttonContainer = container.createDiv("modal-button-container");
    const refreshBtn = buttonContainer.createEl("button", {
      text: "\u30C7\u30FC\u30BF\u3092\u66F4\u65B0",
      cls: "mod-cta"
    });
    refreshBtn.onclick = () => {
      this.onOpen();
      new import_obsidian6.Notice("\u30C7\u30FC\u30BF\u3092\u66F4\u65B0\u3057\u307E\u3057\u305F");
    };
    const closeBtn = buttonContainer.createEl("button", {
      text: "\u9589\u3058\u308B"
    });
    closeBtn.onclick = () => {
      this.close();
    };
  }
  insertQueryIntoEditor(query) {
    const { MarkdownView: MarkdownView3 } = require("obsidian");
    const activeView = this.app.workspace.getActiveViewOfType(MarkdownView3);
    if (!activeView) {
      new import_obsidian6.Notice("\u30A2\u30AF\u30C6\u30A3\u30D6\u306AMarkdown\u30A8\u30C7\u30A3\u30BF\u30FC\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093");
      return;
    }
    const editor = activeView.editor;
    const cursor = editor.getCursor();
    const currentLine = editor.getLine(cursor.line);
    const insertText = currentLine.trim() ? "\n\n" + query : query;
    editor.replaceRange(insertText, cursor);
    const lines = insertText.split("\n");
    editor.setCursor({
      line: cursor.line + lines.length - 1,
      ch: lines[lines.length - 1].length
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
    this.onCloseCallback();
  }
};

// src/settings.ts
var BufferCalcSettingTab = class extends import_obsidian7.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Buffer Calc \u8A2D\u5B9A" });
    this.addGeneralSettings();
    this.addUnitsSettings();
    this.addDisplaySettings();
    this.addReagentSettings();
    this.addCategorySettings();
    this.addHistorySettings();
    this.addDataViewSettings();
    this.addImportExportSettings();
    this.addDataManagement();
  }
  addGeneralSettings() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u4E00\u822C\u8A2D\u5B9A" });
    new import_obsidian7.Setting(containerEl).setName("\u81EA\u52D5\u88DC\u5B8C\u3092\u6709\u52B9\u306B\u3059\u308B").setDesc("\u5165\u529B\u6642\u306B\u8A66\u85AC\u540D\u306E\u63D0\u6848\u3092\u8868\u793A\u3057\u307E\u3059").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableSuggestions).onChange(async (value) => {
        this.plugin.settings.enableSuggestions = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u8A08\u7B97\u30B9\u30C6\u30C3\u30D7\u3092\u8868\u793A").setDesc("\u7D50\u679C\u306B\u8A73\u7D30\u306A\u8A08\u7B97\u30B9\u30C6\u30C3\u30D7\u3092\u8868\u793A\u3057\u307E\u3059").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showCalculationSteps).onChange(async (value) => {
        this.plugin.settings.showCalculationSteps = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u5C0F\u6570\u70B9\u4EE5\u4E0B\u306E\u6841\u6570").setDesc("\u7D50\u679C\u306B\u8868\u793A\u3059\u308B\u5C0F\u6570\u70B9\u4EE5\u4E0B\u306E\u6841\u6570").addSlider((slider) => {
      slider.setLimits(0, 5, 1).setValue(this.plugin.settings.decimalPlaces).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.decimalPlaces = value;
        await this.plugin.saveSettings();
      });
    });
  }
  addUnitsSettings() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u30C7\u30D5\u30A9\u30EB\u30C8\u5358\u4F4D" });
    new import_obsidian7.Setting(containerEl).setName("\u30C7\u30D5\u30A9\u30EB\u30C8\u4F53\u7A4D\u5358\u4F4D").setDesc("\u8A08\u7B97\u3067\u4F7F\u7528\u3055\u308C\u308B\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u4F53\u7A4D\u5358\u4F4D").addDropdown((dropdown) => {
      const options = {
        ["L" /* LITER */]: "Liter (L)",
        ["mL" /* MILLILITER */]: "Milliliter (mL)",
        ["\xB5L" /* MICROLITER */]: "Microliter (\xB5L)",
        ["nL" /* NANOLITER */]: "Nanoliter (nL)"
      };
      for (const [key, value] of Object.entries(options)) {
        dropdown.addOption(key, value);
      }
      dropdown.setValue(this.plugin.settings.defaultVolumeUnit).onChange(async (value) => {
        this.plugin.settings.defaultVolumeUnit = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u30C7\u30D5\u30A9\u30EB\u30C8\u6FC3\u5EA6\u5358\u4F4D").setDesc("\u8A08\u7B97\u3067\u4F7F\u7528\u3055\u308C\u308B\u30C7\u30D5\u30A9\u30EB\u30C8\u306E\u6FC3\u5EA6\u5358\u4F4D").addDropdown((dropdown) => {
      const options = {
        ["M" /* MOLAR */]: "Molar (M)",
        ["mM" /* MILLIMOLAR */]: "Millimolar (mM)",
        ["\xB5M" /* MICROMOLAR */]: "Micromolar (\xB5M)",
        ["nM" /* NANOMOLAR */]: "Nanomolar (nM)"
      };
      for (const [key, value] of Object.entries(options)) {
        dropdown.addOption(key, value);
      }
      dropdown.setValue(this.plugin.settings.defaultConcentrationUnit).onChange(async (value) => {
        this.plugin.settings.defaultConcentrationUnit = value;
        await this.plugin.saveSettings();
      });
    });
  }
  addDisplaySettings() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u8868\u793A\u8A2D\u5B9A" });
    new import_obsidian7.Setting(containerEl).setName("\u30C7\u30D5\u30A9\u30EB\u30C8\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8").setDesc("\u65B0\u3057\u3044\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97\u306E\u30C7\u30D5\u30A9\u30EB\u30C8\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8").addDropdown((dropdown) => {
      dropdown.addOption("buffer", "\u30D0\u30C3\u30D5\u30A1\u30FC\u8ABF\u88FD");
      dropdown.addOption("stock", "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2");
      dropdown.addOption("dilution", "\u6BB5\u968E\u5E0C\u91C8");
      dropdown.setValue(this.plugin.settings.defaultTemplate).onChange(async (value) => {
        this.plugin.settings.defaultTemplate = value;
        await this.plugin.saveSettings();
      });
    });
  }
  addReagentSettings() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC" });
    const reagentContainer = containerEl.createEl("div", { cls: "buffer-calc-reagent-list" });
    const updateReagentList = () => {
      reagentContainer.empty();
      if (this.plugin.settings.customReagents.length === 0) {
        reagentContainer.createEl("p", {
          text: "\u307E\u3060\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u306F\u8FFD\u52A0\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002",
          cls: "buffer-calc-no-reagents"
        });
      } else {
        this.plugin.settings.customReagents.forEach((reagent, index) => {
          const reagentEl = reagentContainer.createEl("div", { cls: "buffer-calc-reagent-item" });
          const infoEl = reagentEl.createEl("div", { cls: "buffer-calc-reagent-info" });
          infoEl.createEl("strong", { text: reagent.name });
          infoEl.createEl("span", { text: ` (MW: ${reagent.molecularWeight} g/mol)` });
          const actionsEl = reagentEl.createEl("div", { cls: "buffer-calc-reagent-actions" });
          const editBtn = actionsEl.createEl("button", { text: "\u7DE8\u96C6", cls: "mod-cta" });
          editBtn.addEventListener("click", () => {
            this.openReagentEditor(reagent, index, updateReagentList);
          });
          const deleteBtn = actionsEl.createEl("button", { text: "\u524A\u9664", cls: "mod-destructive" });
          deleteBtn.addEventListener("click", async () => {
            this.plugin.settings.customReagents.splice(index, 1);
            await this.plugin.saveSettings();
            updateReagentList();
            new import_obsidian7.Notice("\u8A66\u85AC\u3092\u524A\u9664\u3057\u307E\u3057\u305F");
          });
        });
      }
    };
    updateReagentList();
    new import_obsidian7.Setting(containerEl).setName("\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u3092\u8FFD\u52A0").setDesc("\u500B\u4EBA\u30C7\u30FC\u30BF\u30D9\u30FC\u30B9\u306B\u65B0\u3057\u3044\u8A66\u85AC\u3092\u8FFD\u52A0\u3057\u307E\u3059").addButton((button) => {
      button.setButtonText("\u8A66\u85AC\u3092\u8FFD\u52A0").setClass("mod-cta").onClick(() => {
        this.openReagentEditor(null, -1, updateReagentList);
      });
    });
  }
  addCategorySettings() {
    var _a, _b, _c, _d;
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u8A66\u85AC\u30AB\u30C6\u30B4\u30EA\u30FC\u8A2D\u5B9A" });
    new import_obsidian7.Setting(containerEl).setName("\u30AB\u30B9\u30BF\u30E0\u30AB\u30C6\u30B4\u30EA\u30FC\u3092\u6709\u52B9\u306B\u3059\u308B").setDesc("\u72EC\u81EA\u306E\u8A66\u85AC\u30AB\u30C6\u30B4\u30EA\u30FC\u3092\u4F5C\u6210\u30FB\u7BA1\u7406\u3067\u304D\u307E\u3059").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableCustomCategories);
      toggle.onChange(async (value) => {
        this.plugin.settings.enableCustomCategories = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u30AB\u30C6\u30B4\u30EA\u30FC\u7BA1\u7406").setDesc("\u8A66\u85AC\u30AB\u30C6\u30B4\u30EA\u30FC\u306E\u4F5C\u6210\u3001\u7DE8\u96C6\u3001\u524A\u9664\u3092\u884C\u3044\u307E\u3059").addButton((button) => {
      button.setButtonText("\u30AB\u30C6\u30B4\u30EA\u30FC\u7BA1\u7406\u3092\u958B\u304F").setClass("mod-cta").onClick(() => {
        const modal = new ReagentCategoryModal(
          this.app,
          this.plugin.settings,
          async (updatedSettings) => {
            this.plugin.settings = updatedSettings;
            await this.plugin.saveSettings();
            new import_obsidian7.Notice("\u30AB\u30C6\u30B4\u30EA\u30FC\u8A2D\u5B9A\u304C\u4FDD\u5B58\u3055\u308C\u307E\u3057\u305F");
          }
        );
        modal.open();
      });
    });
    const categoryCount = ((_a = this.plugin.settings.customReagentCategories) == null ? void 0 : _a.length) || 0;
    const reagentCount = ((_b = this.plugin.settings.customReagents) == null ? void 0 : _b.length) || 0;
    const categorizedCount = ((_d = (_c = this.plugin.settings.customReagents) == null ? void 0 : _c.filter((r) => r.category)) == null ? void 0 : _d.length) || 0;
    const statsEl = containerEl.createEl("div", { cls: "category-settings-stats" });
    statsEl.createEl("p", {
      text: `\u30AB\u30B9\u30BF\u30E0\u30AB\u30C6\u30B4\u30EA\u30FC: ${categoryCount} \u500B`
    });
    statsEl.createEl("p", {
      text: `\u5206\u985E\u6E08\u307F\u8A66\u85AC: ${categorizedCount} / ${reagentCount} \u500B`
    });
  }
  addHistorySettings() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u8A08\u7B97\u5C65\u6B74\u8A2D\u5B9A" });
    new import_obsidian7.Setting(containerEl).setName("\u8A08\u7B97\u5C65\u6B74\u3092\u6709\u52B9\u306B\u3059\u308B").setDesc("\u8A08\u7B97\u7D50\u679C\u3092\u81EA\u52D5\u7684\u306B\u5C65\u6B74\u306B\u4FDD\u5B58\u3057\u307E\u3059").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.enableHistory);
      toggle.onChange(async (value) => {
        this.plugin.settings.enableHistory = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u6700\u5927\u5C65\u6B74\u4FDD\u5B58\u6570").setDesc("\u4FDD\u5B58\u3059\u308B\u5C65\u6B74\u306E\u6700\u5927\u6570\uFF081-1000\uFF09").addSlider((slider) => {
      slider.setLimits(1, 1e3, 10);
      slider.setValue(this.plugin.settings.maxHistoryEntries);
      slider.setDynamicTooltip();
      slider.onChange(async (value) => {
        this.plugin.settings.maxHistoryEntries = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u8A08\u7B97\u5C65\u6B74\u3092\u8868\u793A").setDesc("\u4FDD\u5B58\u3055\u308C\u305F\u8A08\u7B97\u5C65\u6B74\u3092\u8868\u793A\u30FB\u7BA1\u7406\u3057\u307E\u3059").addButton((button) => {
      button.setButtonText("\u5C65\u6B74\u3092\u958B\u304F");
      button.setClass("mod-cta");
      button.onClick(() => {
        const historyModal = new CalculationHistoryModal(
          this.app,
          this.plugin.settings,
          async (newSettings) => {
            this.plugin.settings = newSettings;
            await this.plugin.saveSettings();
            this.display();
          },
          (yaml) => {
          }
        );
        historyModal.open();
      });
    });
  }
  addDataViewSettings() {
    var _a;
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "DataView\u7D71\u5408\u8A2D\u5B9A" });
    const descEl = containerEl.createEl("p", {
      cls: "setting-item-description"
    });
    descEl.innerHTML = `
			DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u3068\u9023\u643A\u3057\u3066\u3001Buffer Calc\u306E\u8A08\u7B97\u30C7\u30FC\u30BF\u3092\u30AF\u30A8\u30EA\u3067\u691C\u7D22\u30FB\u5206\u6790\u3067\u304D\u307E\u3059\u3002<br>
			<strong>\u6CE8\u610F:</strong> \u3053\u306E\u6A5F\u80FD\u3092\u4F7F\u7528\u3059\u308B\u306B\u306F\u3001DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u30A4\u30F3\u30B9\u30C8\u30FC\u30EB\u3055\u308C\u6709\u52B9\u5316\u3055\u308C\u3066\u3044\u308B\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059\u3002
		`;
    new import_obsidian7.Setting(containerEl).setName("DataView\u7D71\u5408\u7BA1\u7406").setDesc("DataView\u30AF\u30A8\u30EA\u306E\u751F\u6210\u3068\u30C7\u30FC\u30BF\u7D71\u8A08\u3092\u8868\u793A\u3057\u307E\u3059").addButton((button) => {
      button.setButtonText("DataView\u7D71\u5408\u3092\u958B\u304F").setClass("mod-cta").onClick(() => {
        const modal = new DataViewIntegrationModal(
          this.app,
          this.plugin.settings,
          () => {
          }
        );
        modal.open();
      });
    });
    const isDataViewAvailable = ((_a = this.plugin.dataViewIntegration) == null ? void 0 : _a.isDataViewAvailable()) || false;
    const statusEl = containerEl.createDiv("dataview-status");
    if (isDataViewAvailable) {
      statusEl.addClass("status-success");
      statusEl.innerHTML = "\u2705 DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u5229\u7528\u53EF\u80FD\u3067\u3059";
    } else {
      statusEl.addClass("status-warning");
      statusEl.innerHTML = "\u26A0\uFE0F DataView\u30D7\u30E9\u30B0\u30A4\u30F3\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093";
    }
    if (isDataViewAvailable) {
      this.plugin.dataViewIntegration.generateStatistics().then((stats) => {
        const statsEl = containerEl.createDiv("dataview-stats");
        statsEl.createEl("h4", { text: "\u30C7\u30FC\u30BF\u7D71\u8A08" });
        statsEl.createEl("p", { text: `\u691C\u51FA\u3055\u308C\u305FBuffer Calc\u8A08\u7B97: ${stats.totalCalculations} \u4EF6` });
        statsEl.createEl("p", { text: `\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97: ${stats.bufferCount} \u4EF6` });
        statsEl.createEl("p", { text: `\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97: ${stats.stockCount} \u4EF6` });
        statsEl.createEl("p", { text: `\u5E0C\u91C8\u8A08\u7B97: ${stats.dilutionCount} \u4EF6` });
      }).catch((error) => {
        const errorEl = containerEl.createDiv("dataview-error");
        errorEl.setText("\u30C7\u30FC\u30BF\u306E\u8AAD\u307F\u8FBC\u307F\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
      });
    }
  }
  addImportExportSettings() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u8A2D\u5B9A\u306E\u30A4\u30F3\u30DD\u30FC\u30C8/\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8" });
    containerEl.createEl("p", {
      text: "\u8A2D\u5B9A\u3001\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u3001\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u306E\u5305\u62EC\u7684\u306A\u30A4\u30F3\u30DD\u30FC\u30C8/\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u6A5F\u80FD",
      cls: "setting-item-description"
    });
    new import_obsidian7.Setting(containerEl).setName("\u30A4\u30F3\u30DD\u30FC\u30C8/\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u7BA1\u7406").setDesc("\u8A2D\u5B9A\u3001\u30AB\u30B9\u30BF\u30E0\u8A66\u85AC\u3001\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u4E00\u62EC\u3067\u30A4\u30F3\u30DD\u30FC\u30C8/\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u307E\u3059").addButton((button) => {
      button.setButtonText("\u7BA1\u7406\u753B\u9762\u3092\u958B\u304F").setClass("mod-cta").onClick(() => {
        const modal = new SettingsImportExportModal(
          this.app,
          this.plugin.settings,
          this.plugin.settings.customReagents || [],
          this.plugin.settings.recipeTemplates || [],
          async (newSettings) => {
            this.plugin.settings = newSettings;
            await this.plugin.saveSettings();
            this.display();
            new import_obsidian7.Notice("\u8A2D\u5B9A\u304C\u66F4\u65B0\u3055\u308C\u307E\u3057\u305F");
          }
        );
        modal.open();
      });
    });
  }
  addDataManagement() {
    const { containerEl } = this;
    containerEl.createEl("h2", { text: "\u30C7\u30FC\u30BF\u7BA1\u7406" });
    new import_obsidian7.Setting(containerEl).setName("\u8A2D\u5B9A\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8").setDesc("\u30D7\u30E9\u30B0\u30A4\u30F3\u8A2D\u5B9A\u3092\u30D5\u30A1\u30A4\u30EB\u306B\u51FA\u529B\u3057\u307E\u3059").addButton((button) => {
      button.setButtonText("\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8").onClick(() => {
        this.exportSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u8A2D\u5B9A\u3092\u30A4\u30F3\u30DD\u30FC\u30C8").setDesc("\u30D5\u30A1\u30A4\u30EB\u304B\u3089\u30D7\u30E9\u30B0\u30A4\u30F3\u8A2D\u5B9A\u3092\u8AAD\u307F\u8FBC\u307F\u307E\u3059").addButton((button) => {
      button.setButtonText("\u30A4\u30F3\u30DD\u30FC\u30C8").onClick(() => {
        this.importSettings();
      });
    });
    new import_obsidian7.Setting(containerEl).setName("\u8A2D\u5B9A\u3092\u30EA\u30BB\u30C3\u30C8").setDesc("\u3059\u3079\u3066\u306E\u8A2D\u5B9A\u3092\u30C7\u30D5\u30A9\u30EB\u30C8\u5024\u306B\u30EA\u30BB\u30C3\u30C8\u3057\u307E\u3059").addButton((button) => {
      button.setButtonText("\u30EA\u30BB\u30C3\u30C8").setClass("mod-destructive").onClick(async () => {
        if (confirm("\u3059\u3079\u3066\u306E\u8A2D\u5B9A\u3092\u30C7\u30D5\u30A9\u30EB\u30C8\u306B\u30EA\u30BB\u30C3\u30C8\u3057\u307E\u3059\u304B\uFF1F\u3053\u306E\u64CD\u4F5C\u306F\u53D6\u308A\u6D88\u305B\u307E\u305B\u3093\u3002")) {
          this.plugin.settings = { ...this.plugin.settings, ...(init_types(), __toCommonJS(types_exports)).DEFAULT_SETTINGS };
          await this.plugin.saveSettings();
          this.display();
          new import_obsidian7.Notice("\u8A2D\u5B9A\u3092\u30C7\u30D5\u30A9\u30EB\u30C8\u306B\u30EA\u30BB\u30C3\u30C8\u3057\u307E\u3057\u305F");
        }
      });
    });
  }
  openReagentEditor(reagent, index, callback) {
    const modal = new ReagentEditorModal(
      this.app,
      reagent,
      this.plugin.settings,
      async (updatedReagent) => {
        if (index >= 0) {
          this.plugin.settings.customReagents[index] = updatedReagent;
        } else {
          this.plugin.settings.customReagents.push(updatedReagent);
        }
        await this.plugin.saveSettings();
        callback();
        new import_obsidian7.Notice(`\u8A66\u85AC\u3092${reagent ? "\u66F4\u65B0" : "\u8FFD\u52A0"}\u3057\u307E\u3057\u305F`);
      }
    );
    modal.open();
  }
  async exportSettings() {
    try {
      const data = JSON.stringify(this.plugin.settings, null, 2);
      const blob = new Blob([data], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "buffer-calc-settings.json";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      new import_obsidian7.Notice("\u8A2D\u5B9A\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u307E\u3057\u305F");
    } catch (error) {
      new import_obsidian7.Notice("\u8A2D\u5B9A\u306E\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
      console.error("Export error:", error);
    }
  }
  async importSettings() {
    const input = document.createElement("input");
    input.type = "file";
    input.accept = ".json";
    input.onchange = (e) => {
      const file = e.target.files[0];
      if (!file)
        return;
      const reader = new FileReader();
      reader.onload = async (e2) => {
        try {
          const imported = JSON.parse(e2.target.result);
          this.plugin.settings = { ...this.plugin.settings, ...imported };
          await this.plugin.saveSettings();
          this.display();
          new import_obsidian7.Notice("\u8A2D\u5B9A\u3092\u30A4\u30F3\u30DD\u30FC\u30C8\u3057\u307E\u3057\u305F");
        } catch (error) {
          new import_obsidian7.Notice("\u7121\u52B9\u306A\u8A2D\u5B9A\u30D5\u30A1\u30A4\u30EB\u3067\u3059");
          console.error("Import error:", error);
        }
      };
      reader.readAsText(file);
    };
    input.click();
  }
};
var ReagentEditorModal = class extends import_obsidian7.Modal {
  constructor(app, reagent, settings, onSave) {
    super(app);
    this.reagent = reagent;
    this.settings = settings;
    this.onSave = onSave;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: this.reagent ? "\u8A66\u85AC\u3092\u7DE8\u96C6" : "\u65B0\u3057\u3044\u8A66\u85AC\u3092\u8FFD\u52A0" });
    new import_obsidian7.Setting(contentEl).setName("\u8A66\u85AC\u540D").setDesc("\u8A66\u85AC\u306E\u4E00\u822C\u540D").addText((text) => {
      var _a;
      this.nameInput = text;
      text.setValue(((_a = this.reagent) == null ? void 0 : _a.name) || "").setPlaceholder("e.g., Tris-HCl");
    });
    new import_obsidian7.Setting(contentEl).setName("\u5206\u5B50\u91CF").setDesc("\u5206\u5B50\u91CF\uFF08g/mol\uFF09").addText((text) => {
      var _a, _b;
      this.mwInput = text;
      text.setValue(((_b = (_a = this.reagent) == null ? void 0 : _a.molecularWeight) == null ? void 0 : _b.toString()) || "").setPlaceholder("e.g., 157.6");
    });
    new import_obsidian7.Setting(contentEl).setName("CAS\u756A\u53F7").setDesc("CAS\u767B\u9332\u756A\u53F7\uFF08\u4EFB\u610F\uFF09").addText((text) => {
      var _a;
      this.casInput = text;
      text.setValue(((_a = this.reagent) == null ? void 0 : _a.cas) || "").setPlaceholder("e.g., 77-86-1");
    });
    new import_obsidian7.Setting(contentEl).setName("\u30AB\u30C6\u30B4\u30EA\u30FC").setDesc("\u8A66\u85AC\u306E\u30AB\u30C6\u30B4\u30EA\u30FC\uFF08\u30AA\u30D7\u30B7\u30E7\u30F3\uFF09").addDropdown((dropdown) => {
      var _a, _b;
      this.categorySelect = dropdown;
      dropdown.addOption("", "\u30AB\u30C6\u30B4\u30EA\u30FC\u306A\u3057");
      const allCategories = CategoryManager.getAllCategories(this.settings);
      allCategories.forEach((category) => {
        dropdown.addOption(category.id, `${category.icon || "\u{1F4C2}"} ${category.name}`);
      });
      const currentCategory = ((_a = this.reagent) == null ? void 0 : _a.category) || "";
      const suggestedCategory = this.reagent ? "" : CategoryManager.suggestCategory(((_b = this.nameInput) == null ? void 0 : _b.getValue()) || "");
      dropdown.setValue(currentCategory || suggestedCategory);
    });
    const buttonContainer = contentEl.createEl("div", { cls: "buffer-calc-modal-buttons" });
    const saveButton = buttonContainer.createEl("button", { text: "\u4FDD\u5B58", cls: "mod-cta" });
    saveButton.addEventListener("click", () => this.save());
    const cancelButton = buttonContainer.createEl("button", { text: "\u30AD\u30E3\u30F3\u30BB\u30EB" });
    cancelButton.addEventListener("click", () => this.close());
  }
  save() {
    const name = this.nameInput.getValue().trim();
    const mw = parseFloat(this.mwInput.getValue());
    if (!name) {
      new import_obsidian7.Notice("\u8A66\u85AC\u540D\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
      return;
    }
    if (isNaN(mw) || mw <= 0) {
      new import_obsidian7.Notice("\u6709\u52B9\u306A\u5206\u5B50\u91CF\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
      return;
    }
    const reagent = {
      name,
      molecularWeight: mw,
      cas: this.casInput.getValue().trim() || void 0,
      category: this.categorySelect.getValue() || void 0
    };
    this.onSave(reagent);
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/calculations/engine.ts
init_types();

// src/utils/conversions.ts
init_types();
var ConversionUtils = class {
  /**
   * Convert volume between different units
   */
  static convertVolume(value, fromUnit, toUnit) {
    if (fromUnit === toUnit)
      return value;
    const inLiters = value / VOLUME_CONVERSION_FACTORS[fromUnit];
    return inLiters * VOLUME_CONVERSION_FACTORS[toUnit];
  }
  /**
   * Convert mass between different units
   */
  static convertMass(value, fromUnit, toUnit) {
    if (fromUnit === toUnit)
      return value;
    const inGrams = value / MASS_CONVERSION_FACTORS[fromUnit];
    return inGrams * MASS_CONVERSION_FACTORS[toUnit];
  }
  /**
   * Convert concentration between molar units (M, mM, µM, nM)
   */
  static convertMolarConcentration(value, fromUnit, toUnit) {
    if (fromUnit === toUnit)
      return value;
    const molarUnits = [
      "M" /* MOLAR */,
      "mM" /* MILLIMOLAR */,
      "\xB5M" /* MICROMOLAR */,
      "nM" /* NANOMOLAR */
    ];
    if (!molarUnits.includes(fromUnit) || !molarUnits.includes(toUnit)) {
      throw new Error("Can only convert between molar concentration units (M, mM, \xB5M, nM)");
    }
    const inMolar = value / CONCENTRATION_CONVERSION_FACTORS[fromUnit];
    return inMolar * CONCENTRATION_CONVERSION_FACTORS[toUnit];
  }
  /**
   * Convert concentration to molarity (requires molecular weight for non-molar units)
   */
  static convertToMolarity(value, unit, molecularWeight) {
    const molarUnits = [
      "M" /* MOLAR */,
      "mM" /* MILLIMOLAR */,
      "\xB5M" /* MICROMOLAR */,
      "nM" /* NANOMOLAR */
    ];
    if (molarUnits.includes(unit)) {
      return this.convertMolarConcentration(value, unit, "M" /* MOLAR */);
    }
    if (!molecularWeight || molecularWeight <= 0) {
      throw new Error("Molecular weight is required to convert from mass-based concentrations to molarity");
    }
    throw new Error(`Only M-series concentration units are supported`);
  }
  /**
   * Format number with appropriate decimal places
   */
  static formatNumber(value, decimalPlaces = 2) {
    return Number(value.toFixed(decimalPlaces)).toString();
  }
  /**
   * Get the most appropriate volume unit for display
   */
  static optimizeVolumeDisplay(volume, unit) {
    const conversions = [
      { unit: "L" /* LITER */, min: 1, max: Infinity },
      { unit: "mL" /* MILLILITER */, min: 1, max: 1e3 },
      { unit: "\xB5L" /* MICROLITER */, min: 1, max: 1e3 },
      { unit: "nL" /* NANOLITER */, min: 0, max: 1e3 }
    ];
    for (const conversion of conversions) {
      const convertedValue = this.convertVolume(volume, unit, conversion.unit);
      if (convertedValue >= conversion.min && convertedValue < conversion.max) {
        return { value: convertedValue, unit: conversion.unit };
      }
    }
    return { value: volume, unit };
  }
  /**
   * Get the most appropriate mass unit for display
   */
  static optimizeMassDisplay(mass, unit) {
    const conversions = [
      { unit: "g" /* GRAM */, min: 1, max: Infinity },
      { unit: "mg" /* MILLIGRAM */, min: 1, max: 1e3 },
      { unit: "\xB5g" /* MICROGRAM */, min: 1, max: 1e3 },
      { unit: "ng" /* NANOGRAM */, min: 0, max: 1e3 }
    ];
    for (const conversion of conversions) {
      const convertedValue = this.convertMass(mass, unit, conversion.unit);
      if (convertedValue >= conversion.min && convertedValue < conversion.max) {
        return { value: convertedValue, unit: conversion.unit };
      }
    }
    return { value: mass, unit };
  }
  /**
   * Calculate dilution factor
   */
  static calculateDilutionFactor(stockConc, finalConc) {
    if (finalConc <= 0) {
      throw new Error("Final concentration must be greater than 0");
    }
    return stockConc / finalConc;
  }
  /**
   * Validate that a concentration conversion is possible
   */
  static canConvertConcentration(fromUnit, toUnit) {
    const molarUnits = [
      "M" /* MOLAR */,
      "mM" /* MILLIMOLAR */,
      "\xB5M" /* MICROMOLAR */,
      "nM" /* NANOMOLAR */
    ];
    return molarUnits.includes(fromUnit) && molarUnits.includes(toUnit);
  }
  /**
   * Get human-readable unit names
   */
  static getUnitDisplayName(unit) {
    const displayNames = {
      // Volume units
      ["L" /* LITER */]: "Liter",
      ["mL" /* MILLILITER */]: "Milliliter",
      ["\xB5L" /* MICROLITER */]: "Microliter",
      ["nL" /* NANOLITER */]: "Nanoliter",
      // Concentration units (M-series only)
      ["M" /* MOLAR */]: "Molar",
      ["mM" /* MILLIMOLAR */]: "Millimolar",
      ["\xB5M" /* MICROMOLAR */]: "Micromolar",
      ["nM" /* NANOMOLAR */]: "Nanomolar",
      // Mass units
      ["g" /* GRAM */]: "Gram",
      ["mg" /* MILLIGRAM */]: "Milligram",
      ["\xB5g" /* MICROGRAM */]: "Microgram",
      ["ng" /* NANOGRAM */]: "Nanogram"
    };
    return displayNames[unit] || unit;
  }
  /**
   * Validate numeric input
   */
  static validatePositiveNumber(value, fieldName) {
    const num = Number(value);
    if (isNaN(num) || num <= 0) {
      throw new Error(`${fieldName} must be a positive number`);
    }
    return num;
  }
  /**
   * Validate non-negative numeric input
   */
  static validateNonNegativeNumber(value, fieldName) {
    const num = Number(value);
    if (isNaN(num) || num < 0) {
      throw new Error(`${fieldName} must be a non-negative number`);
    }
    return num;
  }
};

// src/calculations/engine.ts
var CalculationEngine = class {
  constructor(settings) {
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  calculateBuffer(data) {
    const errors = [];
    const warnings = [];
    const calculationSteps = [];
    const components = [];
    this.validateBufferData(data, errors);
    if (errors.length > 0) {
      return {
        recipe: this.createBufferRecipe(data),
        components: [],
        solventVolume: 0,
        warnings,
        errors,
        calculationSteps
      };
    }
    const totalVolumeL = this.convertVolume(
      data.totalVolume,
      data.volumeUnit || this.settings.defaultVolumeUnit,
      "L" /* LITER */
    );
    let step = 1;
    let totalComponentVolume = 0;
    const componentList = Array.isArray(data.components) ? data.components : [];
    componentList.forEach((component, index) => {
      try {
        const calculatedComponent = this.calculateComponent(
          component,
          totalVolumeL,
          index,
          warnings,
          calculationSteps,
          step
        );
        components.push(calculatedComponent);
        totalComponentVolume += calculatedComponent.volumeNeeded;
        step += 2;
      } catch (error) {
        errors.push({
          type: "calculation_error" /* CALCULATION_ERROR */,
          message: `\u6210\u5206 ${component.name} \u306E\u8A08\u7B97\u30A8\u30E9\u30FC: ${error.message}`,
          componentIndex: index
        });
      }
    });
    const solventVolumeL = Math.max(0, totalVolumeL - totalComponentVolume);
    const solventVolume = this.convertVolume(solventVolumeL, "L" /* LITER */, data.volumeUnit || this.settings.defaultVolumeUnit);
    console.log("Solvent calculation debug:");
    console.log("- Total volume (L):", totalVolumeL);
    console.log("- Total component volume (L):", totalComponentVolume);
    console.log("- Solvent volume (L):", solventVolumeL);
    console.log("- Solvent volume (display unit):", solventVolume);
    if (this.settings.showCalculationSteps) {
      calculationSteps.push({
        step,
        description: `Calculate solvent volume`,
        formula: `Solvent volume = Total volume - Sum of component volumes`,
        result: solventVolume,
        unit: data.volumeUnit || this.settings.defaultVolumeUnit
      });
    }
    if (solventVolumeL < 0) {
      warnings.push({
        type: "volume_overflow" /* VOLUME_OVERFLOW */,
        message: "\u6210\u5206\u306E\u4F53\u7A4D\u304C\u7DCF\u4F53\u7A4D\u3092\u8D85\u3048\u3066\u3044\u307E\u3059\u3002\u7DCF\u4F53\u7A4D\u3092\u5897\u3084\u3059\u3053\u3068\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
        severity: "high"
      });
    }
    if (solventVolumeL < totalVolumeL * 0.1) {
      warnings.push({
        type: "small_volume" /* SMALL_VOLUME */,
        message: "\u6EB6\u5A92\u306E\u4F53\u7A4D\u304C\u975E\u5E38\u306B\u5C0F\u3055\u304F\u306A\u3063\u3066\u3044\u307E\u3059\u3002\u6210\u5206\u6FC3\u5EA6\u3092\u4E0B\u3052\u308B\u3053\u3068\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
        severity: "medium"
      });
    }
    const finalResult = {
      recipe: this.createBufferRecipe(data),
      components,
      solventVolume: Math.max(0, solventVolume),
      warnings,
      errors,
      calculationSteps: this.settings.showCalculationSteps ? calculationSteps : void 0
    };
    console.log("Final calculation result:", finalResult);
    return finalResult;
  }
  calculateComponent(component, totalVolumeL, index, warnings, calculationSteps, step) {
    const stockConcM = this.convertConcentration(
      component.stockConc,
      component.stockUnit,
      "M" /* MOLAR */
    );
    const finalConcM = this.convertConcentration(
      component.finalConc,
      component.finalUnit,
      "M" /* MOLAR */
    );
    if (finalConcM > stockConcM) {
      throw new Error(`\u6700\u7D42\u6FC3\u5EA6 (${component.finalConc} ${component.finalUnit}) \u306F\u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6 (${component.stockConc} ${component.stockUnit}) \u3088\u308A\u9AD8\u304F\u3059\u308B\u3053\u3068\u306F\u3067\u304D\u307E\u305B\u3093`);
    }
    const requiredVolumeL = finalConcM * totalVolumeL / stockConcM;
    const requiredVolume = this.convertVolume(
      requiredVolumeL,
      "L" /* LITER */,
      this.settings.defaultVolumeUnit
    );
    if (this.settings.showCalculationSteps) {
      calculationSteps.push({
        step,
        description: `Calculate ${component.name} volume`,
        formula: `V\u2081 = (C\u2082 \xD7 V\u2082) / C\u2081 = (${finalConcM} M \xD7 ${totalVolumeL} L) / ${stockConcM} M`,
        result: requiredVolumeL,
        unit: "L" /* LITER */
      });
      calculationSteps.push({
        step: step + 1,
        description: `Convert to ${this.settings.defaultVolumeUnit}`,
        formula: `${requiredVolumeL} L \xD7 ${VOLUME_CONVERSION_FACTORS[this.settings.defaultVolumeUnit]}`,
        result: requiredVolume,
        unit: this.settings.defaultVolumeUnit
      });
    }
    this.generateComponentWarnings(component, requiredVolume, stockConcM, finalConcM, warnings, index);
    const percentOfTotal = requiredVolumeL / totalVolumeL * 100;
    return {
      reagent: {
        name: component.name,
        molecularWeight: 0
        // Will be filled from database
      },
      stockConcentration: component.stockConc,
      stockConcentrationUnit: component.stockUnit,
      finalConcentration: component.finalConc,
      finalConcentrationUnit: component.finalUnit,
      volumeNeeded: requiredVolumeL,
      // Use liters for calculation consistency
      volumeUnit: this.settings.defaultVolumeUnit,
      optimizedVolumeDisplay: this.optimizeVolumeDisplay(requiredVolume, this.settings.defaultVolumeUnit),
      percentOfTotal: Math.round(percentOfTotal * 100) / 100,
      lotNumber: component.lotNumber
    };
  }
  calculateStock(data) {
    const errors = [];
    const warnings = [];
    const calculationSteps = [];
    if (!data.molecularWeight || data.molecularWeight <= 0) {
      errors.push({
        type: "invalid_molecular_weight" /* INVALID_MOLECULAR_WEIGHT */,
        message: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97\u306B\u306F\u6709\u52B9\u306A\u5206\u5B50\u91CF\u304C\u5FC5\u8981\u3067\u3059",
        field: "molecularWeight"
      });
    }
    if (errors.length > 0) {
      return {
        recipe: {
          id: "",
          name: `${data.reagentName} \u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2`,
          totalVolume: data.volume,
          totalVolumeUnit: data.volumeUnit,
          components: [],
          createdAt: new Date(),
          updatedAt: new Date()
        },
        components: [],
        solventVolume: 0,
        warnings,
        errors,
        calculationSteps
      };
    }
    const volumeL = this.convertVolume(data.volume, data.volumeUnit, "L" /* LITER */);
    const concentrationM = this.convertConcentration(
      data.targetConcentration,
      data.concentrationUnit,
      "M" /* MOLAR */
    );
    let massG = concentrationM * volumeL * data.molecularWeight;
    if (data.purity && data.purity > 0 && data.purity < 100) {
      massG = massG / (data.purity / 100);
    }
    const { mass: optimizedMass, unit: massUnit } = this.optimizeMassDisplay(massG);
    if (this.settings.showCalculationSteps) {
      calculationSteps.push({
        step: 1,
        description: "\u5FC5\u8981\u8CEA\u91CF\u3092\u8A08\u7B97",
        formula: `\u8CEA\u91CF = \u6FC3\u5EA6 \xD7 \u4F53\u7A4D \xD7 \u5206\u5B50\u91CF = ${concentrationM} mol/L \xD7 ${volumeL} L \xD7 ${data.molecularWeight} g/mol`,
        result: massG,
        unit: "g" /* GRAM */
      });
      if (data.purity && data.purity !== 100) {
        calculationSteps.push({
          step: 2,
          description: "\u7D14\u5EA6\u88DC\u6B63",
          formula: `\u88DC\u6B63\u8CEA\u91CF = ${massG} g / (${data.purity}% / 100%)`,
          result: massG / (data.purity / 100),
          unit: "g" /* GRAM */
        });
      }
    }
    if (massG < 1e-3) {
      warnings.push({
        type: "small_volume" /* SMALL_VOLUME */,
        message: "\u975E\u5E38\u306B\u5C0F\u3055\u3044\u8CEA\u91CF\u304C\u5FC5\u8981\u3067\u3059\u3002\u3088\u308A\u5E0C\u8584\u306A\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u306E\u4F5C\u6210\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
        severity: "medium"
      });
    }
    if (massG > 10) {
      warnings.push({
        type: "large_volume" /* LARGE_VOLUME */,
        message: "\u5927\u304D\u3044\u8CEA\u91CF\u304C\u5FC5\u8981\u3067\u3059\u3002\u3088\u308A\u5C0F\u3055\u3044\u4F53\u7A4D\u307E\u305F\u306F\u3088\u308A\u6FC3\u7E2E\u3055\u308C\u305F\u30B9\u30C8\u30C3\u30AF\u306E\u4F5C\u6210\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
        severity: "low"
      });
    }
    const component = {
      reagent: {
        name: data.reagentName,
        molecularWeight: data.molecularWeight
      },
      stockConcentration: data.targetConcentration,
      stockConcentrationUnit: data.concentrationUnit,
      finalConcentration: data.targetConcentration,
      finalConcentrationUnit: data.concentrationUnit,
      volumeNeeded: optimizedMass,
      volumeUnit: massUnit,
      optimizedVolumeDisplay: `${this.formatNumber(optimizedMass)} ${massUnit}`,
      percentOfTotal: 100,
      massEquivalent: optimizedMass,
      massUnit
    };
    return {
      recipe: {
        id: "",
        name: `${data.reagentName} \u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2`,
        totalVolume: data.volume,
        totalVolumeUnit: data.volumeUnit,
        components: [component],
        createdAt: new Date(),
        updatedAt: new Date()
      },
      components: [component],
      solventVolume: data.volume,
      // The entire volume is solvent + solute
      warnings,
      errors,
      calculationSteps: this.settings.showCalculationSteps ? calculationSteps : void 0
    };
  }
  validateBufferData(data, errors) {
    if (!data.totalVolume || data.totalVolume <= 0) {
      errors.push({
        type: "negative_value" /* NEGATIVE_VALUE */,
        message: "Total volume must be greater than 0",
        field: "totalVolume"
      });
    }
    if (!Array.isArray(data.components) || data.components.length === 0) {
      errors.push({
        type: "missing_required_field" /* MISSING_REQUIRED_FIELD */,
        message: "At least one component is required",
        field: "components"
      });
      return;
    }
    const validationComponents = Array.isArray(data.components) ? data.components : [];
    validationComponents.forEach((component, index) => {
      if (!component.name || component.name.trim() === "") {
        errors.push({
          type: "missing_required_field" /* MISSING_REQUIRED_FIELD */,
          message: "Component name is required",
          componentIndex: index,
          field: "name"
        });
      }
      if (!component.stockConc || component.stockConc <= 0) {
        errors.push({
          type: "negative_value" /* NEGATIVE_VALUE */,
          message: "Stock concentration must be greater than 0",
          componentIndex: index,
          field: "stockConc"
        });
      }
      if (!component.finalConc || component.finalConc <= 0) {
        errors.push({
          type: "negative_value" /* NEGATIVE_VALUE */,
          message: "Final concentration must be greater than 0",
          componentIndex: index,
          field: "finalConc"
        });
      }
    });
  }
  generateComponentWarnings(component, requiredVolume, stockConcM, finalConcM, warnings, index) {
    if (requiredVolume < 0.1) {
      warnings.push({
        type: "small_volume" /* SMALL_VOLUME */,
        message: `Very small volume required for ${component.name} (${this.formatNumber(requiredVolume)} ${this.settings.defaultVolumeUnit}). Consider using a more dilute stock.`,
        componentIndex: index,
        severity: "medium"
      });
    }
    const dilutionFactor = stockConcM / finalConcM;
    if (dilutionFactor > 1e3) {
      warnings.push({
        type: "unusual_dilution_factor" /* UNUSUAL_DILUTION_FACTOR */,
        message: `Very high dilution factor for ${component.name} (${Math.round(dilutionFactor)}\xD7). Consider using a more dilute stock.`,
        componentIndex: index,
        severity: "low"
      });
    }
  }
  convertVolume(value, fromUnit, toUnit) {
    if (fromUnit === toUnit)
      return value;
    const inLiters = value / VOLUME_CONVERSION_FACTORS[fromUnit];
    return inLiters * VOLUME_CONVERSION_FACTORS[toUnit];
  }
  convertConcentration(value, fromUnit, toUnit) {
    if (fromUnit === toUnit)
      return value;
    if (["M" /* MOLAR */, "mM" /* MILLIMOLAR */, "\xB5M" /* MICROMOLAR */, "nM" /* NANOMOLAR */].includes(fromUnit) && ["M" /* MOLAR */, "mM" /* MILLIMOLAR */, "\xB5M" /* MICROMOLAR */, "nM" /* NANOMOLAR */].includes(toUnit)) {
      const inMolar = value / CONCENTRATION_CONVERSION_FACTORS[fromUnit];
      return inMolar * CONCENTRATION_CONVERSION_FACTORS[toUnit];
    }
    return value;
  }
  optimizeVolumeDisplay(volume, unit) {
    const conversions = [
      { unit: "L" /* LITER */, threshold: 1 },
      { unit: "mL" /* MILLILITER */, threshold: 1 },
      { unit: "\xB5L" /* MICROLITER */, threshold: 1 },
      { unit: "nL" /* NANOLITER */, threshold: 1 }
    ];
    for (const conversion of conversions) {
      const convertedValue = this.convertVolume(volume, unit, conversion.unit);
      if (convertedValue >= conversion.threshold) {
        return `${this.formatNumber(convertedValue)} ${conversion.unit}`;
      }
    }
    return `${this.formatNumber(volume)} ${unit}`;
  }
  optimizeMassDisplay(massG) {
    if (massG >= 1) {
      return { mass: massG, unit: "g" /* GRAM */ };
    } else if (massG >= 1e-3) {
      return { mass: massG * 1e3, unit: "mg" /* MILLIGRAM */ };
    } else if (massG >= 1e-6) {
      return { mass: massG * 1e6, unit: "\xB5g" /* MICROGRAM */ };
    } else {
      return { mass: massG * 1e9, unit: "ng" /* NANOGRAM */ };
    }
  }
  formatNumber(value) {
    return Number(value.toFixed(this.settings.decimalPlaces)).toString();
  }
  createBufferRecipe(data) {
    return {
      id: "",
      name: data.name || "Untitled Buffer",
      totalVolume: data.totalVolume,
      totalVolumeUnit: data.volumeUnit || this.settings.defaultVolumeUnit,
      components: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }
  calculateDilution(data) {
    console.log("calculateDilution called with data:", data);
    const errors = [];
    const warnings = [];
    const calculationSteps = [];
    const stockConcentration = Number(data.stockConcentration);
    const finalConcentration = Number(data.finalConcentration);
    const finalVolume = Number(data.finalVolume);
    console.log("Converted values:", {
      stockConcentration,
      finalConcentration,
      finalVolume,
      originalTypes: {
        stockConcentration: typeof data.stockConcentration,
        finalConcentration: typeof data.finalConcentration,
        finalVolume: typeof data.finalVolume
      }
    });
    console.log("Validating stockConcentration:", stockConcentration, typeof stockConcentration);
    if (stockConcentration <= 0 || isNaN(stockConcentration)) {
      console.log("Stock concentration validation failed");
      errors.push({
        type: "invalid_concentration" /* INVALID_CONCENTRATION */,
        message: "\u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6\u306F0\u3088\u308A\u5927\u304D\u3044\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059",
        field: "stockConcentration"
      });
    }
    console.log("Validating finalConcentration:", finalConcentration, typeof finalConcentration);
    if (finalConcentration <= 0 || isNaN(finalConcentration)) {
      console.log("Final concentration validation failed");
      errors.push({
        type: "invalid_concentration" /* INVALID_CONCENTRATION */,
        message: "\u6700\u7D42\u6FC3\u5EA6\u306F0\u3088\u308A\u5927\u304D\u3044\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059",
        field: "finalConcentration"
      });
    }
    const stockConcForComparison = this.convertConcentration(
      stockConcentration,
      data.stockConcentrationUnit,
      "M" /* MOLAR */
    );
    const finalConcForComparison = this.convertConcentration(
      finalConcentration,
      data.finalConcentrationUnit,
      "M" /* MOLAR */
    );
    console.log("Checking concentration comparison after unit conversion:", {
      finalConc: finalConcForComparison,
      stockConc: stockConcForComparison,
      originalFinal: finalConcentration,
      originalStock: stockConcentration,
      finalUnit: data.finalConcentrationUnit,
      stockUnit: data.stockConcentrationUnit
    });
    if (finalConcForComparison >= stockConcForComparison) {
      console.log("Concentration comparison validation failed");
      errors.push({
        type: "invalid_concentration" /* INVALID_CONCENTRATION */,
        message: "\u6700\u7D42\u6FC3\u5EA6\u306F\u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6\u3088\u308A\u5C0F\u3055\u3044\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059",
        field: "finalConcentration"
      });
    }
    console.log("Validating finalVolume:", finalVolume, typeof finalVolume);
    if (finalVolume <= 0 || isNaN(finalVolume)) {
      console.log("Final volume validation failed");
      errors.push({
        type: "invalid_volume" /* INVALID_VOLUME */,
        message: "\u6700\u7D42\u4F53\u7A4D\u306F0\u3088\u308A\u5927\u304D\u3044\u5FC5\u8981\u304C\u3042\u308A\u307E\u3059",
        field: "finalVolume"
      });
    }
    if (errors.length > 0) {
      console.log("Validation errors found:", errors);
      return {
        recipe: {
          id: "",
          name: data.name || "\u5E0C\u91C8\u8A08\u7B97",
          totalVolume: data.finalVolume,
          totalVolumeUnit: data.volumeUnit,
          components: [],
          createdAt: new Date(),
          updatedAt: new Date()
        },
        components: [],
        solventVolume: 0,
        warnings,
        errors,
        calculationSteps
      };
    }
    const stockConcM = this.convertConcentration(
      stockConcentration,
      data.stockConcentrationUnit,
      "M" /* MOLAR */
    );
    const finalConcM = this.convertConcentration(
      finalConcentration,
      data.finalConcentrationUnit,
      "M" /* MOLAR */
    );
    const finalVolumeL = this.convertVolume(finalVolume, data.volumeUnit, "L" /* LITER */);
    const dilutionFactor = stockConcM / finalConcM;
    const stockVolumeNeededL = finalConcM * finalVolumeL / stockConcM;
    const solventVolumeL = finalVolumeL - stockVolumeNeededL;
    const stockVolumeNeeded = this.convertVolume(stockVolumeNeededL, "L" /* LITER */, data.volumeUnit);
    const solventVolume = this.convertVolume(solventVolumeL, "L" /* LITER */, data.volumeUnit);
    if (this.settings.showCalculationSteps) {
      calculationSteps.push({
        step: 1,
        description: "\u5E0C\u91C8\u500D\u7387\u3092\u8A08\u7B97",
        formula: `\u5E0C\u91C8\u500D\u7387 = \u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6 / \u6700\u7D42\u6FC3\u5EA6 = ${stockConcM} M / ${finalConcM} M`,
        result: dilutionFactor,
        unit: ""
      });
      calculationSteps.push({
        step: 2,
        description: "\u5FC5\u8981\u306A\u30B9\u30C8\u30C3\u30AF\u4F53\u7A4D\u3092\u8A08\u7B97 (C1V1 = C2V2)",
        formula: `V1 = (C2 \xD7 V2) / C1 = (${finalConcM} M \xD7 ${finalVolumeL} L) / ${stockConcM} M`,
        result: stockVolumeNeededL,
        unit: "L" /* LITER */
      });
      calculationSteps.push({
        step: 3,
        description: "\u6EB6\u5A92\u4F53\u7A4D\u3092\u8A08\u7B97",
        formula: `\u6EB6\u5A92\u4F53\u7A4D = \u6700\u7D42\u4F53\u7A4D - \u30B9\u30C8\u30C3\u30AF\u4F53\u7A4D = ${finalVolumeL} L - ${stockVolumeNeededL} L`,
        result: solventVolumeL,
        unit: "L" /* LITER */
      });
    }
    if (dilutionFactor < 2) {
      warnings.push({
        type: "small_volume" /* SMALL_VOLUME */,
        message: "\u5E0C\u91C8\u500D\u7387\u304C\u5C0F\u3055\u3059\u304E\u307E\u3059\u3002\u3088\u308A\u5927\u304D\u306A\u5E0C\u91C8\u500D\u7387\u3092\u691C\u8A0E\u3057\u3066\u304F\u3060\u3055\u3044\u3002",
        severity: "medium"
      });
    }
    if (stockVolumeNeededL < 1e-3) {
      warnings.push({
        type: "small_volume" /* SMALL_VOLUME */,
        message: "\u5FC5\u8981\u306A\u30B9\u30C8\u30C3\u30AF\u4F53\u7A4D\u304C\u975E\u5E38\u306B\u5C0F\u3055\u3044\u3067\u3059\u3002\u30D4\u30DA\u30C3\u30C6\u30A3\u30F3\u30B0\u304C\u56F0\u96E3\u306A\u53EF\u80FD\u6027\u304C\u3042\u308A\u307E\u3059\u3002",
        severity: "medium"
      });
    }
    const component = {
      reagent: {
        name: data.name || "\u8A66\u85AC",
        molecularWeight: 0
      },
      stockConcentration,
      stockConcentrationUnit: data.stockConcentrationUnit,
      finalConcentration,
      finalConcentrationUnit: data.finalConcentrationUnit,
      volumeNeeded: stockVolumeNeededL,
      volumeUnit: data.volumeUnit,
      optimizedVolumeDisplay: (() => {
        const optimized = ConversionUtils.optimizeVolumeDisplay(stockVolumeNeeded, data.volumeUnit);
        return `${optimized.value.toFixed(this.settings.decimalPlaces)} ${optimized.unit}`;
      })(),
      percentOfTotal: stockVolumeNeededL / finalVolumeL * 100
    };
    return {
      recipe: {
        id: "",
        name: data.name || "\u5E0C\u91C8\u8A08\u7B97",
        totalVolume: finalVolume,
        totalVolumeUnit: data.volumeUnit,
        components: [component],
        createdAt: new Date(),
        updatedAt: new Date()
      },
      components: [component],
      solventVolume,
      warnings,
      errors,
      calculationSteps
    };
  }
  calculateSerialDilution(data) {
    const errors = [];
    const warnings = [];
    const steps = [];
    const cellAdditionInstructions = [];
    this.validateSerialDilutionData(data, errors);
    if (errors.length > 0) {
      return {
        steps: [],
        cellAdditionInstructions: [],
        warnings,
        errors,
        protocolSummary: {
          totalSteps: 0,
          totalVolume: 0,
          volumeUnit: data.dilutionVolumeUnit,
          highestDilutionFactor: 0,
          estimatedTime: "0 min",
          requiredTubes: 0
        }
      };
    }
    const stockConcM = this.convertConcentration(
      data.stockConcentration,
      data.stockUnit,
      "M" /* MOLAR */
    );
    const targetConcsM = data.targetConcentrations.map(
      (conc) => this.convertConcentration(conc, data.targetUnit, "M" /* MOLAR */)
    );
    const sortedTargetsM = targetConcsM.sort((a, b) => b - a);
    const dilutionVolumeL = this.convertVolume(
      data.dilutionVolume,
      data.dilutionVolumeUnit,
      "L" /* LITER */
    );
    const cellVolumeL = this.convertVolume(
      data.cellVolume,
      data.cellVolumeUnit,
      "L" /* LITER */
    );
    const additionVolumeL = this.convertVolume(
      data.additionVolume,
      data.additionVolumeUnit,
      "L" /* LITER */
    );
    const dilutionPlan = this.planSerialDilution(
      stockConcM,
      sortedTargetsM,
      dilutionVolumeL,
      cellVolumeL,
      additionVolumeL
    );
    let currentConc = stockConcM;
    let stepNumber = 1;
    for (const planStep of dilutionPlan) {
      const targetConc = planStep.targetConcentration;
      const dilutionFactor = currentConc / targetConc;
      const stockVolumeNeeded = dilutionVolumeL / dilutionFactor;
      const solventVolumeNeeded = dilutionVolumeL - stockVolumeNeeded;
      const step = {
        stepNumber,
        name: `Step ${stepNumber}`,
        fromConcentration: this.convertConcentration(currentConc, "M" /* MOLAR */, data.stockUnit),
        toConcentration: this.convertConcentration(targetConc, "M" /* MOLAR */, data.targetUnit),
        concentrationUnit: data.targetUnit,
        stockVolume: this.convertVolume(stockVolumeNeeded, "L" /* LITER */, data.dilutionVolumeUnit),
        solventVolume: this.convertVolume(solventVolumeNeeded, "L" /* LITER */, data.dilutionVolumeUnit),
        totalVolume: this.convertVolume(dilutionVolumeL, "L" /* LITER */, data.dilutionVolumeUnit),
        volumeUnit: data.dilutionVolumeUnit,
        dilutionFactor,
        isIntermediateStep: false,
        description: this.generateStepDescription(
          this.convertConcentration(currentConc, "M" /* MOLAR */, data.stockUnit),
          this.convertConcentration(targetConc, "M" /* MOLAR */, data.targetUnit),
          this.convertVolume(stockVolumeNeeded, "L" /* LITER */, data.dilutionVolumeUnit),
          this.convertVolume(solventVolumeNeeded, "L" /* LITER */, data.dilutionVolumeUnit),
          data.stockUnit,
          data.targetUnit,
          data.dilutionVolumeUnit,
          stepNumber === 1
        )
      };
      steps.push(step);
      stepNumber++;
      currentConc = targetConc;
    }
    this.checkSerialDilutionWarnings(data, steps, warnings);
    const protocolSummary = {
      totalSteps: steps.length,
      totalVolume: steps.reduce((sum, step) => sum + step.totalVolume, 0),
      volumeUnit: data.dilutionVolumeUnit,
      highestDilutionFactor: Math.max(...steps.map((s) => s.dilutionFactor)),
      estimatedTime: this.estimateProtocolTime(steps.length),
      requiredTubes: steps.length + 1
      // +1 for stock
    };
    const exportData = {
      dilutionTable: this.generateDilutionTable(steps),
      additionTable: this.generateAdditionTable(cellAdditionInstructions),
      csvFormat: this.generateCSVExport(steps, cellAdditionInstructions),
      markdownFormat: this.generateMarkdownExport(steps, cellAdditionInstructions, protocolSummary)
    };
    return {
      steps,
      cellAdditionInstructions,
      warnings,
      errors,
      protocolSummary,
      exportData
    };
  }
  validateSerialDilutionData(data, errors) {
    if (!data.stockConcentration || data.stockConcentration <= 0) {
      errors.push({
        type: "invalid_concentration" /* INVALID_CONCENTRATION */,
        message: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u306E\u6FC3\u5EA6\u304C\u7121\u52B9\u3067\u3059",
        field: "stockConcentration"
      });
    }
    if (!data.cellVolume || data.cellVolume <= 0) {
      errors.push({
        type: "invalid_volume" /* INVALID_VOLUME */,
        message: "\u7D30\u80DE\u6EB6\u6DB2\u306E\u91CF\u304C\u7121\u52B9\u3067\u3059",
        field: "cellVolume"
      });
    }
    if (!data.additionVolume || data.additionVolume <= 0) {
      errors.push({
        type: "invalid_volume" /* INVALID_VOLUME */,
        message: "\u7D30\u80DE\u3078\u306E\u6DFB\u52A0\u91CF\u304C\u7121\u52B9\u3067\u3059",
        field: "additionVolume"
      });
    }
    if (!data.dilutionVolume || data.dilutionVolume <= 0) {
      errors.push({
        type: "invalid_volume" /* INVALID_VOLUME */,
        message: "\u5E0C\u91C8\u6BB5\u968E\u3067\u306E\u4F5C\u6210\u91CF\u304C\u7121\u52B9\u3067\u3059",
        field: "dilutionVolume"
      });
    }
    if (!data.targetConcentrations || data.targetConcentrations.length === 0) {
      errors.push({
        type: "missing_required_field" /* MISSING_REQUIRED_FIELD */,
        message: "\u6700\u7D42\u76EE\u6A19\u6FC3\u5EA6\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093",
        field: "targetConcentrations"
      });
    }
    if (data.targetConcentrations) {
      data.targetConcentrations.forEach((conc, index) => {
        if (conc <= 0) {
          errors.push({
            type: "invalid_concentration" /* INVALID_CONCENTRATION */,
            message: `\u76EE\u6A19\u6FC3\u5EA6 ${index + 1} \u304C\u7121\u52B9\u3067\u3059`,
            field: `targetConcentrations[${index}]`
          });
        }
      });
    }
  }
  planSerialDilution(stockConcM, targetConcsM, dilutionVolumeL, cellVolumeL, additionVolumeL) {
    const requiredConcsM = targetConcsM.map((targetM) => {
      return targetM * (cellVolumeL + additionVolumeL) / additionVolumeL;
    });
    return requiredConcsM.map((conc) => ({ targetConcentration: conc }));
  }
  generateStepDescription(fromConc, toConc, stockVolume, solventVolume, stockUnit, targetUnit, volumeUnit, isFirstStep) {
    const fromStr = this.formatConcentration(fromConc, stockUnit);
    const toStr = this.formatConcentration(toConc, targetUnit);
    const stockVolOpt = ConversionUtils.optimizeVolumeDisplay(stockVolume, volumeUnit);
    const solventVolOpt = ConversionUtils.optimizeVolumeDisplay(solventVolume, volumeUnit);
    const stockVolStr = `${stockVolOpt.value.toFixed(this.settings.decimalPlaces)} ${stockVolOpt.unit}`;
    const solventVolStr = `${solventVolOpt.value.toFixed(this.settings.decimalPlaces)} ${solventVolOpt.unit}`;
    const source = isFirstStep ? "Stock" : "\u524D\u30B9\u30C6\u30C3\u30D7";
    return `${fromStr} ${source}\u3092${stockVolStr}\u3068\u308A\u3001\u6EB6\u5A92${solventVolStr}\u3068\u6DF7\u5408 (\u2192${toStr})`;
  }
  formatConcentration(concentration, unit) {
    return `${concentration.toFixed(this.settings.decimalPlaces)} ${unit}`;
  }
  checkSerialDilutionWarnings(data, steps, warnings) {
    const minVolume = 1;
    steps.forEach((step, index) => {
      if (step.stockVolume < minVolume && step.volumeUnit === "\xB5L" /* MICROLITER */) {
        warnings.push({
          type: "small_volume" /* SMALL_VOLUME */,
          message: `Step ${step.stepNumber}: \u5FC5\u8981\u306A\u5BB9\u91CF\u304C ${step.stockVolume} ${step.volumeUnit} \u3068\u5C0F\u3055\u3059\u304E\u307E\u3059`,
          severity: "high"
        });
      }
    });
    const maxReasonableDilution = 1e3;
    steps.forEach((step) => {
      if (step.dilutionFactor > maxReasonableDilution) {
        warnings.push({
          type: "unusual_dilution_factor" /* UNUSUAL_DILUTION_FACTOR */,
          message: `Step ${step.stepNumber}: \u5E0C\u91C8\u500D\u7387\u304C ${step.dilutionFactor.toFixed(0)} \u500D\u3068\u9AD8\u3059\u304E\u307E\u3059`,
          severity: "medium"
        });
      }
    });
  }
  estimateProtocolTime(numSteps) {
    const timePerStep = 3;
    const totalMinutes = numSteps * timePerStep;
    if (totalMinutes < 60) {
      return `${totalMinutes} min`;
    } else {
      const hours = Math.floor(totalMinutes / 60);
      const minutes = totalMinutes % 60;
      return `${hours}h ${minutes}min`;
    }
  }
  generateDilutionTable(steps) {
    const headers = ["Step", "From", "To", "Stock Volume", "Solvent Volume", "Dilution Factor"];
    const rows = steps.map((step) => [
      step.name,
      `${step.fromConcentration.toFixed(this.settings.decimalPlaces)} ${step.concentrationUnit}`,
      `${step.toConcentration.toFixed(this.settings.decimalPlaces)} ${step.concentrationUnit}`,
      `${step.stockVolume.toFixed(this.settings.decimalPlaces)} ${step.volumeUnit}`,
      `${step.solventVolume.toFixed(this.settings.decimalPlaces)} ${step.volumeUnit}`,
      `${step.dilutionFactor.toFixed(1)}x`
    ]);
    return [headers, ...rows];
  }
  generateAdditionTable(instructions) {
    const headers = ["Target Concentration", "Use Step", "Addition Volume", "Final Cell Volume"];
    const rows = instructions.map((instruction) => [
      `${instruction.targetConcentration.toFixed(this.settings.decimalPlaces)} ${instruction.concentrationUnit}`,
      instruction.stepName,
      `${instruction.additionVolume.toFixed(this.settings.decimalPlaces)} ${instruction.volumeUnit}`,
      `${instruction.finalCellVolume.toFixed(this.settings.decimalPlaces)} ${instruction.volumeUnit}`
    ]);
    return [headers, ...rows];
  }
  generateCSVExport(steps, instructions) {
    const dilutionTable = this.generateDilutionTable(steps);
    const additionTable = this.generateAdditionTable(instructions);
    let csv = "# Serial Dilution Protocol\n\n";
    csv += "## Dilution Steps\n";
    csv += dilutionTable.map((row) => row.join(",")).join("\n") + "\n\n";
    csv += "## Cell Addition Instructions\n";
    csv += additionTable.map((row) => row.join(",")).join("\n");
    return csv;
  }
  generateMarkdownExport(steps, instructions, summary) {
    let md = "# Serial Dilution Protocol\n\n";
    md += "## Protocol Summary\n";
    md += `- Total Steps: ${summary.totalSteps}
`;
    md += `- Required Tubes: ${summary.requiredTubes}
`;
    md += `- Estimated Time: ${summary.estimatedTime}
`;
    md += `- Highest Dilution Factor: ${summary.highestDilutionFactor.toFixed(0)}x

`;
    md += "## Part 1: Serial Dilution Steps\n";
    steps.forEach((step, index) => {
      md += `${index + 1}. ${step.description}
`;
    });
    md += "\n## Part 2: Cell Addition Instructions\n";
    instructions.forEach((instruction, index) => {
      md += `${index + 1}. For ${instruction.targetConcentration.toFixed(this.settings.decimalPlaces)} ${instruction.concentrationUnit}: Use ${instruction.stepName}, add ${instruction.additionVolume.toFixed(this.settings.decimalPlaces)} ${instruction.volumeUnit} to cells
`;
    });
    return md;
  }
};

// src/data/reagents.ts
var ReagentDatabase = class {
  constructor() {
    this.builtInReagents = [];
    this.userReagents = [];
  }
  async initialize() {
    this.builtInReagents = this.getBuiltInReagents();
  }
  /**
   * Search for reagents by name (fuzzy matching)
   */
  searchReagents(query, includeCustom = true) {
    const allReagents = includeCustom ? [...this.builtInReagents, ...this.userReagents] : this.builtInReagents;
    if (!query.trim()) {
      return allReagents.slice(0, 20);
    }
    const queryLower = query.toLowerCase();
    return allReagents.filter(
      (reagent) => {
        var _a, _b;
        return reagent.name.toLowerCase().includes(queryLower) || ((_a = reagent.cas) == null ? void 0 : _a.includes(query)) || ((_b = reagent.category) == null ? void 0 : _b.toLowerCase().includes(queryLower));
      }
    ).sort((a, b) => {
      const aExact = a.name.toLowerCase() === queryLower;
      const bExact = b.name.toLowerCase() === queryLower;
      if (aExact && !bExact)
        return -1;
      if (!aExact && bExact)
        return 1;
      const aStarts = a.name.toLowerCase().startsWith(queryLower);
      const bStarts = b.name.toLowerCase().startsWith(queryLower);
      if (aStarts && !bStarts)
        return -1;
      if (!aStarts && bStarts)
        return 1;
      return a.name.localeCompare(b.name);
    }).slice(0, 20);
  }
  /**
   * Get reagent by exact name match
   */
  getReagentByName(name) {
    const allReagents = [...this.builtInReagents, ...this.userReagents];
    return allReagents.find(
      (reagent) => reagent.name.toLowerCase() === name.toLowerCase()
    ) || null;
  }
  /**
   * Add user custom reagent
   */
  addUserReagent(reagent) {
    this.userReagents.push(reagent);
  }
  /**
   * Update user custom reagent
   */
  updateUserReagent(index, reagent) {
    if (index >= 0 && index < this.userReagents.length) {
      this.userReagents[index] = reagent;
    }
  }
  /**
   * Remove user custom reagent
   */
  removeUserReagent(index) {
    if (index >= 0 && index < this.userReagents.length) {
      this.userReagents.splice(index, 1);
    }
  }
  /**
   * Get all user reagents
   */
  getUserReagents() {
    return [...this.userReagents];
  }
  /**
   * Set user reagents (for loading from settings)
   */
  setUserReagents(reagents) {
    this.userReagents = reagents;
  }
  /**
   * Get reagents by category
   */
  getReagentsByCategory(category) {
    const allReagents = [...this.builtInReagents, ...this.userReagents];
    return allReagents.filter(
      (reagent) => {
        var _a;
        return ((_a = reagent.category) == null ? void 0 : _a.toLowerCase()) === category.toLowerCase();
      }
    );
  }
  /**
   * Get all available categories
   */
  getCategories() {
    const allReagents = [...this.builtInReagents, ...this.userReagents];
    const categories = /* @__PURE__ */ new Set();
    allReagents.forEach((reagent) => {
      if (reagent.category) {
        categories.add(reagent.category);
      }
    });
    return Array.from(categories).sort();
  }
  /**
   * Generate external links for a reagent
   */
  getExternalLinks(reagent) {
    const links = [];
    if (reagent.pubchemId) {
      links.push({
        name: "PubChem",
        url: `https://pubchem.ncbi.nlm.nih.gov/compound/${reagent.pubchemId}`
      });
    } else if (reagent.name) {
      const searchName = encodeURIComponent(reagent.name);
      links.push({
        name: "PubChem Search",
        url: `https://pubchem.ncbi.nlm.nih.gov/#query=${searchName}`
      });
    }
    if (reagent.cas) {
      links.push({
        name: "Sigma-Aldrich",
        url: `https://www.sigmaaldrich.com/US/en/search/${reagent.cas}?focus=products&page=1&perpage=30&sort=relevance&term=${reagent.cas}&type=cas_number`
      });
    }
    if (reagent.name) {
      const searchName = encodeURIComponent(reagent.name);
      links.push({
        name: "Thermo Fisher",
        url: `https://www.thermofisher.com/search/results?query=${searchName}&searchLocation=US&focusarea=Search%20All`
      });
    }
    return links;
  }
  getBuiltInReagents() {
    return [
      // Buffers
      {
        name: "Tris",
        molecularWeight: 121.14,
        cas: "77-86-1",
        pubchemId: "6503",
        category: "Buffer",
        hazards: ["Irritant"]
      },
      {
        name: "Tris-HCl",
        molecularWeight: 157.6,
        cas: "1185-53-1",
        category: "Buffer",
        hazards: ["Irritant"]
      },
      {
        name: "HEPES",
        molecularWeight: 238.31,
        cas: "7365-45-9",
        pubchemId: "23831",
        category: "Buffer",
        hazards: ["Irritant"]
      },
      {
        name: "PIPES",
        molecularWeight: 302.37,
        cas: "5625-37-6",
        pubchemId: "79723",
        category: "Buffer",
        hazards: ["Irritant"]
      },
      {
        name: "MOPS",
        molecularWeight: 209.26,
        cas: "1132-61-2",
        pubchemId: "70678",
        category: "Buffer",
        hazards: ["Irritant"]
      },
      {
        name: "Bis-Tris",
        molecularWeight: 209.24,
        cas: "6976-37-0",
        pubchemId: "160556",
        category: "Buffer"
      },
      {
        name: "Tricine",
        molecularWeight: 179.17,
        cas: "5704-04-1",
        pubchemId: "92958",
        category: "Buffer"
      },
      {
        name: "CAPS",
        molecularWeight: 221.31,
        cas: "1135-40-6",
        pubchemId: "71578",
        category: "Buffer"
      },
      // Salts
      {
        name: "NaCl",
        molecularWeight: 58.44,
        cas: "7647-14-5",
        pubchemId: "5234",
        category: "Salt"
      },
      {
        name: "KCl",
        molecularWeight: 74.55,
        cas: "7447-40-7",
        pubchemId: "4873",
        category: "Salt"
      },
      {
        name: "MgCl2",
        molecularWeight: 95.21,
        cas: "7786-30-3",
        pubchemId: "5360315",
        category: "Salt"
      },
      {
        name: "MgCl2\xB76H2O",
        molecularWeight: 203.3,
        cas: "7791-18-6",
        pubchemId: "24584",
        category: "Salt"
      },
      {
        name: "CaCl2",
        molecularWeight: 110.98,
        cas: "10043-52-4",
        pubchemId: "5284359",
        category: "Salt"
      },
      {
        name: "CaCl2\xB72H2O",
        molecularWeight: 147.01,
        cas: "10035-04-8",
        pubchemId: "24844",
        category: "Salt"
      },
      {
        name: "Na2HPO4",
        molecularWeight: 141.96,
        cas: "7558-79-4",
        pubchemId: "24203",
        category: "Salt"
      },
      {
        name: "NaH2PO4",
        molecularWeight: 119.98,
        cas: "7558-80-7",
        pubchemId: "23672064",
        category: "Salt"
      },
      {
        name: "K2HPO4",
        molecularWeight: 174.18,
        cas: "7758-11-4",
        pubchemId: "24450",
        category: "Salt"
      },
      {
        name: "KH2PO4",
        molecularWeight: 136.09,
        cas: "7778-77-0",
        pubchemId: "516951",
        category: "Salt"
      },
      // Detergents
      {
        name: "Triton X-100",
        molecularWeight: 647,
        cas: "9002-93-1",
        category: "Detergent",
        hazards: ["Toxic", "Environmental hazard"]
      },
      {
        name: "Tween 20",
        molecularWeight: 1227.54,
        cas: "9005-64-5",
        pubchemId: "16129878",
        category: "Detergent"
      },
      {
        name: "SDS",
        molecularWeight: 288.38,
        cas: "151-21-3",
        pubchemId: "3423265",
        category: "Detergent",
        hazards: ["Irritant", "Harmful"]
      },
      {
        name: "NP-40",
        molecularWeight: 603,
        cas: "9016-45-9",
        category: "Detergent",
        hazards: ["Harmful"]
      },
      // Reducing agents
      {
        name: "DTT",
        molecularWeight: 154.25,
        cas: "3483-12-3",
        pubchemId: "446094",
        category: "Reducing Agent"
      },
      {
        name: "TCEP",
        molecularWeight: 286.65,
        cas: "51805-45-9",
        pubchemId: "115109",
        category: "Reducing Agent"
      },
      {
        name: "\u03B2-Mercaptoethanol",
        molecularWeight: 78.13,
        cas: "60-24-2",
        pubchemId: "1567",
        category: "Reducing Agent",
        hazards: ["Toxic", "Flammable"]
      },
      // Protease inhibitors
      {
        name: "PMSF",
        molecularWeight: 174.19,
        cas: "329-98-6",
        pubchemId: "4784",
        category: "Protease Inhibitor",
        hazards: ["Toxic", "Flammable"]
      },
      {
        name: "Benzamidine HCl",
        molecularWeight: 156.61,
        cas: "1670-14-0",
        pubchemId: "12699",
        category: "Protease Inhibitor"
      },
      {
        name: "EDTA",
        molecularWeight: 292.24,
        cas: "60-00-4",
        pubchemId: "6049",
        category: "Chelator"
      },
      {
        name: "EGTA",
        molecularWeight: 380.35,
        cas: "67-42-5",
        pubchemId: "6207",
        category: "Chelator"
      },
      // Common organics
      {
        name: "Glycerol",
        molecularWeight: 92.09,
        cas: "56-81-5",
        pubchemId: "753",
        category: "Organic"
      },
      {
        name: "Sucrose",
        molecularWeight: 342.3,
        cas: "57-50-1",
        pubchemId: "5988",
        category: "Organic"
      },
      {
        name: "Glucose",
        molecularWeight: 180.16,
        cas: "50-99-7",
        pubchemId: "5793",
        category: "Organic"
      },
      {
        name: "Imidazole",
        molecularWeight: 68.08,
        cas: "288-32-4",
        pubchemId: "795",
        category: "Organic"
      },
      {
        name: "Glycine",
        molecularWeight: 75.07,
        cas: "56-40-6",
        pubchemId: "750",
        category: "Amino Acid"
      },
      {
        name: "Urea",
        molecularWeight: 60.06,
        cas: "57-13-6",
        pubchemId: "1176",
        category: "Chaotrope",
        hazards: ["Irritant"]
      },
      {
        name: "Guanidine HCl",
        molecularWeight: 95.53,
        cas: "50-01-1",
        pubchemId: "3547",
        category: "Chaotrope",
        hazards: ["Harmful"]
      }
    ];
  }
};

// src/ui/buffer-calc-ui.ts
var import_obsidian8 = require("obsidian");
init_types();

// src/utils/mobile-optimization.ts
var MobileOptimization = class {
  constructor() {
    this.listeners = [];
    this.viewportInfo = this.getViewportInfo();
    this.setupViewportListener();
    this.setupTouchOptimizations();
  }
  static getInstance() {
    if (!MobileOptimization.instance) {
      MobileOptimization.instance = new MobileOptimization();
    }
    return MobileOptimization.instance;
  }
  /**
   * 現在のビューポート情報を取得
   */
  getViewportInfo() {
    const width = window.innerWidth;
    const height = window.innerHeight;
    const isTouchDevice = "ontouchstart" in window || navigator.maxTouchPoints > 0;
    const hasHover = window.matchMedia("(hover: hover)").matches;
    return {
      width,
      height,
      isMobile: width <= 768,
      isTablet: width > 768 && width <= 1024,
      isDesktop: width > 1024,
      isLandscape: width > height,
      isPortrait: height > width,
      isTouchDevice,
      hasHover
    };
  }
  /**
   * ビューポート変更リスナーを設定
   */
  setupViewportListener() {
    const updateViewport = () => {
      this.viewportInfo = this.getViewportInfo();
      this.notifyListeners();
    };
    window.addEventListener("resize", updateViewport);
    window.addEventListener("orientationchange", () => {
      setTimeout(updateViewport, 100);
    });
  }
  /**
   * タッチ最適化を設定
   */
  setupTouchOptimizations() {
    if (!this.viewportInfo.isTouchDevice)
      return;
    document.addEventListener("touchstart", this.handleTouchStart.bind(this), { passive: true });
    document.addEventListener("touchend", this.handleTouchEnd.bind(this), { passive: true });
    if (this.isIOS()) {
      this.preventIOSZoom();
    }
    if (this.isAndroid()) {
      this.optimizeForAndroid();
    }
  }
  /**
   * タッチ開始イベントの処理
   */
  handleTouchStart(event) {
    const target = event.target;
    if (target.closest(".buffer-calc-container")) {
      target.style.transition = "transform 0.1s ease";
    }
  }
  /**
   * タッチ終了イベントの処理
   */
  handleTouchEnd(event) {
    const target = event.target;
    if (target.closest(".buffer-calc-container")) {
      setTimeout(() => {
        target.style.transform = "";
      }, 100);
    }
  }
  /**
   * iOS Safari向けの最適化
   */
  preventIOSZoom() {
    let viewport = document.querySelector("meta[name=viewport]");
    if (!viewport) {
      viewport = document.createElement("meta");
      viewport.name = "viewport";
      document.head.appendChild(viewport);
    }
    viewport.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
    document.addEventListener("touchend", (event) => {
      if (event.target && event.target.closest(".buffer-calc-container")) {
        event.preventDefault();
      }
    }, { passive: false });
  }
  /**
   * Android Chrome向けの最適化
   */
  optimizeForAndroid() {
    document.addEventListener("focusin", (event) => {
      const target = event.target;
      if (target.closest(".buffer-calc-container") && target.tagName === "INPUT") {
        setTimeout(() => {
          target.scrollIntoView({ behavior: "smooth", block: "center" });
        }, 300);
      }
    });
  }
  /**
   * デバイス判定ヘルパー
   */
  isIOS() {
    return /iPad|iPhone|iPod/.test(navigator.userAgent);
  }
  isAndroid() {
    return /Android/.test(navigator.userAgent);
  }
  isSafari() {
    return /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
  }
  /**
   * モーダルのモバイル最適化
   */
  optimizeModal(modalElement) {
    if (!this.viewportInfo.isMobile)
      return;
    modalElement.classList.add("mobile-optimized");
    const adjustModalHeight = () => {
      var _a;
      const viewportHeight = ((_a = window.visualViewport) == null ? void 0 : _a.height) || window.innerHeight;
      modalElement.style.maxHeight = `${viewportHeight * 0.95}px`;
    };
    adjustModalHeight();
    if (window.visualViewport) {
      const handleViewportResize = () => adjustModalHeight();
      window.visualViewport.addEventListener("resize", handleViewportResize);
      modalElement.addEventListener("remove", () => {
        var _a;
        (_a = window.visualViewport) == null ? void 0 : _a.removeEventListener("resize", handleViewportResize);
      });
    }
    this.addSwipeGesture(modalElement);
  }
  /**
   * スワイプジェスチャーの追加
   */
  addSwipeGesture(element) {
    let startY = 0;
    let startTime = 0;
    element.addEventListener("touchstart", (e) => {
      startY = e.touches[0].clientY;
      startTime = Date.now();
    }, { passive: true });
    element.addEventListener("touchend", (e) => {
      const endY = e.changedTouches[0].clientY;
      const endTime = Date.now();
      const deltaY = endY - startY;
      const deltaTime = endTime - startTime;
      if (deltaY > 100 && deltaTime < 300) {
        const closeButton = element.querySelector('button[aria-label="Close"]');
        if (closeButton) {
          closeButton.click();
        }
      }
    }, { passive: true });
  }
  /**
   * 入力フィールドの最適化
   */
  optimizeInputField(inputElement) {
    if (this.viewportInfo.isMobile) {
      inputElement.setAttribute("autocomplete", "off");
      inputElement.setAttribute("autocorrect", "off");
      inputElement.setAttribute("autocapitalize", "off");
      inputElement.setAttribute("spellcheck", "false");
      if (inputElement.type === "number" || inputElement.inputMode === "numeric") {
        inputElement.setAttribute("inputmode", "decimal");
        if (this.isIOS()) {
          inputElement.addEventListener("focus", () => {
            inputElement.setAttribute("readonly", "readonly");
            setTimeout(() => {
              inputElement.removeAttribute("readonly");
            }, 100);
          });
        }
      }
      inputElement.addEventListener("focus", () => {
        setTimeout(() => {
          inputElement.scrollIntoView({ behavior: "smooth", block: "center" });
        }, 300);
      });
    }
  }
  /**
   * ボタンのタッチ最適化
   */
  optimizeButton(buttonElement) {
    if (!this.viewportInfo.isTouchDevice)
      return;
    const computedStyle = window.getComputedStyle(buttonElement);
    const minSize = 44;
    if (parseInt(computedStyle.minHeight) < minSize) {
      buttonElement.style.minHeight = `${minSize}px`;
    }
    if (parseInt(computedStyle.minWidth) < minSize) {
      buttonElement.style.minWidth = `${minSize}px`;
    }
    buttonElement.addEventListener("touchstart", () => {
      buttonElement.style.transform = "scale(0.98)";
    }, { passive: true });
    buttonElement.addEventListener("touchend", () => {
      setTimeout(() => {
        buttonElement.style.transform = "";
      }, 100);
    }, { passive: true });
  }
  /**
   * ビューポート変更リスナーの追加
   */
  addViewportChangeListener(callback) {
    this.listeners.push(callback);
  }
  /**
   * ビューポート変更リスナーの削除
   */
  removeViewportChangeListener(callback) {
    const index = this.listeners.indexOf(callback);
    if (index > -1) {
      this.listeners.splice(index, 1);
    }
  }
  /**
   * リスナーに通知
   */
  notifyListeners() {
    this.listeners.forEach((callback) => callback());
  }
  /**
   * アクセシビリティの改善
   */
  improveAccessibility(element) {
    const focusableElements = element.querySelectorAll(
      'button, input, select, textarea, [tabindex]:not([tabindex="-1"])'
    );
    focusableElements.forEach((el, index) => {
      const htmlEl = el;
      if (!htmlEl.hasAttribute("tabindex")) {
        htmlEl.setAttribute("tabindex", "0");
      }
      htmlEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          if (htmlEl.tagName === "BUTTON") {
            e.preventDefault();
            htmlEl.click();
          }
        }
      });
    });
    this.improveAriaLabels(element);
  }
  /**
   * ARIAラベルの改善
   */
  improveAriaLabels(element) {
    element.querySelectorAll("input").forEach((input) => {
      var _a;
      const label = element.querySelector(`label[for="${input.id}"]`) || ((_a = input.closest(".buffer-calc-input-group")) == null ? void 0 : _a.querySelector("label"));
      if (label && !input.hasAttribute("aria-label")) {
        input.setAttribute("aria-label", label.textContent || "");
      }
    });
    element.querySelectorAll("button").forEach((button) => {
      var _a;
      if (!button.hasAttribute("aria-label") && !((_a = button.textContent) == null ? void 0 : _a.trim())) {
        const icon = button.querySelector('[class*="icon"]');
        if (icon) {
          button.setAttribute("aria-label", "\u30A2\u30AF\u30B7\u30E7\u30F3\u5B9F\u884C");
        }
      }
    });
    if (element.classList.contains("modal")) {
      element.setAttribute("role", "dialog");
      element.setAttribute("aria-modal", "true");
      const title = element.querySelector("h1, h2, h3");
      if (title && !element.hasAttribute("aria-labelledby")) {
        if (!title.id) {
          title.id = `modal-title-${Date.now()}`;
        }
        element.setAttribute("aria-labelledby", title.id);
      }
    }
  }
  /**
   * パフォーマンス最適化
   */
  optimizePerformance() {
    let scrollTimeout;
    window.addEventListener("scroll", () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        this.handleScrollEnd();
      }, 150);
    }, { passive: true });
    let resizeTimeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        this.viewportInfo = this.getViewportInfo();
        this.notifyListeners();
      }, 250);
    });
  }
  /**
   * スクロール完了時の処理
   */
  handleScrollEnd() {
  }
  /**
   * デバッグ情報の取得
   */
  getDebugInfo() {
    return {
      ...this.viewportInfo,
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
      cookieEnabled: navigator.cookieEnabled,
      onLine: navigator.onLine
    };
  }
};

// src/ui/buffer-calc-ui.ts
var BufferCalcUI = class {
  constructor(container, blockContent, calculationEngine, reagentDatabase, settings, context, plugin) {
    // BufferCalcPlugin instance
    this.lastResult = null;
    this.isUpdatingSource = false;
    this.sourceUpdateTimeout = null;
    this.container = container;
    this.blockContent = blockContent;
    this.calculationEngine = calculationEngine;
    this.reagentDatabase = reagentDatabase;
    this.settings = settings;
    this.context = context;
    this.plugin = plugin;
    this.mobileOptimization = MobileOptimization.getInstance();
  }
  async render() {
    try {
      this.container.empty();
      this.container.addClass("buffer-calc-ui");
      this.applyMobileOptimizations();
      console.log(`Rendering UI for type: ${this.blockContent.type}`, this.blockContent);
      switch (this.blockContent.type) {
        case "buffer":
          await this.renderBufferCalculator();
          break;
        case "stock":
          console.log("Rendering stock calculator...");
          await this.renderStockCalculator();
          break;
        case "dilution":
          console.log("Rendering dilution calculator...");
          await this.renderDilutionCalculator();
          break;
        case "serial-dilution":
          console.log("Rendering serial dilution calculator...");
          await this.renderSerialDilutionCalculator();
          break;
        default:
          this.container.createEl("div", {
            text: `Unknown calculation type: ${this.blockContent.type}`,
            cls: "buffer-calc-error"
          });
      }
      console.log(`UI rendering completed for type: ${this.blockContent.type}`);
    } catch (error) {
      console.error(`UI rendering error for type ${this.blockContent.type}:`, error);
      this.container.createEl("div", {
        text: `\u30A8\u30E9\u30FC: ${error.message}`,
        cls: "buffer-calc-error"
      });
    }
  }
  async renderBufferCalculator() {
    const data = this.blockContent.data;
    const header = this.container.createEl("div", { cls: "buffer-calc-header" });
    const isEditable = this.isEditableMode();
    console.log("\u{1F3AF} Buffer Calculator - isEditable:", isEditable);
    if (isEditable) {
      console.log("\u{1F4DD} Creating editable title for buffer");
      this.createEditableTitle(header, data);
    } else {
      console.log("\u{1F512} Creating readonly title for buffer");
      this.createReadOnlyTitle(header, data, "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97");
    }
    const controls = this.container.createEl("div", { cls: "buffer-calc-controls" });
    const volumeContainer = controls.createEl("div", { cls: "buffer-calc-volume-input" });
    volumeContainer.createEl("label", { text: "\u7DCF\u4F53\u7A4D:" });
    const volumeInput = volumeContainer.createEl("input", {
      type: "number",
      value: data.totalVolume.toString(),
      cls: "buffer-calc-input-number"
    });
    const volumeUnitSelect = volumeContainer.createEl("select", { cls: "buffer-calc-unit-select" });
    this.populateVolumeUnits(volumeUnitSelect, data.volumeUnit || this.settings.defaultVolumeUnit);
    volumeInput.addEventListener("input", () => {
      this.updateCalculation();
      this.debouncedUpdateBlockSource();
    });
    volumeUnitSelect.addEventListener("change", () => {
      this.updateCalculation();
      this.updateBlockSource();
    });
    const componentsContainer = this.container.createEl("div", { cls: "buffer-calc-components" });
    componentsContainer.createEl("h4", { text: "\u6210\u5206" });
    const componentsList = componentsContainer.createEl("div", { cls: "buffer-calc-components-list" });
    const components = Array.isArray(data.components) ? data.components : [];
    components.forEach((component, index) => {
      this.renderComponent(componentsList, component, index);
    });
    const addButton = componentsContainer.createEl("button", {
      text: "+ \u6210\u5206\u3092\u8FFD\u52A0",
      cls: "buffer-calc-add-button mod-cta"
    });
    addButton.addEventListener("click", () => {
      const newComponent = {
        name: "",
        stockConc: 100,
        stockUnit: this.settings.defaultConcentrationUnit,
        finalConc: 10,
        finalUnit: this.settings.defaultConcentrationUnit
      };
      if (!Array.isArray(data.components)) {
        data.components = [];
      }
      data.components.push(newComponent);
      this.renderComponent(componentsList, newComponent, data.components.length - 1);
      this.updateCalculation();
    });
    const resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
    this.disableInputsForReadingMode(this.container);
    this.updateCalculation();
  }
  renderComponent(container, component, index) {
    const componentEl = container.createEl("div", { cls: "buffer-calc-component" });
    const componentHeader = componentEl.createEl("div", { cls: "buffer-calc-component-header" });
    componentHeader.createEl("span", { text: `\u6210\u5206 ${index + 1}` });
    const deleteButton = componentHeader.createEl("button", {
      text: "\xD7",
      cls: "buffer-calc-delete-button"
    });
    deleteButton.addEventListener("click", () => {
      const data = this.blockContent.data;
      if (Array.isArray(data.components)) {
        data.components.splice(index, 1);
      }
      this.render();
    });
    const nameContainer = componentEl.createEl("div", { cls: "buffer-calc-input-group" });
    nameContainer.createEl("label", { text: "\u8A66\u85AC:" });
    const nameInput = nameContainer.createEl("input", {
      type: "text",
      value: component.name,
      placeholder: "\u8A66\u85AC\u540D\u3092\u5165\u529B...",
      cls: "buffer-calc-reagent-input"
    });
    const suggestionsContainer = nameContainer.createEl("div", {
      cls: "buffer-calc-suggestions"
    });
    suggestionsContainer.style.display = "none";
    this.setupReagentAutocomplete(nameInput, suggestionsContainer, (reagent) => {
      component.name = reagent.name;
      nameInput.value = reagent.name;
      this.updateCalculation();
    });
    nameInput.addEventListener("input", () => {
      component.name = nameInput.value;
      this.updateCalculation();
      this.debouncedUpdateBlockSource();
    });
    const stockContainer = componentEl.createEl("div", { cls: "buffer-calc-input-group" });
    stockContainer.createEl("label", { text: "\u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6:" });
    const stockInput = stockContainer.createEl("input", {
      type: "number",
      value: component.stockConc.toString(),
      cls: "buffer-calc-input-number"
    });
    const stockUnitSelect = stockContainer.createEl("select", { cls: "buffer-calc-unit-select" });
    this.populateConcentrationUnits(stockUnitSelect, component.stockUnit);
    stockInput.addEventListener("input", () => {
      component.stockConc = parseFloat(stockInput.value) || 0;
      this.updateCalculation();
      this.debouncedUpdateBlockSource();
    });
    stockUnitSelect.addEventListener("change", () => {
      component.stockUnit = stockUnitSelect.value;
      this.updateCalculation();
      this.updateBlockSource();
    });
    const finalContainer = componentEl.createEl("div", { cls: "buffer-calc-input-group" });
    finalContainer.createEl("label", { text: "\u6700\u7D42\u6FC3\u5EA6:" });
    const finalInput = finalContainer.createEl("input", {
      type: "number",
      value: component.finalConc.toString(),
      cls: "buffer-calc-input-number"
    });
    const finalUnitSelect = finalContainer.createEl("select", { cls: "buffer-calc-unit-select" });
    this.populateConcentrationUnits(finalUnitSelect, component.finalUnit);
    finalInput.addEventListener("input", () => {
      component.finalConc = parseFloat(finalInput.value) || 0;
      this.updateCalculation();
      this.debouncedUpdateBlockSource();
    });
    finalUnitSelect.addEventListener("change", () => {
      component.finalUnit = finalUnitSelect.value;
      this.updateCalculation();
      this.updateBlockSource();
    });
    const lotContainer = componentEl.createEl("div", { cls: "buffer-calc-input-group" });
    lotContainer.createEl("label", { text: "\u30ED\u30C3\u30C8\u756A\u53F7\uFF08\u4EFB\u610F\uFF09:" });
    const lotInput = lotContainer.createEl("input", {
      type: "text",
      value: component.lotNumber || "",
      placeholder: "\u4F8B: ABC123",
      cls: "buffer-calc-lot-input"
    });
    lotInput.addEventListener("input", () => {
      component.lotNumber = lotInput.value || void 0;
      this.debouncedUpdateBlockSource();
    });
  }
  setupReagentAutocomplete(input, container, onSelect) {
    let debounceTimer;
    input.addEventListener("input", () => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => {
        const query = input.value.trim();
        if (query.length < 2) {
          container.style.display = "none";
          return;
        }
        const suggestions = this.reagentDatabase.searchReagents(query);
        if (suggestions.length === 0) {
          container.style.display = "none";
          return;
        }
        container.empty();
        container.style.display = "block";
        suggestions.slice(0, 10).forEach((reagent) => {
          const suggestionEl = container.createEl("div", {
            cls: "buffer-calc-suggestion-item",
            text: `${reagent.name} (MW: ${reagent.molecularWeight})`
          });
          suggestionEl.addEventListener("click", () => {
            onSelect(reagent);
            container.style.display = "none";
          });
        });
      }, 300);
    });
    document.addEventListener("click", (e) => {
      if (!container.contains(e.target) && !input.contains(e.target)) {
        container.style.display = "none";
      }
    });
  }
  populateVolumeUnits(select, selectedUnit) {
    const units = [
      { value: "L" /* LITER */, label: "L" },
      { value: "mL" /* MILLILITER */, label: "mL" },
      { value: "\xB5L" /* MICROLITER */, label: "\xB5L" },
      { value: "nL" /* NANOLITER */, label: "nL" }
    ];
    units.forEach((unit) => {
      const option = select.createEl("option", {
        value: unit.value,
        text: unit.label
      });
      if (unit.value === selectedUnit) {
        option.selected = true;
      }
    });
  }
  populateConcentrationUnits(select, selectedUnit) {
    const units = [
      { value: "M" /* MOLAR */, label: "M" },
      { value: "mM" /* MILLIMOLAR */, label: "mM" },
      { value: "\xB5M" /* MICROMOLAR */, label: "\xB5M" },
      { value: "nM" /* NANOMOLAR */, label: "nM" }
    ];
    units.forEach((unit) => {
      const option = select.createEl("option", {
        value: unit.value,
        text: unit.label
      });
      if (unit.value === selectedUnit) {
        option.selected = true;
      }
    });
  }
  async updateCalculation() {
    const data = this.blockContent.data;
    const volumeInput = this.container.querySelector(".buffer-calc-input-number");
    const volumeUnitSelect = this.container.querySelector(".buffer-calc-unit-select");
    if (volumeInput && volumeUnitSelect) {
      data.totalVolume = parseFloat(volumeInput.value) || 0;
      data.volumeUnit = volumeUnitSelect.value;
    }
    try {
      const result = this.calculationEngine.calculateBuffer(data);
      this.lastResult = result;
      this.renderResults(result);
      if (result.errors.length === 0 && this.plugin) {
        this.plugin.addToHistory("buffer", data.name || "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97", data, result);
      }
    } catch (error) {
      console.error("Calculation error:", error);
      this.renderError(error.message);
    }
  }
  renderResults(result) {
    let resultsContainer = this.container.querySelector(".buffer-calc-results");
    if (!resultsContainer) {
      resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
    }
    resultsContainer.empty();
    if (result.errors.length > 0) {
      const errorsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-errors" });
      errorsContainer.createEl("h4", { text: "\u30A8\u30E9\u30FC", cls: "buffer-calc-error-title" });
      result.errors.forEach((error) => {
        errorsContainer.createEl("div", {
          text: error.message,
          cls: "buffer-calc-error-item"
        });
      });
      return;
    }
    resultsContainer.createEl("h4", { text: "\u8ABF\u88FD\u624B\u9806" });
    if (result.components.length > 0) {
      const instructionsList = resultsContainer.createEl("ol", { cls: "buffer-calc-instructions" });
      result.components.forEach((component, index) => {
        const instruction = instructionsList.createEl("li", { cls: "buffer-calc-instruction-item" });
        const reagentInfo = this.reagentDatabase.getReagentByName(component.reagent.name);
        const displayVolume = component.optimizedVolumeDisplay;
        instruction.createEl("strong", { text: component.reagent.name });
        instruction.createEl("span", { text: `: ${displayVolume} \u3092\u6DFB\u52A0` });
        if (component.percentOfTotal) {
          instruction.createEl("span", {
            text: ` (${component.percentOfTotal.toFixed(1)}%)`,
            cls: "buffer-calc-percentage"
          });
        }
        if (reagentInfo) {
          const linksContainer = instruction.createEl("div", { cls: "buffer-calc-links" });
          const links = this.reagentDatabase.getExternalLinks(reagentInfo);
          links.forEach((link) => {
            const linkEl = linksContainer.createEl("a", {
              text: link.name,
              href: link.url,
              cls: "buffer-calc-external-link"
            });
            linkEl.setAttribute("target", "_blank");
            linkEl.setAttribute("rel", "noopener");
          });
        }
      });
      console.log("Solvent display debug:");
      console.log("- result.solventVolume:", result.solventVolume);
      console.log("- Condition (> 0):", result.solventVolume > 0);
      if (result.solventVolume > 0) {
        console.log("- Adding solvent instruction to UI");
        const solventInstruction = instructionsList.createEl("li", { cls: "buffer-calc-instruction-item" });
        const data = this.blockContent.data;
        const solventDisplay = ConversionUtils.optimizeVolumeDisplay(result.solventVolume, data.volumeUnit || this.settings.defaultVolumeUnit);
        console.log("- Solvent display:", solventDisplay);
        solventInstruction.createEl("span", { text: `\u6C34\u307E\u305F\u306F\u30D0\u30C3\u30D5\u30A1\u30FC\u3092\u52A0\u3048\u3066\u7DCF\u4F53\u7A4D\u3092 ${solventDisplay.value.toFixed(this.settings.decimalPlaces)} ${solventDisplay.unit} \u306B\u3059\u308B` });
      } else {
        console.log("- Solvent instruction NOT added (volume <= 0)");
      }
    }
    if (result.warnings.length > 0) {
      const warningsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-warnings" });
      warningsContainer.createEl("h5", { text: "\u8B66\u544A" });
      result.warnings.forEach((warning) => {
        const warningEl = warningsContainer.createEl("div", {
          text: warning.message,
          cls: `buffer-calc-warning buffer-calc-warning-${warning.severity}`
        });
      });
    }
    if (this.settings.showCalculationSteps && result.calculationSteps && result.calculationSteps.length > 0) {
      const stepsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-steps" });
      stepsContainer.createEl("h5", { text: "\u8A08\u7B97\u30B9\u30C6\u30C3\u30D7" });
      result.calculationSteps.forEach((step) => {
        const stepEl = stepsContainer.createEl("div", { cls: "buffer-calc-step" });
        stepEl.createEl("strong", { text: `${step.step}. ${step.description}` });
        if (step.formula) {
          stepEl.createEl("div", {
            text: step.formula,
            cls: "buffer-calc-formula"
          });
        }
        stepEl.createEl("div", {
          text: `\u7D50\u679C: ${step.result.toFixed(this.settings.decimalPlaces)} ${step.unit}`,
          cls: "buffer-calc-step-result"
        });
      });
    }
    const exportButton = resultsContainer.createEl("button", {
      text: "\u30EC\u30B7\u30D4\u3092\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8",
      cls: "buffer-calc-export-button"
    });
    exportButton.addEventListener("click", () => {
      this.exportRecipe(result);
    });
  }
  renderError(message) {
    let resultsContainer = this.container.querySelector(".buffer-calc-results");
    if (!resultsContainer) {
      resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
    }
    resultsContainer.empty();
    resultsContainer.createEl("div", {
      text: `Error: ${message}`,
      cls: "buffer-calc-error"
    });
  }
  async renderStockCalculator() {
    var _a, _b;
    try {
      const data = this.blockContent.data;
      console.log("Stock calculator - Starting render with data:", data);
      const header = this.container.createEl("div", { cls: "buffer-calc-header" });
      if (this.isEditableMode()) {
        this.createEditableStockTitle(header, data);
      } else {
        this.createReadOnlyTitle(header, data, "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97");
      }
      const controls = this.container.createEl("div", { cls: "buffer-calc-controls" });
      const reagentContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      reagentContainer.createEl("label", { text: "\u8A66\u85AC\u540D:" });
      const reagentInput = reagentContainer.createEl("input", {
        type: "text",
        value: data.reagentName || "",
        placeholder: "\u8A66\u85AC\u540D\u3092\u5165\u529B...",
        cls: "buffer-calc-reagent-input"
      });
      const suggestionsContainer = reagentContainer.createEl("div", {
        cls: "buffer-calc-suggestions"
      });
      suggestionsContainer.style.display = "none";
      reagentInput.addEventListener("input", () => {
        data.reagentName = reagentInput.value;
        this.updateStockCalculation();
        this.debouncedUpdateBlockSource();
      });
      const mwContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      mwContainer.createEl("label", { text: "\u5206\u5B50\u91CF (g/mol):" });
      const mwInput = mwContainer.createEl("input", {
        type: "number",
        value: ((_a = data.molecularWeight) == null ? void 0 : _a.toString()) || "",
        placeholder: "\u4F8B: 58.44",
        cls: "buffer-calc-input-number"
      });
      mwInput.addEventListener("input", () => {
        data.molecularWeight = parseFloat(mwInput.value) || void 0;
        this.updateStockCalculation();
        this.debouncedUpdateBlockSource();
      });
      this.setupReagentAutocomplete(reagentInput, suggestionsContainer, (reagent) => {
        data.reagentName = reagent.name;
        reagentInput.value = reagent.name;
        if (reagent.molecularWeight) {
          data.molecularWeight = reagent.molecularWeight;
          mwInput.value = reagent.molecularWeight.toString();
        }
        this.updateStockCalculation();
      });
      const concContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      concContainer.createEl("label", { text: "\u76EE\u6A19\u6FC3\u5EA6:" });
      const concInput = concContainer.createEl("input", {
        type: "number",
        value: data.targetConcentration.toString(),
        cls: "buffer-calc-input-number"
      });
      const concUnitSelect = concContainer.createEl("select", { cls: "buffer-calc-unit-select" });
      this.populateConcentrationUnits(concUnitSelect, data.concentrationUnit);
      concInput.addEventListener("input", () => {
        data.targetConcentration = parseFloat(concInput.value) || 0;
        this.updateStockCalculation();
        this.debouncedUpdateBlockSource();
      });
      concUnitSelect.addEventListener("change", () => {
        data.concentrationUnit = concUnitSelect.value;
        this.updateStockCalculation();
        this.updateBlockSource();
      });
      const volumeContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      volumeContainer.createEl("label", { text: "\u4F53\u7A4D:" });
      const volumeInput = volumeContainer.createEl("input", {
        type: "number",
        value: data.volume.toString(),
        cls: "buffer-calc-input-number"
      });
      const volumeUnitSelect = volumeContainer.createEl("select", { cls: "buffer-calc-unit-select" });
      this.populateVolumeUnits(volumeUnitSelect, data.volumeUnit);
      volumeInput.addEventListener("input", () => {
        data.volume = parseFloat(volumeInput.value) || 0;
        this.updateStockCalculation();
        this.debouncedUpdateBlockSource();
      });
      volumeUnitSelect.addEventListener("change", () => {
        data.volumeUnit = volumeUnitSelect.value;
        this.updateStockCalculation();
        this.updateBlockSource();
      });
      const purityContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      purityContainer.createEl("label", { text: "\u7D14\u5EA6 (%, \u4EFB\u610F):" });
      const purityInput = purityContainer.createEl("input", {
        type: "number",
        value: ((_b = data.purity) == null ? void 0 : _b.toString()) || "100",
        placeholder: "100",
        cls: "buffer-calc-input-number"
      });
      purityInput.setAttribute("min", "0");
      purityInput.setAttribute("max", "100");
      purityInput.addEventListener("input", () => {
        const purity = parseFloat(purityInput.value);
        data.purity = purity > 0 && purity <= 100 ? purity : void 0;
        this.updateStockCalculation();
        this.debouncedUpdateBlockSource();
      });
      const solventContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      solventContainer.createEl("label", { text: "\u6EB6\u5A92 (\u4EFB\u610F):" });
      const solventInput = solventContainer.createEl("input", {
        type: "text",
        value: data.solvent || "\u6C34",
        placeholder: "\u6C34",
        cls: "buffer-calc-input-text"
      });
      solventInput.addEventListener("input", () => {
        data.solvent = solventInput.value;
        this.updateStockCalculation();
        this.debouncedUpdateBlockSource();
      });
      const resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
      this.disableInputsForReadingMode(this.container);
      this.updateStockCalculation();
      console.log("Stock calculator - Render completed successfully");
    } catch (error) {
      console.error("Stock calculator render error:", error);
      this.container.createEl("div", {
        text: `Stock calculator error: ${error.message}`,
        cls: "buffer-calc-error"
      });
    }
  }
  async renderDilutionCalculator() {
    try {
      const data = this.blockContent.data;
      console.log("Dilution calculator - Starting render with data:", data);
      const header = this.container.createEl("div", { cls: "buffer-calc-header" });
      if (this.isEditableMode()) {
        this.createEditableDilutionTitle(header, data);
      } else {
        this.createReadOnlyTitle(header, data, "\u5E0C\u91C8\u8A08\u7B97");
      }
      const controls = this.container.createEl("div", { cls: "buffer-calc-controls" });
      const stockConcContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      stockConcContainer.createEl("label", { text: "\u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6:" });
      const stockConcInput = stockConcContainer.createEl("input", {
        type: "number",
        value: data.stockConcentration.toString(),
        cls: "buffer-calc-input-number"
      });
      const stockConcUnitSelect = stockConcContainer.createEl("select", { cls: "buffer-calc-unit-select" });
      this.populateConcentrationUnits(stockConcUnitSelect, data.stockConcentrationUnit);
      stockConcInput.addEventListener("input", () => {
        data.stockConcentration = parseFloat(stockConcInput.value) || 0;
        this.updateDilutionCalculation();
        this.debouncedUpdateBlockSource();
      });
      stockConcUnitSelect.addEventListener("change", () => {
        data.stockConcentrationUnit = stockConcUnitSelect.value;
        this.updateDilutionCalculation();
        this.updateBlockSource();
      });
      const finalConcContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      finalConcContainer.createEl("label", { text: "\u6700\u7D42\u6FC3\u5EA6:" });
      const finalConcInput = finalConcContainer.createEl("input", {
        type: "number",
        value: data.finalConcentration.toString(),
        cls: "buffer-calc-input-number"
      });
      const finalConcUnitSelect = finalConcContainer.createEl("select", { cls: "buffer-calc-unit-select" });
      this.populateConcentrationUnits(finalConcUnitSelect, data.finalConcentrationUnit);
      finalConcInput.addEventListener("input", () => {
        data.finalConcentration = parseFloat(finalConcInput.value) || 0;
        this.updateDilutionCalculation();
        this.debouncedUpdateBlockSource();
      });
      finalConcUnitSelect.addEventListener("change", () => {
        data.finalConcentrationUnit = finalConcUnitSelect.value;
        this.updateDilutionCalculation();
        this.updateBlockSource();
      });
      const finalVolumeContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      finalVolumeContainer.createEl("label", { text: "\u6700\u7D42\u4F53\u7A4D:" });
      const finalVolumeInput = finalVolumeContainer.createEl("input", {
        type: "number",
        value: data.finalVolume.toString(),
        cls: "buffer-calc-input-number"
      });
      const finalVolumeUnitSelect = finalVolumeContainer.createEl("select", { cls: "buffer-calc-unit-select" });
      this.populateVolumeUnits(finalVolumeUnitSelect, data.volumeUnit);
      finalVolumeInput.addEventListener("input", () => {
        data.finalVolume = parseFloat(finalVolumeInput.value) || 0;
        this.updateDilutionCalculation();
        this.debouncedUpdateBlockSource();
      });
      finalVolumeUnitSelect.addEventListener("change", () => {
        data.volumeUnit = finalVolumeUnitSelect.value;
        this.updateDilutionCalculation();
        this.updateBlockSource();
      });
      const dilutionFactorContainer = controls.createEl("div", { cls: "buffer-calc-input-group" });
      dilutionFactorContainer.createEl("label", { text: "\u5E0C\u91C8\u500D\u7387 (\u81EA\u52D5\u8A08\u7B97):" });
      const dilutionFactorDisplay = dilutionFactorContainer.createEl("span", {
        text: "---",
        cls: "buffer-calc-calculated-value"
      });
      const resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
      this.dilutionFactorDisplay = dilutionFactorDisplay;
      this.disableInputsForReadingMode(this.container);
      this.updateDilutionCalculation();
      console.log("Dilution calculator - Render completed successfully");
    } catch (error) {
      console.error("Dilution calculator render error:", error);
      this.container.createEl("div", {
        text: `Dilution calculator error: ${error.message}`,
        cls: "buffer-calc-error"
      });
    }
  }
  exportRecipe(result) {
    if (!result || result.components.length === 0) {
      new import_obsidian8.Notice("\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3059\u308B\u8A08\u7B97\u7D50\u679C\u304C\u3042\u308A\u307E\u305B\u3093");
      return;
    }
    const data = this.blockContent.data;
    let exportText = `# ${data.name || "\u30D0\u30C3\u30D5\u30A1\u30FC\u30EC\u30B7\u30D4"}

`;
    exportText += `**\u7DCF\u4F53\u7A4D:** ${data.totalVolume} ${data.volumeUnit || this.settings.defaultVolumeUnit}

`;
    exportText += `## \u6210\u5206

`;
    result.components.forEach((component, index) => {
      exportText += `${index + 1}. **${component.reagent.name}**: ${component.optimizedVolumeDisplay}`;
      if (component.percentOfTotal) {
        exportText += ` (${component.percentOfTotal.toFixed(1)}%)`;
      }
      exportText += `
`;
      exportText += `   - \u30B9\u30C8\u30C3\u30AF: ${component.stockConcentration} ${component.stockConcentrationUnit}
`;
      exportText += `   - \u6700\u7D42: ${component.finalConcentration} ${component.finalConcentrationUnit}
`;
      if (component.lotNumber) {
        exportText += `   - \u30ED\u30C3\u30C8: ${component.lotNumber}
`;
      }
      exportText += `
`;
    });
    if (result.solventVolume > 0) {
      const solventDisplay = ConversionUtils.optimizeVolumeDisplay(result.solventVolume, data.volumeUnit || this.settings.defaultVolumeUnit);
      exportText += `**\u6EB6\u5A92**: \u6C34\u3092\u52A0\u3048\u3066 ${solventDisplay.value.toFixed(this.settings.decimalPlaces)} ${solventDisplay.unit} \u306B\u3059\u308B

`;
    }
    if (result.warnings.length > 0) {
      exportText += `## \u8B66\u544A

`;
      result.warnings.forEach((warning) => {
        exportText += `- ${warning.message}
`;
      });
      exportText += `
`;
    }
    exportText += `*Buffer Calc \u306B\u3088\u308A ${new Date().toLocaleDateString()} \u306B\u751F\u6210*
`;
    navigator.clipboard.writeText(exportText).then(() => {
      new import_obsidian8.Notice("\u30EC\u30B7\u30D4\u3092\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8\u3057\u307E\u3057\u305F");
    }).catch(() => {
      new import_obsidian8.Notice("\u30EC\u30B7\u30D4\u306E\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u3078\u306E\u30B3\u30D4\u30FC\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
    });
  }
  async updateStockCalculation() {
    const data = this.blockContent.data;
    console.log("Updating stock calculation with data:", data);
    try {
      const result = this.calculationEngine.calculateStock(data);
      console.log("Stock calculation result:", result);
      this.lastResult = result;
      this.renderStockResults(result);
      if (result.errors.length === 0 && this.plugin) {
        this.plugin.addToHistory("stock", data.name || "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97", data, result);
      }
    } catch (error) {
      console.error("Stock calculation error:", error);
      console.error("Error stack:", error.stack);
      this.renderError(error.message);
    }
  }
  async updateDilutionCalculation() {
    const data = this.blockContent.data;
    console.log("Updating dilution calculation with data:", data);
    try {
      const result = this.calculationEngine.calculateDilution(data);
      console.log("Dilution calculation result:", result);
      this.lastResult = result;
      if (this.dilutionFactorDisplay && data.stockConcentration > 0 && data.finalConcentration > 0) {
        const dilutionFactor = data.stockConcentration / data.finalConcentration;
        this.dilutionFactorDisplay.textContent = `${dilutionFactor.toFixed(1)}\xD7`;
      }
      this.renderDilutionResults(result);
      if (result.errors.length === 0 && this.plugin) {
        this.plugin.addToHistory("dilution", data.name || "\u5E0C\u91C8\u8A08\u7B97", data, result);
      }
    } catch (error) {
      console.error("Dilution calculation error:", error);
      console.error("Error stack:", error.stack);
      this.renderError(error.message);
    }
  }
  renderStockResults(result) {
    let resultsContainer = this.container.querySelector(".buffer-calc-results");
    if (!resultsContainer) {
      resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
    }
    resultsContainer.empty();
    if (result.errors.length > 0) {
      const errorsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-errors" });
      errorsContainer.createEl("h4", { text: "\u30A8\u30E9\u30FC", cls: "buffer-calc-error-title" });
      result.errors.forEach((error) => {
        errorsContainer.createEl("div", {
          text: error.message,
          cls: "buffer-calc-error-item"
        });
      });
      return;
    }
    resultsContainer.createEl("h4", { text: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8ABF\u88FD\u624B\u9806" });
    if (result.components.length > 0) {
      const instructionsList = resultsContainer.createEl("ol", { cls: "buffer-calc-instructions" });
      const component = result.components[0];
      const massInstruction = instructionsList.createEl("li", { cls: "buffer-calc-instruction-item" });
      massInstruction.createEl("strong", { text: component.reagent.name });
      massInstruction.createEl("span", { text: `: ${component.optimizedVolumeDisplay} \u3092\u8A08\u91CF` });
      const dissolutionInstruction = instructionsList.createEl("li", { cls: "buffer-calc-instruction-item" });
      const data = this.blockContent.data;
      const solventName = data.solvent || "\u84B8\u7559\u6C34";
      dissolutionInstruction.createEl("span", {
        text: `${solventName}\u306B\u6EB6\u89E3\u3057\u3001\u7DCF\u4F53\u7A4D\u3092 ${data.volume} ${data.volumeUnit} \u306B\u30E1\u30B9\u30A2\u30C3\u30D7\u3059\u308B`
      });
    }
    if (this.settings.showCalculationSteps && result.calculationSteps && result.calculationSteps.length > 0) {
      const stepsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-steps" });
      stepsContainer.createEl("h5", { text: "\u8A08\u7B97\u30B9\u30C6\u30C3\u30D7" });
      result.calculationSteps.forEach((step) => {
        const stepEl = stepsContainer.createEl("div", { cls: "buffer-calc-step" });
        stepEl.createEl("strong", { text: `${step.step}. ${step.description}` });
        if (step.formula) {
          stepEl.createEl("div", {
            text: step.formula,
            cls: "buffer-calc-formula"
          });
        }
        stepEl.createEl("div", {
          text: `\u7D50\u679C: ${step.result.toFixed(this.settings.decimalPlaces)} ${step.unit}`,
          cls: "buffer-calc-step-result"
        });
      });
    }
    if (result.warnings.length > 0) {
      const warningsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-warnings" });
      warningsContainer.createEl("h5", { text: "\u8B66\u544A" });
      result.warnings.forEach((warning) => {
        const warningEl = warningsContainer.createEl("div", {
          text: warning.message,
          cls: `buffer-calc-warning buffer-calc-warning-${warning.severity}`
        });
      });
    }
  }
  renderDilutionResults(result) {
    let resultsContainer = this.container.querySelector(".buffer-calc-results");
    if (!resultsContainer) {
      resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
    }
    resultsContainer.empty();
    if (result.errors.length > 0) {
      const errorsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-errors" });
      errorsContainer.createEl("h4", { text: "\u30A8\u30E9\u30FC", cls: "buffer-calc-error-title" });
      result.errors.forEach((error) => {
        errorsContainer.createEl("div", {
          text: error.message,
          cls: "buffer-calc-error-item"
        });
      });
      return;
    }
    resultsContainer.createEl("h4", { text: "\u5E0C\u91C8\u624B\u9806" });
    if (result.components.length > 0) {
      const instructionsList = resultsContainer.createEl("ol", { cls: "buffer-calc-instructions" });
      const component = result.components[0];
      const data = this.blockContent.data;
      const stockInstruction = instructionsList.createEl("li", { cls: "buffer-calc-instruction-item" });
      stockInstruction.createEl("span", { text: `\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2: ${component.optimizedVolumeDisplay} \u3092\u53D6\u308B` });
      const solventInstruction = instructionsList.createEl("li", { cls: "buffer-calc-instruction-item" });
      const solventVolume = result.solventVolume;
      const solventDisplay = ConversionUtils.optimizeVolumeDisplay(solventVolume, data.volumeUnit);
      solventInstruction.createEl("span", {
        text: `\u6EB6\u5A92\u3092\u52A0\u3048\u3066\u7DCF\u4F53\u7A4D\u3092 ${data.finalVolume} ${data.volumeUnit} \u306B\u3059\u308B\uFF08\u6EB6\u5A92: ${solventDisplay.value.toFixed(this.settings.decimalPlaces)} ${solventDisplay.unit}\uFF09`
      });
    }
    if (this.settings.showCalculationSteps && result.calculationSteps && result.calculationSteps.length > 0) {
      const stepsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-steps" });
      stepsContainer.createEl("h5", { text: "\u8A08\u7B97\u30B9\u30C6\u30C3\u30D7" });
      result.calculationSteps.forEach((step) => {
        const stepEl = stepsContainer.createEl("div", { cls: "buffer-calc-step" });
        stepEl.createEl("strong", { text: `${step.step}. ${step.description}` });
        if (step.formula) {
          stepEl.createEl("div", {
            text: step.formula,
            cls: "buffer-calc-formula"
          });
        }
        stepEl.createEl("div", {
          text: `\u7D50\u679C: ${step.result.toFixed(this.settings.decimalPlaces)} ${step.unit}`,
          cls: "buffer-calc-step-result"
        });
      });
    }
    if (result.warnings.length > 0) {
      const warningsContainer = resultsContainer.createEl("div", { cls: "buffer-calc-warnings" });
      warningsContainer.createEl("h5", { text: "\u8B66\u544A" });
      result.warnings.forEach((warning) => {
        const warningEl = warningsContainer.createEl("div", {
          text: warning.message,
          cls: `buffer-calc-warning buffer-calc-warning-${warning.severity}`
        });
      });
    }
  }
  /**
   * モバイル最適化の適用
   */
  applyMobileOptimizations() {
    const viewportInfo = this.mobileOptimization.getViewportInfo();
    if (viewportInfo.isMobile) {
      this.container.addClass("mobile-optimized");
    }
    if (viewportInfo.isTablet) {
      this.container.addClass("tablet-optimized");
    }
    if (viewportInfo.isTouchDevice) {
      this.container.addClass("touch-device");
    }
    this.mobileOptimization.improveAccessibility(this.container);
    setTimeout(() => {
      this.optimizeInputElements();
      this.optimizeButtons();
    }, 100);
  }
  /**
   * 入力要素の最適化
   */
  optimizeInputElements() {
    const inputs = this.container.querySelectorAll("input");
    inputs.forEach((input) => {
      this.mobileOptimization.optimizeInputField(input);
    });
  }
  /**
   * ボタン要素の最適化
   */
  optimizeButtons() {
    const buttons = this.container.querySelectorAll("button");
    buttons.forEach((button) => {
      this.mobileOptimization.optimizeButton(button);
    });
  }
  /**
   * 読み取り専用タイトルを作成（リーディングモード用）
   */
  createReadOnlyTitle(container, data, defaultName) {
    const titleContainer = container.createEl("div", { cls: "buffer-calc-title-container" });
    titleContainer.createEl("h3", {
      text: data.name || defaultName,
      cls: "buffer-calc-title readonly-title",
      attr: { title: "\u30EA\u30FC\u30C7\u30A3\u30F3\u30B0\u30E2\u30FC\u30C9\u3067\u306F\u7DE8\u96C6\u3067\u304D\u307E\u305B\u3093" }
    });
    titleContainer.createEl("span", {
      text: "\u{1F512}",
      cls: "readonly-indicator",
      attr: { title: "\u30EA\u30FC\u30C7\u30A3\u30F3\u30B0\u30E2\u30FC\u30C9 - \u7DE8\u96C6\u4E0D\u53EF" }
    });
  }
  /**
   * 編集可能なタイトルを作成
   */
  createEditableTitle(container, data) {
    const titleContainer = container.createEl("div", { cls: "buffer-calc-title-container" });
    const titleDisplay = titleContainer.createEl("h3", {
      text: data.name || "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97",
      cls: "buffer-calc-title editable-title"
    });
    const editButton = titleContainer.createEl("button", {
      text: "\u270E",
      cls: "buffer-calc-edit-title-btn",
      attr: { "aria-label": "\u30BF\u30A4\u30C8\u30EB\u3092\u7DE8\u96C6" }
    });
    const titleInput = titleContainer.createEl("input", {
      type: "text",
      value: data.name || "",
      cls: "buffer-calc-title-input",
      attr: { "placeholder": "\u30D0\u30C3\u30D5\u30A1\u30FC\u540D\u3092\u5165\u529B..." }
    });
    titleInput.style.display = "none";
    let isEditing = false;
    const enterEditMode = () => {
      if (isEditing)
        return;
      isEditing = true;
      titleDisplay.style.display = "none";
      editButton.style.display = "none";
      titleInput.style.display = "inline-block";
      titleInput.value = data.name || "";
      titleInput.focus();
      titleInput.select();
    };
    const exitEditMode = (save = false) => {
      if (!isEditing)
        return;
      isEditing = false;
      if (save) {
        const newName = titleInput.value.trim();
        data.name = newName || void 0;
        titleDisplay.textContent = newName || "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97";
        this.updateBlockSource();
      }
      titleDisplay.style.display = "inline-block";
      editButton.style.display = "inline-block";
      titleInput.style.display = "none";
    };
    editButton.addEventListener("click", enterEditMode);
    titleDisplay.addEventListener("click", enterEditMode);
    titleInput.addEventListener("blur", () => exitEditMode(true));
    titleInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        exitEditMode(true);
      } else if (e.key === "Escape") {
        e.preventDefault();
        exitEditMode(false);
      }
    });
  }
  /**
   * ストック計算用の編集可能なタイトルを作成
   */
  createEditableStockTitle(container, data) {
    const titleContainer = container.createEl("div", { cls: "buffer-calc-title-container" });
    const titleDisplay = titleContainer.createEl("h3", {
      text: data.name || "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97",
      cls: "buffer-calc-title editable-title"
    });
    const editButton = titleContainer.createEl("button", {
      text: "\u270E",
      cls: "buffer-calc-edit-title-btn",
      attr: { "aria-label": "\u30BF\u30A4\u30C8\u30EB\u3092\u7DE8\u96C6" }
    });
    const titleInput = titleContainer.createEl("input", {
      type: "text",
      value: data.name || "",
      cls: "buffer-calc-title-input",
      attr: { "placeholder": "\u30B9\u30C8\u30C3\u30AF\u540D\u3092\u5165\u529B..." }
    });
    titleInput.style.display = "none";
    let isEditing = false;
    const enterEditMode = () => {
      if (isEditing)
        return;
      isEditing = true;
      titleDisplay.style.display = "none";
      editButton.style.display = "none";
      titleInput.style.display = "inline-block";
      titleInput.value = data.name || "";
      titleInput.focus();
      titleInput.select();
    };
    const exitEditMode = (save = false) => {
      if (!isEditing)
        return;
      isEditing = false;
      if (save) {
        const newName = titleInput.value.trim();
        data.name = newName || void 0;
        titleDisplay.textContent = newName || "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97";
        this.updateBlockSource();
      }
      titleDisplay.style.display = "inline-block";
      editButton.style.display = "inline-block";
      titleInput.style.display = "none";
    };
    editButton.addEventListener("click", enterEditMode);
    titleDisplay.addEventListener("click", enterEditMode);
    titleInput.addEventListener("blur", () => exitEditMode(true));
    titleInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        exitEditMode(true);
      } else if (e.key === "Escape") {
        e.preventDefault();
        exitEditMode(false);
      }
    });
  }
  /**
   * 希釈計算用の編集可能なタイトルを作成
   */
  createEditableDilutionTitle(container, data) {
    const titleContainer = container.createEl("div", { cls: "buffer-calc-title-container" });
    const titleDisplay = titleContainer.createEl("h3", {
      text: data.name || "\u5E0C\u91C8\u8A08\u7B97",
      cls: "buffer-calc-title editable-title"
    });
    const editButton = titleContainer.createEl("button", {
      text: "\u270E",
      cls: "buffer-calc-edit-title-btn",
      attr: { "aria-label": "\u30BF\u30A4\u30C8\u30EB\u3092\u7DE8\u96C6" }
    });
    const titleInput = titleContainer.createEl("input", {
      type: "text",
      value: data.name || "",
      cls: "buffer-calc-title-input",
      attr: { "placeholder": "\u5E0C\u91C8\u540D\u3092\u5165\u529B..." }
    });
    titleInput.style.display = "none";
    let isEditing = false;
    const enterEditMode = () => {
      if (isEditing)
        return;
      isEditing = true;
      titleDisplay.style.display = "none";
      editButton.style.display = "none";
      titleInput.style.display = "inline-block";
      titleInput.value = data.name || "";
      titleInput.focus();
      titleInput.select();
    };
    const exitEditMode = (save = false) => {
      if (!isEditing)
        return;
      isEditing = false;
      if (save) {
        const newName = titleInput.value.trim();
        data.name = newName || void 0;
        titleDisplay.textContent = newName || "\u5E0C\u91C8\u8A08\u7B97";
        this.updateBlockSource();
      }
      titleDisplay.style.display = "inline-block";
      editButton.style.display = "inline-block";
      titleInput.style.display = "none";
    };
    editButton.addEventListener("click", enterEditMode);
    titleDisplay.addEventListener("click", enterEditMode);
    titleInput.addEventListener("blur", () => exitEditMode(true));
    titleInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        exitEditMode(true);
      } else if (e.key === "Escape") {
        e.preventDefault();
        exitEditMode(false);
      }
    });
  }
  async renderSerialDilutionCalculator() {
    var _a, _b, _c, _d;
    const data = this.blockContent.data;
    const header = this.container.createEl("div", { cls: "buffer-calc-header" });
    if (this.isEditableMode()) {
      this.createSerialDilutionEditableTitle(header, data);
    } else {
      this.createReadOnlyTitle(header, data, "Serial Dilution Protocol");
    }
    const controls = this.container.createEl("div", { cls: "buffer-calc-controls" });
    const stockSection = controls.createEl("div", { cls: "buffer-calc-input-group" });
    const stockRow = stockSection.createEl("div", { cls: "buffer-calc-input-row" });
    stockRow.createEl("label", { text: "\u30B9\u30C8\u30C3\u30AF\u6FC3\u5EA6:", cls: "buffer-calc-label" });
    const stockConcInput = stockRow.createEl("input", {
      type: "number",
      value: ((_a = data.stockConcentration) == null ? void 0 : _a.toString()) || "",
      cls: "buffer-calc-input"
    });
    const stockUnitSelect = stockRow.createEl("select", { cls: "buffer-calc-select" });
    this.populateConcentrationUnits(stockUnitSelect, data.stockUnit);
    const cellSection = controls.createEl("div", { cls: "buffer-calc-section" });
    const cellVolumeRow = cellSection.createEl("div", { cls: "buffer-calc-input-row" });
    cellVolumeRow.createEl("label", { text: "\u7D30\u80DE\u6EB6\u6DB2\u306E\u91CF:", cls: "buffer-calc-label" });
    const cellVolumeInput = cellVolumeRow.createEl("input", {
      type: "number",
      value: ((_b = data.cellVolume) == null ? void 0 : _b.toString()) || "",
      cls: "buffer-calc-input"
    });
    const cellVolumeUnitSelect = cellVolumeRow.createEl("select", { cls: "buffer-calc-select" });
    this.populateVolumeUnits(cellVolumeUnitSelect, data.cellVolumeUnit);
    const additionVolumeRow = cellSection.createEl("div", { cls: "buffer-calc-input-row" });
    additionVolumeRow.createEl("label", { text: "\u7D30\u80DE\u3078\u306E\u6DFB\u52A0\u91CF:", cls: "buffer-calc-label" });
    const additionVolumeInput = additionVolumeRow.createEl("input", {
      type: "number",
      value: ((_c = data.additionVolume) == null ? void 0 : _c.toString()) || "",
      cls: "buffer-calc-input"
    });
    const additionVolumeUnitSelect = additionVolumeRow.createEl("select", { cls: "buffer-calc-select" });
    this.populateVolumeUnits(additionVolumeUnitSelect, data.additionVolumeUnit);
    const dilutionSection = controls.createEl("div", { cls: "buffer-calc-input-group" });
    const dilutionVolumeRow = dilutionSection.createEl("div", { cls: "buffer-calc-input-row" });
    dilutionVolumeRow.createEl("label", { text: "\u5404\u5E0C\u91C8\u6BB5\u968E\u3067\u306E\u4F5C\u6210\u91CF:", cls: "buffer-calc-label" });
    const dilutionVolumeInput = dilutionVolumeRow.createEl("input", {
      type: "number",
      value: ((_d = data.dilutionVolume) == null ? void 0 : _d.toString()) || "",
      cls: "buffer-calc-input"
    });
    const dilutionVolumeUnitSelect = dilutionVolumeRow.createEl("select", { cls: "buffer-calc-select" });
    this.populateVolumeUnits(dilutionVolumeUnitSelect, data.dilutionVolumeUnit);
    const targetSection = controls.createEl("div", { cls: "buffer-calc-section" });
    targetSection.createEl("div", {
      text: "\u6700\u7D42\u76EE\u6A19\u6FC3\u5EA6",
      cls: "buffer-calc-label-text"
    });
    const targetConcentrationsContainer = targetSection.createEl("div", { cls: "serial-dilution-targets-container" });
    const targetSettingsContainer = targetSection.createEl("div", { cls: "serial-dilution-target-settings" });
    const inputModeRow = targetSettingsContainer.createEl("div", { cls: "buffer-calc-input-row" });
    inputModeRow.createEl("label", { text: "\u5165\u529B\u5F62\u5F0F:", cls: "buffer-calc-label" });
    const inputModeSelect = inputModeRow.createEl("select", { cls: "buffer-calc-select" });
    inputModeSelect.createEl("option", { value: "standard" /* STANDARD */, text: "\u6A19\u6E96\u5F62\u5F0F" });
    inputModeSelect.createEl("option", { value: "exponential" /* EXPONENTIAL */, text: "\u6307\u6570\u5F62\u5F0F" });
    inputModeSelect.value = data.targetInputMode || "exponential" /* EXPONENTIAL */;
    const targetUnitRow = targetSettingsContainer.createEl("div", { cls: "buffer-calc-input-row" });
    targetUnitRow.createEl("label", { text: "\u6FC3\u5EA6\u5358\u4F4D:", cls: "buffer-calc-label" });
    const targetUnitSelect = targetUnitRow.createEl("select", { cls: "buffer-calc-select" });
    this.populateConcentrationUnits(targetUnitSelect, data.targetUnit);
    const displaySection = controls.createEl("div", { cls: "buffer-calc-input-group" });
    const displayFormatRow = displaySection.createEl("div", { cls: "buffer-calc-input-row" });
    displayFormatRow.createEl("label", { text: "\u624B\u9806\u8868\u793A:", cls: "buffer-calc-label" });
    const displayFormatSelect = displayFormatRow.createEl("select", { cls: "buffer-calc-select" });
    displayFormatSelect.createEl("option", { value: "text" /* TEXT */, text: "\u6587\u5B57\u5F62\u5F0F" });
    displayFormatSelect.createEl("option", { value: "table" /* TABLE */, text: "\u8868\u5F62\u5F0F" });
    displayFormatSelect.value = data.stepDisplayFormat || "text" /* TEXT */;
    const resultsContainer = this.container.createEl("div", { cls: "buffer-calc-results" });
    const toggleUnitSelector = () => {
      const isExponential = inputModeSelect.value === "exponential" /* EXPONENTIAL */;
      targetUnitRow.style.display = isExponential ? "none" : "flex";
    };
    data.targetInputMode = inputModeSelect.value;
    toggleUnitSelector();
    const recalculate = () => {
      try {
        data.stockConcentration = parseFloat(stockConcInput.value) || 0;
        data.stockUnit = stockUnitSelect.value;
        data.cellVolume = parseFloat(cellVolumeInput.value) || 0;
        data.cellVolumeUnit = cellVolumeUnitSelect.value;
        data.additionVolume = parseFloat(additionVolumeInput.value) || 0;
        data.additionVolumeUnit = additionVolumeUnitSelect.value;
        data.dilutionVolume = parseFloat(dilutionVolumeInput.value) || 0;
        data.dilutionVolumeUnit = dilutionVolumeUnitSelect.value;
        data.targetUnit = targetUnitSelect.value;
        data.targetInputMode = inputModeSelect.value;
        data.stepDisplayFormat = displayFormatSelect.value;
        const result = this.calculationEngine.calculateSerialDilution(data);
        this.renderSerialDilutionResults(resultsContainer, result, data);
        this.debouncedUpdateBlockSource();
      } catch (error) {
        console.error("Serial dilution calculation error:", error);
        resultsContainer.innerHTML = `<div class="buffer-calc-error">\u8A08\u7B97\u30A8\u30E9\u30FC: ${error.message}</div>`;
      }
    };
    [
      stockConcInput,
      stockUnitSelect,
      cellVolumeInput,
      cellVolumeUnitSelect,
      additionVolumeInput,
      additionVolumeUnitSelect,
      dilutionVolumeInput,
      dilutionVolumeUnitSelect,
      targetUnitSelect,
      displayFormatSelect
    ].forEach((element) => {
      element.addEventListener("input", recalculate);
      element.addEventListener("change", recalculate);
    });
    inputModeSelect.addEventListener("change", () => {
      data.targetInputMode = inputModeSelect.value;
      toggleUnitSelector();
      this.renderTargetConcentrations(targetConcentrationsContainer, data);
      recalculate();
      this.updateBlockSource();
    });
    this.disableInputsForReadingMode(this.container);
    this.renderTargetConcentrations(targetConcentrationsContainer, data);
    recalculate();
  }
  renderTargetConcentrations(container, data) {
    container.empty();
    if (!data.targetConcentrations || data.targetConcentrations.length === 0) {
      data.targetConcentrations = [100, 10, 1, 0.1];
    }
    data.targetConcentrations.forEach((concentration, index) => {
      const concentrationRow = container.createEl("div", { cls: "buffer-calc-input-row serial-dilution-target-row" });
      const isExponentialMode = data.targetInputMode === "exponential" /* EXPONENTIAL */;
      if (isExponentialMode) {
        const exponentialContainer = concentrationRow.createEl("div", { cls: "exponential-input-container" });
        exponentialContainer.style.display = "flex";
        exponentialContainer.style.flexDirection = "row";
        exponentialContainer.style.alignItems = "center";
        exponentialContainer.style.flexWrap = "nowrap";
        exponentialContainer.style.gap = "0.25rem";
        exponentialContainer.style.minWidth = "120px";
        exponentialContainer.style.whiteSpace = "nowrap";
        const prefixSpan = exponentialContainer.createEl("span", { text: "10^", cls: "exponential-prefix" });
        prefixSpan.style.flexShrink = "0";
        prefixSpan.style.whiteSpace = "nowrap";
        prefixSpan.style.display = "inline-block";
        const exponentInput = exponentialContainer.createEl("input", {
          type: "number",
          value: this.concentrationToExponent(concentration).toString(),
          cls: "buffer-calc-input exponential-input",
          attr: { step: "0.1", placeholder: "-6" }
        });
        exponentInput.style.flexShrink = "0";
        exponentInput.style.display = "inline-block";
        const unitSpan = exponentialContainer.createEl("span", { text: " M", cls: "exponential-unit" });
        unitSpan.style.flexShrink = "0";
        unitSpan.style.whiteSpace = "nowrap";
        unitSpan.style.display = "inline-block";
        concentrationRow.concentrationInput = exponentInput;
      } else {
        const concentrationInput2 = concentrationRow.createEl("input", {
          type: "number",
          value: concentration.toString(),
          cls: "buffer-calc-input",
          attr: { step: "0.1" }
        });
        concentrationRow.concentrationInput = concentrationInput2;
      }
      const buttonContainer = concentrationRow.createEl("div", { cls: "serial-dilution-target-buttons" });
      const insertAboveBtn = buttonContainer.createEl("button", {
        text: "\u2191",
        cls: "buffer-calc-button buffer-calc-button-small serial-dilution-insert-btn",
        attr: { title: "\u4E0A\u306B\u8FFD\u52A0" }
      });
      const insertBelowBtn = buttonContainer.createEl("button", {
        text: "\u2193",
        cls: "buffer-calc-button buffer-calc-button-small serial-dilution-insert-btn",
        attr: { title: "\u4E0B\u306B\u8FFD\u52A0" }
      });
      const removeBtn = buttonContainer.createEl("button", {
        text: "\xD7",
        cls: "buffer-calc-button buffer-calc-button-danger buffer-calc-button-small serial-dilution-remove-btn",
        attr: { title: "\u524A\u9664" }
      });
      const concentrationInput = concentrationRow.concentrationInput;
      if (concentrationInput) {
        concentrationInput.addEventListener("input", () => {
          if (isExponentialMode) {
            const exponent = parseFloat(concentrationInput.value) || -6;
            data.targetConcentrations[index] = this.exponentToConcentration(exponent);
          } else {
            data.targetConcentrations[index] = parseFloat(concentrationInput.value) || 0;
          }
          concentrationInput.dispatchEvent(new Event("change", { bubbles: true }));
        });
      }
      insertAboveBtn.addEventListener("click", () => {
        var _a;
        this.insertConcentrationAt(data, index, "before");
        data.targetInputMode = (_a = document.querySelector(".serial-dilution-target-settings select")) == null ? void 0 : _a.value;
        this.renderTargetConcentrations(container, data);
        insertAboveBtn.dispatchEvent(new Event("change", { bubbles: true }));
      });
      insertBelowBtn.addEventListener("click", () => {
        var _a;
        this.insertConcentrationAt(data, index, "after");
        data.targetInputMode = (_a = document.querySelector(".serial-dilution-target-settings select")) == null ? void 0 : _a.value;
        this.renderTargetConcentrations(container, data);
        insertBelowBtn.dispatchEvent(new Event("change", { bubbles: true }));
      });
      removeBtn.addEventListener("click", () => {
        var _a;
        data.targetConcentrations.splice(index, 1);
        data.targetInputMode = (_a = document.querySelector(".serial-dilution-target-settings select")) == null ? void 0 : _a.value;
        this.renderTargetConcentrations(container, data);
        container.dispatchEvent(new Event("change", { bubbles: true }));
      });
      if (data.targetConcentrations.length === 1) {
        removeBtn.style.visibility = "hidden";
      }
    });
  }
  insertConcentrationAt(data, index, position) {
    const newConcentration = 1;
    const insertIndex = position === "before" ? index : index + 1;
    data.targetConcentrations.splice(insertIndex, 0, newConcentration);
  }
  renderSerialDilutionResults(container, result, data) {
    container.empty();
    if (result.errors.length > 0) {
      const errorContainer = container.createEl("div", { cls: "buffer-calc-errors" });
      errorContainer.createEl("h3", { text: "\u30A8\u30E9\u30FC" });
      result.errors.forEach((error) => {
        errorContainer.createEl("div", {
          text: error.message,
          cls: "buffer-calc-error-item"
        });
      });
      return;
    }
    const stepsContainer = container.createEl("div", { cls: "serial-dilution-steps" });
    const displayFormat = data.stepDisplayFormat || "text" /* TEXT */;
    if (displayFormat === "table" /* TABLE */) {
      const stepsTable = stepsContainer.createEl("table", { cls: "serial-dilution-table" });
      const headerRow = stepsTable.createEl("tr");
      headerRow.createEl("th", { text: "\u30B9\u30C6\u30C3\u30D7" });
      headerRow.createEl("th", { text: "\u5143\u6FC3\u5EA6" });
      headerRow.createEl("th", { text: "\u76EE\u6A19\u6FC3\u5EA6" });
      headerRow.createEl("th", { text: "Stock\u91CF" });
      headerRow.createEl("th", { text: "\u6EB6\u5A92\u91CF" });
      headerRow.createEl("th", { text: "\u5E0C\u91C8\u500D\u7387" });
      result.steps.forEach((step) => {
        const row = stepsTable.createEl("tr");
        row.createEl("td", { text: step.name });
        row.createEl("td", { text: `${step.fromConcentration.toFixed(this.settings.decimalPlaces)} ${step.concentrationUnit}` });
        row.createEl("td", { text: `${step.toConcentration.toFixed(this.settings.decimalPlaces)} ${step.concentrationUnit}` });
        row.createEl("td", { text: `${step.stockVolume.toFixed(this.settings.decimalPlaces)} ${step.volumeUnit}` });
        row.createEl("td", { text: `${step.solventVolume.toFixed(this.settings.decimalPlaces)} ${step.volumeUnit}` });
        row.createEl("td", { text: `${step.dilutionFactor.toFixed(1)}\u500D` });
      });
    } else {
      const stepsList = stepsContainer.createEl("ol");
      result.steps.forEach((step) => {
        stepsList.createEl("li", { text: step.description });
      });
    }
    if (result.warnings.length > 0) {
      const warningsContainer = container.createEl("div", { cls: "buffer-calc-warnings" });
      warningsContainer.createEl("h3", { text: "\u8B66\u544A" });
      result.warnings.forEach((warning) => {
        const warningEl = warningsContainer.createEl("div", {
          text: warning.message,
          cls: `buffer-calc-warning-item buffer-calc-warning-${warning.severity}`
        });
      });
    }
    if (result.exportData) {
      const exportContainer = container.createEl("div", { cls: "serial-dilution-export" });
      const exportButtons = exportContainer.createEl("div", { cls: "buffer-calc-export-buttons" });
      const csvBtn = exportButtons.createEl("button", {
        text: "CSV\u5F62\u5F0F\u3067\u30B3\u30D4\u30FC",
        cls: "buffer-calc-button buffer-calc-button-secondary"
      });
      const markdownBtn = exportButtons.createEl("button", {
        text: "Markdown\u5F62\u5F0F\u3067\u30B3\u30D4\u30FC",
        cls: "buffer-calc-button buffer-calc-button-secondary"
      });
      csvBtn.addEventListener("click", () => {
        navigator.clipboard.writeText(result.exportData.csvFormat);
        new import_obsidian8.Notice("CSV\u5F62\u5F0F\u3067\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC\u3057\u307E\u3057\u305F");
      });
      markdownBtn.addEventListener("click", () => {
        navigator.clipboard.writeText(result.exportData.markdownFormat);
        new import_obsidian8.Notice("Markdown\u5F62\u5F0F\u3067\u30AF\u30EA\u30C3\u30D7\u30DC\u30FC\u30C9\u306B\u30B3\u30D4\u30FC\u3057\u307E\u3057\u305F");
      });
    }
  }
  createSerialDilutionEditableTitle(container, data) {
    const titleContainer = container.createEl("div", { cls: "buffer-calc-title-container" });
    const titleDisplay = titleContainer.createEl("span", {
      text: data.name || "Serial Dilution Protocol",
      cls: "buffer-calc-title"
    });
    const editButton = titleContainer.createEl("button", {
      text: "\u270F\uFE0F",
      cls: "buffer-calc-edit-button",
      attr: { title: "\u30BF\u30A4\u30C8\u30EB\u3092\u7DE8\u96C6" }
    });
    const titleInput = titleContainer.createEl("input", {
      type: "text",
      value: data.name || "Serial Dilution Protocol",
      cls: "buffer-calc-title-input"
    });
    titleInput.style.display = "none";
    let isEditing = false;
    const enterEditMode = () => {
      if (isEditing)
        return;
      isEditing = true;
      titleDisplay.style.display = "none";
      editButton.style.display = "none";
      titleInput.style.display = "inline-block";
      titleInput.focus();
      titleInput.select();
    };
    const exitEditMode = (save = false) => {
      if (!isEditing)
        return;
      isEditing = false;
      if (save) {
        const newName = titleInput.value.trim();
        data.name = newName || void 0;
        titleDisplay.textContent = newName || "Serial Dilution Protocol";
        this.updateBlockSource();
      }
      titleDisplay.style.display = "inline-block";
      editButton.style.display = "inline-block";
      titleInput.style.display = "none";
    };
    editButton.addEventListener("click", enterEditMode);
    titleDisplay.addEventListener("click", enterEditMode);
    titleInput.addEventListener("blur", () => exitEditMode(true));
    titleInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        exitEditMode(true);
      } else if (e.key === "Escape") {
        e.preventDefault();
        exitEditMode(false);
      }
    });
  }
  formatConcentrationDisplay(concentration, unit) {
    return `${concentration.toFixed(this.settings.decimalPlaces)} ${unit}`;
  }
  /**
   * Convert concentration in µM to exponent for 10^x M display
   */
  concentrationToExponent(concentrationInMicroMolar) {
    if (concentrationInMicroMolar <= 0)
      return -6;
    const concentrationInMolar = concentrationInMicroMolar / 1e6;
    return Math.log10(concentrationInMolar);
  }
  /**
   * Convert exponent to concentration in µM
   */
  exponentToConcentration(exponent) {
    const concentrationInMolar = Math.pow(10, exponent);
    return concentrationInMolar * 1e6;
  }
  /**
   * Check if the current view mode allows editing
   * Returns true for source mode and live preview mode, false for reading mode
   */
  isEditableMode() {
    var _a, _b, _c, _d, _e;
    try {
      const activeView = (_c = (_b = (_a = this.plugin) == null ? void 0 : _a.app) == null ? void 0 : _b.workspace) == null ? void 0 : _c.getActiveViewOfType(import_obsidian8.MarkdownView);
      if (!activeView) {
        console.log("\u274C No active MarkdownView found");
        return false;
      }
      const mode = activeView.getMode();
      console.log("\u{1F50D} Current view mode:", mode);
      console.log("\u{1F4C4} Active view file:", (_d = activeView.file) == null ? void 0 : _d.path);
      console.log("\u{1F4C1} Context source path:", this.context.sourcePath);
      if (mode === "source") {
        console.log("\u270F\uFE0F Source mode detected - editable");
        return true;
      }
      if (mode === "preview") {
        const isSameFile = ((_e = activeView.file) == null ? void 0 : _e.path) === this.context.sourcePath;
        console.log("\u{1F4C2} Same file context:", isSameFile);
        if (!isSameFile) {
          console.log("\u{1F534} Different file - not editable");
          return false;
        }
        const editor = activeView.editor;
        const hasEditor = !!editor;
        const hasReplaceRange = editor && typeof editor.replaceRange === "function";
        console.log("\u{1F4DD} Has editor object:", hasEditor);
        console.log("\u2699\uFE0F Has replaceRange function:", hasReplaceRange);
        const result = !!(editor && typeof editor.replaceRange === "function");
        console.log("\u{1F3AF} Final isEditable result:", result);
        return result;
      }
      console.log("\u2753 Unknown mode - not editable");
      return false;
    } catch (error) {
      console.error("\u{1F4A5} Error detecting editable mode:", error);
      return false;
    }
  }
  /**
   * Disable input elements in controls area when in reading mode (excludes title area)
   */
  disableInputsForReadingMode(container) {
    if (!this.isEditableMode()) {
      const inputs = container.querySelectorAll(
        ".buffer-calc-controls input, .buffer-calc-controls select, .buffer-calc-controls textarea, .buffer-calc-controls button, .buffer-calc-results input, .buffer-calc-results select, .buffer-calc-results button, .serial-dilution-target-concentrations input, .serial-dilution-target-concentrations button, .buffer-calc-components input, .buffer-calc-components select, .buffer-calc-components button"
      );
      inputs.forEach((element) => {
        const isInTitleContainer = element.closest(".buffer-calc-title-container");
        if (!isInTitleContainer) {
          element.disabled = true;
          element.classList.add("buffer-calc-readonly");
        }
      });
      const editableElements = container.querySelectorAll(
        '.buffer-calc-controls [contenteditable="true"], .buffer-calc-results [contenteditable="true"], .serial-dilution-target-concentrations [contenteditable="true"], .buffer-calc-components [contenteditable="true"]'
      );
      editableElements.forEach((element) => {
        const isInTitleContainer = element.closest(".buffer-calc-title-container");
        if (!isInTitleContainer) {
          element.contentEditable = "false";
          element.classList.add("buffer-calc-readonly");
        }
      });
      console.log(`\u{1F512} Disabled input elements for reading mode (title area preserved)`);
    }
  }
  /**
   * Debounced version of updateBlockSource for frequent input changes
   */
  debouncedUpdateBlockSource() {
    if (this.sourceUpdateTimeout) {
      clearTimeout(this.sourceUpdateTimeout);
    }
    this.sourceUpdateTimeout = setTimeout(() => {
      this.updateBlockSource();
    }, 300);
  }
  /**
   * Update the markdown source with current data using Editor API
   */
  async updateBlockSource() {
    var _a, _b, _c, _d, _e, _f;
    if (this.isUpdatingSource) {
      console.log("Update already in progress, skipping...");
      return;
    }
    if (!this.isEditableMode()) {
      console.warn("Cannot update source in reading mode - editing is not allowed");
      return;
    }
    this.isUpdatingSource = true;
    try {
      console.log("Starting block source update...");
      const activeView = (_c = (_b = (_a = this.plugin) == null ? void 0 : _a.app) == null ? void 0 : _b.workspace) == null ? void 0 : _c.getActiveViewOfType(import_obsidian8.MarkdownView);
      if (!activeView || !("editor" in activeView)) {
        console.warn("No active markdown editor found");
        return;
      }
      const editor = activeView.editor;
      if (!editor) {
        console.warn("Editor not available");
        return;
      }
      const currentFile = activeView.file;
      if (!currentFile || currentFile.path !== this.context.sourcePath) {
        console.warn(
          "Current file does not match context path:",
          { current: currentFile == null ? void 0 : currentFile.path, expected: this.context.sourcePath }
        );
        return;
      }
      const sectionInfo = (_e = (_d = this.context).getSectionInfo) == null ? void 0 : _e.call(_d, this.container);
      if (!sectionInfo) {
        console.warn("Could not get section information");
        return;
      }
      console.log("Section info:", sectionInfo);
      const { lineStart, lineEnd } = sectionInfo;
      if (lineStart === void 0 || lineEnd === void 0) {
        console.warn("Invalid line boundaries:", { lineStart, lineEnd });
        return;
      }
      const newYaml = this.dataToYAML(this.blockContent.data, this.blockContent.type);
      console.log("Generated new YAML:", newYaml);
      const from = { line: lineStart, ch: 0 };
      const to = { line: lineEnd, ch: ((_f = editor.getLine(lineEnd)) == null ? void 0 : _f.length) || 0 };
      console.log("Replacing range:", { from, to });
      console.log("Current content lines:", lineStart, "to", lineEnd);
      editor.replaceRange(newYaml, from, to);
      console.log("Block source updated successfully via editor API");
    } catch (error) {
      console.error("Error updating block source:", error);
    } finally {
      setTimeout(() => {
        this.isUpdatingSource = false;
      }, 100);
    }
  }
  /**
   * Convert data object back to YAML format
   */
  dataToYAML(data, type) {
    let yaml = `\`\`\`${type}
`;
    if (type === "buffer") {
      yaml += `name: ${data.name || "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97"}
`;
      yaml += `totalVolume: ${data.totalVolume}
`;
      yaml += `volumeUnit: ${data.volumeUnit}
`;
      if (data.components && data.components.length > 0) {
        yaml += `components:
`;
        data.components.forEach((comp) => {
          yaml += `  - name: ${comp.name}
`;
          yaml += `    stockConc: ${comp.stockConc}
`;
          yaml += `    stockUnit: ${comp.stockUnit}
`;
          yaml += `    finalConc: ${comp.finalConc}
`;
          yaml += `    finalUnit: ${comp.finalUnit}
`;
        });
      }
    } else if (type === "stock") {
      yaml += `name: ${data.name || "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97"}
`;
      yaml += `reagentName: ${data.reagentName || ""}
`;
      if (data.molecularWeight)
        yaml += `molecularWeight: ${data.molecularWeight}
`;
      yaml += `targetConcentration: ${data.targetConcentration}
`;
      yaml += `concentrationUnit: ${data.concentrationUnit}
`;
      yaml += `volume: ${data.volume}
`;
      yaml += `volumeUnit: ${data.volumeUnit}
`;
      if (data.purity)
        yaml += `purity: ${data.purity}
`;
      if (data.solvent)
        yaml += `solvent: ${data.solvent}
`;
    } else if (type === "dilution") {
      yaml += `name: ${data.name || "\u5E0C\u91C8\u8A08\u7B97"}
`;
      yaml += `stockConcentration: ${data.stockConcentration}
`;
      yaml += `stockConcentrationUnit: ${data.stockConcentrationUnit}
`;
      yaml += `finalConcentration: ${data.finalConcentration}
`;
      yaml += `finalConcentrationUnit: ${data.finalConcentrationUnit}
`;
      yaml += `finalVolume: ${data.finalVolume}
`;
      yaml += `volumeUnit: ${data.volumeUnit}
`;
    } else if (type === "serial-dilution") {
      yaml += `name: ${data.name || "Serial Dilution Protocol"}
`;
      yaml += `stockConcentration: ${data.stockConcentration}
`;
      yaml += `stockUnit: ${data.stockUnit}
`;
      yaml += `cellVolume: ${data.cellVolume}
`;
      yaml += `cellVolumeUnit: ${data.cellVolumeUnit}
`;
      yaml += `additionVolume: ${data.additionVolume}
`;
      yaml += `additionVolumeUnit: ${data.additionVolumeUnit}
`;
      yaml += `dilutionVolume: ${data.dilutionVolume}
`;
      yaml += `dilutionVolumeUnit: ${data.dilutionVolumeUnit}
`;
      yaml += `targetConcentrations: [${data.targetConcentrations.join(", ")}]
`;
      yaml += `targetUnit: ${data.targetUnit}
`;
      yaml += `targetInputMode: ${data.targetInputMode}
`;
      yaml += `stepDisplayFormat: ${data.stepDisplayFormat}
`;
    }
    yaml += "```";
    return yaml;
  }
};

// src/ui/template-selector.ts
var import_obsidian9 = require("obsidian");

// src/data/templates.ts
init_types();
var TemplateDatabase = class {
  constructor() {
    this.builtInTemplates = [];
    this.initializeBuiltInTemplates();
  }
  static getInstance() {
    if (!TemplateDatabase.instance) {
      TemplateDatabase.instance = new TemplateDatabase();
    }
    return TemplateDatabase.instance;
  }
  initializeBuiltInTemplates() {
    this.builtInTemplates = [
      // PBS Templates
      {
        id: "pbs-1x-standard",
        name: "1\xD7 PBS\uFF08\u6A19\u6E96\uFF09",
        description: "\u7D30\u80DE\u57F9\u990A\u3084\u30D0\u30A4\u30AA\u30A2\u30C3\u30BB\u30A4\u3067\u6700\u3082\u4E00\u822C\u7684\u306B\u4F7F\u7528\u3055\u308C\u308B\u30EA\u30F3\u9178\u7DE9\u885D\u751F\u7406\u98DF\u5869\u6C34",
        category: "common_buffers" /* COMMON_BUFFERS */,
        type: "buffer",
        template: {
          name: "1\xD7 PBS",
          totalVolume: 1e3,
          volumeUnit: "mL" /* MILLILITER */,
          components: [
            {
              name: "NaCl",
              stockConc: 5,
              stockUnit: "M" /* MOLAR */,
              finalConc: 137,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "KCl",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 2.7,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "Na2HPO4",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 10,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "KH2PO4",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 1.8,
              finalUnit: "mM" /* MILLIMOLAR */
            }
          ],
          notes: "pH 7.4, \u6D78\u900F\u5727 ~300 mOsm"
        },
        tags: ["PBS", "\u751F\u7406\u98DF\u5869\u6C34", "\u7D30\u80DE\u57F9\u990A", "pH7.4"],
        difficulty: "beginner",
        estimatedTime: "10\u5206",
        author: "Buffer Calc Team",
        references: ["Cold Spring Harbor Protocols"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      {
        id: "pbs-10x-stock",
        name: "10\xD7 PBS \u30B9\u30C8\u30C3\u30AF",
        description: "\u5E0C\u91C8\u3057\u30661\xD7 PBS\u3092\u4F5C\u6210\u3059\u308B\u305F\u3081\u306E10\u500D\u6FC3\u7E2E\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2",
        category: "common_buffers" /* COMMON_BUFFERS */,
        type: "buffer",
        template: {
          name: "10\xD7 PBS \u30B9\u30C8\u30C3\u30AF",
          totalVolume: 1e3,
          volumeUnit: "mL" /* MILLILITER */,
          components: [
            {
              name: "NaCl",
              stockConc: 5,
              stockUnit: "M" /* MOLAR */,
              finalConc: 1.37,
              finalUnit: "M" /* MOLAR */
            },
            {
              name: "KCl",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 27,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "Na2HPO4",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 100,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "KH2PO4",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 18,
              finalUnit: "mM" /* MILLIMOLAR */
            }
          ],
          notes: "\u4F7F\u7528\u6642\u306B10\u500D\u5E0C\u91C8\u3057\u3066\u304F\u3060\u3055\u3044"
        },
        tags: ["PBS", "\u30B9\u30C8\u30C3\u30AF", "10\u500D\u6FC3\u7E2E"],
        difficulty: "beginner",
        estimatedTime: "15\u5206",
        author: "Buffer Calc Team",
        references: ["Cold Spring Harbor Protocols"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      // Tris Buffers
      {
        id: "tris-hcl-50mm",
        name: "50mM Tris-HCl \u30D0\u30C3\u30D5\u30A1\u30FC",
        description: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u7CBE\u88FD\u3084\u751F\u5316\u5B66\u5B9F\u9A13\u3067\u6C4E\u7528\u7684\u306B\u4F7F\u7528\u3055\u308C\u308BTris\u7DE9\u885D\u6DB2",
        category: "protein_buffers" /* PROTEIN_BUFFERS */,
        type: "buffer",
        template: {
          name: "50mM Tris-HCl pH 7.5",
          totalVolume: 500,
          volumeUnit: "mL" /* MILLILITER */,
          components: [
            {
              name: "Tris-HCl",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 50,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "NaCl",
              stockConc: 5,
              stockUnit: "M" /* MOLAR */,
              finalConc: 150,
              finalUnit: "mM" /* MILLIMOLAR */
            }
          ],
          notes: "pH 7.5\u306B\u8ABF\u6574\u3001\u30BF\u30F3\u30D1\u30AF\u8CEA\u5B89\u5B9A\u5316\u7528"
        },
        tags: ["Tris", "\u30BF\u30F3\u30D1\u30AF\u8CEA", "pH7.5", "\u7CBE\u88FD"],
        difficulty: "beginner",
        estimatedTime: "8\u5206",
        author: "Buffer Calc Team",
        references: ["Molecular Cloning Manual"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      // HEPES Buffer
      {
        id: "hepes-buffer-mammalian",
        name: "HEPES \u7D30\u80DE\u57F9\u990A\u30D0\u30C3\u30D5\u30A1\u30FC",
        description: "\u54FA\u4E73\u985E\u7D30\u80DE\u57F9\u990A\u7528\u306E\u751F\u7406\u7684HEPES\u7DE9\u885D\u6DB2",
        category: "cell_culture" /* CELL_CULTURE */,
        type: "buffer",
        template: {
          name: "HEPES \u7D30\u80DE\u57F9\u990A\u6DB2",
          totalVolume: 1e3,
          volumeUnit: "mL" /* MILLILITER */,
          components: [
            {
              name: "HEPES",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 25,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "NaCl",
              stockConc: 5,
              stockUnit: "M" /* MOLAR */,
              finalConc: 140,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "KCl",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 5,
              finalUnit: "mM" /* MILLIMOLAR */
            },
            {
              name: "Glucose",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 10,
              finalUnit: "mM" /* MILLIMOLAR */
            }
          ],
          notes: "pH 7.3-7.4\u3001CO2\u30A4\u30F3\u30AD\u30E5\u30D9\u30FC\u30BF\u30FC\u4E0D\u8981"
        },
        tags: ["HEPES", "\u7D30\u80DE\u57F9\u990A", "\u54FA\u4E73\u985E\u7D30\u80DE", "pH7.4"],
        difficulty: "intermediate",
        estimatedTime: "12\u5206",
        author: "Buffer Calc Team",
        references: ["Cell Culture Protocols"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      // Stock Solution Templates
      {
        id: "tris-stock-1m",
        name: "1M Tris-HCl \u30B9\u30C8\u30C3\u30AF",
        description: "\u5B9F\u9A13\u5BA4\u3067\u6700\u3082\u4F7F\u7528\u983B\u5EA6\u306E\u9AD8\u3044Tris-HCl\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2",
        category: "common_buffers" /* COMMON_BUFFERS */,
        type: "stock",
        template: {
          name: "1M Tris-HCl \u30B9\u30C8\u30C3\u30AF",
          reagentName: "Tris-HCl",
          molecularWeight: 157.6,
          targetConcentration: 1,
          concentrationUnit: "M" /* MOLAR */,
          volume: 100,
          volumeUnit: "mL" /* MILLILITER */,
          purity: 99,
          solvent: "\u84B8\u7559\u6C34",
          notes: "pH 7.5-8.0\u306B\u8ABF\u6574"
        },
        tags: ["Tris", "\u30B9\u30C8\u30C3\u30AF", "1M", "\u6C4E\u7528"],
        difficulty: "beginner",
        estimatedTime: "5\u5206",
        author: "Buffer Calc Team",
        references: ["Basic Laboratory Manual"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      {
        id: "nacl-stock-5m",
        name: "5M NaCl \u30B9\u30C8\u30C3\u30AF",
        description: "\u5869\u6FC3\u5EA6\u8ABF\u6574\u7528\u306E\u9AD8\u6FC3\u5EA6NaCl\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2",
        category: "common_buffers" /* COMMON_BUFFERS */,
        type: "stock",
        template: {
          name: "5M NaCl \u30B9\u30C8\u30C3\u30AF",
          reagentName: "NaCl",
          molecularWeight: 58.44,
          targetConcentration: 5,
          concentrationUnit: "M" /* MOLAR */,
          volume: 100,
          volumeUnit: "mL" /* MILLILITER */,
          purity: 99.5,
          solvent: "\u84B8\u7559\u6C34",
          notes: "\u30AA\u30FC\u30C8\u30AF\u30EC\u30FC\u30D6\u6EC5\u83CC\u53EF\u80FD"
        },
        tags: ["NaCl", "\u30B9\u30C8\u30C3\u30AF", "5M", "\u5869\u6FC3\u5EA6"],
        difficulty: "beginner",
        estimatedTime: "5\u5206",
        author: "Buffer Calc Team",
        references: ["Laboratory Handbook"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      // Dilution Templates
      {
        id: "protein-serial-dilution",
        name: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u6A19\u6E96\u5E0C\u91C8\u7CFB\u5217",
        description: "Bradford\u6CD5\u3084BCA\u6CD5\u7528\u306E\u30BF\u30F3\u30D1\u30AF\u8CEA\u6A19\u6E96\u6EB6\u6DB2\u5E0C\u91C8\u7CFB\u5217",
        category: "analytical" /* ANALYTICAL */,
        type: "dilution",
        template: {
          name: "BSA\u6A19\u6E96\u5E0C\u91C8",
          stockConcentration: 2,
          stockConcentrationUnit: "mM" /* MILLIMOLAR */,
          finalConcentration: 100,
          finalConcentrationUnit: "\xB5M" /* MICROMOLAR */,
          finalVolume: 1,
          volumeUnit: "mL" /* MILLILITER */,
          notes: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u5B9A\u91CF\u7528\u6A19\u6E96\u6EB6\u6DB2"
        },
        tags: ["\u30BF\u30F3\u30D1\u30AF\u8CEA", "\u5E0C\u91C8", "\u5B9A\u91CF", "BSA"],
        difficulty: "intermediate",
        estimatedTime: "3\u5206",
        author: "Buffer Calc Team",
        references: ["Bio-Rad Protein Assay Manual"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      // Molecular Biology Templates
      {
        id: "tae-buffer-50x",
        name: "50\xD7 TAE \u30D0\u30C3\u30D5\u30A1\u30FC",
        description: "DNA\u96FB\u6C17\u6CF3\u52D5\u7528TAE\u7DE9\u885D\u6DB2\u306E\u6FC3\u7E2E\u30B9\u30C8\u30C3\u30AF",
        category: "molecular_biology" /* MOLECULAR_BIOLOGY */,
        type: "buffer",
        template: {
          name: "50\xD7 TAE \u30D0\u30C3\u30D5\u30A1\u30FC",
          totalVolume: 1e3,
          volumeUnit: "mL" /* MILLILITER */,
          components: [
            {
              name: "Tris base",
              stockConc: 1,
              stockUnit: "M" /* MOLAR */,
              finalConc: 2,
              finalUnit: "M" /* MOLAR */
            },
            {
              name: "Acetic acid",
              stockConc: 17.4,
              stockUnit: "M" /* MOLAR */,
              finalConc: 1,
              finalUnit: "M" /* MOLAR */
            },
            {
              name: "EDTA",
              stockConc: 500,
              stockUnit: "mM" /* MILLIMOLAR */,
              finalConc: 50,
              finalUnit: "mM" /* MILLIMOLAR */
            }
          ],
          notes: "pH 8.3\u3001\u4F7F\u7528\u6642\u306B50\u500D\u5E0C\u91C8"
        },
        tags: ["TAE", "DNA", "\u96FB\u6C17\u6CF3\u52D5", "50\u500D"],
        difficulty: "intermediate",
        estimatedTime: "15\u5206",
        author: "Buffer Calc Team",
        references: ["Molecular Cloning Manual"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      // Serial Dilution Templates
      {
        id: "serial-dilution-ligand-standard",
        name: "\u30EA\u30AC\u30F3\u30C9\u6BB5\u968E\u5E0C\u91C8\uFF08\u6A19\u6E96\uFF09",
        description: "\u7D30\u80DE\u57F9\u990A\u5B9F\u9A13\u3067\u4E00\u822C\u7684\u306A\u30EA\u30AC\u30F3\u30C9\u6FC3\u5EA6\u7BC4\u56F2\u306E\u6BB5\u968E\u5E0C\u91C8\u30D7\u30ED\u30C8\u30B3\u30EB",
        category: "cell_culture" /* CELL_CULTURE */,
        type: "serial-dilution",
        template: {
          name: "\u30EA\u30AC\u30F3\u30C9\u6BB5\u968E\u5E0C\u91C8",
          stockConcentration: 10,
          stockUnit: "mM" /* MILLIMOLAR */,
          cellVolume: 200,
          cellVolumeUnit: "\xB5L" /* MICROLITER */,
          additionVolume: 2,
          additionVolumeUnit: "\xB5L" /* MICROLITER */,
          dilutionVolume: 200,
          dilutionVolumeUnit: "\xB5L" /* MICROLITER */,
          targetConcentrations: [100, 10, 1, 0.1],
          targetUnit: "\xB5M" /* MICROMOLAR */
        },
        tags: ["\u30EA\u30AC\u30F3\u30C9", "\u7D30\u80DE\u57F9\u990A", "\u6BB5\u968E\u5E0C\u91C8", "\xB5M"],
        difficulty: "beginner",
        estimatedTime: "15\u5206",
        author: "Buffer Calc Team",
        references: ["Cell Culture Protocols"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      {
        id: "serial-dilution-drug-screening",
        name: "\u85AC\u7269\u30B9\u30AF\u30EA\u30FC\u30CB\u30F3\u30B0\u6BB5\u968E\u5E0C\u91C8",
        description: "\u85AC\u7269\u30B9\u30AF\u30EA\u30FC\u30CB\u30F3\u30B0\u5B9F\u9A13\u5411\u3051\u306E\u5E83\u7BC4\u56F2\u6FC3\u5EA6\u6BB5\u968E\u5E0C\u91C8\u30D7\u30ED\u30C8\u30B3\u30EB",
        category: "cell_culture" /* CELL_CULTURE */,
        type: "serial-dilution",
        template: {
          name: "\u85AC\u7269\u30B9\u30AF\u30EA\u30FC\u30CB\u30F3\u30B0\u5E0C\u91C8",
          stockConcentration: 100,
          stockUnit: "mM" /* MILLIMOLAR */,
          cellVolume: 100,
          cellVolumeUnit: "\xB5L" /* MICROLITER */,
          additionVolume: 1,
          additionVolumeUnit: "\xB5L" /* MICROLITER */,
          dilutionVolume: 100,
          dilutionVolumeUnit: "\xB5L" /* MICROLITER */,
          targetConcentrations: [1e3, 100, 10, 1, 0.1, 0.01],
          targetUnit: "\xB5M" /* MICROMOLAR */
        },
        tags: ["\u85AC\u7269", "\u30B9\u30AF\u30EA\u30FC\u30CB\u30F3\u30B0", "\u6BB5\u968E\u5E0C\u91C8", "\u5E83\u7BC4\u56F2"],
        difficulty: "intermediate",
        estimatedTime: "20\u5206",
        author: "Buffer Calc Team",
        references: ["Drug Discovery Protocols"],
        createdAt: new Date(),
        isBuiltIn: true
      },
      {
        id: "serial-dilution-protein-titration",
        name: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u6FC3\u5EA6\u6EF4\u5B9A",
        description: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u30A2\u30C3\u30BB\u30A4\u7528\u306E\u6FC3\u5EA6\u6EF4\u5B9A\u6BB5\u968E\u5E0C\u91C8\u30D7\u30ED\u30C8\u30B3\u30EB",
        category: "protein_buffers" /* PROTEIN_BUFFERS */,
        type: "serial-dilution",
        template: {
          name: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u6FC3\u5EA6\u6EF4\u5B9A",
          stockConcentration: 10,
          stockUnit: "mM" /* MILLIMOLAR */,
          cellVolume: 96,
          cellVolumeUnit: "\xB5L" /* MICROLITER */,
          additionVolume: 4,
          additionVolumeUnit: "\xB5L" /* MICROLITER */,
          dilutionVolume: 200,
          dilutionVolumeUnit: "\xB5L" /* MICROLITER */,
          targetConcentrations: [1, 0.5, 0.25, 0.125, 0.0625],
          targetUnit: "mM" /* MILLIMOLAR */
        },
        tags: ["\u30BF\u30F3\u30D1\u30AF\u8CEA", "\u30A2\u30C3\u30BB\u30A4", "\u6EF4\u5B9A", "\xB5g/mL"],
        difficulty: "intermediate",
        estimatedTime: "12\u5206",
        author: "Buffer Calc Team",
        references: ["Protein Assay Protocols"],
        createdAt: new Date(),
        isBuiltIn: true
      }
    ];
  }
  getBuiltInTemplates() {
    return [...this.builtInTemplates];
  }
  getTemplatesByCategory(category) {
    return this.builtInTemplates.filter((template) => template.category === category);
  }
  getTemplatesByType(type) {
    return this.builtInTemplates.filter((template) => template.type === type);
  }
  getTemplatesByDifficulty(difficulty) {
    return this.builtInTemplates.filter((template) => template.difficulty === difficulty);
  }
  searchTemplates(query) {
    const lowerQuery = query.toLowerCase();
    return this.builtInTemplates.filter(
      (template) => template.name.toLowerCase().includes(lowerQuery) || template.description.toLowerCase().includes(lowerQuery) || template.tags.some((tag) => tag.toLowerCase().includes(lowerQuery))
    );
  }
  getTemplateById(id) {
    return this.builtInTemplates.find((template) => template.id === id);
  }
  getAllCategories() {
    return Object.values(TemplateCategory);
  }
  getCategoryDisplayName(category) {
    const displayNames = {
      ["common_buffers" /* COMMON_BUFFERS */]: "\u4E00\u822C\u7684\u306A\u30D0\u30C3\u30D5\u30A1\u30FC",
      ["protein_buffers" /* PROTEIN_BUFFERS */]: "\u30BF\u30F3\u30D1\u30AF\u8CEA\u30D0\u30C3\u30D5\u30A1\u30FC",
      ["molecular_biology" /* MOLECULAR_BIOLOGY */]: "\u5206\u5B50\u751F\u7269\u5B66",
      ["cell_culture" /* CELL_CULTURE */]: "\u7D30\u80DE\u57F9\u990A",
      ["analytical" /* ANALYTICAL */]: "\u5206\u6790\u30FB\u5B9A\u91CF",
      ["custom" /* CUSTOM */]: "\u30AB\u30B9\u30BF\u30E0"
    };
    return displayNames[category];
  }
};

// src/ui/template-selector.ts
var TemplateSelectorModal = class extends import_obsidian9.Modal {
  constructor(app, settings, onTemplateSelect) {
    super(app);
    this.selectedCategory = "all";
    this.selectedType = "all";
    this.searchQuery = "";
    this.settings = settings;
    this.onTemplateSelect = onTemplateSelect;
    this.templateDatabase = TemplateDatabase.getInstance();
    this.mobileOptimization = MobileOptimization.getInstance();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("buffer-calc-template-selector");
    this.mobileOptimization.optimizeModal(contentEl);
    this.mobileOptimization.improveAccessibility(contentEl);
    this.setTitle("\u30EC\u30B7\u30D4\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u9078\u629E");
    this.createFilterControls();
    this.createTemplateList();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  createFilterControls() {
    const { contentEl } = this;
    const filtersContainer = contentEl.createEl("div", { cls: "template-filters" });
    const searchContainer = filtersContainer.createEl("div", { cls: "filter-group" });
    searchContainer.createEl("label", { text: "\u691C\u7D22:" });
    const searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u540D\u3001\u8AAC\u660E\u3001\u30BF\u30B0\u3067\u691C\u7D22...",
      cls: "template-search-input"
    });
    searchInput.addEventListener("input", () => {
      this.searchQuery = searchInput.value;
      this.updateTemplateList();
    });
    const categoryContainer = filtersContainer.createEl("div", { cls: "filter-group" });
    categoryContainer.createEl("label", { text: "\u30AB\u30C6\u30B4\u30EA\u30FC:" });
    const categorySelect = categoryContainer.createEl("select", { cls: "template-filter-select" });
    categorySelect.createEl("option", { value: "all", text: "\u3059\u3079\u3066" });
    this.templateDatabase.getAllCategories().forEach((category) => {
      const option = categorySelect.createEl("option", {
        value: category,
        text: this.templateDatabase.getCategoryDisplayName(category)
      });
    });
    categorySelect.addEventListener("change", () => {
      this.selectedCategory = categorySelect.value;
      this.updateTemplateList();
    });
    const typeContainer = filtersContainer.createEl("div", { cls: "filter-group" });
    typeContainer.createEl("label", { text: "\u30BF\u30A4\u30D7:" });
    const typeSelect = typeContainer.createEl("select", { cls: "template-filter-select" });
    typeSelect.createEl("option", { value: "all", text: "\u3059\u3079\u3066" });
    typeSelect.createEl("option", { value: "buffer", text: "\u30D0\u30C3\u30D5\u30A1\u30FC" });
    typeSelect.createEl("option", { value: "stock", text: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2" });
    typeSelect.createEl("option", { value: "dilution", text: "\u5E0C\u91C8\u8A08\u7B97" });
    typeSelect.addEventListener("change", () => {
      this.selectedType = typeSelect.value;
      this.updateTemplateList();
    });
  }
  createTemplateList() {
    const { contentEl } = this;
    let listContainer = contentEl.querySelector(".template-list-container");
    if (listContainer) {
      listContainer.remove();
    }
    listContainer = contentEl.createEl("div", { cls: "template-list-container" });
    this.updateTemplateList();
  }
  updateTemplateList() {
    const listContainer = this.contentEl.querySelector(".template-list-container");
    if (!listContainer)
      return;
    listContainer.empty();
    const templates = this.getFilteredTemplates();
    if (templates.length === 0) {
      listContainer.createEl("div", {
        text: "\u6761\u4EF6\u306B\u4E00\u81F4\u3059\u308B\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093",
        cls: "template-no-results"
      });
      return;
    }
    const templatesByCategory = this.groupTemplatesByCategory(templates);
    Object.entries(templatesByCategory).forEach(([category, categoryTemplates]) => {
      if (categoryTemplates.length === 0)
        return;
      const categorySection = listContainer.createEl("div", { cls: "template-category-section" });
      categorySection.createEl("h3", {
        text: this.templateDatabase.getCategoryDisplayName(category),
        cls: "template-category-title"
      });
      const templatesGrid = categorySection.createEl("div", { cls: "templates-grid" });
      categoryTemplates.forEach((template) => {
        this.createTemplateCard(templatesGrid, template);
      });
    });
  }
  getFilteredTemplates() {
    let templates = this.templateDatabase.getBuiltInTemplates();
    if (this.searchQuery) {
      templates = this.templateDatabase.searchTemplates(this.searchQuery);
    }
    if (this.selectedCategory !== "all") {
      templates = templates.filter((template) => template.category === this.selectedCategory);
    }
    if (this.selectedType !== "all") {
      templates = templates.filter((template) => template.type === this.selectedType);
    }
    return templates;
  }
  groupTemplatesByCategory(templates) {
    const grouped = {};
    templates.forEach((template) => {
      const category = template.category;
      if (!grouped[category]) {
        grouped[category] = [];
      }
      grouped[category].push(template);
    });
    return grouped;
  }
  createTemplateCard(container, template) {
    const card = container.createEl("div", { cls: "template-card" });
    card.setAttribute("data-template-id", template.id);
    const header = card.createEl("div", { cls: "template-card-header" });
    header.createEl("h4", { text: template.name, cls: "template-card-title" });
    const badges = header.createEl("div", { cls: "template-badges" });
    badges.createEl("span", {
      text: template.type,
      cls: `template-badge template-badge-${template.type}`
    });
    badges.createEl("span", {
      text: template.difficulty,
      cls: `template-badge template-badge-${template.difficulty}`
    });
    card.createEl("p", { text: template.description, cls: "template-card-description" });
    const details = card.createEl("div", { cls: "template-card-details" });
    if (template.estimatedTime) {
      const timeDetail = details.createEl("div", { cls: "template-detail" });
      timeDetail.createEl("span", { text: "\u23F1\uFE0F", cls: "template-detail-icon" });
      timeDetail.createEl("span", { text: template.estimatedTime });
    }
    if (template.author) {
      const authorDetail = details.createEl("div", { cls: "template-detail" });
      authorDetail.createEl("span", { text: "\u{1F464}", cls: "template-detail-icon" });
      authorDetail.createEl("span", { text: template.author });
    }
    if (template.tags.length > 0) {
      const tagsContainer = card.createEl("div", { cls: "template-tags" });
      template.tags.slice(0, 3).forEach((tag) => {
        tagsContainer.createEl("span", { text: tag, cls: "template-tag" });
      });
      if (template.tags.length > 3) {
        tagsContainer.createEl("span", { text: `+${template.tags.length - 3}`, cls: "template-tag template-tag-more" });
      }
    }
    const actions = card.createEl("div", { cls: "template-card-actions" });
    const previewButton = actions.createEl("button", {
      text: "\u30D7\u30EC\u30D3\u30E5\u30FC",
      cls: "template-action-button template-preview-button"
    });
    const useButton = actions.createEl("button", {
      text: "\u4F7F\u7528\u3059\u308B",
      cls: "template-action-button template-use-button mod-cta"
    });
    previewButton.addEventListener("click", () => {
      this.showTemplatePreview(template);
    });
    useButton.addEventListener("click", () => {
      this.selectTemplate(template);
    });
    card.addEventListener("click", (e) => {
      if (e.target === card || e.target.classList.contains("template-card-title") || e.target.classList.contains("template-card-description")) {
        this.selectTemplate(template);
      }
    });
  }
  showTemplatePreview(template) {
    const previewModal = new TemplatePreviewModal(this.app, template);
    previewModal.open();
  }
  selectTemplate(template) {
    this.onTemplateSelect(template);
    this.close();
    new import_obsidian9.Notice(`\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u300C${template.name}\u300D\u3092\u9069\u7528\u3057\u307E\u3057\u305F`);
  }
};
var TemplatePreviewModal = class extends import_obsidian9.Modal {
  constructor(app, template) {
    super(app);
    this.template = template;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("template-preview-modal");
    this.setTitle(`\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u30D7\u30EC\u30D3\u30E5\u30FC: ${this.template.name}`);
    const infoSection = contentEl.createEl("div", { cls: "template-preview-info" });
    infoSection.createEl("h3", { text: this.template.name });
    infoSection.createEl("p", { text: this.template.description });
    const metaInfo = infoSection.createEl("div", { cls: "template-meta-info" });
    metaInfo.createEl("span", { text: `\u30BF\u30A4\u30D7: ${this.template.type}` });
    metaInfo.createEl("span", { text: `\u96E3\u6613\u5EA6: ${this.template.difficulty}` });
    if (this.template.estimatedTime) {
      metaInfo.createEl("span", { text: `\u6240\u8981\u6642\u9593: ${this.template.estimatedTime}` });
    }
    const contentSection = contentEl.createEl("div", { cls: "template-preview-content" });
    contentSection.createEl("h4", { text: "\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u5185\u5BB9:" });
    const codeBlock = contentSection.createEl("pre", { cls: "template-preview-code" });
    const yamlContent = this.generateYAMLPreview(this.template);
    codeBlock.createEl("code", { text: yamlContent });
    if (this.template.template.notes || this.template.references) {
      const notesSection = contentEl.createEl("div", { cls: "template-preview-notes" });
      if (this.template.template.notes) {
        notesSection.createEl("h4", { text: "\u6CE8\u610F\u4E8B\u9805:" });
        notesSection.createEl("p", { text: this.template.template.notes });
      }
      if (this.template.references && this.template.references.length > 0) {
        notesSection.createEl("h4", { text: "\u53C2\u8003\u6587\u732E:" });
        const refList = notesSection.createEl("ul");
        this.template.references.forEach((ref) => {
          refList.createEl("li", { text: ref });
        });
      }
    }
    const closeButton = contentEl.createEl("button", {
      text: "\u9589\u3058\u308B",
      cls: "template-preview-close-button mod-cta"
    });
    closeButton.addEventListener("click", () => this.close());
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  generateYAMLPreview(template) {
    const data = template.template;
    let yaml = "";
    if (template.type === "buffer") {
      const bufferData = data;
      yaml = `\`\`\`buffer
name: ${bufferData.name}
totalVolume: ${bufferData.totalVolume}
volumeUnit: ${bufferData.volumeUnit}
components:`;
      if (bufferData.components) {
        bufferData.components.forEach((comp) => {
          yaml += `
  - name: ${comp.name}
    stockConc: ${comp.stockConc}
    stockUnit: ${comp.stockUnit}
    finalConc: ${comp.finalConc}
    finalUnit: ${comp.finalUnit}`;
        });
      }
      if (bufferData.notes) {
        yaml += `
notes: ${bufferData.notes}`;
      }
      yaml += "\n```";
    } else if (template.type === "stock") {
      const stockData = data;
      yaml = `\`\`\`stock
name: ${stockData.name}
reagentName: ${stockData.reagentName}
molecularWeight: ${stockData.molecularWeight}
targetConcentration: ${stockData.targetConcentration}
concentrationUnit: ${stockData.concentrationUnit}
volume: ${stockData.volume}
volumeUnit: ${stockData.volumeUnit}`;
      if (stockData.purity) {
        yaml += `
purity: ${stockData.purity}`;
      }
      if (stockData.solvent) {
        yaml += `
solvent: ${stockData.solvent}`;
      }
      if (stockData.notes) {
        yaml += `
notes: ${stockData.notes}`;
      }
      yaml += "\n```";
    } else if (template.type === "dilution") {
      const dilutionData = data;
      yaml = `\`\`\`dilution
name: ${dilutionData.name}
stockConcentration: ${dilutionData.stockConcentration}
stockConcentrationUnit: ${dilutionData.stockConcentrationUnit}
finalConcentration: ${dilutionData.finalConcentration}
finalConcentrationUnit: ${dilutionData.finalConcentrationUnit}
finalVolume: ${dilutionData.finalVolume}
volumeUnit: ${dilutionData.volumeUnit}`;
      if (dilutionData.notes) {
        yaml += `
notes: ${dilutionData.notes}`;
      }
      yaml += "\n```";
    }
    return yaml;
  }
};

// src/main.ts
var BufferCalcPlugin = class extends import_obsidian10.Plugin {
  async onload() {
    console.log("Loading Buffer Calc plugin - DEBUG VERSION");
    await this.loadSettings();
    this.calculationEngine = new CalculationEngine(this.settings);
    this.reagentDatabase = new ReagentDatabase();
    await this.reagentDatabase.initialize();
    this.dataViewIntegration = new DataViewIntegration(this.app);
    this.dataViewIntegration.registerWithDataView();
    this.registerMarkdownCodeBlockProcessor(
      "buffer",
      this.bufferCalcBlockHandler.bind(this, "buffer"),
      100
    );
    this.registerMarkdownCodeBlockProcessor(
      "buffer-calc",
      this.bufferCalcBlockHandler.bind(this, "buffer"),
      100
    );
    this.registerMarkdownCodeBlockProcessor(
      "stock",
      this.bufferCalcBlockHandler.bind(this, "stock"),
      100
    );
    this.registerMarkdownCodeBlockProcessor(
      "stock-solution",
      this.bufferCalcBlockHandler.bind(this, "stock"),
      100
    );
    this.registerMarkdownCodeBlockProcessor(
      "dilution",
      this.bufferCalcBlockHandler.bind(this, "dilution"),
      100
    );
    this.registerMarkdownCodeBlockProcessor(
      "serial-dilution",
      this.bufferCalcBlockHandler.bind(this, "serial-dilution"),
      100
    );
    this.settingsTab = new BufferCalcSettingTab(this.app, this);
    this.addSettingTab(this.settingsTab);
    this.addCommand({
      id: "insert-buffer-calc",
      name: "Insert Buffer Calculation",
      callback: () => {
        this.insertBufferCalcBlock();
      }
    });
    this.addCommand({
      id: "insert-stock-calc",
      name: "Insert Stock Solution Calculation",
      callback: () => {
        this.insertStockCalcBlock();
      }
    });
    this.addCommand({
      id: "insert-dilution-calc",
      name: "Insert Dilution Calculation",
      callback: () => {
        this.insertDilutionCalcBlock();
      }
    });
    this.addCommand({
      id: "insert-serial-dilution-calc",
      name: "Insert Serial Dilution Calculation",
      callback: () => {
        this.insertSerialDilutionCalcBlock();
      }
    });
    this.addCommand({
      id: "insert-calculation",
      name: "Insert Calculation (Select Type)",
      callback: () => {
        this.insertCalculationWithTypeSelector();
      }
    });
    this.addCommand({
      id: "open-recipe-manager",
      name: "Open Recipe Manager",
      callback: () => {
        new RecipeManagerModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "manage-reagents",
      name: "Manage Custom Reagents",
      callback: () => {
        new ReagentManagerModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "insert-from-template",
      name: "Insert Recipe from Template",
      callback: () => {
        this.insertFromTemplate();
      }
    });
    this.addCommand({
      id: "view-calculation-history",
      name: "View Calculation History",
      callback: () => {
        this.openCalculationHistory();
      }
    });
    this.addCommand({
      id: "manage-reagent-categories",
      name: "Manage Reagent Categories",
      callback: () => {
        this.openReagentCategoryManager();
      }
    });
    this.addCommand({
      id: "dataview-integration",
      name: "DataView Integration",
      callback: () => {
        this.openDataViewIntegration();
      }
    });
    console.log("Buffer Calc plugin loaded successfully - ALL COMMANDS REGISTERED");
    console.log("Registered commands:", [
      "insert-buffer-calc",
      "insert-stock-calc",
      "insert-dilution-calc",
      "insert-serial-dilution-calc",
      "insert-calculation",
      "open-recipe-manager",
      "manage-reagents",
      "insert-from-template",
      "view-calculation-history",
      "manage-reagent-categories",
      "dataview-integration"
    ]);
  }
  onunload() {
    console.log("Unloading Buffer Calc plugin");
  }
  async bufferCalcBlockHandler(blockType, source, el, ctx) {
    try {
      const blockContent = this.parseBlockContent(blockType, source);
      console.log("Parsed block content:", blockContent);
      el.empty();
      el.addClass("buffer-calc-container");
      const ui = new BufferCalcUI(
        el,
        blockContent,
        this.calculationEngine,
        this.reagentDatabase,
        this.settings,
        ctx,
        this
      );
      await ui.render();
    } catch (error) {
      console.error("Buffer Calc block handler error:", error);
      el.createEl("div", {
        text: `Error processing buffer calculation: ${error.message}`,
        cls: "buffer-calc-error"
      });
    }
  }
  parseBlockContent(blockType, source) {
    try {
      console.log(`Parsing ${blockType} block source:`, source);
      if (!source.trim()) {
        console.log("Empty source, using default content");
        return this.getDefaultBlockContent(blockType);
      }
      let parsedData;
      if (source.includes(":") && !source.trim().startsWith("{")) {
        console.log("Parsing as YAML");
        parsedData = this.parseSimpleYAML(source);
      } else {
        try {
          console.log("Parsing as JSON");
          parsedData = JSON.parse(source);
        } catch (e) {
          console.log("Parsing as key-value pairs");
          parsedData = this.parseKeyValuePairs(source);
        }
      }
      console.log("Parsed data:", parsedData);
      console.log("Data type:", typeof parsedData);
      console.log("Data keys:", Object.keys(parsedData));
      if (parsedData.components) {
        console.log("Components type:", typeof parsedData.components, Array.isArray(parsedData.components));
      }
      const result = {
        type: blockType,
        data: parsedData,
        options: parsedData.options || {}
      };
      console.log(`Final parsed block content for ${blockType}:`, result);
      return result;
    } catch (error) {
      console.error("Error parsing block content:", error);
      return this.getDefaultBlockContent(blockType);
    }
  }
  parseSimpleYAML(source) {
    const lines = source.split("\n");
    const result = { components: [] };
    let currentComponent = null;
    let inComponentsSection = false;
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (!trimmedLine || trimmedLine.startsWith("#"))
        continue;
      if (trimmedLine === "components:") {
        inComponentsSection = true;
        continue;
      }
      if (trimmedLine.startsWith("-") && inComponentsSection) {
        if (currentComponent) {
          result.components.push(currentComponent);
        }
        currentComponent = {};
        const afterDash = trimmedLine.substring(1).trim();
        if (afterDash.includes(":")) {
          const [key, ...valueParts] = afterDash.split(":");
          const value = valueParts.join(":").trim();
          const cleanKey = key.trim();
          currentComponent[cleanKey] = isNaN(Number(value)) ? value : Number(value);
        }
        continue;
      }
      if (trimmedLine.includes(":")) {
        const [key, ...valueParts] = trimmedLine.split(":");
        const value = valueParts.join(":").trim();
        const cleanKey = key.trim();
        if (currentComponent && inComponentsSection && line.startsWith("    ")) {
          currentComponent[cleanKey] = isNaN(Number(value)) ? value : Number(value);
        } else if (!inComponentsSection || !line.startsWith("    ")) {
          if (cleanKey !== "components") {
            inComponentsSection = false;
            if (value.startsWith("[") && value.endsWith("]")) {
              const arrayContent = value.slice(1, -1).trim();
              result[cleanKey] = arrayContent.split(",").map((item) => {
                const trimmed = item.trim();
                return isNaN(Number(trimmed)) ? trimmed : Number(trimmed);
              });
            } else {
              result[cleanKey] = isNaN(Number(value)) ? value : Number(value);
            }
          }
        }
      }
    }
    if (currentComponent) {
      result.components.push(currentComponent);
    }
    if (!Array.isArray(result.components)) {
      result.components = [];
    }
    return result;
  }
  parseKeyValuePairs(source) {
    const result = {};
    const lines = source.split("\n");
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (!trimmedLine)
        continue;
      const colonIndex = trimmedLine.indexOf(":");
      if (colonIndex > 0) {
        const key = trimmedLine.substring(0, colonIndex).trim();
        const value = trimmedLine.substring(colonIndex + 1).trim();
        result[key] = isNaN(Number(value)) ? value : Number(value);
      }
    }
    return result;
  }
  getDefaultBlockContent(blockType) {
    let defaultData;
    if (blockType === "buffer") {
      defaultData = {
        totalVolume: 1e3,
        volumeUnit: this.settings.defaultVolumeUnit,
        components: []
      };
    } else if (blockType === "stock") {
      defaultData = {
        reagentName: "",
        targetConcentration: 100,
        concentrationUnit: this.settings.defaultConcentrationUnit,
        volume: 10,
        volumeUnit: this.settings.defaultVolumeUnit
      };
    } else if (blockType === "serial-dilution") {
      defaultData = {
        name: "Serial Dilution Protocol",
        stockConcentration: 10,
        stockUnit: this.settings.defaultConcentrationUnit,
        cellVolume: 200,
        cellVolumeUnit: this.settings.defaultVolumeUnit,
        additionVolume: 2,
        additionVolumeUnit: this.settings.defaultVolumeUnit,
        dilutionVolume: 200,
        dilutionVolumeUnit: this.settings.defaultVolumeUnit,
        targetConcentrations: [100, 10, 1, 0.1],
        targetUnit: this.settings.defaultConcentrationUnit,
        targetInputMode: "exponential" /* EXPONENTIAL */,
        stepDisplayFormat: "text" /* TEXT */
      };
    } else {
      defaultData = {
        stockConcentration: 1e3,
        stockConcentrationUnit: this.settings.defaultConcentrationUnit,
        finalConcentration: 100,
        finalConcentrationUnit: this.settings.defaultConcentrationUnit,
        finalVolume: 100,
        volumeUnit: this.settings.defaultVolumeUnit
      };
    }
    return {
      type: blockType,
      data: defaultData
    };
  }
  insertBufferCalcBlock() {
    try {
      console.log("Inserting buffer calc block...");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView && "editor" in activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const template = `\`\`\`buffer
name: My Buffer
totalVolume: 1000
volumeUnit: mL
components:
  - name: Tris-HCl
    stockConc: 1
    stockUnit: M
    finalConc: 50
    finalUnit: mM
  - name: NaCl
    stockConc: 5
    stockUnit: M
    finalConc: 150
    finalUnit: mM
\`\`\``;
        editor.replaceRange(template, cursor);
        editor.setCursor(cursor.line + 1, 0);
        new import_obsidian10.Notice("\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97\u30D6\u30ED\u30C3\u30AF\u3092\u633F\u5165\u3057\u307E\u3057\u305F");
      } else {
        new import_obsidian10.Notice("\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u304B\u3089\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97\u3092\u633F\u5165\u3057\u3066\u304F\u3060\u3055\u3044");
      }
    } catch (error) {
      console.error("Error inserting buffer calc block:", error);
      new import_obsidian10.Notice("\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97\u633F\u5165\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  insertStockCalcBlock() {
    try {
      console.log("Inserting stock calc block...");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView && "editor" in activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const template = `\`\`\`stock
name: Stock Solution
reagentName: \u8A66\u85AC\u540D
molecularWeight: 342.3
targetConcentration: 100
concentrationUnit: mM
volume: 10
volumeUnit: mL
purity: 95
solvent: \u6C34
\`\`\``;
        editor.replaceRange(template, cursor);
        editor.setCursor(cursor.line + 1, 0);
        new import_obsidian10.Notice("\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97\u30D6\u30ED\u30C3\u30AF\u3092\u633F\u5165\u3057\u307E\u3057\u305F");
      } else {
        new import_obsidian10.Notice("\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u304B\u3089\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97\u3092\u633F\u5165\u3057\u3066\u304F\u3060\u3055\u3044");
      }
    } catch (error) {
      console.error("Error inserting stock calc block:", error);
      new import_obsidian10.Notice("\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97\u633F\u5165\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  insertDilutionCalcBlock() {
    try {
      console.log("Inserting dilution calc block...");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView && "editor" in activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const template = `\`\`\`dilution
name: Simple Dilution
stockConcentration: 1000
stockConcentrationUnit: mM
finalConcentration: 100
finalConcentrationUnit: mM
finalVolume: 100
volumeUnit: \xB5L
\`\`\``;
        editor.replaceRange(template, cursor);
        editor.setCursor(cursor.line + 1, 0);
        new import_obsidian10.Notice("\u5E0C\u91C8\u8A08\u7B97\u30D6\u30ED\u30C3\u30AF\u3092\u633F\u5165\u3057\u307E\u3057\u305F");
      } else {
        new import_obsidian10.Notice("\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u304B\u3089\u5E0C\u91C8\u8A08\u7B97\u3092\u633F\u5165\u3057\u3066\u304F\u3060\u3055\u3044");
      }
    } catch (error) {
      console.error("Error inserting dilution calc block:", error);
      new import_obsidian10.Notice("\u5E0C\u91C8\u8A08\u7B97\u633F\u5165\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  insertSerialDilutionCalcBlock() {
    try {
      console.log("Inserting serial dilution calc block...");
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView && "editor" in activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const template = `\`\`\`serial-dilution
name: Serial Dilution Protocol
stockConcentration: 10
stockUnit: mM
cellVolume: 200
cellVolumeUnit: \xB5L
additionVolume: 2
additionVolumeUnit: \xB5L
dilutionVolume: 200
dilutionVolumeUnit: \xB5L
targetConcentrations: [100, 10, 1, 0.1]
targetUnit: \xB5M
targetInputMode: exponential
stepDisplayFormat: text
\`\`\``;
        editor.replaceRange(template, cursor);
        editor.setCursor(cursor.line + 1, 0);
        new import_obsidian10.Notice("\u6BB5\u968E\u5E0C\u91C8\u8A08\u7B97\u30D6\u30ED\u30C3\u30AF\u3092\u633F\u5165\u3057\u307E\u3057\u305F");
      } else {
        new import_obsidian10.Notice("\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u304B\u3089\u6BB5\u968E\u5E0C\u91C8\u8A08\u7B97\u3092\u633F\u5165\u3057\u3066\u304F\u3060\u3055\u3044");
      }
    } catch (error) {
      console.error("Error inserting serial dilution calc block:", error);
      new import_obsidian10.Notice("\u6BB5\u968E\u5E0C\u91C8\u8A08\u7B97\u633F\u5165\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  insertCalculationWithTypeSelector() {
    try {
      console.log("Opening calculation type selector...");
      const typeSelectorModal = new CalculationTypeSelectorModal(
        this.app,
        (type) => {
          console.log("Calculation type selected:", type);
          switch (type) {
            case "buffer":
              this.insertBufferCalcBlock();
              break;
            case "stock":
              this.insertStockCalcBlock();
              break;
            case "dilution":
              this.insertDilutionCalcBlock();
              break;
            case "serial-dilution":
              this.insertSerialDilutionCalcBlock();
              break;
          }
        }
      );
      typeSelectorModal.open();
    } catch (error) {
      console.error("Error opening calculation type selector:", error);
      new import_obsidian10.Notice("\u8A08\u7B97\u30BF\u30A4\u30D7\u9078\u629E\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  insertFromTemplate() {
    try {
      console.log("Opening template selector...");
      const templateSelector = new TemplateSelectorModal(
        this.app,
        this.settings,
        (template) => {
          console.log("Template selected:", template);
          this.insertTemplateIntoEditor(template);
        }
      );
      templateSelector.open();
    } catch (error) {
      console.error("Error opening template selector:", error);
      new import_obsidian10.Notice("\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u9078\u629E\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  insertTemplateIntoEditor(template) {
    try {
      console.log("Inserting template into editor:", template);
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView && "editor" in activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        const yamlContent = this.templateToYAML(template);
        console.log("Generated YAML content:", yamlContent);
        editor.replaceRange(yamlContent, cursor);
        editor.setCursor(cursor.line + 1, 0);
        new import_obsidian10.Notice(`\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u300C${template.name}\u300D\u3092\u633F\u5165\u3057\u307E\u3057\u305F`);
      } else {
        new import_obsidian10.Notice("\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u304B\u3089\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3092\u633F\u5165\u3057\u3066\u304F\u3060\u3055\u3044");
      }
    } catch (error) {
      console.error("Error inserting template:", error);
      new import_obsidian10.Notice("\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u633F\u5165\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F: " + error.message);
    }
  }
  templateToYAML(template) {
    const data = template.template;
    let yaml = "";
    if (template.type === "buffer") {
      yaml = `\`\`\`buffer
name: ${data.name}
totalVolume: ${data.totalVolume}
volumeUnit: ${data.volumeUnit}
components:`;
      if (data.components) {
        data.components.forEach((comp) => {
          yaml += `
  - name: ${comp.name}
    stockConc: ${comp.stockConc}
    stockUnit: ${comp.stockUnit}
    finalConc: ${comp.finalConc}
    finalUnit: ${comp.finalUnit}`;
        });
      }
      if (data.notes) {
        yaml += `
notes: ${data.notes}`;
      }
      yaml += "\n```";
    } else if (template.type === "stock") {
      yaml = `\`\`\`stock
name: ${data.name}
reagentName: ${data.reagentName}
molecularWeight: ${data.molecularWeight}
targetConcentration: ${data.targetConcentration}
concentrationUnit: ${data.concentrationUnit}
volume: ${data.volume}
volumeUnit: ${data.volumeUnit}`;
      if (data.purity) {
        yaml += `
purity: ${data.purity}`;
      }
      if (data.solvent) {
        yaml += `
solvent: ${data.solvent}`;
      }
      if (data.notes) {
        yaml += `
notes: ${data.notes}`;
      }
      yaml += "\n```";
    } else if (template.type === "dilution") {
      yaml = `\`\`\`dilution
name: ${data.name}
stockConcentration: ${data.stockConcentration}
stockConcentrationUnit: ${data.stockConcentrationUnit}
finalConcentration: ${data.finalConcentration}
finalConcentrationUnit: ${data.finalConcentrationUnit}
finalVolume: ${data.finalVolume}
volumeUnit: ${data.volumeUnit}`;
      if (data.notes) {
        yaml += `
notes: ${data.notes}`;
      }
      yaml += "\n```";
    }
    return yaml;
  }
  openCalculationHistory() {
    const historyModal = new CalculationHistoryModal(
      this.app,
      this.settings,
      async (newSettings) => {
        this.settings = newSettings;
        await this.saveSettings();
      },
      (yaml) => {
        this.insertYamlIntoEditor(yaml);
      }
    );
    historyModal.open();
  }
  openReagentCategoryManager() {
    const categoryModal = new ReagentCategoryModal(
      this.app,
      this.settings,
      async (newSettings) => {
        this.settings = newSettings;
        await this.saveSettings();
      }
    );
    categoryModal.open();
  }
  openDataViewIntegration() {
    const dataViewModal = new DataViewIntegrationModal(
      this.app,
      this.settings,
      () => {
      }
    );
    dataViewModal.open();
  }
  insertYamlIntoEditor(yaml) {
    try {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      if (activeView && "editor" in activeView) {
        const editor = activeView.editor;
        const cursor = editor.getCursor();
        editor.replaceRange(yaml, cursor);
        editor.setCursor(cursor.line + 1, 0);
      } else {
        new import_obsidian10.Notice("\u30CE\u30FC\u30C8\u3092\u958B\u3044\u3066\u304B\u3089\u8A08\u7B97\u3092\u633F\u5165\u3057\u3066\u304F\u3060\u3055\u3044");
      }
    } catch (error) {
      console.error("Error inserting YAML:", error);
      new import_obsidian10.Notice("\u8A08\u7B97\u306E\u633F\u5165\u3067\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
    }
  }
  addToHistory(type, name, inputData, result, notes) {
    if (!this.settings.enableHistory) {
      return;
    }
    const entry = HistoryManager.createHistoryEntry(type, name, inputData, result, notes);
    this.settings = HistoryManager.addToHistory(this.settings, entry);
    this.saveSettings();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.calculationEngine) {
      this.calculationEngine.updateSettings(this.settings);
    }
    this.app.workspace.trigger("buffer-calc:settings-changed");
  }
};
var RecipeManagerModal = class extends import_obsidian10.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Recipe Manager" });
    contentEl.createEl("p", { text: "Recipe management functionality will be implemented here." });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ReagentManagerModal = class extends import_obsidian10.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Manage Custom Reagents" });
    contentEl.createEl("p", { text: "Reagent management functionality will be implemented here." });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var CalculationTypeSelectorModal = class extends import_obsidian10.Modal {
  constructor(app, onSelectCallback) {
    super(app);
    this.onSelectCallback = onSelectCallback;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "\u8A08\u7B97\u30BF\u30A4\u30D7\u3092\u9078\u629E", cls: "modal-title" });
    const buttonContainer = contentEl.createDiv({ cls: "calculation-type-buttons" });
    const bufferButton = buttonContainer.createEl("button", {
      text: "\u30D0\u30C3\u30D5\u30A1\u30FC\u8A08\u7B97",
      cls: "mod-cta calculation-type-button"
    });
    bufferButton.createDiv({ text: "Multi-component buffer preparation", cls: "button-description" });
    bufferButton.onclick = () => {
      this.close();
      this.onSelectCallback("buffer");
    };
    const stockButton = buttonContainer.createEl("button", {
      text: "\u30B9\u30C8\u30C3\u30AF\u6EB6\u6DB2\u8A08\u7B97",
      cls: "mod-cta calculation-type-button"
    });
    stockButton.createDiv({ text: "Mass calculation for stock solutions", cls: "button-description" });
    stockButton.onclick = () => {
      this.close();
      this.onSelectCallback("stock");
    };
    const dilutionButton = buttonContainer.createEl("button", {
      text: "\u5E0C\u91C8\u8A08\u7B97",
      cls: "mod-cta calculation-type-button"
    });
    dilutionButton.createDiv({ text: "Simple C1V1=C2V2 dilutions", cls: "button-description" });
    dilutionButton.onclick = () => {
      this.close();
      this.onSelectCallback("dilution");
    };
    const serialDilutionButton = buttonContainer.createEl("button", {
      text: "\u6BB5\u968E\u5E0C\u91C8\u8A08\u7B97",
      cls: "mod-cta calculation-type-button"
    });
    serialDilutionButton.createDiv({ text: "Multi-step serial dilution protocols", cls: "button-description" });
    serialDilutionButton.onclick = () => {
      this.close();
      this.onSelectCallback("serial-dilution");
    };
    const style = contentEl.createEl("style");
    style.textContent = `
			.calculation-type-buttons {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
				gap: 1rem;
				margin-top: 1rem;
			}
			.calculation-type-button {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 1rem;
				border: 1px solid var(--background-modifier-border);
				border-radius: 6px;
				background: var(--background-primary);
				cursor: pointer;
				transition: all 0.2s ease;
				min-height: 80px;
				justify-content: center;
			}
			.calculation-type-button:hover {
				background: var(--background-modifier-hover);
				border-color: var(--interactive-accent);
			}
			.button-description {
				font-size: 0.8rem;
				color: var(--text-muted);
				margin-top: 0.5rem;
				text-align: center;
			}
		`;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
