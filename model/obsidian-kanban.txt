├── .eslintrc.js
├── .github
    ├── FUNDING.yml
    ├── ISSUE_TEMPLATE
    │   ├── bug_report.yml
    │   └── feature_request.yml
    └── workflows
    │   └── release.yml
├── .gitignore
├── .vscode
    ├── extensions.json
    └── settings.json
├── LICENSE.md
├── README.md
├── buffer-es6.mjs
├── docs
    ├── .obsidian
    │   ├── app.json
    │   ├── appearance.json
    │   ├── community-plugins.json
    │   ├── core-plugins-migration.json
    │   ├── core-plugins.json
    │   ├── global-search.json
    │   ├── hotkeys.json
    │   ├── plugins
    │   │   └── obsidian-kanban
    │   │   │   └── manifest.json
    │   ├── publish.json
    │   ├── themes
    │   │   └── California Coast.css
    │   ├── workspace
    │   └── workspace.json
    ├── Assets
    │   ├── Base Template.md
    │   ├── Screen Shot 2021-09-13 at 12.22.08 PM.png
    │   ├── Screen Shot 2021-09-13 at 12.22.57 PM.png
    │   ├── Screen Shot 2021-09-13 at 12.23.35 PM.png
    │   ├── Screen Shot 2021-09-13 at 12.29.20 PM.png
    │   ├── Screen Shot 2021-09-13 at 12.33.39 PM.png
    │   ├── Screen Shot 2021-09-13 at 3.32.18 PM.png
    │   ├── Screen Shot 2021-09-13 at 3.35.03 PM.png
    │   ├── Screen Shot 2021-09-13 at 3.35.17 PM.png
    │   ├── Screen Shot 2021-09-13 at 3.46.53 PM.png
    │   ├── Screen Shot 2021-09-13 at 3.48.15 PM.png
    │   ├── Screen Shot 2021-09-13 at 4.00.18 PM.png
    │   ├── Screen Shot 2021-09-13 at 4.02.49 PM.png
    │   ├── Screen Shot 2021-09-13 at 4.04.40 PM.png
    │   ├── Screen Shot 2021-09-13 at 4.04.59 PM.png
    │   ├── Screen Shot 2021-09-14 at 11.44.32 AM.png
    │   ├── Screen Shot 2021-09-14 at 11.49.10 AM.png
    │   ├── Screen Shot 2021-09-14 at 11.55.06 AM.png
    │   ├── Screen Shot 2021-09-14 at 11.56.01 AM.png
    │   ├── Screen Shot 2021-09-14 at 12.01.07 PM.png
    │   ├── Screen Shot 2021-09-14 at 12.03.06 PM.png
    │   ├── Screen Shot 2021-09-14 at 12.08.25 PM.png
    │   ├── Screen Shot 2021-09-14 at 12.09.20 PM.png
    │   ├── Screen Shot 2021-09-14 at 12.12.29 PM.png
    │   ├── Screen Shot 2021-09-14 at 12.13.07 PM.png
    │   ├── Screen Shot 2021-09-15 at 5.46.58 PM.png
    │   ├── Screen Shot 2021-09-15 at 5.47.40 PM.png
    │   ├── Screen Shot 2021-09-15 at 5.48.16 PM.png
    │   ├── Screen Shot 2021-09-15 at 5.48.37 PM.png
    │   ├── Screen Shot 2021-09-15 at 5.51.36 PM.png
    │   ├── Screen Shot 2021-09-15 at 5.54.15 PM.png
    │   ├── Screen Shot 2021-09-15 at 6.04.57 PM.png
    │   ├── Screen Shot 2021-09-15 at 6.05.21 PM.png
    │   ├── Screen Shot 2021-09-15 at 6.53.47 PM.png
    │   ├── Screen Shot 2021-09-15 at 6.54.29 PM.png
    │   ├── Screen Shot 2021-09-15 at 6.59.29 PM.png
    │   ├── Screen Shot 2021-09-15 at 7.04.26 PM.png
    │   ├── Screen Shot 2021-09-15 at 7.06.15 PM.png
    │   ├── Screen Shot 2021-09-15 at 7.06.48 PM.png
    │   ├── Screen Shot 2021-09-15 at 7.08.08 PM.png
    │   ├── Screen Shot 2021-09-15 at 7.09.08 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.14.52 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.15.11 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.15.31 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.21.37 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.23.04 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.23.46 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.25.31 PM.png
    │   ├── Screen Shot 2021-09-15 at 9.26.41 PM.png
    │   ├── Screen Shot 2021-09-16 at 1.02.48 PM.png
    │   ├── Screen Shot 2021-09-16 at 1.04.58 PM.png
    │   ├── Screen Shot 2021-09-16 at 1.06.02 PM.png
    │   ├── Screen Shot 2021-09-16 at 1.06.27 PM.png
    │   ├── Screen Shot 2021-09-16 at 1.10.38 PM.png
    │   ├── Screen Shot 2021-09-16 at 10.09.02 AM.png
    │   ├── Screen Shot 2021-09-16 at 10.09.50 AM.png
    │   ├── Screen Shot 2021-09-16 at 10.10.15 AM.png
    │   ├── Screen Shot 2021-09-16 at 10.10.47 AM.png
    │   ├── Screen Shot 2021-09-16 at 12.58.22 PM.png
    │   ├── Screen Shot 2021-09-16 at 9.15.04 AM.png
    │   ├── Screen Shot 2021-09-16 at 9.15.47 AM.png
    │   ├── Screen Shot How-to-add-image-to-card.png
    │   ├── Screen Shot How-to-add-metadata-to-card.png
    │   ├── Screen Shot WIP-Limit-exceeded.png
    │   ├── Screen Shot WIP-Limit.png
    │   └── Screen Shot appending-archive-datetime.png
    ├── FAQs
    │   └── Frontmatter limitations & gotchas.md
    ├── How do I
    │   ├── Add a date to a card.md
    │   ├── Add a time to a card.md
    │   ├── Add an image to a card.md
    │   ├── Create a Kanban board.md
    │   ├── Create notes from cards.md
    │   ├── Install the plugin.md
    │   ├── Search a Kanban board.md
    │   ├── Set a WIP Limit.md
    │   └── View a Kanban's archive.md
    ├── Obsidian Kanban Plugin.md
    └── Settings
    │   ├── Add date and time to archived cards.md
    │   ├── Archive date time format.md
    │   ├── Archive date time position.md
    │   ├── Archive date time separator.md
    │   ├── Board Header Buttons.md
    │   ├── Date display format.md
    │   ├── Date format.md
    │   ├── Date trigger.md
    │   ├── Display card checkbox.md
    │   ├── Hide card display dates.md
    │   ├── Hide card display tags.md
    │   ├── Hide dates in card titles.md
    │   ├── Hide tags in card titles.md
    │   ├── Lane width.md
    │   ├── Link dates to daily notes.md
    │   ├── Linked page metadata.md
    │   ├── Local vs. global settings.md
    │   ├── Maximum number of archived cards.md
    │   ├── New line trigger.md
    │   ├── Note folder.md
    │   ├── Note template.md
    │   ├── Prepend append new cards.md
    │   ├── Show relative date.md
    │   ├── Time format.md
    │   └── Time trigger.md
├── esbuild.config.mjs
├── manifest.json
├── package.json
├── preact-shim.js
├── prettier.config.cjs
├── release-notes.md
├── src
    ├── DragDropApp.tsx
    ├── KanbanView.tsx
    ├── Settings.ts
    ├── StateManager.ts
    ├── components
    │   ├── Editor
    │   │   ├── MarkdownEditor.tsx
    │   │   ├── datePickerLocale.ts
    │   │   ├── dateWidget.ts
    │   │   ├── datepicker.ts
    │   │   ├── flatpickr
    │   │   │   ├── flatpickr.min.css
    │   │   │   ├── index.ts
    │   │   │   ├── l10n
    │   │   │   │   ├── ar-dz.ts
    │   │   │   │   ├── ar.ts
    │   │   │   │   ├── at.ts
    │   │   │   │   ├── az.ts
    │   │   │   │   ├── be.ts
    │   │   │   │   ├── bg.ts
    │   │   │   │   ├── bn.ts
    │   │   │   │   ├── bs.ts
    │   │   │   │   ├── cat.ts
    │   │   │   │   ├── ckb.ts
    │   │   │   │   ├── cs.ts
    │   │   │   │   ├── cy.ts
    │   │   │   │   ├── da.ts
    │   │   │   │   ├── de.ts
    │   │   │   │   ├── default.ts
    │   │   │   │   ├── eo.ts
    │   │   │   │   ├── es.ts
    │   │   │   │   ├── et.ts
    │   │   │   │   ├── fa.ts
    │   │   │   │   ├── fi.ts
    │   │   │   │   ├── fo.ts
    │   │   │   │   ├── fr.ts
    │   │   │   │   ├── ga.ts
    │   │   │   │   ├── gr.ts
    │   │   │   │   ├── he.ts
    │   │   │   │   ├── hi.ts
    │   │   │   │   ├── hr.ts
    │   │   │   │   ├── hu.ts
    │   │   │   │   ├── hy.ts
    │   │   │   │   ├── id.ts
    │   │   │   │   ├── index.ts
    │   │   │   │   ├── is.ts
    │   │   │   │   ├── it.ts
    │   │   │   │   ├── ja.ts
    │   │   │   │   ├── ka.ts
    │   │   │   │   ├── km.ts
    │   │   │   │   ├── ko.ts
    │   │   │   │   ├── kz.ts
    │   │   │   │   ├── lt.ts
    │   │   │   │   ├── lv.ts
    │   │   │   │   ├── mk.ts
    │   │   │   │   ├── mn.ts
    │   │   │   │   ├── ms.ts
    │   │   │   │   ├── my.ts
    │   │   │   │   ├── nl.ts
    │   │   │   │   ├── nn.ts
    │   │   │   │   ├── no.ts
    │   │   │   │   ├── pa.ts
    │   │   │   │   ├── pl.ts
    │   │   │   │   ├── pt.ts
    │   │   │   │   ├── ro.ts
    │   │   │   │   ├── ru.ts
    │   │   │   │   ├── si.ts
    │   │   │   │   ├── sk.ts
    │   │   │   │   ├── sl.ts
    │   │   │   │   ├── sq.ts
    │   │   │   │   ├── sr-cyr.ts
    │   │   │   │   ├── sr.ts
    │   │   │   │   ├── sv.ts
    │   │   │   │   ├── th.ts
    │   │   │   │   ├── tr.ts
    │   │   │   │   ├── uk.ts
    │   │   │   │   ├── uz.ts
    │   │   │   │   ├── uz_latn.ts
    │   │   │   │   ├── vn.ts
    │   │   │   │   ├── zh-tw.ts
    │   │   │   │   └── zh.ts
    │   │   │   ├── plugins
    │   │   │   │   ├── confirmDate
    │   │   │   │   │   ├── confirmDate.css
    │   │   │   │   │   └── confirmDate.ts
    │   │   │   │   ├── labelPlugin
    │   │   │   │   │   └── labelPlugin.ts
    │   │   │   │   ├── minMaxTimePlugin.ts
    │   │   │   │   ├── momentPlugin.ts
    │   │   │   │   ├── monthSelect
    │   │   │   │   │   ├── index.ts
    │   │   │   │   │   └── style.css
    │   │   │   │   ├── rangePlugin.ts
    │   │   │   │   ├── scrollPlugin.ts
    │   │   │   │   └── weekSelect
    │   │   │   │   │   └── weekSelect.ts
    │   │   │   ├── style
    │   │   │   │   ├── _vars.styl
    │   │   │   │   ├── flatpickr.styl
    │   │   │   │   └── themes
    │   │   │   │   │   ├── airbnb.styl
    │   │   │   │   │   ├── confetti.styl
    │   │   │   │   │   ├── dark.styl
    │   │   │   │   │   ├── light.styl
    │   │   │   │   │   ├── material_blue.styl
    │   │   │   │   │   ├── material_green.styl
    │   │   │   │   │   ├── material_orange.styl
    │   │   │   │   │   └── material_red.styl
    │   │   │   ├── types
    │   │   │   │   ├── globals.ts
    │   │   │   │   ├── instance.ts
    │   │   │   │   ├── locale.ts
    │   │   │   │   └── options.ts
    │   │   │   ├── typings.d.ts
    │   │   │   └── utils
    │   │   │   │   ├── dates.ts
    │   │   │   │   ├── dom.ts
    │   │   │   │   ├── formatting.ts
    │   │   │   │   └── index.ts
    │   │   ├── helpers.ts
    │   │   └── suggest.ts
    │   ├── Icon
    │   │   ├── GripIcon.tsx
    │   │   └── Icon.tsx
    │   ├── Item
    │   │   ├── DateAndTime.tsx
    │   │   ├── InlineMetadata.tsx
    │   │   ├── Item.tsx
    │   │   ├── ItemCheckbox.tsx
    │   │   ├── ItemContent.tsx
    │   │   ├── ItemForm.tsx
    │   │   ├── ItemMenu.ts
    │   │   ├── ItemMenuButton.tsx
    │   │   ├── MetadataTable.tsx
    │   │   └── helpers.ts
    │   ├── Kanban.tsx
    │   ├── Lane
    │   │   ├── Lane.tsx
    │   │   ├── LaneForm.tsx
    │   │   ├── LaneHeader.tsx
    │   │   ├── LaneMenu.tsx
    │   │   ├── LaneSettings.tsx
    │   │   └── LaneTitle.tsx
    │   ├── MarkdownRenderer
    │   │   └── MarkdownRenderer.tsx
    │   ├── Table
    │   │   ├── Cells.tsx
    │   │   ├── Table.tsx
    │   │   ├── helpers.tsx
    │   │   └── types.ts
    │   ├── context.ts
    │   ├── helpers.ts
    │   └── types.ts
    ├── dnd
    │   ├── components
    │   │   ├── DndContext.tsx
    │   │   ├── DragOverlay.tsx
    │   │   ├── Droppable.tsx
    │   │   ├── Scope.tsx
    │   │   ├── ScrollContainer.tsx
    │   │   ├── ScrollStateContext.tsx
    │   │   ├── Scrollable.tsx
    │   │   ├── SortPlaceholder.tsx
    │   │   ├── Sortable.tsx
    │   │   └── context.ts
    │   ├── managers
    │   │   ├── DndManager.ts
    │   │   ├── DragManager.ts
    │   │   ├── EntityManager.ts
    │   │   ├── ScrollManager.ts
    │   │   ├── ScrollStateManager.ts
    │   │   └── SortManager.ts
    │   ├── types.ts
    │   └── util
    │   │   ├── animation.ts
    │   │   ├── createHTMLDndEntity.ts
    │   │   ├── data.ts
    │   │   ├── getWindow.ts
    │   │   ├── hitbox.ts
    │   │   └── path.ts
    ├── helpers.ts
    ├── helpers
    │   ├── boardModifiers.ts
    │   ├── patch.ts
    │   ├── renderMarkdown.ts
    │   └── util.ts
    ├── lang
    │   ├── helpers.ts
    │   └── locale
    │   │   ├── ar.ts
    │   │   ├── cz.ts
    │   │   ├── da.ts
    │   │   ├── de.ts
    │   │   ├── en.ts
    │   │   ├── es.ts
    │   │   ├── fr.ts
    │   │   ├── hi.ts
    │   │   ├── id.ts
    │   │   ├── it.ts
    │   │   ├── ja.ts
    │   │   ├── ko.ts
    │   │   ├── nl.ts
    │   │   ├── no.ts
    │   │   ├── pl.ts
    │   │   ├── pt-br.ts
    │   │   ├── pt.ts
    │   │   ├── ro.ts
    │   │   ├── ru.ts
    │   │   ├── sq.ts
    │   │   ├── tr.ts
    │   │   ├── uk.ts
    │   │   ├── zh-cn.ts
    │   │   └── zh-tw.ts
    ├── main.ts
    ├── parsers
    │   ├── List.ts
    │   ├── common.ts
    │   ├── extensions
    │   │   ├── blockid.ts
    │   │   ├── genericWrapped.ts
    │   │   ├── helpers.ts
    │   │   ├── internalMarkdownLink.ts
    │   │   ├── tag.ts
    │   │   ├── taskList.ts
    │   │   └── types.ts
    │   ├── formats
    │   │   └── list.ts
    │   ├── helpers
    │   │   ├── ast.ts
    │   │   ├── hydrateBoard.ts
    │   │   ├── inlineMetadata.ts
    │   │   └── parser.ts
    │   └── parseMarkdown.ts
    ├── settingHelpers.ts
    ├── settings
    │   ├── DateColorSettings.tsx
    │   ├── MetadataSettings.tsx
    │   ├── TagColorSettings.tsx
    │   └── TagSortSettings.tsx
    ├── styles.less
    └── types.d.ts
├── tsconfig.json
├── version-bump.mjs
├── versions.json
└── yarn.lock


/.eslintrc.js:
--------------------------------------------------------------------------------
 1 | module.exports = {
 2 |   env: {
 3 |     browser: true,
 4 |     es6: true,
 5 |     node: true,
 6 |     jest: true,
 7 |   },
 8 |   ignorePatterns: ['./src/docs'],
 9 |   extends: [
10 |     'eslint:recommended',
11 |     'plugin:react/recommended',
12 |     'plugin:@typescript-eslint/recommended',
13 |   ],
14 |   globals: {
15 |     Atomics: 'readonly',
16 |     SharedArrayBuffer: 'readonly',
17 |   },
18 |   parser: '@typescript-eslint/parser',
19 |   parserOptions: {
20 |     parser: '@typescript-eslint/parser',
21 |     project: './tsconfig.json',
22 |     ecmaFeatures: {
23 |       jsx: true,
24 |     },
25 |     ecmaVersion: 2018,
26 |     sourceType: 'module',
27 |   },
28 |   plugins: ['react', '@typescript-eslint'],
29 |   rules: {
30 |     '@typescript-eslint/await-thenable': 'error',
31 |     '@typescript-eslint/explicit-function-return-type': 'off',
32 |     '@typescript-eslint/member-delimiter-style': 'off',
33 |     '@typescript-eslint/no-explicit-any': 'off',
34 |     '@typescript-eslint/no-empty-function': 'off',
35 |     '@typescript-eslint/no-var-requires': 'off',
36 |     '@typescript-eslint/no-use-before-define': 'off',
37 |     '@typescript-eslint/explicit-module-boundary-types': 'off',
38 |     '@typescript-eslint/no-this-alias': 'off',
39 |     '@typescript-eslint/no-inferrable-types': 'off',
40 |     'react/no-unescaped-entities': 'off',
41 |     'react/prop-types': 'off',
42 |     'react/react-in-jsx-scope': 'off',
43 |     'linebreak-style': ['error', 'unix'],
44 |     indent: 'off',
45 |     quotes: 'off',
46 |   },
47 |   settings: {
48 |     react: {
49 |       version: '16.13',
50 |     },
51 |   },
52 | };
53 | 


--------------------------------------------------------------------------------
/.github/FUNDING.yml:
--------------------------------------------------------------------------------
1 | github: mgmeyers
2 | custom: https://www.buymeacoffee.com/mgme
3 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/bug_report.yml:
--------------------------------------------------------------------------------
 1 | name: Bug Report
 2 | description: File a bug report
 3 | labels: ['bug']
 4 | title: '[Bug]: '
 5 | body:
 6 |   - type: markdown
 7 |     attributes:
 8 |       value: '**Please make sure you are on the latest version.**'
 9 |   - type: textarea
10 |     id: what-happened
11 |     attributes:
12 |       label: Describe the bug
13 |       description: What's happening and when does it happen?
14 |     validations:
15 |       required: true
16 |   - type: textarea
17 |     id: expected
18 |     attributes:
19 |       label: Expected Behavior
20 |       description: What SHOULD happen?
21 |   - type: textarea
22 |     id: reproduce
23 |     attributes:
24 |       label: Steps to reproduce
25 |       description: The more detail you provide, the easier it will be to narrow down and fix the bug
26 |     validations:
27 |       required: true
28 |   - type: textarea
29 |     id: logs
30 |     attributes:
31 |       label: Relevant errors (if available)
32 |       description: Please copy and paste any relevant log output. This will be automatically formatted into code, so no need for backticks. Open Obsidian's Developer Console by pressing CTRL + SHIFT + I or Command + Option + I in MacOS
33 |       render: shell
34 |   - type: dropdown
35 |     id: version
36 |     attributes:
37 |       label: Operating system
38 |       description: Which OS are you using?
39 |       options:
40 |         - Windows
41 |         - Linux
42 |         - macOS
43 |         - iOS
44 |         - Android
45 |     validations:
46 |       required: true
47 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/feature_request.yml:
--------------------------------------------------------------------------------
 1 | name: Feature Request
 2 | description: Suggest a Feature
 3 | labels: ['enhancement']
 4 | title: '[Feature]: '
 5 | body:
 6 |   - type: markdown
 7 |     attributes:
 8 |       value: Before getting started, please check the [GitHub Issues](https://github.com/mgmeyers/obsidian-kanban/issues) (open or closed) for similar issues.
 9 |   - type: textarea
10 |     validations:
11 |       required: true
12 |     attributes:
13 |       label: Goal or desired outcome of this feature
14 |       description: Before describing your requested feature, please describe more generally the problem, pain-point, or use case you'd like to solve for.
15 |   - type: textarea
16 |     validations:
17 |       required: true
18 |     attributes:
19 |       label: Describe the feature
20 |       description: Please describe the desired feature in as much detail as you are able.
21 |   - type: textarea
22 |     attributes:
23 |       label: Can you think of any alternatives or work-arounds?
24 |       description: Some features may take time to develop, it may be helpful for you and others to have alternative options or workarounds, and may help clarify the feature itself.
25 |   - type: textarea
26 |     attributes:
27 |       label: Screenshots, mockups, or videos
28 |       description: |
29 |         If applicable, add screenshots, mockups, or videos to help demonstrate your feature request.
30 | 


--------------------------------------------------------------------------------
/.github/workflows/release.yml:
--------------------------------------------------------------------------------
 1 | name: Release Obsidian plugin
 2 | 
 3 | on:
 4 |   push:
 5 |     tags:
 6 |       - '*'
 7 | 
 8 | jobs:
 9 |   build:
10 |     runs-on: ubuntu-latest
11 | 
12 |     steps:
13 |       - uses: actions/checkout@v3
14 | 
15 |       - name: Use Node.js
16 |         uses: actions/setup-node@v3
17 |         with:
18 |           node-version: '18.x'
19 | 
20 |       - name: Build plugin
21 |         run: |
22 |           npm install
23 |           npm run build
24 | 
25 |       - name: Create release
26 |         env:
27 |           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
28 |         run: |
29 |           tag="${GITHUB_REF#refs/tags/}"
30 | 
31 |           gh release create "$tag" \
32 |             --title="$tag" \
33 |             --notes-file="release-notes.md" \
34 |             main.js manifest.json styles.css
35 | 


--------------------------------------------------------------------------------
/.gitignore:
--------------------------------------------------------------------------------
 1 | # Intellij
 2 | *.iml
 3 | .idea
 4 | 
 5 | # npm
 6 | node_modules
 7 | package-lock.json
 8 | 
 9 | # build
10 | .DS_Store
11 | *.js.map
12 | .env
13 | yarn*
14 | dist
15 | test-vault/
16 | main.js
17 | styles.css


--------------------------------------------------------------------------------
/.vscode/extensions.json:
--------------------------------------------------------------------------------
1 | {
2 |   "recommendations": [
3 |     "dbaeumer.vscode-eslint",
4 |     "esbenp.prettier-vscode",
5 |     "amatiasq.sort-imports"
6 |   ]
7 | }
8 | 


--------------------------------------------------------------------------------
/.vscode/settings.json:
--------------------------------------------------------------------------------
1 | {
2 |   "editor.defaultFormatter": "esbenp.prettier-vscode",
3 |   "editor.formatOnSave": true
4 | }
5 | 


--------------------------------------------------------------------------------
/LICENSE.md:
--------------------------------------------------------------------------------
  1 |                     GNU GENERAL PUBLIC LICENSE
  2 |                        Version 3, 29 June 2007
  3 | 
  4 |  Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
  5 |  Everyone is permitted to copy and distribute verbatim copies
  6 |  of this license document, but changing it is not allowed.
  7 | 
  8 |                             Preamble
  9 | 
 10 |   The GNU General Public License is a free, copyleft license for
 11 | software and other kinds of works.
 12 | 
 13 |   The licenses for most software and other practical works are designed
 14 | to take away your freedom to share and change the works.  By contrast,
 15 | the GNU General Public License is intended to guarantee your freedom to
 16 | share and change all versions of a program--to make sure it remains free
 17 | software for all its users.  We, the Free Software Foundation, use the
 18 | GNU General Public License for most of our software; it applies also to
 19 | any other work released this way by its authors.  You can apply it to
 20 | your programs, too.
 21 | 
 22 |   When we speak of free software, we are referring to freedom, not
 23 | price.  Our General Public Licenses are designed to make sure that you
 24 | have the freedom to distribute copies of free software (and charge for
 25 | them if you wish), that you receive source code or can get it if you
 26 | want it, that you can change the software or use pieces of it in new
 27 | free programs, and that you know you can do these things.
 28 | 
 29 |   To protect your rights, we need to prevent others from denying you
 30 | these rights or asking you to surrender the rights.  Therefore, you have
 31 | certain responsibilities if you distribute copies of the software, or if
 32 | you modify it: responsibilities to respect the freedom of others.
 33 | 
 34 |   For example, if you distribute copies of such a program, whether
 35 | gratis or for a fee, you must pass on to the recipients the same
 36 | freedoms that you received.  You must make sure that they, too, receive
 37 | or can get the source code.  And you must show them these terms so they
 38 | know their rights.
 39 | 
 40 |   Developers that use the GNU GPL protect your rights with two steps:
 41 | (1) assert copyright on the software, and (2) offer you this License
 42 | giving you legal permission to copy, distribute and/or modify it.
 43 | 
 44 |   For the developers' and authors' protection, the GPL clearly explains
 45 | that there is no warranty for this free software.  For both users' and
 46 | authors' sake, the GPL requires that modified versions be marked as
 47 | changed, so that their problems will not be attributed erroneously to
 48 | authors of previous versions.
 49 | 
 50 |   Some devices are designed to deny users access to install or run
 51 | modified versions of the software inside them, although the manufacturer
 52 | can do so.  This is fundamentally incompatible with the aim of
 53 | protecting users' freedom to change the software.  The systematic
 54 | pattern of such abuse occurs in the area of products for individuals to
 55 | use, which is precisely where it is most unacceptable.  Therefore, we
 56 | have designed this version of the GPL to prohibit the practice for those
 57 | products.  If such problems arise substantially in other domains, we
 58 | stand ready to extend this provision to those domains in future versions
 59 | of the GPL, as needed to protect the freedom of users.
 60 | 
 61 |   Finally, every program is threatened constantly by software patents.
 62 | States should not allow patents to restrict development and use of
 63 | software on general-purpose computers, but in those that do, we wish to
 64 | avoid the special danger that patents applied to a free program could
 65 | make it effectively proprietary.  To prevent this, the GPL assures that
 66 | patents cannot be used to render the program non-free.
 67 | 
 68 |   The precise terms and conditions for copying, distribution and
 69 | modification follow.
 70 | 
 71 |                        TERMS AND CONDITIONS
 72 | 
 73 |   0. Definitions.
 74 | 
 75 |   "This License" refers to version 3 of the GNU General Public License.
 76 | 
 77 |   "Copyright" also means copyright-like laws that apply to other kinds of
 78 | works, such as semiconductor masks.
 79 | 
 80 |   "The Program" refers to any copyrightable work licensed under this
 81 | License.  Each licensee is addressed as "you".  "Licensees" and
 82 | "recipients" may be individuals or organizations.
 83 | 
 84 |   To "modify" a work means to copy from or adapt all or part of the work
 85 | in a fashion requiring copyright permission, other than the making of an
 86 | exact copy.  The resulting work is called a "modified version" of the
 87 | earlier work or a work "based on" the earlier work.
 88 | 
 89 |   A "covered work" means either the unmodified Program or a work based
 90 | on the Program.
 91 | 
 92 |   To "propagate" a work means to do anything with it that, without
 93 | permission, would make you directly or secondarily liable for
 94 | infringement under applicable copyright law, except executing it on a
 95 | computer or modifying a private copy.  Propagation includes copying,
 96 | distribution (with or without modification), making available to the
 97 | public, and in some countries other activities as well.
 98 | 
 99 |   To "convey" a work means any kind of propagation that enables other
100 | parties to make or receive copies.  Mere interaction with a user through
101 | a computer network, with no transfer of a copy, is not conveying.
102 | 
103 |   An interactive user interface displays "Appropriate Legal Notices"
104 | to the extent that it includes a convenient and prominently visible
105 | feature that (1) displays an appropriate copyright notice, and (2)
106 | tells the user that there is no warranty for the work (except to the
107 | extent that warranties are provided), that licensees may convey the
108 | work under this License, and how to view a copy of this License.  If
109 | the interface presents a list of user commands or options, such as a
110 | menu, a prominent item in the list meets this criterion.
111 | 
112 |   1. Source Code.
113 | 
114 |   The "source code" for a work means the preferred form of the work
115 | for making modifications to it.  "Object code" means any non-source
116 | form of a work.
117 | 
118 |   A "Standard Interface" means an interface that either is an official
119 | standard defined by a recognized standards body, or, in the case of
120 | interfaces specified for a particular programming language, one that
121 | is widely used among developers working in that language.
122 | 
123 |   The "System Libraries" of an executable work include anything, other
124 | than the work as a whole, that (a) is included in the normal form of
125 | packaging a Major Component, but which is not part of that Major
126 | Component, and (b) serves only to enable use of the work with that
127 | Major Component, or to implement a Standard Interface for which an
128 | implementation is available to the public in source code form.  A
129 | "Major Component", in this context, means a major essential component
130 | (kernel, window system, and so on) of the specific operating system
131 | (if any) on which the executable work runs, or a compiler used to
132 | produce the work, or an object code interpreter used to run it.
133 | 
134 |   The "Corresponding Source" for a work in object code form means all
135 | the source code needed to generate, install, and (for an executable
136 | work) run the object code and to modify the work, including scripts to
137 | control those activities.  However, it does not include the work's
138 | System Libraries, or general-purpose tools or generally available free
139 | programs which are used unmodified in performing those activities but
140 | which are not part of the work.  For example, Corresponding Source
141 | includes interface definition files associated with source files for
142 | the work, and the source code for shared libraries and dynamically
143 | linked subprograms that the work is specifically designed to require,
144 | such as by intimate data communication or control flow between those
145 | subprograms and other parts of the work.
146 | 
147 |   The Corresponding Source need not include anything that users
148 | can regenerate automatically from other parts of the Corresponding
149 | Source.
150 | 
151 |   The Corresponding Source for a work in source code form is that
152 | same work.
153 | 
154 |   2. Basic Permissions.
155 | 
156 |   All rights granted under this License are granted for the term of
157 | copyright on the Program, and are irrevocable provided the stated
158 | conditions are met.  This License explicitly affirms your unlimited
159 | permission to run the unmodified Program.  The output from running a
160 | covered work is covered by this License only if the output, given its
161 | content, constitutes a covered work.  This License acknowledges your
162 | rights of fair use or other equivalent, as provided by copyright law.
163 | 
164 |   You may make, run and propagate covered works that you do not
165 | convey, without conditions so long as your license otherwise remains
166 | in force.  You may convey covered works to others for the sole purpose
167 | of having them make modifications exclusively for you, or provide you
168 | with facilities for running those works, provided that you comply with
169 | the terms of this License in conveying all material for which you do
170 | not control copyright.  Those thus making or running the covered works
171 | for you must do so exclusively on your behalf, under your direction
172 | and control, on terms that prohibit them from making any copies of
173 | your copyrighted material outside their relationship with you.
174 | 
175 |   Conveying under any other circumstances is permitted solely under
176 | the conditions stated below.  Sublicensing is not allowed; section 10
177 | makes it unnecessary.
178 | 
179 |   3. Protecting Users' Legal Rights From Anti-Circumvention Law.
180 | 
181 |   No covered work shall be deemed part of an effective technological
182 | measure under any applicable law fulfilling obligations under article
183 | 11 of the WIPO copyright treaty adopted on 20 December 1996, or
184 | similar laws prohibiting or restricting circumvention of such
185 | measures.
186 | 
187 |   When you convey a covered work, you waive any legal power to forbid
188 | circumvention of technological measures to the extent such circumvention
189 | is effected by exercising rights under this License with respect to
190 | the covered work, and you disclaim any intention to limit operation or
191 | modification of the work as a means of enforcing, against the work's
192 | users, your or third parties' legal rights to forbid circumvention of
193 | technological measures.
194 | 
195 |   4. Conveying Verbatim Copies.
196 | 
197 |   You may convey verbatim copies of the Program's source code as you
198 | receive it, in any medium, provided that you conspicuously and
199 | appropriately publish on each copy an appropriate copyright notice;
200 | keep intact all notices stating that this License and any
201 | non-permissive terms added in accord with section 7 apply to the code;
202 | keep intact all notices of the absence of any warranty; and give all
203 | recipients a copy of this License along with the Program.
204 | 
205 |   You may charge any price or no price for each copy that you convey,
206 | and you may offer support or warranty protection for a fee.
207 | 
208 |   5. Conveying Modified Source Versions.
209 | 
210 |   You may convey a work based on the Program, or the modifications to
211 | produce it from the Program, in the form of source code under the
212 | terms of section 4, provided that you also meet all of these conditions:
213 | 
214 |     a) The work must carry prominent notices stating that you modified
215 |     it, and giving a relevant date.
216 | 
217 |     b) The work must carry prominent notices stating that it is
218 |     released under this License and any conditions added under section
219 |     7.  This requirement modifies the requirement in section 4 to
220 |     "keep intact all notices".
221 | 
222 |     c) You must license the entire work, as a whole, under this
223 |     License to anyone who comes into possession of a copy.  This
224 |     License will therefore apply, along with any applicable section 7
225 |     additional terms, to the whole of the work, and all its parts,
226 |     regardless of how they are packaged.  This License gives no
227 |     permission to license the work in any other way, but it does not
228 |     invalidate such permission if you have separately received it.
229 | 
230 |     d) If the work has interactive user interfaces, each must display
231 |     Appropriate Legal Notices; however, if the Program has interactive
232 |     interfaces that do not display Appropriate Legal Notices, your
233 |     work need not make them do so.
234 | 
235 |   A compilation of a covered work with other separate and independent
236 | works, which are not by their nature extensions of the covered work,
237 | and which are not combined with it such as to form a larger program,
238 | in or on a volume of a storage or distribution medium, is called an
239 | "aggregate" if the compilation and its resulting copyright are not
240 | used to limit the access or legal rights of the compilation's users
241 | beyond what the individual works permit.  Inclusion of a covered work
242 | in an aggregate does not cause this License to apply to the other
243 | parts of the aggregate.
244 | 
245 |   6. Conveying Non-Source Forms.
246 | 
247 |   You may convey a covered work in object code form under the terms
248 | of sections 4 and 5, provided that you also convey the
249 | machine-readable Corresponding Source under the terms of this License,
250 | in one of these ways:
251 | 
252 |     a) Convey the object code in, or embodied in, a physical product
253 |     (including a physical distribution medium), accompanied by the
254 |     Corresponding Source fixed on a durable physical medium
255 |     customarily used for software interchange.
256 | 
257 |     b) Convey the object code in, or embodied in, a physical product
258 |     (including a physical distribution medium), accompanied by a
259 |     written offer, valid for at least three years and valid for as
260 |     long as you offer spare parts or customer support for that product
261 |     model, to give anyone who possesses the object code either (1) a
262 |     copy of the Corresponding Source for all the software in the
263 |     product that is covered by this License, on a durable physical
264 |     medium customarily used for software interchange, for a price no
265 |     more than your reasonable cost of physically performing this
266 |     conveying of source, or (2) access to copy the
267 |     Corresponding Source from a network server at no charge.
268 | 
269 |     c) Convey individual copies of the object code with a copy of the
270 |     written offer to provide the Corresponding Source.  This
271 |     alternative is allowed only occasionally and noncommercially, and
272 |     only if you received the object code with such an offer, in accord
273 |     with subsection 6b.
274 | 
275 |     d) Convey the object code by offering access from a designated
276 |     place (gratis or for a charge), and offer equivalent access to the
277 |     Corresponding Source in the same way through the same place at no
278 |     further charge.  You need not require recipients to copy the
279 |     Corresponding Source along with the object code.  If the place to
280 |     copy the object code is a network server, the Corresponding Source
281 |     may be on a different server (operated by you or a third party)
282 |     that supports equivalent copying facilities, provided you maintain
283 |     clear directions next to the object code saying where to find the
284 |     Corresponding Source.  Regardless of what server hosts the
285 |     Corresponding Source, you remain obligated to ensure that it is
286 |     available for as long as needed to satisfy these requirements.
287 | 
288 |     e) Convey the object code using peer-to-peer transmission, provided
289 |     you inform other peers where the object code and Corresponding
290 |     Source of the work are being offered to the general public at no
291 |     charge under subsection 6d.
292 | 
293 |   A separable portion of the object code, whose source code is excluded
294 | from the Corresponding Source as a System Library, need not be
295 | included in conveying the object code work.
296 | 
297 |   A "User Product" is either (1) a "consumer product", which means any
298 | tangible personal property which is normally used for personal, family,
299 | or household purposes, or (2) anything designed or sold for incorporation
300 | into a dwelling.  In determining whether a product is a consumer product,
301 | doubtful cases shall be resolved in favor of coverage.  For a particular
302 | product received by a particular user, "normally used" refers to a
303 | typical or common use of that class of product, regardless of the status
304 | of the particular user or of the way in which the particular user
305 | actually uses, or expects or is expected to use, the product.  A product
306 | is a consumer product regardless of whether the product has substantial
307 | commercial, industrial or non-consumer uses, unless such uses represent
308 | the only significant mode of use of the product.
309 | 
310 |   "Installation Information" for a User Product means any methods,
311 | procedures, authorization keys, or other information required to install
312 | and execute modified versions of a covered work in that User Product from
313 | a modified version of its Corresponding Source.  The information must
314 | suffice to ensure that the continued functioning of the modified object
315 | code is in no case prevented or interfered with solely because
316 | modification has been made.
317 | 
318 |   If you convey an object code work under this section in, or with, or
319 | specifically for use in, a User Product, and the conveying occurs as
320 | part of a transaction in which the right of possession and use of the
321 | User Product is transferred to the recipient in perpetuity or for a
322 | fixed term (regardless of how the transaction is characterized), the
323 | Corresponding Source conveyed under this section must be accompanied
324 | by the Installation Information.  But this requirement does not apply
325 | if neither you nor any third party retains the ability to install
326 | modified object code on the User Product (for example, the work has
327 | been installed in ROM).
328 | 
329 |   The requirement to provide Installation Information does not include a
330 | requirement to continue to provide support service, warranty, or updates
331 | for a work that has been modified or installed by the recipient, or for
332 | the User Product in which it has been modified or installed.  Access to a
333 | network may be denied when the modification itself materially and
334 | adversely affects the operation of the network or violates the rules and
335 | protocols for communication across the network.
336 | 
337 |   Corresponding Source conveyed, and Installation Information provided,
338 | in accord with this section must be in a format that is publicly
339 | documented (and with an implementation available to the public in
340 | source code form), and must require no special password or key for
341 | unpacking, reading or copying.
342 | 
343 |   7. Additional Terms.
344 | 
345 |   "Additional permissions" are terms that supplement the terms of this
346 | License by making exceptions from one or more of its conditions.
347 | Additional permissions that are applicable to the entire Program shall
348 | be treated as though they were included in this License, to the extent
349 | that they are valid under applicable law.  If additional permissions
350 | apply only to part of the Program, that part may be used separately
351 | under those permissions, but the entire Program remains governed by
352 | this License without regard to the additional permissions.
353 | 
354 |   When you convey a copy of a covered work, you may at your option
355 | remove any additional permissions from that copy, or from any part of
356 | it.  (Additional permissions may be written to require their own
357 | removal in certain cases when you modify the work.)  You may place
358 | additional permissions on material, added by you to a covered work,
359 | for which you have or can give appropriate copyright permission.
360 | 
361 |   Notwithstanding any other provision of this License, for material you
362 | add to a covered work, you may (if authorized by the copyright holders of
363 | that material) supplement the terms of this License with terms:
364 | 
365 |     a) Disclaiming warranty or limiting liability differently from the
366 |     terms of sections 15 and 16 of this License; or
367 | 
368 |     b) Requiring preservation of specified reasonable legal notices or
369 |     author attributions in that material or in the Appropriate Legal
370 |     Notices displayed by works containing it; or
371 | 
372 |     c) Prohibiting misrepresentation of the origin of that material, or
373 |     requiring that modified versions of such material be marked in
374 |     reasonable ways as different from the original version; or
375 | 
376 |     d) Limiting the use for publicity purposes of names of licensors or
377 |     authors of the material; or
378 | 
379 |     e) Declining to grant rights under trademark law for use of some
380 |     trade names, trademarks, or service marks; or
381 | 
382 |     f) Requiring indemnification of licensors and authors of that
383 |     material by anyone who conveys the material (or modified versions of
384 |     it) with contractual assumptions of liability to the recipient, for
385 |     any liability that these contractual assumptions directly impose on
386 |     those licensors and authors.
387 | 
388 |   All other non-permissive additional terms are considered "further
389 | restrictions" within the meaning of section 10.  If the Program as you
390 | received it, or any part of it, contains a notice stating that it is
391 | governed by this License along with a term that is a further
392 | restriction, you may remove that term.  If a license document contains
393 | a further restriction but permits relicensing or conveying under this
394 | License, you may add to a covered work material governed by the terms
395 | of that license document, provided that the further restriction does
396 | not survive such relicensing or conveying.
397 | 
398 |   If you add terms to a covered work in accord with this section, you
399 | must place, in the relevant source files, a statement of the
400 | additional terms that apply to those files, or a notice indicating
401 | where to find the applicable terms.
402 | 
403 |   Additional terms, permissive or non-permissive, may be stated in the
404 | form of a separately written license, or stated as exceptions;
405 | the above requirements apply either way.
406 | 
407 |   8. Termination.
408 | 
409 |   You may not propagate or modify a covered work except as expressly
410 | provided under this License.  Any attempt otherwise to propagate or
411 | modify it is void, and will automatically terminate your rights under
412 | this License (including any patent licenses granted under the third
413 | paragraph of section 11).
414 | 
415 |   However, if you cease all violation of this License, then your
416 | license from a particular copyright holder is reinstated (a)
417 | provisionally, unless and until the copyright holder explicitly and
418 | finally terminates your license, and (b) permanently, if the copyright
419 | holder fails to notify you of the violation by some reasonable means
420 | prior to 60 days after the cessation.
421 | 
422 |   Moreover, your license from a particular copyright holder is
423 | reinstated permanently if the copyright holder notifies you of the
424 | violation by some reasonable means, this is the first time you have
425 | received notice of violation of this License (for any work) from that
426 | copyright holder, and you cure the violation prior to 30 days after
427 | your receipt of the notice.
428 | 
429 |   Termination of your rights under this section does not terminate the
430 | licenses of parties who have received copies or rights from you under
431 | this License.  If your rights have been terminated and not permanently
432 | reinstated, you do not qualify to receive new licenses for the same
433 | material under section 10.
434 | 
435 |   9. Acceptance Not Required for Having Copies.
436 | 
437 |   You are not required to accept this License in order to receive or
438 | run a copy of the Program.  Ancillary propagation of a covered work
439 | occurring solely as a consequence of using peer-to-peer transmission
440 | to receive a copy likewise does not require acceptance.  However,
441 | nothing other than this License grants you permission to propagate or
442 | modify any covered work.  These actions infringe copyright if you do
443 | not accept this License.  Therefore, by modifying or propagating a
444 | covered work, you indicate your acceptance of this License to do so.
445 | 
446 |   10. Automatic Licensing of Downstream Recipients.
447 | 
448 |   Each time you convey a covered work, the recipient automatically
449 | receives a license from the original licensors, to run, modify and
450 | propagate that work, subject to this License.  You are not responsible
451 | for enforcing compliance by third parties with this License.
452 | 
453 |   An "entity transaction" is a transaction transferring control of an
454 | organization, or substantially all assets of one, or subdividing an
455 | organization, or merging organizations.  If propagation of a covered
456 | work results from an entity transaction, each party to that
457 | transaction who receives a copy of the work also receives whatever
458 | licenses to the work the party's predecessor in interest had or could
459 | give under the previous paragraph, plus a right to possession of the
460 | Corresponding Source of the work from the predecessor in interest, if
461 | the predecessor has it or can get it with reasonable efforts.
462 | 
463 |   You may not impose any further restrictions on the exercise of the
464 | rights granted or affirmed under this License.  For example, you may
465 | not impose a license fee, royalty, or other charge for exercise of
466 | rights granted under this License, and you may not initiate litigation
467 | (including a cross-claim or counterclaim in a lawsuit) alleging that
468 | any patent claim is infringed by making, using, selling, offering for
469 | sale, or importing the Program or any portion of it.
470 | 
471 |   11. Patents.
472 | 
473 |   A "contributor" is a copyright holder who authorizes use under this
474 | License of the Program or a work on which the Program is based.  The
475 | work thus licensed is called the contributor's "contributor version".
476 | 
477 |   A contributor's "essential patent claims" are all patent claims
478 | owned or controlled by the contributor, whether already acquired or
479 | hereafter acquired, that would be infringed by some manner, permitted
480 | by this License, of making, using, or selling its contributor version,
481 | but do not include claims that would be infringed only as a
482 | consequence of further modification of the contributor version.  For
483 | purposes of this definition, "control" includes the right to grant
484 | patent sublicenses in a manner consistent with the requirements of
485 | this License.
486 | 
487 |   Each contributor grants you a non-exclusive, worldwide, royalty-free
488 | patent license under the contributor's essential patent claims, to
489 | make, use, sell, offer for sale, import and otherwise run, modify and
490 | propagate the contents of its contributor version.
491 | 
492 |   In the following three paragraphs, a "patent license" is any express
493 | agreement or commitment, however denominated, not to enforce a patent
494 | (such as an express permission to practice a patent or covenant not to
495 | sue for patent infringement).  To "grant" such a patent license to a
496 | party means to make such an agreement or commitment not to enforce a
497 | patent against the party.
498 | 
499 |   If you convey a covered work, knowingly relying on a patent license,
500 | and the Corresponding Source of the work is not available for anyone
501 | to copy, free of charge and under the terms of this License, through a
502 | publicly available network server or other readily accessible means,
503 | then you must either (1) cause the Corresponding Source to be so
504 | available, or (2) arrange to deprive yourself of the benefit of the
505 | patent license for this particular work, or (3) arrange, in a manner
506 | consistent with the requirements of this License, to extend the patent
507 | license to downstream recipients.  "Knowingly relying" means you have
508 | actual knowledge that, but for the patent license, your conveying the
509 | covered work in a country, or your recipient's use of the covered work
510 | in a country, would infringe one or more identifiable patents in that
511 | country that you have reason to believe are valid.
512 | 
513 |   If, pursuant to or in connection with a single transaction or
514 | arrangement, you convey, or propagate by procuring conveyance of, a
515 | covered work, and grant a patent license to some of the parties
516 | receiving the covered work authorizing them to use, propagate, modify
517 | or convey a specific copy of the covered work, then the patent license
518 | you grant is automatically extended to all recipients of the covered
519 | work and works based on it.
520 | 
521 |   A patent license is "discriminatory" if it does not include within
522 | the scope of its coverage, prohibits the exercise of, or is
523 | conditioned on the non-exercise of one or more of the rights that are
524 | specifically granted under this License.  You may not convey a covered
525 | work if you are a party to an arrangement with a third party that is
526 | in the business of distributing software, under which you make payment
527 | to the third party based on the extent of your activity of conveying
528 | the work, and under which the third party grants, to any of the
529 | parties who would receive the covered work from you, a discriminatory
530 | patent license (a) in connection with copies of the covered work
531 | conveyed by you (or copies made from those copies), or (b) primarily
532 | for and in connection with specific products or compilations that
533 | contain the covered work, unless you entered into that arrangement,
534 | or that patent license was granted, prior to 28 March 2007.
535 | 
536 |   Nothing in this License shall be construed as excluding or limiting
537 | any implied license or other defenses to infringement that may
538 | otherwise be available to you under applicable patent law.
539 | 
540 |   12. No Surrender of Others' Freedom.
541 | 
542 |   If conditions are imposed on you (whether by court order, agreement or
543 | otherwise) that contradict the conditions of this License, they do not
544 | excuse you from the conditions of this License.  If you cannot convey a
545 | covered work so as to satisfy simultaneously your obligations under this
546 | License and any other pertinent obligations, then as a consequence you may
547 | not convey it at all.  For example, if you agree to terms that obligate you
548 | to collect a royalty for further conveying from those to whom you convey
549 | the Program, the only way you could satisfy both those terms and this
550 | License would be to refrain entirely from conveying the Program.
551 | 
552 |   13. Use with the GNU Affero General Public License.
553 | 
554 |   Notwithstanding any other provision of this License, you have
555 | permission to link or combine any covered work with a work licensed
556 | under version 3 of the GNU Affero General Public License into a single
557 | combined work, and to convey the resulting work.  The terms of this
558 | License will continue to apply to the part which is the covered work,
559 | but the special requirements of the GNU Affero General Public License,
560 | section 13, concerning interaction through a network will apply to the
561 | combination as such.
562 | 
563 |   14. Revised Versions of this License.
564 | 
565 |   The Free Software Foundation may publish revised and/or new versions of
566 | the GNU General Public License from time to time.  Such new versions will
567 | be similar in spirit to the present version, but may differ in detail to
568 | address new problems or concerns.
569 | 
570 |   Each version is given a distinguishing version number.  If the
571 | Program specifies that a certain numbered version of the GNU General
572 | Public License "or any later version" applies to it, you have the
573 | option of following the terms and conditions either of that numbered
574 | version or of any later version published by the Free Software
575 | Foundation.  If the Program does not specify a version number of the
576 | GNU General Public License, you may choose any version ever published
577 | by the Free Software Foundation.
578 | 
579 |   If the Program specifies that a proxy can decide which future
580 | versions of the GNU General Public License can be used, that proxy's
581 | public statement of acceptance of a version permanently authorizes you
582 | to choose that version for the Program.
583 | 
584 |   Later license versions may give you additional or different
585 | permissions.  However, no additional obligations are imposed on any
586 | author or copyright holder as a result of your choosing to follow a
587 | later version.
588 | 
589 |   15. Disclaimer of Warranty.
590 | 
591 |   THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
592 | APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
593 | HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
594 | OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
595 | THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
596 | PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
597 | IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
598 | ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
599 | 
600 |   16. Limitation of Liability.
601 | 
602 |   IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
603 | WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
604 | THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
605 | GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
606 | USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
607 | DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
608 | PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
609 | EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
610 | SUCH DAMAGES.
611 | 
612 |   17. Interpretation of Sections 15 and 16.
613 | 
614 |   If the disclaimer of warranty and limitation of liability provided
615 | above cannot be given local legal effect according to their terms,
616 | reviewing courts shall apply local law that most closely approximates
617 | an absolute waiver of all civil liability in connection with the
618 | Program, unless a warranty or assumption of liability accompanies a
619 | copy of the Program in return for a fee.
620 | 
621 |                      END OF TERMS AND CONDITIONS
622 | 
623 |             How to Apply These Terms to Your New Programs
624 | 
625 |   If you develop a new program, and you want it to be of the greatest
626 | possible use to the public, the best way to achieve this is to make it
627 | free software which everyone can redistribute and change under these terms.
628 | 
629 |   To do so, attach the following notices to the program.  It is safest
630 | to attach them to the start of each source file to most effectively
631 | state the exclusion of warranty; and each file should have at least
632 | the "copyright" line and a pointer to where the full notice is found.
633 | 
634 |     <one line to give the program's name and a brief idea of what it does.>
635 |     Copyright (C) <year>  <name of author>
636 | 
637 |     This program is free software: you can redistribute it and/or modify
638 |     it under the terms of the GNU General Public License as published by
639 |     the Free Software Foundation, either version 3 of the License, or
640 |     (at your option) any later version.
641 | 
642 |     This program is distributed in the hope that it will be useful,
643 |     but WITHOUT ANY WARRANTY; without even the implied warranty of
644 |     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
645 |     GNU General Public License for more details.
646 | 
647 |     You should have received a copy of the GNU General Public License
648 |     along with this program.  If not, see <https://www.gnu.org/licenses/>.
649 | 
650 | Also add information on how to contact you by electronic and paper mail.
651 | 
652 |   If the program does terminal interaction, make it output a short
653 | notice like this when it starts in an interactive mode:
654 | 
655 |     <program>  Copyright (C) <year>  <name of author>
656 |     This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
657 |     This is free software, and you are welcome to redistribute it
658 |     under certain conditions; type `show c' for details.
659 | 
660 | The hypothetical commands `show w' and `show c' should show the appropriate
661 | parts of the General Public License.  Of course, your program's commands
662 | might be different; for a GUI interface, you would use an "about box".
663 | 
664 |   You should also get your employer (if you work as a programmer) or school,
665 | if any, to sign a "copyright disclaimer" for the program, if necessary.
666 | For more information on this, and how to apply and follow the GNU GPL, see
667 | <https://www.gnu.org/licenses/>.
668 | 
669 |   The GNU General Public License does not permit incorporating your program
670 | into proprietary programs.  If your program is a subroutine library, you
671 | may consider it more useful to permit linking proprietary applications with
672 | the library.  If this is what you want to do, use the GNU Lesser General
673 | Public License instead of this License.  But first, please read
674 | <https://www.gnu.org/licenses/why-not-lgpl.html>.


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
 1 | # Obsidian Kanban Plugin
 2 | 
 3 | Create markdown-backed Kanban boards in [Obsidian](https://obsidian.md/)
 4 | 
 5 | - [Bugs, Issues, & Feature Requests](https://github.com/mgmeyers/obsidian-kanban/issues)
 6 | - [Development Roadmap](https://github.com/mgmeyers/obsidian-kanban/projects/1)
 7 | 
 8 | ![Screen Shot 2021-09-16 at 12.58.22 PM.png](https://github.com/mgmeyers/obsidian-kanban/blob/main/docs/Assets/Screen%20Shot%202021-09-16%20at%2012.58.22%20PM.png)
 9 | 
10 | ![Screen Shot 2021-09-16 at 1.10.38 PM.png](https://github.com/mgmeyers/obsidian-kanban/blob/main/docs/Assets/Screen%20Shot%202021-09-16%20at%201.10.38%20PM.png)
11 | 
12 | ## Documentation
13 | 
14 | Find the plugin documentation here: [Obsidian Kanban Plugin Documentation](https://publish.obsidian.md/kanban/)
15 | 
16 | ## Support
17 | 
18 | If you find this plugin useful and would like to support its development, you can sponsor [me](https://github.com/mgmeyers) on Github, or buy me a coffee.
19 | 
20 | [![GitHub Sponsors](https://img.shields.io/github/sponsors/mgmeyers?label=Sponsor&logo=GitHub%20Sponsors&style=for-the-badge)](https://github.com/sponsors/mgmeyers)
21 | 
22 | <a href="https://www.buymeacoffee.com/mgme"><img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=mgme&button_colour=5F7FFF&font_colour=ffffff&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00"></a>
23 | 


--------------------------------------------------------------------------------
/buffer-es6.mjs:
--------------------------------------------------------------------------------
   1 | var lookup = [];
   2 | var revLookup = [];
   3 | var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
   4 | var inited = false;
   5 | function init() {
   6 |   inited = true;
   7 |   var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
   8 |   for (var i = 0, len = code.length; i < len; ++i) {
   9 |     lookup[i] = code[i];
  10 |     revLookup[code.charCodeAt(i)] = i;
  11 |   }
  12 | 
  13 |   revLookup['-'.charCodeAt(0)] = 62;
  14 |   revLookup['_'.charCodeAt(0)] = 63;
  15 | }
  16 | 
  17 | function toByteArray(b64) {
  18 |   if (!inited) {
  19 |     init();
  20 |   }
  21 |   var i, j, l, tmp, placeHolders, arr;
  22 |   var len = b64.length;
  23 | 
  24 |   if (len % 4 > 0) {
  25 |     throw new Error('Invalid string. Length must be a multiple of 4');
  26 |   }
  27 | 
  28 |   // the number of equal signs (place holders)
  29 |   // if there are two placeholders, than the two characters before it
  30 |   // represent one byte
  31 |   // if there is only one, then the three characters before it represent 2 bytes
  32 |   // this is just a cheap hack to not do indexOf twice
  33 |   placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
  34 | 
  35 |   // base64 is 4/3 + up to two characters of the original data
  36 |   arr = new Arr((len * 3) / 4 - placeHolders);
  37 | 
  38 |   // if there are placeholders, only get up to the last complete 4 chars
  39 |   l = placeHolders > 0 ? len - 4 : len;
  40 | 
  41 |   var L = 0;
  42 | 
  43 |   for (i = 0, j = 0; i < l; i += 4, j += 3) {
  44 |     tmp =
  45 |       (revLookup[b64.charCodeAt(i)] << 18) |
  46 |       (revLookup[b64.charCodeAt(i + 1)] << 12) |
  47 |       (revLookup[b64.charCodeAt(i + 2)] << 6) |
  48 |       revLookup[b64.charCodeAt(i + 3)];
  49 |     arr[L++] = (tmp >> 16) & 0xff;
  50 |     arr[L++] = (tmp >> 8) & 0xff;
  51 |     arr[L++] = tmp & 0xff;
  52 |   }
  53 | 
  54 |   if (placeHolders === 2) {
  55 |     tmp =
  56 |       (revLookup[b64.charCodeAt(i)] << 2) |
  57 |       (revLookup[b64.charCodeAt(i + 1)] >> 4);
  58 |     arr[L++] = tmp & 0xff;
  59 |   } else if (placeHolders === 1) {
  60 |     tmp =
  61 |       (revLookup[b64.charCodeAt(i)] << 10) |
  62 |       (revLookup[b64.charCodeAt(i + 1)] << 4) |
  63 |       (revLookup[b64.charCodeAt(i + 2)] >> 2);
  64 |     arr[L++] = (tmp >> 8) & 0xff;
  65 |     arr[L++] = tmp & 0xff;
  66 |   }
  67 | 
  68 |   return arr;
  69 | }
  70 | 
  71 | function tripletToBase64(num) {
  72 |   return (
  73 |     lookup[(num >> 18) & 0x3f] +
  74 |     lookup[(num >> 12) & 0x3f] +
  75 |     lookup[(num >> 6) & 0x3f] +
  76 |     lookup[num & 0x3f]
  77 |   );
  78 | }
  79 | 
  80 | function encodeChunk(uint8, start, end) {
  81 |   var tmp;
  82 |   var output = [];
  83 |   for (var i = start; i < end; i += 3) {
  84 |     tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
  85 |     output.push(tripletToBase64(tmp));
  86 |   }
  87 |   return output.join('');
  88 | }
  89 | 
  90 | function fromByteArray(uint8) {
  91 |   if (!inited) {
  92 |     init();
  93 |   }
  94 |   var tmp;
  95 |   var len = uint8.length;
  96 |   var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
  97 |   var output = '';
  98 |   var parts = [];
  99 |   var maxChunkLength = 16383; // must be multiple of 3
 100 | 
 101 |   // go through the array every three bytes, we'll deal with trailing stuff later
 102 |   for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
 103 |     parts.push(
 104 |       encodeChunk(
 105 |         uint8,
 106 |         i,
 107 |         i + maxChunkLength > len2 ? len2 : i + maxChunkLength
 108 |       )
 109 |     );
 110 |   }
 111 | 
 112 |   // pad the end with zeros, but make sure to not forget the extra bytes
 113 |   if (extraBytes === 1) {
 114 |     tmp = uint8[len - 1];
 115 |     output += lookup[tmp >> 2];
 116 |     output += lookup[(tmp << 4) & 0x3f];
 117 |     output += '==';
 118 |   } else if (extraBytes === 2) {
 119 |     tmp = (uint8[len - 2] << 8) + uint8[len - 1];
 120 |     output += lookup[tmp >> 10];
 121 |     output += lookup[(tmp >> 4) & 0x3f];
 122 |     output += lookup[(tmp << 2) & 0x3f];
 123 |     output += '=';
 124 |   }
 125 | 
 126 |   parts.push(output);
 127 | 
 128 |   return parts.join('');
 129 | }
 130 | 
 131 | function read(buffer, offset, isLE, mLen, nBytes) {
 132 |   var e, m;
 133 |   var eLen = nBytes * 8 - mLen - 1;
 134 |   var eMax = (1 << eLen) - 1;
 135 |   var eBias = eMax >> 1;
 136 |   var nBits = -7;
 137 |   var i = isLE ? nBytes - 1 : 0;
 138 |   var d = isLE ? -1 : 1;
 139 |   var s = buffer[offset + i];
 140 | 
 141 |   i += d;
 142 | 
 143 |   e = s & ((1 << -nBits) - 1);
 144 |   s >>= -nBits;
 145 |   nBits += eLen;
 146 |   for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
 147 | 
 148 |   m = e & ((1 << -nBits) - 1);
 149 |   e >>= -nBits;
 150 |   nBits += mLen;
 151 |   for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
 152 | 
 153 |   if (e === 0) {
 154 |     e = 1 - eBias;
 155 |   } else if (e === eMax) {
 156 |     return m ? NaN : (s ? -1 : 1) * Infinity;
 157 |   } else {
 158 |     m = m + Math.pow(2, mLen);
 159 |     e = e - eBias;
 160 |   }
 161 |   return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
 162 | }
 163 | 
 164 | function write(buffer, value, offset, isLE, mLen, nBytes) {
 165 |   var e, m, c;
 166 |   var eLen = nBytes * 8 - mLen - 1;
 167 |   var eMax = (1 << eLen) - 1;
 168 |   var eBias = eMax >> 1;
 169 |   var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
 170 |   var i = isLE ? 0 : nBytes - 1;
 171 |   var d = isLE ? 1 : -1;
 172 |   var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
 173 | 
 174 |   value = Math.abs(value);
 175 | 
 176 |   if (isNaN(value) || value === Infinity) {
 177 |     m = isNaN(value) ? 1 : 0;
 178 |     e = eMax;
 179 |   } else {
 180 |     e = Math.floor(Math.log(value) / Math.LN2);
 181 |     if (value * (c = Math.pow(2, -e)) < 1) {
 182 |       e--;
 183 |       c *= 2;
 184 |     }
 185 |     if (e + eBias >= 1) {
 186 |       value += rt / c;
 187 |     } else {
 188 |       value += rt * Math.pow(2, 1 - eBias);
 189 |     }
 190 |     if (value * c >= 2) {
 191 |       e++;
 192 |       c /= 2;
 193 |     }
 194 | 
 195 |     if (e + eBias >= eMax) {
 196 |       m = 0;
 197 |       e = eMax;
 198 |     } else if (e + eBias >= 1) {
 199 |       m = (value * c - 1) * Math.pow(2, mLen);
 200 |       e = e + eBias;
 201 |     } else {
 202 |       m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
 203 |       e = 0;
 204 |     }
 205 |   }
 206 | 
 207 |   for (
 208 |     ;
 209 |     mLen >= 8;
 210 |     buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8
 211 |   ) {}
 212 | 
 213 |   e = (e << mLen) | m;
 214 |   eLen += mLen;
 215 |   for (
 216 |     ;
 217 |     eLen > 0;
 218 |     buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8
 219 |   ) {}
 220 | 
 221 |   buffer[offset + i - d] |= s * 128;
 222 | }
 223 | 
 224 | var toString = {}.toString;
 225 | 
 226 | var isArray =
 227 |   Array.isArray ||
 228 |   function (arr) {
 229 |     return toString.call(arr) == '[object Array]';
 230 |   };
 231 | 
 232 | /*!
 233 |  * The buffer module from node.js, for the browser.
 234 |  *
 235 |  * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 236 |  * @license  MIT
 237 |  */
 238 | 
 239 | export var INSPECT_MAX_BYTES = 50;
 240 | 
 241 | /**
 242 |  * If `Buffer.TYPED_ARRAY_SUPPORT`:
 243 |  *   === true    Use Uint8Array implementation (fastest)
 244 |  *   === false   Use Object implementation (most compatible, even IE6)
 245 |  *
 246 |  * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 247 |  * Opera 11.6+, iOS 4.2+.
 248 |  *
 249 |  * Due to various browser bugs, sometimes the Object implementation will be used even
 250 |  * when the browser supports typed arrays.
 251 |  *
 252 |  * Note:
 253 |  *
 254 |  *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 255 |  *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 256 |  *
 257 |  *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 258 |  *
 259 |  *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 260 |  *     incorrect length in some situations.
 261 |  * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 262 |  * get the Object implementation, which is slower but behaves correctly.
 263 |  */
 264 | const win = typeof window === 'undefined' ? global : window;
 265 | Buffer.TYPED_ARRAY_SUPPORT =
 266 |   win.TYPED_ARRAY_SUPPORT !== undefined ? win.TYPED_ARRAY_SUPPORT : true;
 267 | 
 268 | /*
 269 |  * Export kMaxLength after typed array support is determined.
 270 |  */
 271 | var _kMaxLength = getKMaxLength();
 272 | export const kMaxLength = _kMaxLength;
 273 | 
 274 | function getKMaxLength() {
 275 |   return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
 276 | }
 277 | 
 278 | function createBuffer(that, length) {
 279 |   if (getKMaxLength() < length) {
 280 |     throw new RangeError('Invalid typed array length');
 281 |   }
 282 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
 283 |     // Return an augmented `Uint8Array` instance, for best performance
 284 |     that = new Uint8Array(length);
 285 |     that.__proto__ = Buffer.prototype;
 286 |   } else {
 287 |     // Fallback: Return an object instance of the Buffer class
 288 |     if (that === null) {
 289 |       that = new Buffer(length);
 290 |     }
 291 |     that.length = length;
 292 |   }
 293 | 
 294 |   return that;
 295 | }
 296 | 
 297 | /**
 298 |  * The Buffer constructor returns instances of `Uint8Array` that have their
 299 |  * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 300 |  * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 301 |  * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 302 |  * returns a single octet.
 303 |  *
 304 |  * The `Uint8Array` prototype remains unmodified.
 305 |  */
 306 | 
 307 | export function Buffer(arg, encodingOrOffset, length) {
 308 |   if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
 309 |     return new Buffer(arg, encodingOrOffset, length);
 310 |   }
 311 | 
 312 |   // Common case.
 313 |   if (typeof arg === 'number') {
 314 |     if (typeof encodingOrOffset === 'string') {
 315 |       throw new Error(
 316 |         'If encoding is specified then the first argument must be a string'
 317 |       );
 318 |     }
 319 |     return allocUnsafe(this, arg);
 320 |   }
 321 |   return from(this, arg, encodingOrOffset, length);
 322 | }
 323 | 
 324 | Buffer.poolSize = 8192; // not used by this implementation
 325 | 
 326 | // TODO: Legacy, not needed anymore. Remove in next major version.
 327 | Buffer._augment = function (arr) {
 328 |   arr.__proto__ = Buffer.prototype;
 329 |   return arr;
 330 | };
 331 | 
 332 | function from(that, value, encodingOrOffset, length) {
 333 |   if (typeof value === 'number') {
 334 |     throw new TypeError('"value" argument must not be a number');
 335 |   }
 336 | 
 337 |   if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
 338 |     return fromArrayBuffer(that, value, encodingOrOffset, length);
 339 |   }
 340 | 
 341 |   if (typeof value === 'string') {
 342 |     return fromString(that, value, encodingOrOffset);
 343 |   }
 344 | 
 345 |   return fromObject(that, value);
 346 | }
 347 | 
 348 | /**
 349 |  * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 350 |  * if value is a number.
 351 |  * Buffer.from(str[, encoding])
 352 |  * Buffer.from(array)
 353 |  * Buffer.from(buffer)
 354 |  * Buffer.from(arrayBuffer[, byteOffset[, length]])
 355 |  **/
 356 | Buffer.from = function (value, encodingOrOffset, length) {
 357 |   return from(null, value, encodingOrOffset, length);
 358 | };
 359 | 
 360 | if (Buffer.TYPED_ARRAY_SUPPORT) {
 361 |   Buffer.prototype.__proto__ = Uint8Array.prototype;
 362 |   Buffer.__proto__ = Uint8Array;
 363 | }
 364 | 
 365 | function assertSize(size) {
 366 |   if (typeof size !== 'number') {
 367 |     throw new TypeError('"size" argument must be a number');
 368 |   } else if (size < 0) {
 369 |     throw new RangeError('"size" argument must not be negative');
 370 |   }
 371 | }
 372 | 
 373 | function alloc(that, size, fill, encoding) {
 374 |   assertSize(size);
 375 |   if (size <= 0) {
 376 |     return createBuffer(that, size);
 377 |   }
 378 |   if (fill !== undefined) {
 379 |     // Only pay attention to encoding if it's a string. This
 380 |     // prevents accidentally sending in a number that would
 381 |     // be interpretted as a start offset.
 382 |     return typeof encoding === 'string'
 383 |       ? createBuffer(that, size).fill(fill, encoding)
 384 |       : createBuffer(that, size).fill(fill);
 385 |   }
 386 |   return createBuffer(that, size);
 387 | }
 388 | 
 389 | /**
 390 |  * Creates a new filled Buffer instance.
 391 |  * alloc(size[, fill[, encoding]])
 392 |  **/
 393 | Buffer.alloc = function (size, fill, encoding) {
 394 |   return alloc(null, size, fill, encoding);
 395 | };
 396 | 
 397 | function allocUnsafe(that, size) {
 398 |   assertSize(size);
 399 |   that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
 400 |   if (!Buffer.TYPED_ARRAY_SUPPORT) {
 401 |     for (var i = 0; i < size; ++i) {
 402 |       that[i] = 0;
 403 |     }
 404 |   }
 405 |   return that;
 406 | }
 407 | 
 408 | /**
 409 |  * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 410 |  * */
 411 | Buffer.allocUnsafe = function (size) {
 412 |   return allocUnsafe(null, size);
 413 | };
 414 | /**
 415 |  * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 416 |  */
 417 | Buffer.allocUnsafeSlow = function (size) {
 418 |   return allocUnsafe(null, size);
 419 | };
 420 | 
 421 | function fromString(that, string, encoding) {
 422 |   if (typeof encoding !== 'string' || encoding === '') {
 423 |     encoding = 'utf8';
 424 |   }
 425 | 
 426 |   if (!Buffer.isEncoding(encoding)) {
 427 |     throw new TypeError('"encoding" must be a valid string encoding');
 428 |   }
 429 | 
 430 |   var length = byteLength(string, encoding) | 0;
 431 |   that = createBuffer(that, length);
 432 | 
 433 |   var actual = that.write(string, encoding);
 434 | 
 435 |   if (actual !== length) {
 436 |     // Writing a hex string, for example, that contains invalid characters will
 437 |     // cause everything after the first invalid character to be ignored. (e.g.
 438 |     // 'abxxcd' will be treated as 'ab')
 439 |     that = that.slice(0, actual);
 440 |   }
 441 | 
 442 |   return that;
 443 | }
 444 | 
 445 | function fromArrayLike(that, array) {
 446 |   var length = array.length < 0 ? 0 : checked(array.length) | 0;
 447 |   that = createBuffer(that, length);
 448 |   for (var i = 0; i < length; i += 1) {
 449 |     that[i] = array[i] & 255;
 450 |   }
 451 |   return that;
 452 | }
 453 | 
 454 | function fromArrayBuffer(that, array, byteOffset, length) {
 455 |   array.byteLength; // this throws if `array` is not a valid ArrayBuffer
 456 | 
 457 |   if (byteOffset < 0 || array.byteLength < byteOffset) {
 458 |     throw new RangeError("'offset' is out of bounds");
 459 |   }
 460 | 
 461 |   if (array.byteLength < byteOffset + (length || 0)) {
 462 |     throw new RangeError("'length' is out of bounds");
 463 |   }
 464 | 
 465 |   if (byteOffset === undefined && length === undefined) {
 466 |     array = new Uint8Array(array);
 467 |   } else if (length === undefined) {
 468 |     array = new Uint8Array(array, byteOffset);
 469 |   } else {
 470 |     array = new Uint8Array(array, byteOffset, length);
 471 |   }
 472 | 
 473 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
 474 |     // Return an augmented `Uint8Array` instance, for best performance
 475 |     that = array;
 476 |     that.__proto__ = Buffer.prototype;
 477 |   } else {
 478 |     // Fallback: Return an object instance of the Buffer class
 479 |     that = fromArrayLike(that, array);
 480 |   }
 481 |   return that;
 482 | }
 483 | 
 484 | function fromObject(that, obj) {
 485 |   if (internalIsBuffer(obj)) {
 486 |     var len = checked(obj.length) | 0;
 487 |     that = createBuffer(that, len);
 488 | 
 489 |     if (that.length === 0) {
 490 |       return that;
 491 |     }
 492 | 
 493 |     obj.copy(that, 0, 0, len);
 494 |     return that;
 495 |   }
 496 | 
 497 |   if (obj) {
 498 |     if (
 499 |       (typeof ArrayBuffer !== 'undefined' &&
 500 |         obj.buffer instanceof ArrayBuffer) ||
 501 |       'length' in obj
 502 |     ) {
 503 |       if (typeof obj.length !== 'number' || isnan(obj.length)) {
 504 |         return createBuffer(that, 0);
 505 |       }
 506 |       return fromArrayLike(that, obj);
 507 |     }
 508 | 
 509 |     if (obj.type === 'Buffer' && isArray(obj.data)) {
 510 |       return fromArrayLike(that, obj.data);
 511 |     }
 512 |   }
 513 | 
 514 |   throw new TypeError(
 515 |     'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
 516 |   );
 517 | }
 518 | 
 519 | function checked(length) {
 520 |   // Note: cannot use `length < kMaxLength()` here because that fails when
 521 |   // length is NaN (which is otherwise coerced to zero.)
 522 |   if (length >= getKMaxLength()) {
 523 |     throw new RangeError(
 524 |       'Attempt to allocate Buffer larger than maximum ' +
 525 |         'size: 0x' +
 526 |         getKMaxLength().toString(16) +
 527 |         ' bytes'
 528 |     );
 529 |   }
 530 |   return length | 0;
 531 | }
 532 | 
 533 | export function SlowBuffer(length) {
 534 |   if (+length != length) {
 535 |     // eslint-disable-line eqeqeq
 536 |     length = 0;
 537 |   }
 538 |   return Buffer.alloc(+length);
 539 | }
 540 | Buffer.isBuffer = isBuffer;
 541 | function internalIsBuffer(b) {
 542 |   return !!(b != null && b._isBuffer);
 543 | }
 544 | 
 545 | Buffer.compare = function compare(a, b) {
 546 |   if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
 547 |     throw new TypeError('Arguments must be Buffers');
 548 |   }
 549 | 
 550 |   if (a === b) return 0;
 551 | 
 552 |   var x = a.length;
 553 |   var y = b.length;
 554 | 
 555 |   for (var i = 0, len = Math.min(x, y); i < len; ++i) {
 556 |     if (a[i] !== b[i]) {
 557 |       x = a[i];
 558 |       y = b[i];
 559 |       break;
 560 |     }
 561 |   }
 562 | 
 563 |   if (x < y) return -1;
 564 |   if (y < x) return 1;
 565 |   return 0;
 566 | };
 567 | 
 568 | Buffer.isEncoding = function isEncoding(encoding) {
 569 |   switch (String(encoding).toLowerCase()) {
 570 |     case 'hex':
 571 |     case 'utf8':
 572 |     case 'utf-8':
 573 |     case 'ascii':
 574 |     case 'latin1':
 575 |     case 'binary':
 576 |     case 'base64':
 577 |     case 'ucs2':
 578 |     case 'ucs-2':
 579 |     case 'utf16le':
 580 |     case 'utf-16le':
 581 |       return true;
 582 |     default:
 583 |       return false;
 584 |   }
 585 | };
 586 | 
 587 | Buffer.concat = function concat(list, length) {
 588 |   if (!isArray(list)) {
 589 |     throw new TypeError('"list" argument must be an Array of Buffers');
 590 |   }
 591 | 
 592 |   if (list.length === 0) {
 593 |     return Buffer.alloc(0);
 594 |   }
 595 | 
 596 |   var i;
 597 |   if (length === undefined) {
 598 |     length = 0;
 599 |     for (i = 0; i < list.length; ++i) {
 600 |       length += list[i].length;
 601 |     }
 602 |   }
 603 | 
 604 |   var buffer = Buffer.allocUnsafe(length);
 605 |   var pos = 0;
 606 |   for (i = 0; i < list.length; ++i) {
 607 |     var buf = list[i];
 608 |     if (!internalIsBuffer(buf)) {
 609 |       throw new TypeError('"list" argument must be an Array of Buffers');
 610 |     }
 611 |     buf.copy(buffer, pos);
 612 |     pos += buf.length;
 613 |   }
 614 |   return buffer;
 615 | };
 616 | 
 617 | function byteLength(string, encoding) {
 618 |   if (internalIsBuffer(string)) {
 619 |     return string.length;
 620 |   }
 621 |   if (
 622 |     typeof ArrayBuffer !== 'undefined' &&
 623 |     typeof ArrayBuffer.isView === 'function' &&
 624 |     (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
 625 |   ) {
 626 |     return string.byteLength;
 627 |   }
 628 |   if (typeof string !== 'string') {
 629 |     string = '' + string;
 630 |   }
 631 | 
 632 |   var len = string.length;
 633 |   if (len === 0) return 0;
 634 | 
 635 |   // Use a for loop to avoid recursion
 636 |   var loweredCase = false;
 637 |   for (;;) {
 638 |     switch (encoding) {
 639 |       case 'ascii':
 640 |       case 'latin1':
 641 |       case 'binary':
 642 |         return len;
 643 |       case 'utf8':
 644 |       case 'utf-8':
 645 |       case undefined:
 646 |         return utf8ToBytes(string).length;
 647 |       case 'ucs2':
 648 |       case 'ucs-2':
 649 |       case 'utf16le':
 650 |       case 'utf-16le':
 651 |         return len * 2;
 652 |       case 'hex':
 653 |         return len >>> 1;
 654 |       case 'base64':
 655 |         return base64ToBytes(string).length;
 656 |       default:
 657 |         if (loweredCase) return utf8ToBytes(string).length; // assume utf8
 658 |         encoding = ('' + encoding).toLowerCase();
 659 |         loweredCase = true;
 660 |     }
 661 |   }
 662 | }
 663 | Buffer.byteLength = byteLength;
 664 | 
 665 | function slowToString(encoding, start, end) {
 666 |   var loweredCase = false;
 667 | 
 668 |   // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
 669 |   // property of a typed array.
 670 | 
 671 |   // This behaves neither like String nor Uint8Array in that we set start/end
 672 |   // to their upper/lower bounds if the value passed is out of range.
 673 |   // undefined is handled specially as per ECMA-262 6th Edition,
 674 |   // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
 675 |   if (start === undefined || start < 0) {
 676 |     start = 0;
 677 |   }
 678 |   // Return early if start > this.length. Done here to prevent potential uint32
 679 |   // coercion fail below.
 680 |   if (start > this.length) {
 681 |     return '';
 682 |   }
 683 | 
 684 |   if (end === undefined || end > this.length) {
 685 |     end = this.length;
 686 |   }
 687 | 
 688 |   if (end <= 0) {
 689 |     return '';
 690 |   }
 691 | 
 692 |   // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
 693 |   end >>>= 0;
 694 |   start >>>= 0;
 695 | 
 696 |   if (end <= start) {
 697 |     return '';
 698 |   }
 699 | 
 700 |   if (!encoding) encoding = 'utf8';
 701 | 
 702 |   while (true) {
 703 |     switch (encoding) {
 704 |       case 'hex':
 705 |         return hexSlice(this, start, end);
 706 | 
 707 |       case 'utf8':
 708 |       case 'utf-8':
 709 |         return utf8Slice(this, start, end);
 710 | 
 711 |       case 'ascii':
 712 |         return asciiSlice(this, start, end);
 713 | 
 714 |       case 'latin1':
 715 |       case 'binary':
 716 |         return latin1Slice(this, start, end);
 717 | 
 718 |       case 'base64':
 719 |         return base64Slice(this, start, end);
 720 | 
 721 |       case 'ucs2':
 722 |       case 'ucs-2':
 723 |       case 'utf16le':
 724 |       case 'utf-16le':
 725 |         return utf16leSlice(this, start, end);
 726 | 
 727 |       default:
 728 |         if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
 729 |         encoding = (encoding + '').toLowerCase();
 730 |         loweredCase = true;
 731 |     }
 732 |   }
 733 | }
 734 | 
 735 | // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
 736 | // Buffer instances.
 737 | Buffer.prototype._isBuffer = true;
 738 | 
 739 | function swap(b, n, m) {
 740 |   var i = b[n];
 741 |   b[n] = b[m];
 742 |   b[m] = i;
 743 | }
 744 | 
 745 | Buffer.prototype.swap16 = function swap16() {
 746 |   var len = this.length;
 747 |   if (len % 2 !== 0) {
 748 |     throw new RangeError('Buffer size must be a multiple of 16-bits');
 749 |   }
 750 |   for (var i = 0; i < len; i += 2) {
 751 |     swap(this, i, i + 1);
 752 |   }
 753 |   return this;
 754 | };
 755 | 
 756 | Buffer.prototype.swap32 = function swap32() {
 757 |   var len = this.length;
 758 |   if (len % 4 !== 0) {
 759 |     throw new RangeError('Buffer size must be a multiple of 32-bits');
 760 |   }
 761 |   for (var i = 0; i < len; i += 4) {
 762 |     swap(this, i, i + 3);
 763 |     swap(this, i + 1, i + 2);
 764 |   }
 765 |   return this;
 766 | };
 767 | 
 768 | Buffer.prototype.swap64 = function swap64() {
 769 |   var len = this.length;
 770 |   if (len % 8 !== 0) {
 771 |     throw new RangeError('Buffer size must be a multiple of 64-bits');
 772 |   }
 773 |   for (var i = 0; i < len; i += 8) {
 774 |     swap(this, i, i + 7);
 775 |     swap(this, i + 1, i + 6);
 776 |     swap(this, i + 2, i + 5);
 777 |     swap(this, i + 3, i + 4);
 778 |   }
 779 |   return this;
 780 | };
 781 | 
 782 | Buffer.prototype.toString = function toString() {
 783 |   var length = this.length | 0;
 784 |   if (length === 0) return '';
 785 |   if (arguments.length === 0) return utf8Slice(this, 0, length);
 786 |   return slowToString.apply(this, arguments);
 787 | };
 788 | 
 789 | Buffer.prototype.equals = function equals(b) {
 790 |   if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer');
 791 |   if (this === b) return true;
 792 |   return Buffer.compare(this, b) === 0;
 793 | };
 794 | 
 795 | Buffer.prototype.inspect = function inspect() {
 796 |   var str = '';
 797 |   var max = INSPECT_MAX_BYTES;
 798 |   if (this.length > 0) {
 799 |     str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
 800 |     if (this.length > max) str += ' ... ';
 801 |   }
 802 |   return '<Buffer ' + str + '>';
 803 | };
 804 | 
 805 | Buffer.prototype.compare = function compare(
 806 |   target,
 807 |   start,
 808 |   end,
 809 |   thisStart,
 810 |   thisEnd
 811 | ) {
 812 |   if (!internalIsBuffer(target)) {
 813 |     throw new TypeError('Argument must be a Buffer');
 814 |   }
 815 | 
 816 |   if (start === undefined) {
 817 |     start = 0;
 818 |   }
 819 |   if (end === undefined) {
 820 |     end = target ? target.length : 0;
 821 |   }
 822 |   if (thisStart === undefined) {
 823 |     thisStart = 0;
 824 |   }
 825 |   if (thisEnd === undefined) {
 826 |     thisEnd = this.length;
 827 |   }
 828 | 
 829 |   if (
 830 |     start < 0 ||
 831 |     end > target.length ||
 832 |     thisStart < 0 ||
 833 |     thisEnd > this.length
 834 |   ) {
 835 |     throw new RangeError('out of range index');
 836 |   }
 837 | 
 838 |   if (thisStart >= thisEnd && start >= end) {
 839 |     return 0;
 840 |   }
 841 |   if (thisStart >= thisEnd) {
 842 |     return -1;
 843 |   }
 844 |   if (start >= end) {
 845 |     return 1;
 846 |   }
 847 | 
 848 |   start >>>= 0;
 849 |   end >>>= 0;
 850 |   thisStart >>>= 0;
 851 |   thisEnd >>>= 0;
 852 | 
 853 |   if (this === target) return 0;
 854 | 
 855 |   var x = thisEnd - thisStart;
 856 |   var y = end - start;
 857 |   var len = Math.min(x, y);
 858 | 
 859 |   var thisCopy = this.slice(thisStart, thisEnd);
 860 |   var targetCopy = target.slice(start, end);
 861 | 
 862 |   for (var i = 0; i < len; ++i) {
 863 |     if (thisCopy[i] !== targetCopy[i]) {
 864 |       x = thisCopy[i];
 865 |       y = targetCopy[i];
 866 |       break;
 867 |     }
 868 |   }
 869 | 
 870 |   if (x < y) return -1;
 871 |   if (y < x) return 1;
 872 |   return 0;
 873 | };
 874 | 
 875 | // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
 876 | // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
 877 | //
 878 | // Arguments:
 879 | // - buffer - a Buffer to search
 880 | // - val - a string, Buffer, or number
 881 | // - byteOffset - an index into `buffer`; will be clamped to an int32
 882 | // - encoding - an optional encoding, relevant is val is a string
 883 | // - dir - true for indexOf, false for lastIndexOf
 884 | function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
 885 |   // Empty buffer means no match
 886 |   if (buffer.length === 0) return -1;
 887 | 
 888 |   // Normalize byteOffset
 889 |   if (typeof byteOffset === 'string') {
 890 |     encoding = byteOffset;
 891 |     byteOffset = 0;
 892 |   } else if (byteOffset > 0x7fffffff) {
 893 |     byteOffset = 0x7fffffff;
 894 |   } else if (byteOffset < -0x80000000) {
 895 |     byteOffset = -0x80000000;
 896 |   }
 897 |   byteOffset = +byteOffset; // Coerce to Number.
 898 |   if (isNaN(byteOffset)) {
 899 |     // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
 900 |     byteOffset = dir ? 0 : buffer.length - 1;
 901 |   }
 902 | 
 903 |   // Normalize byteOffset: negative offsets start from the end of the buffer
 904 |   if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
 905 |   if (byteOffset >= buffer.length) {
 906 |     if (dir) return -1;
 907 |     else byteOffset = buffer.length - 1;
 908 |   } else if (byteOffset < 0) {
 909 |     if (dir) byteOffset = 0;
 910 |     else return -1;
 911 |   }
 912 | 
 913 |   // Normalize val
 914 |   if (typeof val === 'string') {
 915 |     val = Buffer.from(val, encoding);
 916 |   }
 917 | 
 918 |   // Finally, search either indexOf (if dir is true) or lastIndexOf
 919 |   if (internalIsBuffer(val)) {
 920 |     // Special case: looking for empty string/buffer always fails
 921 |     if (val.length === 0) {
 922 |       return -1;
 923 |     }
 924 |     return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
 925 |   } else if (typeof val === 'number') {
 926 |     val = val & 0xff; // Search for a byte value [0-255]
 927 |     if (
 928 |       Buffer.TYPED_ARRAY_SUPPORT &&
 929 |       typeof Uint8Array.prototype.indexOf === 'function'
 930 |     ) {
 931 |       if (dir) {
 932 |         return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
 933 |       } else {
 934 |         return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
 935 |       }
 936 |     }
 937 |     return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
 938 |   }
 939 | 
 940 |   throw new TypeError('val must be string, number or Buffer');
 941 | }
 942 | 
 943 | function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
 944 |   var indexSize = 1;
 945 |   var arrLength = arr.length;
 946 |   var valLength = val.length;
 947 | 
 948 |   if (encoding !== undefined) {
 949 |     encoding = String(encoding).toLowerCase();
 950 |     if (
 951 |       encoding === 'ucs2' ||
 952 |       encoding === 'ucs-2' ||
 953 |       encoding === 'utf16le' ||
 954 |       encoding === 'utf-16le'
 955 |     ) {
 956 |       if (arr.length < 2 || val.length < 2) {
 957 |         return -1;
 958 |       }
 959 |       indexSize = 2;
 960 |       arrLength /= 2;
 961 |       valLength /= 2;
 962 |       byteOffset /= 2;
 963 |     }
 964 |   }
 965 | 
 966 |   function read(buf, i) {
 967 |     if (indexSize === 1) {
 968 |       return buf[i];
 969 |     } else {
 970 |       return buf.readUInt16BE(i * indexSize);
 971 |     }
 972 |   }
 973 | 
 974 |   var i;
 975 |   if (dir) {
 976 |     var foundIndex = -1;
 977 |     for (i = byteOffset; i < arrLength; i++) {
 978 |       if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
 979 |         if (foundIndex === -1) foundIndex = i;
 980 |         if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
 981 |       } else {
 982 |         if (foundIndex !== -1) i -= i - foundIndex;
 983 |         foundIndex = -1;
 984 |       }
 985 |     }
 986 |   } else {
 987 |     if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
 988 |     for (i = byteOffset; i >= 0; i--) {
 989 |       var found = true;
 990 |       for (var j = 0; j < valLength; j++) {
 991 |         if (read(arr, i + j) !== read(val, j)) {
 992 |           found = false;
 993 |           break;
 994 |         }
 995 |       }
 996 |       if (found) return i;
 997 |     }
 998 |   }
 999 | 
1000 |   return -1;
1001 | }
1002 | 
1003 | Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
1004 |   return this.indexOf(val, byteOffset, encoding) !== -1;
1005 | };
1006 | 
1007 | Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
1008 |   return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
1009 | };
1010 | 
1011 | Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
1012 |   return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
1013 | };
1014 | 
1015 | function hexWrite(buf, string, offset, length) {
1016 |   offset = Number(offset) || 0;
1017 |   var remaining = buf.length - offset;
1018 |   if (!length) {
1019 |     length = remaining;
1020 |   } else {
1021 |     length = Number(length);
1022 |     if (length > remaining) {
1023 |       length = remaining;
1024 |     }
1025 |   }
1026 | 
1027 |   // must be an even number of digits
1028 |   var strLen = string.length;
1029 |   if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
1030 | 
1031 |   if (length > strLen / 2) {
1032 |     length = strLen / 2;
1033 |   }
1034 |   for (var i = 0; i < length; ++i) {
1035 |     var parsed = parseInt(string.substr(i * 2, 2), 16);
1036 |     if (isNaN(parsed)) return i;
1037 |     buf[offset + i] = parsed;
1038 |   }
1039 |   return i;
1040 | }
1041 | 
1042 | function utf8Write(buf, string, offset, length) {
1043 |   return blitBuffer(
1044 |     utf8ToBytes(string, buf.length - offset),
1045 |     buf,
1046 |     offset,
1047 |     length
1048 |   );
1049 | }
1050 | 
1051 | function asciiWrite(buf, string, offset, length) {
1052 |   return blitBuffer(asciiToBytes(string), buf, offset, length);
1053 | }
1054 | 
1055 | function latin1Write(buf, string, offset, length) {
1056 |   return asciiWrite(buf, string, offset, length);
1057 | }
1058 | 
1059 | function base64Write(buf, string, offset, length) {
1060 |   return blitBuffer(base64ToBytes(string), buf, offset, length);
1061 | }
1062 | 
1063 | function ucs2Write(buf, string, offset, length) {
1064 |   return blitBuffer(
1065 |     utf16leToBytes(string, buf.length - offset),
1066 |     buf,
1067 |     offset,
1068 |     length
1069 |   );
1070 | }
1071 | 
1072 | Buffer.prototype.write = function write(string, offset, length, encoding) {
1073 |   // Buffer#write(string)
1074 |   if (offset === undefined) {
1075 |     encoding = 'utf8';
1076 |     length = this.length;
1077 |     offset = 0;
1078 |     // Buffer#write(string, encoding)
1079 |   } else if (length === undefined && typeof offset === 'string') {
1080 |     encoding = offset;
1081 |     length = this.length;
1082 |     offset = 0;
1083 |     // Buffer#write(string, offset[, length][, encoding])
1084 |   } else if (isFinite(offset)) {
1085 |     offset = offset | 0;
1086 |     if (isFinite(length)) {
1087 |       length = length | 0;
1088 |       if (encoding === undefined) encoding = 'utf8';
1089 |     } else {
1090 |       encoding = length;
1091 |       length = undefined;
1092 |     }
1093 |     // legacy write(string, encoding, offset, length) - remove in v0.13
1094 |   } else {
1095 |     throw new Error(
1096 |       'Buffer.write(string, encoding, offset[, length]) is no longer supported'
1097 |     );
1098 |   }
1099 | 
1100 |   var remaining = this.length - offset;
1101 |   if (length === undefined || length > remaining) length = remaining;
1102 | 
1103 |   if (
1104 |     (string.length > 0 && (length < 0 || offset < 0)) ||
1105 |     offset > this.length
1106 |   ) {
1107 |     throw new RangeError('Attempt to write outside buffer bounds');
1108 |   }
1109 | 
1110 |   if (!encoding) encoding = 'utf8';
1111 | 
1112 |   var loweredCase = false;
1113 |   for (;;) {
1114 |     switch (encoding) {
1115 |       case 'hex':
1116 |         return hexWrite(this, string, offset, length);
1117 | 
1118 |       case 'utf8':
1119 |       case 'utf-8':
1120 |         return utf8Write(this, string, offset, length);
1121 | 
1122 |       case 'ascii':
1123 |         return asciiWrite(this, string, offset, length);
1124 | 
1125 |       case 'latin1':
1126 |       case 'binary':
1127 |         return latin1Write(this, string, offset, length);
1128 | 
1129 |       case 'base64':
1130 |         // Warning: maxLength not taken into account in base64Write
1131 |         return base64Write(this, string, offset, length);
1132 | 
1133 |       case 'ucs2':
1134 |       case 'ucs-2':
1135 |       case 'utf16le':
1136 |       case 'utf-16le':
1137 |         return ucs2Write(this, string, offset, length);
1138 | 
1139 |       default:
1140 |         if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
1141 |         encoding = ('' + encoding).toLowerCase();
1142 |         loweredCase = true;
1143 |     }
1144 |   }
1145 | };
1146 | 
1147 | Buffer.prototype.toJSON = function toJSON() {
1148 |   return {
1149 |     type: 'Buffer',
1150 |     data: Array.prototype.slice.call(this._arr || this, 0),
1151 |   };
1152 | };
1153 | 
1154 | function base64Slice(buf, start, end) {
1155 |   if (start === 0 && end === buf.length) {
1156 |     return fromByteArray(buf);
1157 |   } else {
1158 |     return fromByteArray(buf.slice(start, end));
1159 |   }
1160 | }
1161 | 
1162 | function utf8Slice(buf, start, end) {
1163 |   end = Math.min(buf.length, end);
1164 |   var res = [];
1165 | 
1166 |   var i = start;
1167 |   while (i < end) {
1168 |     var firstByte = buf[i];
1169 |     var codePoint = null;
1170 |     var bytesPerSequence =
1171 |       firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;
1172 | 
1173 |     if (i + bytesPerSequence <= end) {
1174 |       var secondByte, thirdByte, fourthByte, tempCodePoint;
1175 | 
1176 |       switch (bytesPerSequence) {
1177 |         case 1:
1178 |           if (firstByte < 0x80) {
1179 |             codePoint = firstByte;
1180 |           }
1181 |           break;
1182 |         case 2:
1183 |           secondByte = buf[i + 1];
1184 |           if ((secondByte & 0xc0) === 0x80) {
1185 |             tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
1186 |             if (tempCodePoint > 0x7f) {
1187 |               codePoint = tempCodePoint;
1188 |             }
1189 |           }
1190 |           break;
1191 |         case 3:
1192 |           secondByte = buf[i + 1];
1193 |           thirdByte = buf[i + 2];
1194 |           if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
1195 |             tempCodePoint =
1196 |               ((firstByte & 0xf) << 0xc) |
1197 |               ((secondByte & 0x3f) << 0x6) |
1198 |               (thirdByte & 0x3f);
1199 |             if (
1200 |               tempCodePoint > 0x7ff &&
1201 |               (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)
1202 |             ) {
1203 |               codePoint = tempCodePoint;
1204 |             }
1205 |           }
1206 |           break;
1207 |         case 4:
1208 |           secondByte = buf[i + 1];
1209 |           thirdByte = buf[i + 2];
1210 |           fourthByte = buf[i + 3];
1211 |           if (
1212 |             (secondByte & 0xc0) === 0x80 &&
1213 |             (thirdByte & 0xc0) === 0x80 &&
1214 |             (fourthByte & 0xc0) === 0x80
1215 |           ) {
1216 |             tempCodePoint =
1217 |               ((firstByte & 0xf) << 0x12) |
1218 |               ((secondByte & 0x3f) << 0xc) |
1219 |               ((thirdByte & 0x3f) << 0x6) |
1220 |               (fourthByte & 0x3f);
1221 |             if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
1222 |               codePoint = tempCodePoint;
1223 |             }
1224 |           }
1225 |       }
1226 |     }
1227 | 
1228 |     if (codePoint === null) {
1229 |       // we did not generate a valid codePoint so insert a
1230 |       // replacement char (U+FFFD) and advance only 1 byte
1231 |       codePoint = 0xfffd;
1232 |       bytesPerSequence = 1;
1233 |     } else if (codePoint > 0xffff) {
1234 |       // encode to utf16 (surrogate pair dance)
1235 |       codePoint -= 0x10000;
1236 |       res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
1237 |       codePoint = 0xdc00 | (codePoint & 0x3ff);
1238 |     }
1239 | 
1240 |     res.push(codePoint);
1241 |     i += bytesPerSequence;
1242 |   }
1243 | 
1244 |   return decodeCodePointsArray(res);
1245 | }
1246 | 
1247 | // Based on http://stackoverflow.com/a/22747272/680742, the browser with
1248 | // the lowest limit is Chrome, with 0x10000 args.
1249 | // We go 1 magnitude less, for safety
1250 | var MAX_ARGUMENTS_LENGTH = 0x1000;
1251 | 
1252 | function decodeCodePointsArray(codePoints) {
1253 |   var len = codePoints.length;
1254 |   if (len <= MAX_ARGUMENTS_LENGTH) {
1255 |     return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
1256 |   }
1257 | 
1258 |   // Decode in chunks to avoid "call stack size exceeded".
1259 |   var res = '';
1260 |   var i = 0;
1261 |   while (i < len) {
1262 |     res += String.fromCharCode.apply(
1263 |       String,
1264 |       codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
1265 |     );
1266 |   }
1267 |   return res;
1268 | }
1269 | 
1270 | function asciiSlice(buf, start, end) {
1271 |   var ret = '';
1272 |   end = Math.min(buf.length, end);
1273 | 
1274 |   for (var i = start; i < end; ++i) {
1275 |     ret += String.fromCharCode(buf[i] & 0x7f);
1276 |   }
1277 |   return ret;
1278 | }
1279 | 
1280 | function latin1Slice(buf, start, end) {
1281 |   var ret = '';
1282 |   end = Math.min(buf.length, end);
1283 | 
1284 |   for (var i = start; i < end; ++i) {
1285 |     ret += String.fromCharCode(buf[i]);
1286 |   }
1287 |   return ret;
1288 | }
1289 | 
1290 | function hexSlice(buf, start, end) {
1291 |   var len = buf.length;
1292 | 
1293 |   if (!start || start < 0) start = 0;
1294 |   if (!end || end < 0 || end > len) end = len;
1295 | 
1296 |   var out = '';
1297 |   for (var i = start; i < end; ++i) {
1298 |     out += toHex(buf[i]);
1299 |   }
1300 |   return out;
1301 | }
1302 | 
1303 | function utf16leSlice(buf, start, end) {
1304 |   var bytes = buf.slice(start, end);
1305 |   var res = '';
1306 |   for (var i = 0; i < bytes.length; i += 2) {
1307 |     res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
1308 |   }
1309 |   return res;
1310 | }
1311 | 
1312 | Buffer.prototype.slice = function slice(start, end) {
1313 |   var len = this.length;
1314 |   start = ~~start;
1315 |   end = end === undefined ? len : ~~end;
1316 | 
1317 |   if (start < 0) {
1318 |     start += len;
1319 |     if (start < 0) start = 0;
1320 |   } else if (start > len) {
1321 |     start = len;
1322 |   }
1323 | 
1324 |   if (end < 0) {
1325 |     end += len;
1326 |     if (end < 0) end = 0;
1327 |   } else if (end > len) {
1328 |     end = len;
1329 |   }
1330 | 
1331 |   if (end < start) end = start;
1332 | 
1333 |   var newBuf;
1334 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1335 |     newBuf = this.subarray(start, end);
1336 |     newBuf.__proto__ = Buffer.prototype;
1337 |   } else {
1338 |     var sliceLen = end - start;
1339 |     newBuf = new Buffer(sliceLen, undefined);
1340 |     for (var i = 0; i < sliceLen; ++i) {
1341 |       newBuf[i] = this[i + start];
1342 |     }
1343 |   }
1344 | 
1345 |   return newBuf;
1346 | };
1347 | 
1348 | /*
1349 |  * Need to make sure that buffer isn't trying to write out of bounds.
1350 |  */
1351 | function checkOffset(offset, ext, length) {
1352 |   if (offset % 1 !== 0 || offset < 0)
1353 |     throw new RangeError('offset is not uint');
1354 |   if (offset + ext > length)
1355 |     throw new RangeError('Trying to access beyond buffer length');
1356 | }
1357 | 
1358 | Buffer.prototype.readUIntLE = function readUIntLE(
1359 |   offset,
1360 |   byteLength,
1361 |   noAssert
1362 | ) {
1363 |   offset = offset | 0;
1364 |   byteLength = byteLength | 0;
1365 |   if (!noAssert) checkOffset(offset, byteLength, this.length);
1366 | 
1367 |   var val = this[offset];
1368 |   var mul = 1;
1369 |   var i = 0;
1370 |   while (++i < byteLength && (mul *= 0x100)) {
1371 |     val += this[offset + i] * mul;
1372 |   }
1373 | 
1374 |   return val;
1375 | };
1376 | 
1377 | Buffer.prototype.readUIntBE = function readUIntBE(
1378 |   offset,
1379 |   byteLength,
1380 |   noAssert
1381 | ) {
1382 |   offset = offset | 0;
1383 |   byteLength = byteLength | 0;
1384 |   if (!noAssert) {
1385 |     checkOffset(offset, byteLength, this.length);
1386 |   }
1387 | 
1388 |   var val = this[offset + --byteLength];
1389 |   var mul = 1;
1390 |   while (byteLength > 0 && (mul *= 0x100)) {
1391 |     val += this[offset + --byteLength] * mul;
1392 |   }
1393 | 
1394 |   return val;
1395 | };
1396 | 
1397 | Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
1398 |   if (!noAssert) checkOffset(offset, 1, this.length);
1399 |   return this[offset];
1400 | };
1401 | 
1402 | Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
1403 |   if (!noAssert) checkOffset(offset, 2, this.length);
1404 |   return this[offset] | (this[offset + 1] << 8);
1405 | };
1406 | 
1407 | Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
1408 |   if (!noAssert) checkOffset(offset, 2, this.length);
1409 |   return (this[offset] << 8) | this[offset + 1];
1410 | };
1411 | 
1412 | Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
1413 |   if (!noAssert) checkOffset(offset, 4, this.length);
1414 | 
1415 |   return (
1416 |     (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +
1417 |     this[offset + 3] * 0x1000000
1418 |   );
1419 | };
1420 | 
1421 | Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
1422 |   if (!noAssert) checkOffset(offset, 4, this.length);
1423 | 
1424 |   return (
1425 |     this[offset] * 0x1000000 +
1426 |     ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])
1427 |   );
1428 | };
1429 | 
1430 | Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
1431 |   offset = offset | 0;
1432 |   byteLength = byteLength | 0;
1433 |   if (!noAssert) checkOffset(offset, byteLength, this.length);
1434 | 
1435 |   var val = this[offset];
1436 |   var mul = 1;
1437 |   var i = 0;
1438 |   while (++i < byteLength && (mul *= 0x100)) {
1439 |     val += this[offset + i] * mul;
1440 |   }
1441 |   mul *= 0x80;
1442 | 
1443 |   if (val >= mul) val -= Math.pow(2, 8 * byteLength);
1444 | 
1445 |   return val;
1446 | };
1447 | 
1448 | Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
1449 |   offset = offset | 0;
1450 |   byteLength = byteLength | 0;
1451 |   if (!noAssert) checkOffset(offset, byteLength, this.length);
1452 | 
1453 |   var i = byteLength;
1454 |   var mul = 1;
1455 |   var val = this[offset + --i];
1456 |   while (i > 0 && (mul *= 0x100)) {
1457 |     val += this[offset + --i] * mul;
1458 |   }
1459 |   mul *= 0x80;
1460 | 
1461 |   if (val >= mul) val -= Math.pow(2, 8 * byteLength);
1462 | 
1463 |   return val;
1464 | };
1465 | 
1466 | Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
1467 |   if (!noAssert) checkOffset(offset, 1, this.length);
1468 |   if (!(this[offset] & 0x80)) return this[offset];
1469 |   return (0xff - this[offset] + 1) * -1;
1470 | };
1471 | 
1472 | Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
1473 |   if (!noAssert) checkOffset(offset, 2, this.length);
1474 |   var val = this[offset] | (this[offset + 1] << 8);
1475 |   return val & 0x8000 ? val | 0xffff0000 : val;
1476 | };
1477 | 
1478 | Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
1479 |   if (!noAssert) checkOffset(offset, 2, this.length);
1480 |   var val = this[offset + 1] | (this[offset] << 8);
1481 |   return val & 0x8000 ? val | 0xffff0000 : val;
1482 | };
1483 | 
1484 | Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
1485 |   if (!noAssert) checkOffset(offset, 4, this.length);
1486 | 
1487 |   return (
1488 |     this[offset] |
1489 |     (this[offset + 1] << 8) |
1490 |     (this[offset + 2] << 16) |
1491 |     (this[offset + 3] << 24)
1492 |   );
1493 | };
1494 | 
1495 | Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
1496 |   if (!noAssert) checkOffset(offset, 4, this.length);
1497 | 
1498 |   return (
1499 |     (this[offset] << 24) |
1500 |     (this[offset + 1] << 16) |
1501 |     (this[offset + 2] << 8) |
1502 |     this[offset + 3]
1503 |   );
1504 | };
1505 | 
1506 | Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
1507 |   if (!noAssert) checkOffset(offset, 4, this.length);
1508 |   return read(this, offset, true, 23, 4);
1509 | };
1510 | 
1511 | Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
1512 |   if (!noAssert) checkOffset(offset, 4, this.length);
1513 |   return read(this, offset, false, 23, 4);
1514 | };
1515 | 
1516 | Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
1517 |   if (!noAssert) checkOffset(offset, 8, this.length);
1518 |   return read(this, offset, true, 52, 8);
1519 | };
1520 | 
1521 | Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
1522 |   if (!noAssert) checkOffset(offset, 8, this.length);
1523 |   return read(this, offset, false, 52, 8);
1524 | };
1525 | 
1526 | function checkInt(buf, value, offset, ext, max, min) {
1527 |   if (!internalIsBuffer(buf))
1528 |     throw new TypeError('"buffer" argument must be a Buffer instance');
1529 |   if (value > max || value < min)
1530 |     throw new RangeError('"value" argument is out of bounds');
1531 |   if (offset + ext > buf.length) throw new RangeError('Index out of range');
1532 | }
1533 | 
1534 | Buffer.prototype.writeUIntLE = function writeUIntLE(
1535 |   value,
1536 |   offset,
1537 |   byteLength,
1538 |   noAssert
1539 | ) {
1540 |   value = +value;
1541 |   offset = offset | 0;
1542 |   byteLength = byteLength | 0;
1543 |   if (!noAssert) {
1544 |     var maxBytes = Math.pow(2, 8 * byteLength) - 1;
1545 |     checkInt(this, value, offset, byteLength, maxBytes, 0);
1546 |   }
1547 | 
1548 |   var mul = 1;
1549 |   var i = 0;
1550 |   this[offset] = value & 0xff;
1551 |   while (++i < byteLength && (mul *= 0x100)) {
1552 |     this[offset + i] = (value / mul) & 0xff;
1553 |   }
1554 | 
1555 |   return offset + byteLength;
1556 | };
1557 | 
1558 | Buffer.prototype.writeUIntBE = function writeUIntBE(
1559 |   value,
1560 |   offset,
1561 |   byteLength,
1562 |   noAssert
1563 | ) {
1564 |   value = +value;
1565 |   offset = offset | 0;
1566 |   byteLength = byteLength | 0;
1567 |   if (!noAssert) {
1568 |     var maxBytes = Math.pow(2, 8 * byteLength) - 1;
1569 |     checkInt(this, value, offset, byteLength, maxBytes, 0);
1570 |   }
1571 | 
1572 |   var i = byteLength - 1;
1573 |   var mul = 1;
1574 |   this[offset + i] = value & 0xff;
1575 |   while (--i >= 0 && (mul *= 0x100)) {
1576 |     this[offset + i] = (value / mul) & 0xff;
1577 |   }
1578 | 
1579 |   return offset + byteLength;
1580 | };
1581 | 
1582 | Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
1583 |   value = +value;
1584 |   offset = offset | 0;
1585 |   if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
1586 |   if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
1587 |   this[offset] = value & 0xff;
1588 |   return offset + 1;
1589 | };
1590 | 
1591 | function objectWriteUInt16(buf, value, offset, littleEndian) {
1592 |   if (value < 0) value = 0xffff + value + 1;
1593 |   for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
1594 |     buf[offset + i] =
1595 |       (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
1596 |       ((littleEndian ? i : 1 - i) * 8);
1597 |   }
1598 | }
1599 | 
1600 | Buffer.prototype.writeUInt16LE = function writeUInt16LE(
1601 |   value,
1602 |   offset,
1603 |   noAssert
1604 | ) {
1605 |   value = +value;
1606 |   offset = offset | 0;
1607 |   if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
1608 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1609 |     this[offset] = value & 0xff;
1610 |     this[offset + 1] = value >>> 8;
1611 |   } else {
1612 |     objectWriteUInt16(this, value, offset, true);
1613 |   }
1614 |   return offset + 2;
1615 | };
1616 | 
1617 | Buffer.prototype.writeUInt16BE = function writeUInt16BE(
1618 |   value,
1619 |   offset,
1620 |   noAssert
1621 | ) {
1622 |   value = +value;
1623 |   offset = offset | 0;
1624 |   if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
1625 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1626 |     this[offset] = value >>> 8;
1627 |     this[offset + 1] = value & 0xff;
1628 |   } else {
1629 |     objectWriteUInt16(this, value, offset, false);
1630 |   }
1631 |   return offset + 2;
1632 | };
1633 | 
1634 | function objectWriteUInt32(buf, value, offset, littleEndian) {
1635 |   if (value < 0) value = 0xffffffff + value + 1;
1636 |   for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
1637 |     buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff;
1638 |   }
1639 | }
1640 | 
1641 | Buffer.prototype.writeUInt32LE = function writeUInt32LE(
1642 |   value,
1643 |   offset,
1644 |   noAssert
1645 | ) {
1646 |   value = +value;
1647 |   offset = offset | 0;
1648 |   if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
1649 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1650 |     this[offset + 3] = value >>> 24;
1651 |     this[offset + 2] = value >>> 16;
1652 |     this[offset + 1] = value >>> 8;
1653 |     this[offset] = value & 0xff;
1654 |   } else {
1655 |     objectWriteUInt32(this, value, offset, true);
1656 |   }
1657 |   return offset + 4;
1658 | };
1659 | 
1660 | Buffer.prototype.writeUInt32BE = function writeUInt32BE(
1661 |   value,
1662 |   offset,
1663 |   noAssert
1664 | ) {
1665 |   value = +value;
1666 |   offset = offset | 0;
1667 |   if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
1668 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1669 |     this[offset] = value >>> 24;
1670 |     this[offset + 1] = value >>> 16;
1671 |     this[offset + 2] = value >>> 8;
1672 |     this[offset + 3] = value & 0xff;
1673 |   } else {
1674 |     objectWriteUInt32(this, value, offset, false);
1675 |   }
1676 |   return offset + 4;
1677 | };
1678 | 
1679 | Buffer.prototype.writeIntLE = function writeIntLE(
1680 |   value,
1681 |   offset,
1682 |   byteLength,
1683 |   noAssert
1684 | ) {
1685 |   value = +value;
1686 |   offset = offset | 0;
1687 |   if (!noAssert) {
1688 |     var limit = Math.pow(2, 8 * byteLength - 1);
1689 | 
1690 |     checkInt(this, value, offset, byteLength, limit - 1, -limit);
1691 |   }
1692 | 
1693 |   var i = 0;
1694 |   var mul = 1;
1695 |   var sub = 0;
1696 |   this[offset] = value & 0xff;
1697 |   while (++i < byteLength && (mul *= 0x100)) {
1698 |     if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
1699 |       sub = 1;
1700 |     }
1701 |     this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
1702 |   }
1703 | 
1704 |   return offset + byteLength;
1705 | };
1706 | 
1707 | Buffer.prototype.writeIntBE = function writeIntBE(
1708 |   value,
1709 |   offset,
1710 |   byteLength,
1711 |   noAssert
1712 | ) {
1713 |   value = +value;
1714 |   offset = offset | 0;
1715 |   if (!noAssert) {
1716 |     var limit = Math.pow(2, 8 * byteLength - 1);
1717 | 
1718 |     checkInt(this, value, offset, byteLength, limit - 1, -limit);
1719 |   }
1720 | 
1721 |   var i = byteLength - 1;
1722 |   var mul = 1;
1723 |   var sub = 0;
1724 |   this[offset + i] = value & 0xff;
1725 |   while (--i >= 0 && (mul *= 0x100)) {
1726 |     if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
1727 |       sub = 1;
1728 |     }
1729 |     this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
1730 |   }
1731 | 
1732 |   return offset + byteLength;
1733 | };
1734 | 
1735 | Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
1736 |   value = +value;
1737 |   offset = offset | 0;
1738 |   if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
1739 |   if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
1740 |   if (value < 0) value = 0xff + value + 1;
1741 |   this[offset] = value & 0xff;
1742 |   return offset + 1;
1743 | };
1744 | 
1745 | Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
1746 |   value = +value;
1747 |   offset = offset | 0;
1748 |   if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
1749 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1750 |     this[offset] = value & 0xff;
1751 |     this[offset + 1] = value >>> 8;
1752 |   } else {
1753 |     objectWriteUInt16(this, value, offset, true);
1754 |   }
1755 |   return offset + 2;
1756 | };
1757 | 
1758 | Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
1759 |   value = +value;
1760 |   offset = offset | 0;
1761 |   if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
1762 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1763 |     this[offset] = value >>> 8;
1764 |     this[offset + 1] = value & 0xff;
1765 |   } else {
1766 |     objectWriteUInt16(this, value, offset, false);
1767 |   }
1768 |   return offset + 2;
1769 | };
1770 | 
1771 | Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
1772 |   value = +value;
1773 |   offset = offset | 0;
1774 |   if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
1775 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1776 |     this[offset] = value & 0xff;
1777 |     this[offset + 1] = value >>> 8;
1778 |     this[offset + 2] = value >>> 16;
1779 |     this[offset + 3] = value >>> 24;
1780 |   } else {
1781 |     objectWriteUInt32(this, value, offset, true);
1782 |   }
1783 |   return offset + 4;
1784 | };
1785 | 
1786 | Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
1787 |   value = +value;
1788 |   offset = offset | 0;
1789 |   if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
1790 |   if (value < 0) value = 0xffffffff + value + 1;
1791 |   if (Buffer.TYPED_ARRAY_SUPPORT) {
1792 |     this[offset] = value >>> 24;
1793 |     this[offset + 1] = value >>> 16;
1794 |     this[offset + 2] = value >>> 8;
1795 |     this[offset + 3] = value & 0xff;
1796 |   } else {
1797 |     objectWriteUInt32(this, value, offset, false);
1798 |   }
1799 |   return offset + 4;
1800 | };
1801 | 
1802 | function checkIEEE754(buf, value, offset, ext, max, min) {
1803 |   if (offset + ext > buf.length) throw new RangeError('Index out of range');
1804 |   if (offset < 0) throw new RangeError('Index out of range');
1805 | }
1806 | 
1807 | function writeFloat(buf, value, offset, littleEndian, noAssert) {
1808 |   if (!noAssert) {
1809 |     checkIEEE754(buf, value, offset, 4);
1810 |   }
1811 |   write(buf, value, offset, littleEndian, 23, 4);
1812 |   return offset + 4;
1813 | }
1814 | 
1815 | Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
1816 |   return writeFloat(this, value, offset, true, noAssert);
1817 | };
1818 | 
1819 | Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
1820 |   return writeFloat(this, value, offset, false, noAssert);
1821 | };
1822 | 
1823 | function writeDouble(buf, value, offset, littleEndian, noAssert) {
1824 |   if (!noAssert) {
1825 |     checkIEEE754(buf, value, offset, 8);
1826 |   }
1827 |   write(buf, value, offset, littleEndian, 52, 8);
1828 |   return offset + 8;
1829 | }
1830 | 
1831 | Buffer.prototype.writeDoubleLE = function writeDoubleLE(
1832 |   value,
1833 |   offset,
1834 |   noAssert
1835 | ) {
1836 |   return writeDouble(this, value, offset, true, noAssert);
1837 | };
1838 | 
1839 | Buffer.prototype.writeDoubleBE = function writeDoubleBE(
1840 |   value,
1841 |   offset,
1842 |   noAssert
1843 | ) {
1844 |   return writeDouble(this, value, offset, false, noAssert);
1845 | };
1846 | 
1847 | // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
1848 | Buffer.prototype.copy = function copy(target, targetStart, start, end) {
1849 |   if (!start) start = 0;
1850 |   if (!end && end !== 0) end = this.length;
1851 |   if (targetStart >= target.length) targetStart = target.length;
1852 |   if (!targetStart) targetStart = 0;
1853 |   if (end > 0 && end < start) end = start;
1854 | 
1855 |   // Copy 0 bytes; we're done
1856 |   if (end === start) return 0;
1857 |   if (target.length === 0 || this.length === 0) return 0;
1858 | 
1859 |   // Fatal error conditions
1860 |   if (targetStart < 0) {
1861 |     throw new RangeError('targetStart out of bounds');
1862 |   }
1863 |   if (start < 0 || start >= this.length)
1864 |     throw new RangeError('sourceStart out of bounds');
1865 |   if (end < 0) throw new RangeError('sourceEnd out of bounds');
1866 | 
1867 |   // Are we oob?
1868 |   if (end > this.length) end = this.length;
1869 |   if (target.length - targetStart < end - start) {
1870 |     end = target.length - targetStart + start;
1871 |   }
1872 | 
1873 |   var len = end - start;
1874 |   var i;
1875 | 
1876 |   if (this === target && start < targetStart && targetStart < end) {
1877 |     // descending copy from end
1878 |     for (i = len - 1; i >= 0; --i) {
1879 |       target[i + targetStart] = this[i + start];
1880 |     }
1881 |   } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
1882 |     // ascending copy from start
1883 |     for (i = 0; i < len; ++i) {
1884 |       target[i + targetStart] = this[i + start];
1885 |     }
1886 |   } else {
1887 |     Uint8Array.prototype.set.call(
1888 |       target,
1889 |       this.subarray(start, start + len),
1890 |       targetStart
1891 |     );
1892 |   }
1893 | 
1894 |   return len;
1895 | };
1896 | 
1897 | // Usage:
1898 | //    buffer.fill(number[, offset[, end]])
1899 | //    buffer.fill(buffer[, offset[, end]])
1900 | //    buffer.fill(string[, offset[, end]][, encoding])
1901 | Buffer.prototype.fill = function fill(val, start, end, encoding) {
1902 |   // Handle string cases:
1903 |   if (typeof val === 'string') {
1904 |     if (typeof start === 'string') {
1905 |       encoding = start;
1906 |       start = 0;
1907 |       end = this.length;
1908 |     } else if (typeof end === 'string') {
1909 |       encoding = end;
1910 |       end = this.length;
1911 |     }
1912 |     if (val.length === 1) {
1913 |       var code = val.charCodeAt(0);
1914 |       if (code < 256) {
1915 |         val = code;
1916 |       }
1917 |     }
1918 |     if (encoding !== undefined && typeof encoding !== 'string') {
1919 |       throw new TypeError('encoding must be a string');
1920 |     }
1921 |     if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
1922 |       throw new TypeError('Unknown encoding: ' + encoding);
1923 |     }
1924 |   } else if (typeof val === 'number') {
1925 |     val = val & 255;
1926 |   }
1927 | 
1928 |   // Invalid ranges are not set to a default, so can range check early.
1929 |   if (start < 0 || this.length < start || this.length < end) {
1930 |     throw new RangeError('Out of range index');
1931 |   }
1932 | 
1933 |   if (end <= start) {
1934 |     return this;
1935 |   }
1936 | 
1937 |   start = start >>> 0;
1938 |   end = end === undefined ? this.length : end >>> 0;
1939 | 
1940 |   if (!val) val = 0;
1941 | 
1942 |   var i;
1943 |   if (typeof val === 'number') {
1944 |     for (i = start; i < end; ++i) {
1945 |       this[i] = val;
1946 |     }
1947 |   } else {
1948 |     var bytes = internalIsBuffer(val)
1949 |       ? val
1950 |       : utf8ToBytes(new Buffer(val, encoding).toString());
1951 |     var len = bytes.length;
1952 |     for (i = 0; i < end - start; ++i) {
1953 |       this[i + start] = bytes[i % len];
1954 |     }
1955 |   }
1956 | 
1957 |   return this;
1958 | };
1959 | 
1960 | // HELPER FUNCTIONS
1961 | // ================
1962 | 
1963 | var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
1964 | 
1965 | function base64clean(str) {
1966 |   // Node strips out invalid characters like \n and \t from the string, base64-js does not
1967 |   str = stringtrim(str).replace(INVALID_BASE64_RE, '');
1968 |   // Node converts strings with length < 2 to ''
1969 |   if (str.length < 2) return '';
1970 |   // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
1971 |   while (str.length % 4 !== 0) {
1972 |     str = str + '=';
1973 |   }
1974 |   return str;
1975 | }
1976 | 
1977 | function stringtrim(str) {
1978 |   if (str.trim) return str.trim();
1979 |   return str.replace(/^\s+|\s+$/g, '');
1980 | }
1981 | 
1982 | function toHex(n) {
1983 |   if (n < 16) return '0' + n.toString(16);
1984 |   return n.toString(16);
1985 | }
1986 | 
1987 | function utf8ToBytes(string, units) {
1988 |   units = units || Infinity;
1989 |   var codePoint;
1990 |   var length = string.length;
1991 |   var leadSurrogate = null;
1992 |   var bytes = [];
1993 | 
1994 |   for (var i = 0; i < length; ++i) {
1995 |     codePoint = string.charCodeAt(i);
1996 | 
1997 |     // is surrogate component
1998 |     if (codePoint > 0xd7ff && codePoint < 0xe000) {
1999 |       // last char was a lead
2000 |       if (!leadSurrogate) {
2001 |         // no lead yet
2002 |         if (codePoint > 0xdbff) {
2003 |           // unexpected trail
2004 |           if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
2005 |           continue;
2006 |         } else if (i + 1 === length) {
2007 |           // unpaired lead
2008 |           if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
2009 |           continue;
2010 |         }
2011 | 
2012 |         // valid lead
2013 |         leadSurrogate = codePoint;
2014 | 
2015 |         continue;
2016 |       }
2017 | 
2018 |       // 2 leads in a row
2019 |       if (codePoint < 0xdc00) {
2020 |         if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
2021 |         leadSurrogate = codePoint;
2022 |         continue;
2023 |       }
2024 | 
2025 |       // valid surrogate pair
2026 |       codePoint =
2027 |         (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;
2028 |     } else if (leadSurrogate) {
2029 |       // valid bmp char, but last char was a lead
2030 |       if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
2031 |     }
2032 | 
2033 |     leadSurrogate = null;
2034 | 
2035 |     // encode utf8
2036 |     if (codePoint < 0x80) {
2037 |       if ((units -= 1) < 0) break;
2038 |       bytes.push(codePoint);
2039 |     } else if (codePoint < 0x800) {
2040 |       if ((units -= 2) < 0) break;
2041 |       bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
2042 |     } else if (codePoint < 0x10000) {
2043 |       if ((units -= 3) < 0) break;
2044 |       bytes.push(
2045 |         (codePoint >> 0xc) | 0xe0,
2046 |         ((codePoint >> 0x6) & 0x3f) | 0x80,
2047 |         (codePoint & 0x3f) | 0x80
2048 |       );
2049 |     } else if (codePoint < 0x110000) {
2050 |       if ((units -= 4) < 0) break;
2051 |       bytes.push(
2052 |         (codePoint >> 0x12) | 0xf0,
2053 |         ((codePoint >> 0xc) & 0x3f) | 0x80,
2054 |         ((codePoint >> 0x6) & 0x3f) | 0x80,
2055 |         (codePoint & 0x3f) | 0x80
2056 |       );
2057 |     } else {
2058 |       throw new Error('Invalid code point');
2059 |     }
2060 |   }
2061 | 
2062 |   return bytes;
2063 | }
2064 | 
2065 | function asciiToBytes(str) {
2066 |   var byteArray = [];
2067 |   for (var i = 0; i < str.length; ++i) {
2068 |     // Node's code seems to be doing this and not & 0x7F..
2069 |     byteArray.push(str.charCodeAt(i) & 0xff);
2070 |   }
2071 |   return byteArray;
2072 | }
2073 | 
2074 | function utf16leToBytes(str, units) {
2075 |   var c, hi, lo;
2076 |   var byteArray = [];
2077 |   for (var i = 0; i < str.length; ++i) {
2078 |     if ((units -= 2) < 0) break;
2079 | 
2080 |     c = str.charCodeAt(i);
2081 |     hi = c >> 8;
2082 |     lo = c % 256;
2083 |     byteArray.push(lo);
2084 |     byteArray.push(hi);
2085 |   }
2086 | 
2087 |   return byteArray;
2088 | }
2089 | 
2090 | function base64ToBytes(str) {
2091 |   return toByteArray(base64clean(str));
2092 | }
2093 | 
2094 | function blitBuffer(src, dst, offset, length) {
2095 |   for (var i = 0; i < length; ++i) {
2096 |     if (i + offset >= dst.length || i >= src.length) break;
2097 |     dst[i + offset] = src[i];
2098 |   }
2099 |   return i;
2100 | }
2101 | 
2102 | function isnan(val) {
2103 |   return val !== val; // eslint-disable-line no-self-compare
2104 | }
2105 | 
2106 | // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
2107 | // The _isBuffer check is for Safari 5-7 support, because it's missing
2108 | // Object.prototype.constructor. Remove this eventually
2109 | export function isBuffer(obj) {
2110 |   return (
2111 |     obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
2112 |   );
2113 | }
2114 | 
2115 | function isFastBuffer(obj) {
2116 |   return (
2117 |     !!obj.constructor &&
2118 |     typeof obj.constructor.isBuffer === 'function' &&
2119 |     obj.constructor.isBuffer(obj)
2120 |   );
2121 | }
2122 | 
2123 | // For Node v0.10 support. Remove this eventually.
2124 | function isSlowBuffer(obj) {
2125 |   return (
2126 |     typeof obj.readFloatLE === 'function' &&
2127 |     typeof obj.slice === 'function' &&
2128 |     isFastBuffer(obj.slice(0, 0))
2129 |   );
2130 | }
2131 | 


--------------------------------------------------------------------------------
/docs/.obsidian/app.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "attachmentFolderPath": "Assets",
 3 |   "useMarkdownLinks": false,
 4 |   "alwaysUpdateLinks": true,
 5 |   "promptDelete": false,
 6 |   "spellcheckDictionary": [
 7 |     "frontmatter",
 8 |     "Frontmatter"
 9 |   ]
10 | }


--------------------------------------------------------------------------------
/docs/.obsidian/appearance.json:
--------------------------------------------------------------------------------
1 | {
2 |   "baseFontSize": 16,
3 |   "cssTheme": "",
4 |   "theme": "moonstone",
5 |   "accentColor": ""
6 | }


--------------------------------------------------------------------------------
/docs/.obsidian/community-plugins.json:
--------------------------------------------------------------------------------
1 | [
2 |   "obsidian-kanban"
3 | ]


--------------------------------------------------------------------------------
/docs/.obsidian/core-plugins-migration.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "file-explorer": true,
 3 |   "global-search": true,
 4 |   "switcher": true,
 5 |   "graph": true,
 6 |   "backlink": true,
 7 |   "outgoing-link": false,
 8 |   "tag-pane": false,
 9 |   "page-preview": false,
10 |   "daily-notes": false,
11 |   "templates": true,
12 |   "note-composer": true,
13 |   "command-palette": true,
14 |   "slash-command": false,
15 |   "editor-status": false,
16 |   "starred": false,
17 |   "markdown-importer": true,
18 |   "zk-prefixer": false,
19 |   "random-note": false,
20 |   "outline": false,
21 |   "word-count": true,
22 |   "slides": false,
23 |   "audio-recorder": false,
24 |   "workspaces": false,
25 |   "file-recovery": true,
26 |   "publish": true,
27 |   "sync": false,
28 |   "canvas": true,
29 |   "bookmarks": true
30 | }


--------------------------------------------------------------------------------
/docs/.obsidian/core-plugins.json:
--------------------------------------------------------------------------------
 1 | [
 2 |   "file-explorer",
 3 |   "global-search",
 4 |   "switcher",
 5 |   "graph",
 6 |   "backlink",
 7 |   "canvas",
 8 |   "templates",
 9 |   "note-composer",
10 |   "command-palette",
11 |   "bookmarks",
12 |   "markdown-importer",
13 |   "word-count",
14 |   "file-recovery",
15 |   "publish"
16 | ]


--------------------------------------------------------------------------------
/docs/.obsidian/global-search.json:
--------------------------------------------------------------------------------
1 | {
2 |   "showFullPath": false,
3 |   "linkStyle": "wikilink",
4 |   "listStyle": "none"
5 | }


--------------------------------------------------------------------------------
/docs/.obsidian/hotkeys.json:
--------------------------------------------------------------------------------
1 | {}


--------------------------------------------------------------------------------
/docs/.obsidian/plugins/obsidian-kanban/manifest.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "id": "obsidian-kanban",
 3 |   "name": "Kanban",
 4 |   "version": "1.5.2",
 5 |   "minAppVersion": "1.0.0",
 6 |   "description": "Create markdown-backed Kanban boards in Obsidian.",
 7 |   "author": "mgmeyers",
 8 |   "authorUrl": "https://github.com/mgmeyers/obsidian-kanban",
 9 |   "isDesktopOnly": false
10 | }
11 | 


--------------------------------------------------------------------------------
/docs/.obsidian/publish.json:
--------------------------------------------------------------------------------
1 | {
2 |   "siteId": "49524b4a7633b05b06c16150ce280be4",
3 |   "host": "publish-01.obsidian.md",
4 |   "included": [],
5 |   "excluded": []
6 | }


--------------------------------------------------------------------------------
/docs/.obsidian/themes/California Coast.css:
--------------------------------------------------------------------------------
   1 | /* @settings
   2 | 
   3 | name: California Coast Theme
   4 | id: obsidian-california-coast-theme
   5 | settings:
   6 |     - 
   7 |         id: accent-color-title
   8 |         title: Accent Color
   9 |         type: heading
  10 |         level: 3
  11 |     - 
  12 |         id: accent
  13 |         title: Accent Color
  14 |         type: variable-color
  15 |         format: hsl-split
  16 |         default: '#007AFF'
  17 |     - 
  18 |         id: cc-fancy-cursor
  19 |         title: Accented cursor
  20 |         description: The editor cursor takes on your accent color
  21 |         type: class-toggle
  22 | 
  23 |     - 
  24 |         id: custom-fonts
  25 |         title: Custom Fonts
  26 |         type: heading
  27 |         level: 3
  28 |     - 
  29 |         id: text
  30 |         title: UI font
  31 |         description: Font used for the user interface
  32 |         type: variable-text
  33 |         default: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif
  34 |     - 
  35 |         id: text-editor
  36 |         title: Body font
  37 |         description: Font used for the editor and preview
  38 |         type: variable-text
  39 |         default: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif
  40 |     -
  41 |         id: editor-font-features
  42 |         title: Body font features
  43 |         description: eg. "ss01", "cv05", "cv07", "case"
  44 |         type: variable-text
  45 |         default: ""
  46 |     - 
  47 |         id: font-monospace
  48 |         title: Monospace font
  49 |         description: Used for code blocks, front matter, etc
  50 |         type: variable-text
  51 |         default: Menlo, SFMono-Regular, Consolas, "Roboto Mono", monospace
  52 |     - 
  53 |         id: editor-line-height
  54 |         title: Body line height
  55 |         description: Line height of the main text, expects a decimal value
  56 |         type: variable-number
  57 |         default: 1.88889
  58 |     - 
  59 |         id: line-width
  60 |         title: Line width
  61 |         description: The maximum line width in rem units (1rem = Body font size)
  62 |         type: variable-number
  63 |         default: 42
  64 |         format: rem
  65 |     
  66 |     -
  67 |         id: misc-title
  68 |         title: Misc
  69 |         type: heading
  70 |         level: 3
  71 |     - 
  72 |         id: scale-small
  73 |         title: Page preview scale
  74 |         description: Percentage amount to scale hover preview and sidebar document font
  75 |         type: variable-number
  76 |         default: 90
  77 |     -
  78 |         id: cc-truncated-explorer-titles
  79 |         title: Truncate file titles
  80 |         description: 'By default, files with long names will wrap in the file explorer. This setting ensures each file name only takes up a single line'
  81 |         type: class-toggle
  82 |     -
  83 |         id: cc-no-sidebar-animation
  84 |         title: Disable sidebar animations
  85 |         description: Closing and opening sidebars will occur immediately rather than animating to the open or closed positions
  86 |         type: class-toggle
  87 |     -
  88 |         id: cc-no-tree-animation
  89 |         title: Disable tree animations
  90 |         description: Closing and opening folders, nested tags, etc. will occur immediately rather than animating to the open or closed positions
  91 |         type: class-toggle
  92 | 
  93 |     - 
  94 |         id: editor-customization
  95 |         title: Editor Customization
  96 |         type: heading
  97 |         level: 3
  98 |     - 
  99 |         id: cc-soft-blink-cursor
 100 |         title: Soft-blink cursor
 101 |         description: The editor cursor will fade in and out rather than blinking
 102 |         type: class-toggle
 103 |     - 
 104 |         id: cc-editor-heading-hash
 105 |         title: Flush headings
 106 |         description: Shifts heading hashes so headings are aligned with the edge of the editor
 107 |         type: class-toggle
 108 |     - 
 109 |         id: cc-block-quotes
 110 |         title: Blockquotes
 111 |         description: De-emphasizes the blockquote formatting character
 112 |         type: class-toggle
 113 |     - 
 114 |         id: cc-em-strong
 115 |         title: Bold and italics
 116 |         description: Styles bold and italic formatting to be less prominent
 117 |         type: class-toggle
 118 |     - 
 119 |         id: cc-hr
 120 |         title: Horizontal rule
 121 |         description: Styles horizontal rules to span the width of the editor
 122 |         type: class-toggle
 123 |     -
 124 |         id: cc-editor-list-bullets
 125 |         title: Editor list bullets
 126 |         description: 'Replace *, -, + with a bullet character when creating lists'
 127 |         type: class-toggle
 128 |     -
 129 |         id: cc-list-relationship-lines
 130 |         title: Editor list indentation lines
 131 |         description: Display vertical lines to distinguish list indentation level
 132 |         type: class-toggle
 133 |     -
 134 |         id: cc-soft-wrap-code-blocks
 135 |         title: Soft wrap code-blocks
 136 |         type: class-toggle
 137 | 
 138 |     - 
 139 |         id: preview-customization
 140 |         title: Preview Customization
 141 |         type: heading
 142 |         level: 3
 143 |     - 
 144 |         id: cc-pretty-preview
 145 |         title: Enhanced Preview Typography
 146 |         description: Adds context aware padding between text elements in preview mode (requires the "contextual typography" plugin)
 147 |         type: class-toggle
 148 |     -
 149 |         id: cc-hide-table-vertical-dividers
 150 |         title: Hide vertical table dividers
 151 |         type: class-toggle
 152 |     - 
 153 |         id: cc-seamless-embed
 154 |         title: Seamless embed
 155 |         description: Display embedded content seamlessly as a part of the containing document
 156 |         type: class-toggle
 157 |     
 158 |     - 
 159 |         id: level-1-headings
 160 |         title: Level 1 Headings
 161 |         type: heading
 162 |         level: 4
 163 |         collapsed: true
 164 |     - 
 165 |         id: h1-size
 166 |         title: H1 font size
 167 |         description: Accepts any CSS font-size value
 168 |         type: variable-text
 169 |         default: 1.602em
 170 |     - 
 171 |         id: h1-line-height
 172 |         title: H1 line height
 173 |         description: Accepts decimal values
 174 |         type: variable-number
 175 |         default: 1.4
 176 |     - 
 177 |         id: h1-margin-top
 178 |         title: H1 top margin
 179 |         description: Accepts decimal values representing the number of lines to add before the heading
 180 |         type: variable-number
 181 |         default: 3
 182 |     - 
 183 |         id: h1-margin-bottom
 184 |         title: H1 bottom margin
 185 |         description: Accepts decimal values representing the number of lines to add below the heading
 186 |         type: variable-number
 187 |         default: 1
 188 |     - 
 189 |         id: h1-weight
 190 |         title: H1 font weight
 191 |         description: Accepts numbers represeting the CSS font-weight
 192 |         type: variable-number
 193 |         default: 500
 194 |     - 
 195 |         id: h1-style
 196 |         title: H1 font style
 197 |         description: Accepts any CSS font-style value
 198 |         type: variable-text
 199 |         default: normal
 200 |     
 201 |     - 
 202 |         id: level-2-headings
 203 |         title: Level 2 Headings
 204 |         type: heading
 205 |         level: 4
 206 |         collapsed: true
 207 |     - 
 208 |         id: h2-size
 209 |         title: H2 font size
 210 |         description: Accepts any CSS font-size value
 211 |         type: variable-text
 212 |         default: 1.424em
 213 |     - 
 214 |         id: h2-line-height
 215 |         title: H2 line height
 216 |         description: Accepts decimal values
 217 |         type: variable-number
 218 |         default: 1.4
 219 |     - 
 220 |         id: h2-margin-top
 221 |         title: H2 top margin
 222 |         description: Accepts decimal values representing the number of lines to add before the heading
 223 |         type: variable-number
 224 |         default: 2.25
 225 |     - 
 226 |         id: h2-margin-bottom
 227 |         title: H2 bottom margin
 228 |         description: Accepts decimal values representing the number of lines to add below the heading
 229 |         type: variable-number
 230 |         default: 0.5
 231 |     - 
 232 |         id: h2-weight
 233 |         title: H2 font weight
 234 |         description: Accepts numbers represeting the CSS font-weight
 235 |         type: variable-number
 236 |         default: 500
 237 |     - 
 238 |         id: h2-style
 239 |         title: H2 font style
 240 |         description: Accepts any CSS font-style value
 241 |         type: variable-text
 242 |         default: normal
 243 | 
 244 |     - 
 245 |         id: level-3-headings
 246 |         title: Level 3 Headings
 247 |         type: heading
 248 |         level: 4
 249 |         collapsed: true
 250 |     - 
 251 |         id: h3-size
 252 |         title: H3 font size
 253 |         description: Accepts any CSS font-size value
 254 |         type: variable-text
 255 |         default: 1.266em
 256 |     - 
 257 |         id: h3-line-height
 258 |         title: H3 line height
 259 |         description: Accepts decimal values
 260 |         type: variable-number
 261 |         default: 1.4
 262 |     - 
 263 |         id: h3-margin-top
 264 |         title: H3 top margin
 265 |         description: Accepts decimal values representing the number of lines to add before the heading
 266 |         type: variable-number
 267 |         default: 1.75
 268 |     - 
 269 |         id: h3-margin-bottom
 270 |         title: H3 bottom margin
 271 |         description: Accepts decimal values representing the number of lines to add below the heading
 272 |         type: variable-number
 273 |         default: 0.5
 274 |     - 
 275 |         id: h3-weight
 276 |         title: H3 font weight
 277 |         description: Accepts numbers represeting the CSS font-weight
 278 |         type: variable-number
 279 |         default: 500
 280 |     - 
 281 |         id: h3-style
 282 |         title: H3 font style
 283 |         description: Accepts any CSS font-style value
 284 |         type: variable-text
 285 |         default: normal
 286 |     
 287 |     - 
 288 |         id: level-4-headings
 289 |         title: Level 4 Headings
 290 |         type: heading
 291 |         level: 4
 292 |         collapsed: true
 293 |     - 
 294 |         id: h4-size
 295 |         title: H4 font size
 296 |         description: Accepts any CSS font-size value
 297 |         type: variable-text
 298 |         default: 1.125em
 299 |     - 
 300 |         id: h4-line-height
 301 |         title: H4 line height
 302 |         description: Accepts decimal values
 303 |         type: variable-number
 304 |         default: 1.5
 305 |     - 
 306 |         id: h4-margin-top
 307 |         title: H4 top margin
 308 |         description: Accepts decimal values representing the number of lines to add before the heading
 309 |         type: variable-number
 310 |         default: 1.5
 311 |     - 
 312 |         id: h4-margin-bottom
 313 |         title: H4 bottom margin
 314 |         description: Accepts decimal values representing the number of lines to add below the heading
 315 |         type: variable-number
 316 |         default: 0.5
 317 |     - 
 318 |         id: h4-weight
 319 |         title: H4 font weight
 320 |         description: Accepts numbers represeting the CSS font-weight
 321 |         type: variable-number
 322 |         default: 500
 323 |     - 
 324 |         id: h4-style
 325 |         title: H4 font style
 326 |         description: Accepts any CSS font-style value
 327 |         type: variable-text
 328 |         default: normal
 329 |     
 330 |     - 
 331 |         id: level-5-headings
 332 |         title: Level 5 Headings
 333 |         type: heading
 334 |         level: 4
 335 |         collapsed: true
 336 |     - 
 337 |         id: h5-size
 338 |         title: H5 font size
 339 |         description: Accepts any CSS font-size value
 340 |         type: variable-text
 341 |         default: 1em
 342 |     - 
 343 |         id: h5-line-height
 344 |         title: H5 line height
 345 |         description: Accepts decimal values
 346 |         type: variable-number
 347 |         default: 1.5
 348 |     - 
 349 |         id: h5-margin-top
 350 |         title: H5 top margin
 351 |         description: Accepts decimal values representing the number of lines to add before the heading
 352 |         type: variable-number
 353 |         default: 1.5
 354 |     - 
 355 |         id: h5-margin-bottom
 356 |         title: H5 bottom margin
 357 |         description: Accepts decimal values representing the number of lines to add below the heading
 358 |         type: variable-number
 359 |         default: 0.5
 360 |     - 
 361 |         id: h5-weight
 362 |         title: H5 font weight
 363 |         description: Accepts numbers represeting the CSS font-weight
 364 |         type: variable-number
 365 |         default: 500
 366 |     - 
 367 |         id: h5-style
 368 |         title: H5 font style
 369 |         description: Accepts any CSS font-style value
 370 |         type: variable-text
 371 |         default: normal
 372 |     
 373 |     - 
 374 |         id: level-6-headings
 375 |         title: Level 6 Headings
 376 |         type: heading
 377 |         level: 4
 378 |         collapsed: true
 379 |     - 
 380 |         id: h6-size
 381 |         title: H6 font size
 382 |         description: Accepts any CSS font-size value
 383 |         type: variable-text
 384 |         default: 1em
 385 |     - 
 386 |         id: h6-line-height
 387 |         title: H6 line height
 388 |         description: Accepts decimal values
 389 |         type: variable-number
 390 |         default: 1.5
 391 |     - 
 392 |         id: h6-margin-top
 393 |         title: H6 top margin
 394 |         description: Accepts decimal values representing the number of lines to add before the heading
 395 |         type: variable-number
 396 |         default: 1.5
 397 |     - 
 398 |         id: h6-margin-bottom
 399 |         title: H6 bottom margin
 400 |         description: Accepts decimal values representing the number of lines to add below the heading
 401 |         type: variable-number
 402 |         default: 0.5
 403 |     - 
 404 |         id: h6-weight
 405 |         title: H6 font weight
 406 |         description: Accepts numbers represeting the CSS font-weight
 407 |         type: variable-number
 408 |         default: 500
 409 |     - 
 410 |         id: h6-style
 411 |         title: H6 font style
 412 |         description: Accepts any CSS font-style value
 413 |         type: variable-text
 414 |         default: italic
 415 | 
 416 |     - 
 417 |         id: icons
 418 |         title: Icons
 419 |         type: heading
 420 |         level: 3
 421 |     - 
 422 |         id: cc-custom-icons
 423 |         title: Use Custom Icons
 424 |         description: Replace obsidian's default icons
 425 |         type: class-toggle
 426 |         default: true
 427 |     - 
 428 |         id: cc-file-icons
 429 |         title: Use File Icons
 430 |         type: class-toggle
 431 |         default: true
 432 |     - 
 433 |         id: cc-folder-icons
 434 |         title: Use Folder Icons
 435 |         type: class-toggle
 436 |         default: true
 437 |     - 
 438 |         id: folder-h
 439 |         title: Folder icon color
 440 |         type: variable-number-slider
 441 |         default: 0
 442 |         format: deg
 443 |         min: 0
 444 |         max: 359
 445 |         step: 1
 446 |     - 
 447 |         id: folder-s
 448 |         title: Folder icon saturation
 449 |         type: variable-number-slider
 450 |         default: 100
 451 |         format: '%'
 452 |         min: 0
 453 |         max: 200
 454 |         step: 1
 455 |     - 
 456 |         id: folder-b
 457 |         title: Folder icon brightness
 458 |         type: variable-number-slider
 459 |         default: 100
 460 |         format: '%'
 461 |         min: 50
 462 |         max: 150
 463 |         step: 1
 464 | */
 465 | 
 466 | :root {
 467 |   --accent-h: 211; /* Accent hue */
 468 |   --accent-s: 100%; /* Accent saturation */
 469 |   --accent-l: 50%; /* Accent lightness Light Mode */
 470 |   --accent-d: calc(var(--accent-l) + 2%); /* Accent lightness Dark Mode */
 471 | 
 472 |   --color-black-rgb: 0, 0, 0;
 473 |   --color-white-rgb: 255, 255, 255;
 474 | 
 475 |   --text: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans,
 476 |     Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
 477 |   --text-editor: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
 478 |     Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
 479 |   --font-monospace: Menlo, SFMono-Regular, Consolas, "Roboto Mono", monospace;
 480 | 
 481 |   /* Sizes, weights, padding */
 482 | 
 483 |   --rem: 18px;
 484 | 
 485 |   --editor-font-size: 18px;
 486 |   --editor-line-height: 1.88889;
 487 |   --editor-font-weight: 400;
 488 |   --editor-font-features: "";
 489 | 
 490 |   --scale-small: 90;
 491 | 
 492 |   --font-normal: 16px;
 493 |   --font-small: 14px;
 494 |   --font-smaller: 11px;
 495 |   --font-smallest: 10px;
 496 |   --normal-weight: 400;
 497 |   --bold-weight: 600;
 498 |   --line-width: 42rem;
 499 |   --line-height: 1.5;
 500 |   --max-width: 100%;
 501 |   --nested-padding: 3.5%;
 502 |   --icon-muted: 0.4;
 503 |   --border-width: 1px;
 504 |   --border-width-alt: 1px;
 505 |   --titlebar-height: 28px;
 506 |   --header-width: 42px;
 507 | 
 508 |   --radius-s: 4px;
 509 |   --radius-m: 6px;
 510 |   --radius-l: 10px;
 511 |   --radius-xl: 20px;
 512 | 
 513 |   --cursor: pointer;
 514 | 
 515 |   --strong-weight: var(--bold-weight);
 516 |   --strong-color: inherit;
 517 |   --em-color: inherit;
 518 |   --workspace-drawer-ribbon-width: 46px;
 519 | }
 520 | 
 521 | .theme-light {
 522 |   --red-rgb: 255, 59, 48;
 523 |   --orange-rgb: 255, 149, 0;
 524 |   --yellow-rgb: 255, 204, 0;
 525 |   --green-rgb: 52, 199, 89;
 526 |   --teal-rgb: 90, 200, 250;
 527 |   --blue-rgb: 0, 122, 255;
 528 |   --indigo-rgb: 88, 86, 214;
 529 |   --purple-rgb: 175, 82, 222;
 530 |   --pink-rgb: 255, 45, 85;
 531 | 
 532 |   --accent-hsl: var(--accent-h), var(--accent-s), var(--accent-l);
 533 | 
 534 |   --foreground-rgb: var(--color-black-rgb);
 535 |   --background-rgb: var(--color-white-rgb);
 536 | 
 537 |   --shade-90: rgba(var(--foreground-rgb), 0.9);
 538 |   --shade-80: rgba(var(--foreground-rgb), 0.8);
 539 |   --shade-70: rgba(var(--foreground-rgb), 0.7);
 540 |   --shade-60: rgba(var(--foreground-rgb), 0.6);
 541 |   --shade-50: rgba(var(--foreground-rgb), 0.5);
 542 |   --shade-40: rgba(var(--foreground-rgb), 0.4);
 543 |   --shade-30: rgba(var(--foreground-rgb), 0.3);
 544 |   --shade-20: rgba(var(--foreground-rgb), 0.2);
 545 |   --shade-10: rgba(var(--foreground-rgb), 0.1);
 546 |   --shade-5: rgba(var(--foreground-rgb), 0.05);
 547 |   --shade-3: rgba(var(--foreground-rgb), 0.03);
 548 |   --shade-2: rgba(var(--foreground-rgb), 0.02);
 549 |   --shade-0: rgb(var(--background-rgb));
 550 | 
 551 |   --shade-plus-darker: var(--shade-5);
 552 |   --shade-plus-darker-hsl: hsl(0, 0%, 95%);
 553 |   --background-primary: var(--shade-0);
 554 |   --background-primary-alt: var(--shade-3);
 555 |   --background-secondary: var(--shade-3);
 556 |   --background-secondary-alt: var(--shade-3);
 557 |   --background-tertiary: var(--shade-3);
 558 |   --background-modifier-border: var(--shade-plus-darker);
 559 |   --background-modifier-border-hover: var(--shade-plus-darker);
 560 |   --background-modifier-border-focus: var(--shade-plus-darker);
 561 |   --text-normal: var(--shade-90);
 562 |   --text-muted: var(--shade-50);
 563 |   --text-faint: var(--shade-30);
 564 |   --background-transparent: transparent;
 565 |   --background-translucent: rgba(245, 245, 245, 0.75);
 566 |   --background-match-highlight: hsla(var(--accent-hsl), 0.2);
 567 |   --background-modifier-accent: hsl(
 568 |     var(--accent-h),
 569 |     var(--accent-s),
 570 |     calc(var(--accent-l) + 10%)
 571 |   );
 572 |   --text-accent: hsl(var(--accent-hsl));
 573 |   --text-accent-hover: hsl(
 574 |     var(--accent-h),
 575 |     var(--accent-s),
 576 |     calc(var(--accent-l) - 10%)
 577 |   );
 578 |   --text-on-accent: white;
 579 |   --icon-hex: 000;
 580 |   --interactive-accent: hsl(var(--accent-hsl));
 581 |   --interactive-accent-hover: hsl(
 582 |     var(--accent-h),
 583 |     var(--accent-s),
 584 |     calc(var(--accent-l) - 10%)
 585 |   );
 586 |   --quote-opening-modifier: var(--shade-70);
 587 |   --interactive-accent-rgb: var(--shade-70);
 588 |   --text-selection: hsl(var(--accent-h), var(--accent-s), 96%);
 589 |   --text-highlight-bg: rgba(255, 224, 0, 0.5);
 590 |   --text-highlight-bg-active: rgba(0, 0, 0, 0.1);
 591 |   --background-modifier-cover: rgba(170, 170, 170, 0.6);
 592 | 
 593 |   --opacity-translucency: 1;
 594 | }
 595 | 
 596 | .theme-dark {
 597 |   --accent-h: 210; /* Accent hue */
 598 | 
 599 |   --red-rgb: 255, 69, 58;
 600 |   --orange-rgb: 255, 159, 10;
 601 |   --yellow-rgb: 255, 214, 10;
 602 |   --green-rgb: 50, 215, 75;
 603 |   --teal-rgb: 100, 210, 255;
 604 |   --blue-rgb: 10, 132, 255;
 605 |   --indigo-rgb: 94, 92, 230;
 606 |   --purple-rgb: 191, 90, 242;
 607 |   --pink-rgb: 255, 45, 85;
 608 | 
 609 |   --accent-hsl: var(--accent-h), var(--accent-s), var(--accent-d);
 610 | 
 611 |   --foreground-rgb: 204, 204, 204;
 612 |   --background-rgb: 30, 30, 30;
 613 | 
 614 |   --shade-90: rgba(var(--foreground-rgb), 0.9);
 615 |   --shade-80: rgba(var(--foreground-rgb), 0.8);
 616 |   --shade-70: rgba(var(--foreground-rgb), 0.7);
 617 |   --shade-60: rgba(var(--foreground-rgb), 0.6);
 618 |   --shade-50: rgba(var(--foreground-rgb), 0.5);
 619 |   --shade-40: rgba(var(--foreground-rgb), 0.4);
 620 |   --shade-30: rgba(var(--foreground-rgb), 0.3);
 621 |   --shade-20: rgba(var(--foreground-rgb), 0.2);
 622 |   --shade-10: rgba(var(--foreground-rgb), 0.1);
 623 |   --shade-5: rgba(var(--foreground-rgb), 0.05);
 624 |   --shade-3: rgba(var(--foreground-rgb), 0.03);
 625 |   --shade-2: rgba(var(--foreground-rgb), 0.02);
 626 |   --shade-0: rgb(var(--background-rgb));
 627 | 
 628 |   --shade-plus-darker: rgba(255, 255, 255, 0.15);
 629 |   --shade-plus-darker-hsl: hsl(0, 0%, 16%);
 630 | 
 631 |   --dark-separator: hsl(0, 0%, 9%);
 632 | 
 633 |   --background-primary: var(--shade-0);
 634 |   --background-primary-alt: var(--shade-3);
 635 |   --background-secondary: var(--shade-3);
 636 |   --background-secondary-alt: var(--shade-3);
 637 |   --background-tertiary: var(--shade-3);
 638 |   --background-modifier-border: var(--shade-plus-darker);
 639 |   --background-modifier-border-hover: var(--shade-plus-darker);
 640 |   --background-modifier-border-focus: var(--shade-plus-darker);
 641 |   --background-modifier-box-shadow: rgba(0, 0, 0, 0.3);
 642 |   --text-normal: var(--shade-90);
 643 |   --text-muted: var(--shade-50);
 644 |   --text-faint: var(--shade-30);
 645 |   --background-transparent: transparent;
 646 |   --background-translucent: rgba(40, 40, 40, 0.6);
 647 |   --background-match-highlight: hsla(var(--accent-hsl), 0.2);
 648 |   --background-modifier-accent: hsl(
 649 |     var(--accent-h),
 650 |     var(--accent-s),
 651 |     calc(var(--accent-d) - 10%)
 652 |   );
 653 |   --text-accent: hsl(var(--accent-hsl));
 654 |   --text-accent-hover: hsl(
 655 |     var(--accent-h),
 656 |     var(--accent-s),
 657 |     calc(var(--accent-d) + 12%)
 658 |   );
 659 |   --text-on-accent: white;
 660 |   --icon-hex: FFF;
 661 |   --interactive-accent: hsl(var(--accent-hsl));
 662 |   --interactive-accent-hover: hsl(
 663 |     var(--accent-h),
 664 |     var(--accent-s),
 665 |     calc(var(--accent-d) - 15%)
 666 |   );
 667 |   --quote-opening-modifier: var(--shade-70);
 668 |   --interactive-accent-rgb: var(--shade-70);
 669 |   --text-selection: hsl(var(--accent-h), calc(var(--accent-s) - 50%), 20%);
 670 |   --text-highlight-bg: rgba(255, 177, 80, 0.3);
 671 |   --text-highlight-bg-active: rgba(255, 255, 255, 0.1);
 672 |   --background-modifier-cover: rgba(20, 20, 20, 0.6);
 673 | 
 674 |   --opacity-translucency: 1;
 675 | }
 676 | 
 677 | .is-mobile.theme-dark,
 678 | .is-mobile.theme-light {
 679 |   --background-modifier-cover: rgba(0, 0, 0, 0.25);
 680 | }
 681 | 
 682 | body {
 683 |   --editor-line-height-rem: calc(var(--editor-line-height) * 1rem);
 684 |   --editor-line-height-small: calc(
 685 |     var(--editor-line-height) * var(--scale-small) / 100
 686 |   );
 687 |   --editor-line-height-small-rem: calc(var(--editor-line-height-small) * 1rem);
 688 | }
 689 | 
 690 | body.is-mobile {
 691 |   padding: 0 !important;
 692 | }
 693 | 
 694 | .is-mobile .app-container {
 695 |   background-color: #000;
 696 | }
 697 | 
 698 | .is-mobile .horizontal-main-container {
 699 |   z-index: 2;
 700 | }
 701 | 
 702 | /* 
 703 |     ------------------------------------------------------------------
 704 | */
 705 | 
 706 | .hider-frameless .workspace-split.mod-right-split > .workspace-tabs,
 707 | .hider-frameless .workspace-split.mod-root .view-header {
 708 |   padding-top: 2px;
 709 | }
 710 | .hider-frameless:not(.is-fullscreen)
 711 |   .workspace-split.mod-left-split
 712 |   > .workspace-tabs {
 713 |   padding-top: 28px !important;
 714 | }
 715 | .hider-frameless
 716 |   .workspace-split.mod-right-split
 717 |   > .workspace-tabs
 718 |   ~ .workspace-tabs,
 719 | .hider-frameless
 720 |   .workspace-split.mod-left-split
 721 |   > .workspace-tabs
 722 |   ~ .workspace-tabs {
 723 |   padding-top: 0px;
 724 | }
 725 | .hider-frameless.is-fullscreen
 726 |   .workspace-split.mod-left-split
 727 |   > .workspace-tabs,
 728 | .hider-frameless.is-fullscreen .workspace-split.mod-root .view-header {
 729 |   padding-top: 0px;
 730 | }
 731 | 
 732 | /* 
 733 |     ------------------------------------------------------------------
 734 | */
 735 | 
 736 | body:not(.hider-ribbon):not(.hider-frameless) .workspace-ribbon.mod-left {
 737 |   padding-top: 5px;
 738 |   transition: padding-right 100ms ease, box-shadow 100ms ease;
 739 | }
 740 | 
 741 | body.is-fullscreen:not(.hider-ribbon):not(.hider-frameless)
 742 |   .workspace-ribbon.mod-left {
 743 |   padding-top: 10px;
 744 | }
 745 | 
 746 | body:not(.hider-ribbon):not(.hider-frameless)
 747 |   .workspace-ribbon.mod-left.is-collapsed {
 748 |   box-shadow: inset -10px 0 4px -10px rgba(0, 0, 0, 0.04);
 749 |   padding-right: 5px;
 750 | }
 751 | 
 752 | .hider-ribbon .workspace-ribbon-collapse-btn {
 753 |   display: none;
 754 | }
 755 | .hider-ribbon .workspace-ribbon.mod-right {
 756 |   pointer-events: none;
 757 | }
 758 | .hider-ribbon .workspace-ribbon.mod-left {
 759 |   position: absolute;
 760 |   margin: 0;
 761 |   overflow: visible;
 762 |   flex-basis: 0;
 763 |   bottom: 0;
 764 |   top: auto;
 765 |   display: flex !important;
 766 |   flex-direction: row;
 767 |   z-index: var(--layer-status-bar);
 768 |   opacity: 0;
 769 |   transition: opacity 0.25s ease-in-out;
 770 | 
 771 |   padding: 0;
 772 | 
 773 |   width: 30px;
 774 |   height: unset;
 775 |   filter: drop-shadow(0px 2px 10px rgba(0, 0, 0, 0.1));
 776 | }
 777 | 
 778 | .hider-ribbon .side-dock-actions,
 779 | .hider-ribbon .side-dock-settings {
 780 |   background: rgb(245, 245, 245);
 781 |   border-top: 1px solid var(--shade-10);
 782 | 
 783 |   display: flex;
 784 |   margin: 0;
 785 |   position: relative;
 786 | }
 787 | 
 788 | .theme-dark.hider-ribbon .side-dock-actions,
 789 | .theme-dark.hider-ribbon .side-dock-settings {
 790 |   background: rgb(60, 60, 60);
 791 |   border-color: var(--shade-2);
 792 | }
 793 | 
 794 | .hider-ribbon .side-dock-settings {
 795 |   border-right: 1px solid var(--shade-10);
 796 |   border-top-right-radius: var(--radius-m);
 797 | }
 798 | 
 799 | .hider-ribbon .side-dock-actions {
 800 |   padding: 5px 0 5px 5px;
 801 |   z-index: var(--layer-status-bar);
 802 | }
 803 | 
 804 | .hider-ribbon .workspace-ribbon.mod-left:after {
 805 |   content: none;
 806 | }
 807 | .hider-ribbon .workspace-ribbon.mod-left .side-dock-ribbon-action,
 808 | .workspace-ribbon.mod-left .side-dock-ribbon-action {
 809 |   line-height: 1;
 810 |   display: flex;
 811 |   align-items: center;
 812 |   justify-content: center;
 813 |   cursor: var(--cursor);
 814 |   color: var(--text-muted);
 815 |   padding: 4px 6px;
 816 |   margin-bottom: 5px;
 817 |   border-radius: var(--radius-s);
 818 | }
 819 | .hider-ribbon .workspace-ribbon.mod-left .side-dock-ribbon-action {
 820 |   margin-bottom: 0;
 821 |   margin-right: 5px;
 822 | }
 823 | .is-mobile .side-dock-ribbon-action {
 824 |   display: flex;
 825 |   align-items: center;
 826 |   justify-content: center;
 827 | }
 828 | .hider-ribbon .workspace-ribbon.mod-left:hover {
 829 |   opacity: 1;
 830 |   transition: opacity 0.25s ease-in-out;
 831 | }
 832 | .hider-ribbon .workspace-ribbon.mod-left .workspace-ribbon-collapse-btn {
 833 |   border-top: 1px solid var(--background-modifier-border);
 834 | }
 835 | .hider-ribbon .workspace-split.mod-left-split {
 836 |   margin: 0;
 837 | }
 838 | .hider-frameless .workspace-ribbon.mod-left.is-collapsed {
 839 |   background-color: var(--shade-0);
 840 | }
 841 | 
 842 | .hider-ribbon .workspace-ribbon {
 843 |   padding: 0;
 844 | }
 845 | 
 846 | .workspace-ribbon.mod-left {
 847 |   background: transparent;
 848 |   padding: 0 0 0 5px;
 849 |   position: relative;
 850 |   flex-basis: unset;
 851 |   flex-shrink: 0;
 852 |   flex-grow: 0;
 853 | }
 854 | 
 855 | .workspace-split.mod-left-split {
 856 |   margin-left: 0;
 857 | }
 858 | 
 859 | .mobile-toolbar-option {
 860 |   min-width: none;
 861 | }
 862 | 
 863 | .mobile-toolbar {
 864 |   background-color: var(--background-primary);
 865 |   transition: none !important;
 866 |   transform: none !important;
 867 | }
 868 | 
 869 | /* 
 870 |       ------------------------------------------------------------------
 871 |   */
 872 | 
 873 | .workspace-ribbon.mod-left {
 874 |   transition: border-color 0s ease-in-out 0s, background-color 0s ease-in-out 0s;
 875 | }
 876 | .workspace-ribbon.mod-left.is-collapsed {
 877 |   border-color: transparent;
 878 |   background-color: transparent;
 879 |   transition: border-color 0s ease-in-out 0.1s,
 880 |     background-color 0s ease-in-out 0.2s;
 881 | }
 882 | .is-right-sidedock-collapsed .workspace-split.mod-right-split {
 883 |   margin-right: 0px;
 884 | }
 885 | .view-actions {
 886 |   background-color: transparent;
 887 |   margin: 0;
 888 |   padding: 0;
 889 |   display: flex;
 890 |   align-items: center;
 891 | }
 892 | .view-actions .view-action {
 893 |   align-items: center;
 894 |   border-radius: var(--radius-s);
 895 |   color: var(--shade-40);
 896 |   cursor: var(--cursor);
 897 |   display: flex;
 898 |   justify-content: center;
 899 |   line-height: 1;
 900 |   margin: 0 0 0 5px;
 901 |   opacity: 1;
 902 |   padding: 4px 6px;
 903 |   position: static;
 904 | }
 905 | .view-action.is-active {
 906 |   opacity: 1;
 907 | }
 908 | .view-actions .view-action:last-child {
 909 |   margin-left: 5px;
 910 | }
 911 | .view-action:hover {
 912 |   color: var(--text-muted);
 913 |   background-color: var(--shade-plus-darker);
 914 | }
 915 | .workspace-ribbon:not(.is-collapsed) ~ .mod-root .view-actions,
 916 | .mod-right.is-collapsed ~ .mod-root .view-header:hover .view-actions {
 917 |   opacity: 1;
 918 |   transition: opacity 0.25s ease-in-out;
 919 | }
 920 | 
 921 | /* 
 922 |       ------------------------------------------------------------------
 923 |   */
 924 | 
 925 | .theme-dark input::selection,
 926 | .theme-dark div[contenteditable]::selection {
 927 |   background: hsl(var(--accent-h), calc(var(--accent-s) - 50%), 44%);
 928 | }
 929 | 
 930 | /* Headings and fonts */
 931 | 
 932 | strong {
 933 |   font-weight: var(--bold-weight);
 934 | }
 935 | 
 936 | body:not(.hider-frameless):not(.is-fullscreen):not(.is-mobile) {
 937 |   padding-top: var(--titlebar-height) !important;
 938 | }
 939 | 
 940 | html,
 941 | body,
 942 | input,
 943 | textarea,
 944 | button,
 945 | .cm-s-obsidian .cm-formatting-hashtag,
 946 | .cm-s-obsidian {
 947 |   font-size: var(--rem);
 948 |   font-family: var(--text) !important;
 949 |   font-weight: var(--normal-weight);
 950 |   line-height: var(--line-height);
 951 |   -webkit-font-smoothing: antialiased !important;
 952 |   -moz-osx-font-smoothing: grayscale;
 953 | }
 954 | .view-header-title,
 955 | .file-embed-title,
 956 | .markdown-embed-title {
 957 |   text-align: left;
 958 |   font-size: 14px;
 959 |   font-weight: 500;
 960 | }
 961 | .view-header-title:before {
 962 |   display: none;
 963 | }
 964 | 
 965 | .is-mobile .view-header-title-container,
 966 | .is-mobile .view-header {
 967 |   height: unset;
 968 | }
 969 | 
 970 | .is-mobile .view-header-title {
 971 |   padding: 10px 0;
 972 |   line-height: 1;
 973 | }
 974 | 
 975 | /* Menu */
 976 | .menu {
 977 |   color: var(--shade-90);
 978 |   border: 1px solid var(--shade-10);
 979 |   background: rgb(245, 245, 245);
 980 |   box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
 981 | 
 982 |   font-weight: 500;
 983 |   border-radius: var(--radius-m);
 984 |   padding: 10px 14px;
 985 | }
 986 | 
 987 | .theme-dark .menu {
 988 |   border: 1px solid var(--shade-20);
 989 |   background: rgb(60, 60, 60);
 990 | }
 991 | 
 992 | .menu-item {
 993 |   font-size: 13px;
 994 |   line-height: 1;
 995 |   border-radius: var(--radius-s);
 996 |   padding: 5px 10px;
 997 |   margin: 0 -10px;
 998 |   display: flex;
 999 |   align-items: center;
1000 | }
1001 | 
1002 | .menu-separator {
1003 |   height: 0;
1004 |   margin: 10px 0;
1005 |   border-bottom: 1px solid var(--shade-plus-darker);
1006 | }
1007 | 
1008 | .menu-item-icon {
1009 |   color: var(--text-muted);
1010 |   position: static;
1011 |   width: unset;
1012 |   margin-right: 6px;
1013 |   display: flex;
1014 | }
1015 | 
1016 | .is-mobile .menu-item-icon {
1017 |   margin-right: 10px;
1018 | }
1019 | 
1020 | .workspace-drawer {
1021 |   background: var(--background-primary);
1022 |   width: calc(100vw - 54px);
1023 | }
1024 | 
1025 | .workspace-drawer-ribbon {
1026 |   background: transparent;
1027 |   width: var(--workspace-drawer-ribbon-width);
1028 | }
1029 | 
1030 | .workspace-drawer.mod-left .workspace-drawer-active-tab-container {
1031 |   padding-left: 0;
1032 | }
1033 | 
1034 | .workspace-drawer.mod-left .workspace-drawer-header {
1035 |   padding-left: 0.5rem;
1036 | }
1037 | 
1038 | .is-mobile .side-dock-ribbon-action > svg {
1039 |   width: 26px;
1040 |   height: 26px;
1041 | }
1042 | 
1043 | .workspace-drawer.mod-left .workspace-drawer-inner {
1044 |   padding-left: calc(
1045 |     var(--workspace-drawer-ribbon-width) + env(safe-area-inset-left)
1046 |   );
1047 | }
1048 | 
1049 | .workspace-drawer-inner {
1050 |   padding-top: env(safe-area-inset-top);
1051 |   padding-bottom: env(safe-area-inset-bottom);
1052 | }
1053 | 
1054 | .is-mobile .workspace-split.mod-root {
1055 |   padding-top: env(safe-area-inset-top);
1056 | }
1057 | 
1058 | .pull-down-action {
1059 |   padding-top: calc(env(safe-area-inset-top) + 30px);
1060 | }
1061 | 
1062 | .workspace-drawer-header-icon {
1063 |   display: flex;
1064 |   align-items: center;
1065 |   justify-content: center;
1066 |   align-self: flex-start;
1067 | }
1068 | 
1069 | .workspace-drawer-header-name {
1070 |   font-weight: 500;
1071 |   line-height: 1;
1072 |   height: auto;
1073 | }
1074 | 
1075 | .workspace-drawer-header-info:empty {
1076 |   margin: 0;
1077 | }
1078 | 
1079 | .workspace-drawer-header-left {
1080 |   justify-content: center;
1081 | }
1082 | 
1083 | .workspace-drawer.mod-right {
1084 |   padding-right: env(safe-area-inset-right);
1085 | }
1086 | 
1087 | .workspace-drawer-active-tab-icon {
1088 |   display: none;
1089 | }
1090 | 
1091 | .workspace-drawer-tab-option-item {
1092 |   margin: 0;
1093 |   padding: 0.66rem 0.5rem;
1094 | }
1095 | 
1096 | .workspace-drawer-active-tab-header {
1097 |   margin: 0;
1098 |   padding: 0 0.5rem 0.5rem;
1099 | }
1100 | 
1101 | .workspace-drawer-tab-option-item-title,
1102 | .workspace-drawer-active-tab-title {
1103 |   font-size: 1rem;
1104 |   font-weight: 500;
1105 |   width: 100%;
1106 | }
1107 | 
1108 | .workspace-drawer-header {
1109 |   padding: 1rem;
1110 | }
1111 | 
1112 | .workspace-drawer-header-info {
1113 |   margin-bottom: 0;
1114 | }
1115 | 
1116 | .workspace-drawer-tab-container > * {
1117 |   padding: 0 0.5rem;
1118 | }
1119 | 
1120 | .workspace-drawer-active-tab-back-icon {
1121 |   flex-grow: 0;
1122 |   flex-shrink: 0;
1123 |   flex-basis: 0;
1124 |   margin-right: 2px;
1125 | }
1126 | 
1127 | /* --------------- */
1128 | /* Modals */
1129 | 
1130 | .modal-bg {
1131 |   opacity: 1 !important;
1132 | }
1133 | .progress-bar-message {
1134 |   color: var(--text-faint);
1135 | }
1136 | .modal.mod-sync-history {
1137 |   background-color: var(--shade-0);
1138 | }
1139 | .modal {
1140 |   border: 1px solid var(--shade-30);
1141 |   background: var(--background-primary);
1142 |   border-radius: 10px;
1143 |   max-width: 1000px;
1144 |   max-height: 90vh;
1145 | }
1146 | .is-mobile .modal {
1147 |   border: none;
1148 | }
1149 | .modal-content {
1150 |   padding-left: 10px;
1151 |   padding-top: 2px;
1152 | }
1153 | .community-plugin.modal-content,
1154 | .modal.mod-settings .modal-content {
1155 |   padding-left: 0;
1156 | }
1157 | .modal.mod-settings .modal-content {
1158 |   padding-top: 0;
1159 | }
1160 | .modal-title {
1161 |   padding: 0 10px;
1162 | }
1163 | .modal.mod-settings .vertical-tab-content-container {
1164 |   border-left: var(--border-width) solid var(--background-modifier-border);
1165 |   padding-bottom: 0;
1166 |   padding-right: 0;
1167 | }
1168 | .modal.mod-settings {
1169 |   max-width: 1000px;
1170 |   width: 90vw;
1171 |   height: 90vh;
1172 | }
1173 | 
1174 | .is-mobile .modal.mod-community-theme, 
1175 | .is-mobile .modal.mod-community-plugin,
1176 | .is-mobile .prompt,
1177 | .is-mobile .modal.mod-settings {
1178 |   width: 100vw; 
1179 |   height: 90vh;
1180 |   max-height: calc(100% - env(safe-area-inset-top) - env(safe-area-inset-bottom) - 70px);
1181 |   max-width: none;
1182 | }
1183 | 
1184 | .modal.mod-settings .vertical-tab-header {
1185 |   height: 90vh;
1186 | }
1187 | 
1188 | .modal.mod-settings .vertical-tab-content-container {
1189 |   height: 90vh;
1190 | }
1191 | 
1192 | .modal.mod-community-theme,
1193 | .modal.mod-community-plugin {
1194 |   width: 90vw;
1195 | }
1196 | 
1197 | input.prompt-input,
1198 | input.prompt-input:hover {
1199 |   border: 0;
1200 |   background: var(--background-primary);
1201 |   padding-left: 10px;
1202 |   height: unset;
1203 |   flex-grow: 0;
1204 |   flex-shrink: 0;
1205 | }
1206 | .modal-container .suggestion-item.is-selected {
1207 |   border-radius: var(--radius-m);
1208 |   background: var(--background-tertiary);
1209 | }
1210 | .suggestion-item.is-selected,
1211 | .menu-item:hover {
1212 |   background-color: var(--shade-plus-darker);
1213 | }
1214 | .suggestion-item,
1215 | .suggestion-empty {
1216 |   font-size: var(--font-normal);
1217 | }
1218 | .workspace-drawer,
1219 | .modal,
1220 | .prompt,
1221 | .suggestion-container {
1222 |   box-shadow: 0px 20px 30px rgba(0, 0, 0, 0.2);
1223 | }
1224 | .is-mobile .modal,
1225 | .is-mobile .prompt,
1226 | .is-mobile .suggestion-container {
1227 |   border-radius: 10px 10px 0 0;
1228 |   padding: 10px 10px 0;
1229 |   overflow: hidden !important;
1230 | }
1231 | .is-mobile .modal.mod-settings .vertical-tab-header, .is-mobile .modal.mod-settings .vertical-tab-nav-item {
1232 |   border-radius: 10px 10px 0 0;
1233 | }
1234 | .is-mobile .prompt-results {
1235 |   padding-top: 1rem;
1236 | }
1237 | .is-mobile .suggestion-item {
1238 |   padding: 10px;
1239 | }
1240 | .is-mobile .suggestion-hotkey {
1241 |   float: right;
1242 |   display: flex;
1243 |   line-height: 1;
1244 |   flex-shrink: 0;
1245 |   flex-grow: 0;
1246 |   padding: 7px 10px;
1247 |   background-color: var(--shade-plus-darker);
1248 |   margin-left: 5px;
1249 | }
1250 | .suggestion-container {
1251 |   border: none;
1252 | }
1253 | .prompt-instructions {
1254 |   color: var(--text-muted);
1255 | }
1256 | .prompt-instruction-command {
1257 |   font-weight: 600;
1258 | }
1259 | 
1260 | .modal-container.mod-confirmation .modal-content {
1261 |   padding: 10px;
1262 |   margin: 1rem -10px 0;
1263 | }
1264 | 
1265 | .modal-container.mod-confirmation .modal-title {
1266 |   font-weight: 500;
1267 |   text-align: left;
1268 |   font-size: 1rem;
1269 |   line-height: 1.3;
1270 |   margin: 0 -10px;
1271 | }
1272 | 
1273 | .modal-container.mod-confirmation .modal-content > .input-label {
1274 |   width: auto;
1275 |   display: block;
1276 |   text-align: left;
1277 |   font-size: 14px;
1278 |   font-weight: 500;
1279 |   margin: 0 0 4px;
1280 | }
1281 | 
1282 | .modal-container.mod-confirmation .modal-content > input {
1283 |   width: 100%;
1284 | }
1285 | 
1286 | .modal-container.mod-confirmation .modal {
1287 |   width: auto;
1288 |   min-width: 350px;
1289 |   padding: 1.5rem;
1290 | }
1291 | 
1292 | /* --------------- */
1293 | /* Drag ghost */
1294 | 
1295 | .workspace-drop-overlay {
1296 |   opacity: 1;
1297 |   background-color: transparent;
1298 | }
1299 | 
1300 | .drag-ghost {
1301 |   opacity: 0.8;
1302 |   border-radius: 0 !important;
1303 | }
1304 | 
1305 | .workspace-drop-overlay:before {
1306 |   opacity: 1;
1307 |   box-shadow: inset 0 0 0 4px hsla(var(--accent-hsl), 0.5);
1308 |   background-color: transparent;
1309 |   border-radius: 0 !important;
1310 | }
1311 | 
1312 | .workspace-drop-overlay.mod-drag {
1313 |   opacity: 1;
1314 | }
1315 | 
1316 | .workspace-drop-overlay.mod-drag:before {
1317 |   opacity: 1;
1318 |   background-color: var(--shade-2);
1319 | }
1320 | 
1321 | /* --------------- */
1322 | /* Workspace */
1323 | 
1324 | .workspace {
1325 |   background-color: var(--shade-5);
1326 | }
1327 | 
1328 | .is-translucent .workspace {
1329 |   background-color: var(--background-translucent);
1330 | }
1331 | 
1332 | .workspace-split.mod-root {
1333 |   background-color: var(--background-primary);
1334 | }
1335 | 
1336 | .workspace-split.mod-right-split {
1337 |   background-color: var(--background-primary);
1338 | }
1339 | 
1340 | body.hider-ribbon
1341 |   .workspace-split.mod-left-split.is-collapsed
1342 |   + .workspace-split.mod-root {
1343 |   border-top-left-radius: 0;
1344 | }
1345 | 
1346 | body:not(.is-translucent):not(.hider-frameless):not(.is-mobile)
1347 |   .workspace-split.mod-root,
1348 | body:not(.is-translucent):not(.hider-frameless):not(.is-mobile)
1349 |   .workspace-split.mod-right-split {
1350 |   border-top: 1px solid var(--shade-plus-darker);
1351 | }
1352 | 
1353 | body.theme-dark:not(.is-translucent):not(.hider-frameless)
1354 |   .workspace-split.mod-root,
1355 | body.theme-dark:not(.is-translucent):not(.hider-frameless)
1356 |   .workspace-split.mod-right-split {
1357 |   border-top: 1px solid var(--dark-separator);
1358 | }
1359 | 
1360 | .empty-state {
1361 |   background-color: var(--background-primary);
1362 | }
1363 | .workspace-split.mod-vertical > .workspace-split {
1364 |   padding: 0;
1365 | }
1366 | .workspace-split .workspace-tabs {
1367 |   background: var(--background-primary);
1368 | }
1369 | 
1370 | .workspace-split:not(.mod-right-split) .workspace-tabs {
1371 |   background-color: transparent;
1372 |   box-shadow: inset -10px 0 4px -10px rgba(0, 0, 0, 0.04);
1373 | }
1374 | .workspace-split.mod-root
1375 |   > .workspace-leaf:first-of-type
1376 |   .workspace-leaf-content,
1377 | .workspace-split.mod-root
1378 |   > .workspace-leaf:last-of-type
1379 |   .workspace-leaf-content {
1380 |   border-top-right-radius: 0px;
1381 |   border-top-left-radius: 0px;
1382 | }
1383 | .workspace-leaf-resize-handle {
1384 |   z-index: 11;
1385 |   transition: background-color 200ms ease-in-out, box-shadow 200ms ease-in-out;
1386 | }
1387 | .workspace-split.mod-root.mod-horizontal .workspace-leaf-resize-handle,
1388 | .workspace-split.mod-root.mod-vertical .workspace-leaf-resize-handle {
1389 |   border-width: 0;
1390 |   background-color: var(--shade-plus-darker-hsl);
1391 | }
1392 | .theme-dark
1393 |   .workspace-split.mod-root.mod-horizontal
1394 |   .workspace-leaf-resize-handle,
1395 | .theme-dark
1396 |   .workspace-split.mod-root.mod-vertical
1397 |   .workspace-leaf-resize-handle {
1398 |   background-color: var(--dark-separator);
1399 | }
1400 | .workspace-split.mod-horizontal > * > .workspace-leaf-resize-handle {
1401 |   height: 2px;
1402 |   border-bottom: none;
1403 | }
1404 | .workspace-split.mod-vertical > * > .workspace-leaf-resize-handle,
1405 | .workspace-split.mod-left-split > .workspace-leaf-resize-handle,
1406 | .workspace-split.mod-right-split > .workspace-leaf-resize-handle {
1407 |   width: 2px;
1408 | }
1409 | .workspace-split.mod-right-split > .workspace-leaf-resize-handle {
1410 |   border-left: none;
1411 |   background-color: var(--shade-plus-darker-hsl);
1412 |   width: 2px;
1413 |   top: 0;
1414 | }
1415 | .theme-dark .workspace-split.mod-right-split > .workspace-leaf-resize-handle {
1416 |   background-color: var(--dark-separator);
1417 | }
1418 | .workspace-split.mod-left-split > .workspace-leaf-resize-handle {
1419 |   background: transparent;
1420 |   border-right: none;
1421 |   width: 2px !important;
1422 |   top: 0;
1423 | }
1424 | 
1425 | .workspace-split.mod-right-split > .workspace-leaf-resize-handle:active,
1426 | .workspace-split.mod-vertical > * > .workspace-leaf-resize-handle:active,
1427 | .workspace-split.mod-left-split > .workspace-leaf-resize-handle:active {
1428 |   border-width: 0;
1429 |   background-color: var(--shade-10) !important;
1430 |   box-shadow: 1px 0 0 var(--shade-10), -1px 0 0 var(--shade-10);
1431 | }
1432 | 
1433 | .workspace-split.mod-horizontal > * > .workspace-leaf-resize-handle:active {
1434 |   background-color: var(--shade-10) !important;
1435 |   box-shadow: 0 1px 0 var(--shade-10), 0 -1px 0 var(--shade-10);
1436 | }
1437 | 
1438 | .workspace-tabs .workspace-leaf-content[data-type="markdown"] {
1439 |   border-top: 2px solid var(--shade-3);
1440 | }
1441 | 
1442 | .theme-dark .workspace-tabs .workspace-leaf-content[data-type="markdown"] {
1443 |   border-top-color: var(--dark-separator);
1444 | }
1445 | 
1446 | .workspace-tabs
1447 |   .workspace-leaf-content[data-type="markdown"]
1448 |   .markdown-preview-view {
1449 |   padding-top: 1.5rem !important;
1450 | }
1451 | 
1452 | .workspace-split.mod-right-split .workspace-tabs .workspace-leaf {
1453 |   border-top-right-radius: 0;
1454 | }
1455 | 
1456 | .workspace-tabs .workspace-leaf .workspace-leaf-content > .view-content > * {
1457 |   padding-left: 10px;
1458 |   padding-right: 10px;
1459 | }
1460 | 
1461 | .workspace-tabs
1462 |   .workspace-leaf
1463 |   .workspace-leaf-content
1464 |   > .view-content
1465 |   > *:last-child {
1466 |   margin-bottom: 2.5rem;
1467 | }
1468 | 
1469 | .workspace-tabs
1470 |   .workspace-leaf-content:not([data-type="markdown"])
1471 |   .view-content {
1472 |   font-size: 14px;
1473 | }
1474 | 
1475 | .workspace-leaf {
1476 |   border-left: 0px;
1477 | }
1478 | .workspace-leaf.is-highlighted:before {
1479 |   width: calc(100% - 2px);
1480 |   height: calc(100% - 2px);
1481 |   border: 1px solid transparent;
1482 |   box-shadow: inset 0 0 0 4px hsla(var(--accent-hsl), 0.5);
1483 |   background-color: transparent;
1484 | }
1485 | .mod-horizontal .workspace-leaf {
1486 |   border-bottom: 0px;
1487 |   background-color: transparent;
1488 |   box-shadow: none !important;
1489 | }
1490 | .workspace-leaf:not(.mod-active) .view-header-icon,
1491 | .workspace-leaf:not(.mod-active) .view-action {
1492 |   color: var(--shade-30);
1493 | }
1494 | 
1495 | .workspace-tab-container-inner {
1496 |   background: var(--shade-plus-darker);
1497 |   flex-grow: 0;
1498 |   flex-shrink: 1;
1499 |   width: unset;
1500 |   max-width: unset;
1501 |   border-bottom: none;
1502 |   margin: 0;
1503 |   padding: 1px;
1504 |   border-radius: var(--radius-s);
1505 |   box-shadow: inset 0px 0px 4px rgba(var(--color-black-rgb), 0.04);
1506 | }
1507 | .theme-dark .workspace-tab-container-inner {
1508 |   background: rgba(var(--color-black-rgb), 0.2);
1509 | }
1510 | .workspace-tab-header.is-before-active .workspace-tab-header-inner,
1511 | .workspace-tab-header.is-after-active,
1512 | .workspace-tab-header.is-after-active .workspace-tab-header-inner,
1513 | .workspace-tab-header.is-before-active,
1514 | .workspace-tab-header.is-after-active {
1515 |   background: transparent;
1516 | }
1517 | .workspace-tabs {
1518 |   border: 0;
1519 |   padding-right: 0;
1520 |   font-size: 100%;
1521 | }
1522 | .workspace-tab-header-container {
1523 |   border: 0 !important;
1524 |   background-color: transparent;
1525 |   height: unset;
1526 |   padding: 5px 10px 10px;
1527 | }
1528 | .workspace-tab-container-before,
1529 | .workspace-tab-container-after {
1530 |   width: 0;
1531 | }
1532 | 
1533 | .is-fullscreen .workspace-tab-header-container,
1534 | .mod-right-split .workspace-tab-header-container {
1535 |   padding: 10px;
1536 | }
1537 | .workspace-tab-header {
1538 |   color: var(--text-muted);
1539 |   cursor: var(--cursor);
1540 |   opacity: 1;
1541 |   border-radius: var(--radius-s) !important;
1542 |   padding: 4px 6px;
1543 | }
1544 | 
1545 | .workspace-tab-header + .workspace-tab-header {
1546 |   margin-left: 1px;
1547 | }
1548 | 
1549 | .workspace-tab-header.is-active,
1550 | .workspace-tab-header.is-active:hover,
1551 | .workspace-tab-header:hover {
1552 |   color: var(--text-muted);
1553 |   background-color: var(--shade-0);
1554 |   box-shadow: 0px 0.5px 1px 0.5px rgba(var(--color-black-rgb), 0.1);
1555 | }
1556 | 
1557 | .theme-dark .workspace-tab-header.is-active,
1558 | .theme-dark .workspace-tab-header.is-active:hover,
1559 | .theme-dark .workspace-tab-header:hover {
1560 |   color: var(--shade-80);
1561 |   background-color: var(--shade-20);
1562 | }
1563 | 
1564 | .workspace-tab-header-inner-icon {
1565 |   display: flex;
1566 | }
1567 | 
1568 | .workspace-tab-header,
1569 | .workspace-tab-header-inner,
1570 | .workspace-tab-container-before,
1571 | .workspace-tab-container-after {
1572 |   transition: none;
1573 | }
1574 | 
1575 | /* --------------- */
1576 | /* Window frame */
1577 | .is-mobile .safe-area-top-cover {
1578 |   background-color: var(--background-secondary);
1579 |   height: env(safe-area-inset-top);
1580 |   z-index: 1;
1581 | }
1582 | .is-mobile .titlebar {
1583 |   background: var(--background-secondary);
1584 |   height: env(safe-area-inset-top) !important;
1585 |   padding: 0 !important;
1586 |   position: relative !important;
1587 | }
1588 | 
1589 | body:not(.is-mobile) .titlebar {
1590 |   border-bottom: none;
1591 |   background: var(--shade-5);
1592 |   height: var(--titlebar-height) !important;
1593 |   top: 0 !important;
1594 |   padding-top: 0 !important;
1595 | }
1596 | 
1597 | body.hider-frameless:not(.is-mobile) .titlebar {
1598 |   background: transparent;
1599 | }
1600 | 
1601 | body:not(.hider-frameless):not(.is-mobile).is-translucent .titlebar {
1602 |   background-color: var(--background-translucent);
1603 | }
1604 | 
1605 | .hider-frameless .titlebar {
1606 |   border-bottom: none;
1607 | }
1608 | .titlebar-inner {
1609 |   height: var(--titlebar-height);
1610 |   color: var(--text-muted);
1611 | }
1612 | 
1613 | .titlebar-button-container {
1614 |   height: var(--titlebar-height);
1615 |   top: 0;
1616 |   display: flex;
1617 |   align-items: center;
1618 | }
1619 | 
1620 | .titlebar-button-container.mod-left {
1621 |   opacity: 0;
1622 |   transition: opacity 100ms ease-out;
1623 | }
1624 | 
1625 | .titlebar:hover .titlebar-button-container.mod-left {
1626 |   opacity: 1;
1627 | }
1628 | 
1629 | .titlebar-text {
1630 |   display: none;
1631 |   color: var(--text-faint);
1632 | }
1633 | 
1634 | .titlebar-button {
1635 |   opacity: 1;
1636 |   cursor: var(--cursor);
1637 |   padding: 2px 4px;
1638 |   border-radius: var(--radius-s);
1639 |   line-height: 1;
1640 |   display: flex;
1641 | }
1642 | 
1643 | .titlebar-button:hover {
1644 |   background-color: var(--shade-plus-darker);
1645 | }
1646 | 
1647 | .titlebar-button-container.mod-left .titlebar-button {
1648 |   margin-right: 5px;
1649 | }
1650 | 
1651 | .titlebar-button-container.mod-right .titlebar-button {
1652 |   margin-left: 0;
1653 |   border-radius: 0;
1654 |   height: 100%;
1655 |   align-items: center;
1656 |   padding: 2px 15px;
1657 | }
1658 | 
1659 | .titlebar-button.mod-close:hover {
1660 |   background-color: rgb(var(--red-rgb));
1661 |   color: rgb(var(--color-white-rgb));
1662 | }
1663 | 
1664 | /* --------------- */
1665 | /* Title Bar */
1666 | 
1667 | .view-actions {
1668 |   margin-right: 1px;
1669 |   z-index: 15;
1670 |   background: var(--background-primary);
1671 | }
1672 | .view-header {
1673 |   height: unset;
1674 |   display: flex;
1675 |   align-items: center;
1676 |   padding: 6px 10px !important;
1677 | }
1678 | .mod-macos.hider-frameless.hider-ribbon:not(.plugin-sliding-panes-rotate-header):not(.is-fullscreen)
1679 |   .workspace-split.mod-left-split.is-collapsed
1680 |   + .mod-root
1681 |   .workspace-leaf:first-of-type
1682 |   .view-header {
1683 |   padding-left: 70px !important;
1684 | }
1685 | 
1686 | .mod-macos.hider-frameless:not(.plugin-sliding-panes-rotate-header):not(.is-fullscreen)
1687 |   .workspace-split.mod-left-split.is-collapsed
1688 |   + .mod-root
1689 |   .workspace-leaf:first-of-type
1690 |   .view-header {
1691 |   padding-left: 34px !important;
1692 | }
1693 | .view-header-title {
1694 |   padding: 3px 0;
1695 |   line-height: 1;
1696 |   margin-left: 7px;
1697 | }
1698 | .view-header-title:before {
1699 |   content: none;
1700 | }
1701 | .workspace-leaf-header,
1702 | .view-header {
1703 |   background-color: var(--background-primary) !important;
1704 |   border: none !important;
1705 | }
1706 | .view-header-title-container:after {
1707 |   display: none;
1708 | }
1709 | 
1710 | /* --------------- */
1711 | /* Custom line width */
1712 | 
1713 | .markdown-preview-view.is-readable-line-width .markdown-preview-sizer {
1714 |   max-width: var(--max-width);
1715 |   width: var(--line-width);
1716 | }
1717 | .markdown-source-view.is-readable-line-width .CodeMirror,
1718 | .is-readable-line-width .markdown-preview-section {
1719 |   padding-left: 0;
1720 |   padding-right: 0;
1721 |   margin: 0 auto 0 auto;
1722 |   width: var(--line-width);
1723 |   max-width: var(--max-width);
1724 | }
1725 | .markdown-preview-sizer {
1726 |   padding-top: 2.5rem;
1727 | }
1728 | 
1729 | .markdown-embed-content .markdown-preview-sizer {
1730 |   padding-top: 0;
1731 | }
1732 | 
1733 | .is-readable-line-width .markdown-preview-section > div {
1734 |   margin: 0 auto 0 auto;
1735 |   width: var(--line-width);
1736 |   max-width: var(--max-width);
1737 | }
1738 | 
1739 | .markdown-embed .markdown-preview-section > div {
1740 |   padding: 0;
1741 |   margin: 0;
1742 |   width: auto;
1743 |   max-width: none;
1744 | }
1745 | 
1746 | .view-header-title-container {
1747 |   padding-left: 0;
1748 |   padding-right: 0px;
1749 |   max-width: var(--max-width);
1750 | 
1751 |   position: static;
1752 |   margin: 0;
1753 |   width: unset;
1754 |   line-height: 1;
1755 |   height: unset;
1756 | }
1757 | 
1758 | /* --------------- */
1759 | /* Internal search */
1760 | 
1761 | .is-flashing {
1762 |   border-radius: var(--radius-s);
1763 |   box-shadow: 0 0 0 0 var(--text-highlight-bg);
1764 |   transition: all 0s ease-in-out;
1765 | }
1766 | 
1767 | .is-flashing .tag {
1768 |   border-color: var(--text-highlight-bg-active);
1769 | }
1770 | 
1771 | .markdown-preview-view .search-highlight > div {
1772 |   box-shadow: 0 0 0px 2px var(--text-normal);
1773 |   border-radius: 2px;
1774 |   background: transparent;
1775 | }
1776 | .markdown-preview-view .search-highlight > div {
1777 |   opacity: 0.4;
1778 | }
1779 | .markdown-preview-view .search-highlight > div.is-active {
1780 |   background: transparent;
1781 |   border-radius: 2px;
1782 |   opacity: 1;
1783 |   mix-blend-mode: normal;
1784 |   box-shadow: 0 0 0px 3px var(--text-accent);
1785 | }
1786 | .document-search-container.mod-replace-mode {
1787 |   height: unset;
1788 | }
1789 | .document-search-button,
1790 | .document-search-close-button {
1791 |   cursor: var(--cursor);
1792 |   justify-self: flex-end;
1793 |   top: 0;
1794 |   font-size: 18px;
1795 |   padding: 4px 0 4px;
1796 |   line-height: 1;
1797 |   display: flex;
1798 |   align-items: center;
1799 |   justify-content: center;
1800 |   margin-left: auto;
1801 | }
1802 | .document-search-close-button {
1803 |   font-family: var(--text) !important;
1804 |   font-size: 20px;
1805 |   width: 1.65rem;
1806 | }
1807 | .document-search-container {
1808 |   background-color: var(--background-primary);
1809 |   width: 100%;
1810 | 
1811 |   position: absolute;
1812 |   height: unset;
1813 |   bottom: unset;
1814 |   top: 0;
1815 |   padding: 6px 10px;
1816 |   border-top: 1px solid var(--shade-plus-darker);
1817 |   border-bottom: 1px solid var(--shade-plus-darker);
1818 | }
1819 | input.document-search-input,
1820 | input.document-replace-input {
1821 |   transition: border-color 0.1s ease-in-out;
1822 | 
1823 |   font-size: 13px !important;
1824 |   height: auto;
1825 |   margin: 0;
1826 |   padding: 6px 10px;
1827 |   line-height: 1;
1828 |   border-radius: var(--radius-m);
1829 |   max-width: 400px;
1830 |   background-color: var(--shade-0);
1831 |   border: 1px solid var(--shade-10);
1832 | }
1833 | 
1834 | input.document-search-input:hover,
1835 | input.document-replace-input:hover {
1836 |   border: 1px solid var(--shade-10);
1837 |   background: var(--background-primary);
1838 |   transition: border-color 0.1s ease-in-out;
1839 | }
1840 | input.document-search-input:focus,
1841 | input.document-replace-input:focus {
1842 |   background: var(--background-primary);
1843 |   transition: all 0.1s ease-in-out;
1844 |   border: 1px solid hsla(var(--accent-hsl), 0.5);
1845 |   box-shadow: 0 0 0 2px hsla(var(--accent-hsl), 0.5);
1846 | }
1847 | 
1848 | input.document-search-input.mod-no-match,
1849 | input.document-search-input.mod-no-match:hover,
1850 | input.document-search-input.mod-no-match:placeholder-shown:hover {
1851 |   background-color: var(--shade-0);
1852 | }
1853 | 
1854 | input.document-search-input.mod-no-match:not(:placeholder-shown),
1855 | input.document-search-input.mod-no-match:not(:placeholder-shown):focus {
1856 |   background-color: var(--shade-0);
1857 |   box-shadow: 0 0 0 2px rgba(var(--background-modifier-error-rgb), 0.7);
1858 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 0.7);
1859 | }
1860 | 
1861 | .document-search-button {
1862 |   color: var(--text-normal);
1863 |   font-size: 13px;
1864 |   line-height: 1;
1865 |   border: 1px solid var(--shade-plus-darker);
1866 |   border-radius: var(--radius-m);
1867 |   font-weight: 500;
1868 |   background-color: var(--shade-plus-darker);
1869 |   cursor: pointer;
1870 |   height: auto;
1871 |   padding: 4px 8px;
1872 |   margin: 0 0 0 5px;
1873 | }
1874 | 
1875 | .document-search-button:hover {
1876 |   background-color: var(--shade-10);
1877 | }
1878 | 
1879 | .document-search-buttons,
1880 | .document-replace-buttons {
1881 |   margin-left: 5px;
1882 |   display: flex;
1883 |   font-size: 13px;
1884 |   line-height: 1;
1885 |   width: 210px;
1886 | }
1887 | 
1888 | .document-search,
1889 | .document-replace {
1890 |   height: auto;
1891 |   overflow: visible;
1892 |   justify-content: flex-end;
1893 | }
1894 | 
1895 | .document-replace {
1896 |   padding-top: 10px;
1897 | }
1898 | 
1899 | .markdown-source-view.is-searching .CodeMirror,
1900 | .markdown-source-view.is-replacing .CodeMirror {
1901 |   padding-bottom: 0;
1902 | }
1903 | 
1904 | .community-plugin-search {
1905 |   padding: 0;
1906 | }
1907 | 
1908 | .community-plugin-search > .setting-item {
1909 |   padding: 0;
1910 | }
1911 | 
1912 | .community-plugin-search > .setting-item > .setting-item-info {
1913 |   flex-grow: 0;
1914 |   flex-shrink: 1;
1915 |   width: 0;
1916 |   margin-right: 0;
1917 | }
1918 | 
1919 | .community-plugin-search .setting-item-control {
1920 |   justify-content: flex-start;
1921 |   padding-top: 5px;
1922 | }
1923 | 
1924 | .community-plugin-search .search-input-container {
1925 |   flex-grow: 1;
1926 |   margin-left: 5px;
1927 | }
1928 | 
1929 | .community-plugin-search .search-input-container > input {
1930 |   height: auto;
1931 | }
1932 | 
1933 | .community-plugin-search button.clickable-icon {
1934 |   display: flex;
1935 |   padding: 7px 10px;
1936 |   margin: 1px 16px 0 0;
1937 | }
1938 | 
1939 | .community-plugin-search-summary {
1940 |   padding: 0 16px 10px;
1941 |   font-size: 13px;
1942 | }
1943 | 
1944 | .community-plugin-item {
1945 |   padding: 16px 16px 16px;
1946 |   margin: 0;
1947 |   border-top: 1px solid var(--shade-plus-darker);
1948 | }
1949 | 
1950 | .community-plugin-name {
1951 |   font-size: 14px;
1952 |   font-weight: 500;
1953 | }
1954 | 
1955 | .community-plugin-name .flair {
1956 |   letter-spacing: 0;
1957 |   text-transform: none;
1958 |   vertical-align: unset;
1959 |   top: -1px;
1960 | }
1961 | 
1962 | .community-plugin-item .community-plugin-downloads {
1963 |   color: var(--text-normal);
1964 |   display: block;
1965 |   font-size: 12px;
1966 |   margin-top: 0;
1967 |   line-height: 1;
1968 |   padding: 4px 0 4px;
1969 | }
1970 | 
1971 | .community-plugin-item .community-plugin-author {
1972 |   color: var(--text-muted);
1973 |   font-size: 12px;
1974 |   padding: 0 0 10px;
1975 | }
1976 | 
1977 | .community-plugin-version,
1978 | .community-plugin-author {
1979 |   line-height: inherit;
1980 | }
1981 | 
1982 | .community-plugin-item .community-plugin-desc {
1983 |   color: var(--text-normal);
1984 | }
1985 | 
1986 | .community-plugin-downloads svg {
1987 |   width: 13px;
1988 |   height: 13px;
1989 | }
1990 | 
1991 | .community-theme .modal-button-container button {
1992 |   margin-left: 5px;
1993 | }
1994 | 
1995 | .community-theme .modal-button-container a {
1996 |   margin-left: 5px;
1997 |   background-color: var(--background-secondary-alt);
1998 |   text-decoration: none;
1999 |   display: inline-block;
2000 |   font-size: 14px;
2001 |   font-weight: 500;
2002 |   color: var(--text-normal);
2003 |   padding: 4px 14px;
2004 |   border: 1px solid rgba(0, 0, 0, 0.12);
2005 |   box-shadow: 0px 1px 1px rgb(0 0 0 / 8%);
2006 |   border-radius: var(--radius-m);
2007 |   margin-right: 0;
2008 |   cursor: var(--cursor);
2009 | }
2010 | 
2011 | .is-mobile .modal-title {
2012 |   font-weight: 500;
2013 |   font-size: 1rem;
2014 | }
2015 | 
2016 | .is-mobile .community-theme .modal-button-container button {
2017 |   margin: 0 0 8px;
2018 | }
2019 | 
2020 | .is-mobile .community-theme .modal-button-container a {
2021 |   padding: 12px 14px;
2022 |   margin: 0;
2023 | }
2024 | 
2025 | /* --------------- */
2026 | /* Sidebar documents */
2027 | 
2028 | .workspace > .workspace-split:not(.mod-root) .CodeMirror,
2029 | .workspace > .workspace-split:not(.mod-root) .markdown-preview-view {
2030 |   font-size: calc(100% * var(--scale-small) / 100);
2031 | }
2032 | .workspace
2033 |   > .workspace-split:not(.mod-root)
2034 |   .workspace-leaf-content[data-type="markdown"]
2035 |   .markdown-preview-view {
2036 |   padding: 0;
2037 | }
2038 | .workspace
2039 |   > .workspace-split:not(.mod-root)
2040 |   .workspace-leaf-content[data-type="markdown"]
2041 |   .markdown-embed
2042 |   .markdown-preview-view {
2043 |   padding: 0;
2044 | }
2045 | body:not(.plugin-sliding-panes-rotate-header)
2046 |   .workspace-leaf-content[data-type="markdown"]
2047 |   .workspace-leaf-header,
2048 | body:not(.plugin-sliding-panes-rotate-header)
2049 |   .workspace-leaf-content[data-type="kanban"]
2050 |   .view-header,
2051 | body:not(.plugin-sliding-panes-rotate-header)
2052 |   .workspace-leaf-content[data-type="markdown"]
2053 |   .view-header {
2054 |   box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.08);
2055 |   position: relative;
2056 | }
2057 | 
2058 | body.theme-dark:not(.plugin-sliding-panes-rotate-header)
2059 |   .workspace-leaf-content[data-type="markdown"]
2060 |   .workspace-leaf-header,
2061 | body.theme-dark:not(.plugin-sliding-panes-rotate-header)
2062 |   .workspace-leaf-content[data-type="markdown"]
2063 |   .view-header {
2064 |   box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.3);
2065 | }
2066 | .workspace > .workspace-split:not(.mod-root) .CodeMirror,
2067 | .workspace > .workspace-split:not(.mod-root) .markdown-preview-section,
2068 | .workspace > .workspace-split:not(.mod-root) .markdown-preview-sizer {
2069 |   max-width: 100%;
2070 |   padding: 0;
2071 |   width: auto;
2072 | }
2073 | 
2074 | /* Hide embed styling for sidebar documents */
2075 | .workspace > .workspace-split:not(.mod-root) .internal-embed .markdown-embed {
2076 |   border: none;
2077 |   padding: 0;
2078 | }
2079 | 
2080 | .workspace > .workspace-split:not(.mod-root) .CodeMirror-sizer {
2081 |   padding-left: 10px;
2082 | }
2083 | 
2084 | /* --------------- */
2085 | /* Form inputs */
2086 | 
2087 | textarea,
2088 | input[type="text"],
2089 | input[type="search"],
2090 | input[type="email"],
2091 | input[type="password"],
2092 | input[type="number"] {
2093 |   padding: 5px 10px;
2094 |   font-size: 14px;
2095 |   border-radius: var(--radius-m);
2096 |   border-color: var(--shade-10);
2097 |   height: auto;
2098 | }
2099 | 
2100 | .theme-dark textarea,
2101 | .theme-dark input[type="text"],
2102 | .theme-dark input[type="search"],
2103 | .theme-dark input[type="email"],
2104 | .theme-dark input[type="password"],
2105 | .theme-dark input[type="number"] {
2106 |   border-color: var(--shade-20);
2107 | }
2108 | 
2109 | textarea:focus,
2110 | select:focus,
2111 | input[type="text"]:active,
2112 | input[type="search"]:active,
2113 | input[type="email"]:active,
2114 | input[type="password"]:active,
2115 | input[type="number"]:active,
2116 | input[type="text"]:focus,
2117 | input[type="search"]:focus,
2118 | input[type="email"]:focus,
2119 | input[type="password"]:focus,
2120 | input[type="number"]:focus {
2121 |   border-color: hsla(var(--accent-hsl), 0.5);
2122 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1),
2123 |     0 0 0 2px hsla(var(--accent-hsl), 0.5);
2124 | }
2125 | 
2126 | textarea {
2127 |   padding: 8px 10px;
2128 | }
2129 | 
2130 | .modal.mod-settings button:not(.mod-cta):not(.mod-warning),
2131 | .setting-item-control button,
2132 | .modal button,
2133 | .modal button.mod-cta {
2134 |   line-height: 1.3;
2135 |   font-size: 14px;
2136 |   font-weight: 500;
2137 |   color: var(--text-normal);
2138 |   padding: 4px 14px;
2139 |   background: #ffffff;
2140 |   border: 1px solid rgba(0, 0, 0, 0.12);
2141 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08);
2142 |   border-radius: var(--radius-m);
2143 | 
2144 |   margin-right: 0;
2145 |   cursor: var(--cursor);
2146 | }
2147 | 
2148 | .is-mobile .modal.mod-settings button:not(.mod-cta):not(.mod-warning),
2149 | .is-mobile .setting-item-control button,
2150 | .is-mobile .modal button,
2151 | .is-mobile .modal button.mod-cta {
2152 |   padding: 12px 14px;
2153 | }
2154 | 
2155 | .is-mobile .modal.mod-settings .vertical-tab-nav-item {
2156 |   padding: 10px 8px;
2157 | }
2158 | 
2159 | .modal button.mod-cta {
2160 |   margin-right: 5px;
2161 | }
2162 | 
2163 | .modal button + button {
2164 |   margin-left: 10px;
2165 | }
2166 | 
2167 | .modal.mod-settings
2168 |   button:not(.mod-cta):not(.mod-warning):hover
2169 |   .setting-item-control
2170 |   button:hover,
2171 | .modal button:hover,
2172 | .modal button.mod-cta:hover {
2173 |   background: #ffffff;
2174 | }
2175 | 
2176 | .theme-dark .modal.mod-settings button:not(.mod-cta):not(.mod-warning),
2177 | .theme-dark .setting-item-control button,
2178 | .theme-dark .modal button,
2179 | .theme-dark .modal button.mod-cta {
2180 |   color: #dfdedf;
2181 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.1),
2182 |     inset 0px 1px 1px rgba(255, 255, 255, 0.3);
2183 |   background-color: var(--shade-50);
2184 | }
2185 | 
2186 | .theme-dark
2187 |   .modal.mod-settings
2188 |   button:not(.mod-cta):not(.mod-warning):active
2189 |   .theme-dark
2190 |   .setting-item-control
2191 |   button:active,
2192 | .theme-dark .modal button:active,
2193 | .theme-dark .modal button.mod-cta:active,
2194 | .modal.mod-settings button:not(.mod-cta):not(.mod-warning):active,
2195 | .setting-item-control button:active,
2196 | .modal button:active,
2197 | .modal button.mod-cta:active {
2198 |   color: #fff;
2199 |   background: linear-gradient(
2200 |     180deg,
2201 |     hsl(var(--accent-h), var(--accent-s), calc(var(--accent-l) + 4%)) 0%,
2202 |     hsl(var(--accent-hsl)) 100%
2203 |   );
2204 |   box-shadow: 0px 1px 2px hsla(var(--accent-hsl), 0.25);
2205 | }
2206 | 
2207 | input[type="range"] {
2208 |   width: 120px;
2209 |   -webkit-appearance: none;
2210 |   background-color: var(--shade-plus-darker);
2211 |   border: 1px solid rgba(0, 0, 0, 0.06);
2212 |   box-shadow: inset 0px 0px 3px rgba(0, 0, 0, 0.03);
2213 |   border-radius: var(--radius-m);
2214 |   height: 4px;
2215 |   margin: 0;
2216 |   padding: 0;
2217 | }
2218 | input[type="range"]::-webkit-slider-runnable-track {
2219 |   height: 4px;
2220 |   -webkit-appearance: none;
2221 | }
2222 | input[type="range"]::-webkit-slider-thumb {
2223 |   -webkit-appearance: none;
2224 |   border-radius: 20px;
2225 |   width: 8px;
2226 |   height: 20px;
2227 |   cursor: ew-resize;
2228 |   background: #fff;
2229 |   box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.07);
2230 |   position: relative;
2231 |   top: -8px;
2232 | }
2233 | .theme-dark input[type="range"]::-webkit-slider-thumb {
2234 |   background-color: #c8c8c8;
2235 | }
2236 | input[type="range"] {
2237 |   outline: none;
2238 | }
2239 | 
2240 | /* --------------- */
2241 | /* Toggle switches */
2242 | 
2243 | .checkbox-container {
2244 |   background: var(--shade-plus-darker);
2245 |   border: 1px solid rgba(0, 0, 0, 0.06);
2246 |   box-sizing: border-box;
2247 |   box-shadow: inset 0px 0px 3px rgba(0, 0, 0, 0.03);
2248 |   cursor: var(--cursor);
2249 | }
2250 | .checkbox-container:after {
2251 |   width: 20px;
2252 |   height: 20px;
2253 |   border-radius: 20px;
2254 |   margin: 0;
2255 |   background: #fff;
2256 |   border: none;
2257 |   box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.08), 0 0 0 1px rgba(0, 0, 0, 0.06);
2258 |   transform: translate3d(0, 0, 0);
2259 | }
2260 | .checkbox-container.is-enabled {
2261 |   border: 1px solid rgba(0, 0, 0, 0.05);
2262 |   box-shadow: inset 0px 0px 3px rgba(0, 0, 0, 0.03);
2263 | }
2264 | .checkbox-container.is-enabled:after {
2265 |   transform: translate3d(20px, 0, 0);
2266 | }
2267 | 
2268 | .theme-dark .checkbox-container {
2269 |   border: 1px solid var(--shade-plus-darker);
2270 | }
2271 | 
2272 | .theme-dark .checkbox-container.is-enabled {
2273 |   border: 1px solid var(--shade-10);
2274 | }
2275 | 
2276 | .theme-dark .checkbox-container:after {
2277 |   background-color: #c8c8c8;
2278 | }
2279 | 
2280 | /* --------------- */
2281 | /* File browser */
2282 | 
2283 | .pane-list-item-ending-flair:not(.tag-pane-tag-count) {
2284 |   display: none;
2285 | }
2286 | 
2287 | .nav-folder.mod-root > .nav-folder-title .nav-folder-title-content {
2288 |   border-radius: 0;
2289 |   font-size: 14px;
2290 |   color: transparent;
2291 |   overflow: hidden;
2292 |   height: 0px;
2293 |   padding: 3px 0;
2294 | }
2295 | 
2296 | .nav-folder.mod-root
2297 |   > .nav-folder-title.is-being-dragged-over
2298 |   .nav-folder-title-content {
2299 |   box-shadow: inset 0 -2px hsl(var(--accent-hsl));
2300 | }
2301 | 
2302 | .nav-folder:not(.mod-root) > .nav-folder-children {
2303 |   padding-left: 5px;
2304 | }
2305 | 
2306 | .workspace-split.mod-left-split > .workspace-leaf-resize-handle,
2307 | .workspace-split.mod-right-split > .workspace-leaf-resize-handle {
2308 |   height: 100%;
2309 | }
2310 | 
2311 | .nav-header {
2312 |   padding: 0;
2313 | }
2314 | 
2315 | .nav-buttons-container {
2316 |   padding: 4px 0;
2317 |   margin-bottom: 0px !important;
2318 |   justify-content: flex-start;
2319 |   border: 0;
2320 |   line-height: 1;
2321 |   font-size: var(--rem);
2322 | }
2323 | .is-mobile .nav-buttons-container {
2324 |   padding: 2px 0.5rem 0.5rem;
2325 | }
2326 | .workspace-leaf-content > .nav-header > .nav-buttons-container {
2327 |   padding: 2px 10px 10px;
2328 | }
2329 | .is-mobile .workspace-leaf-content > .nav-header > .nav-buttons-container {
2330 |   padding: 0.5rem 0.3rem;
2331 | }
2332 | .nav-files-container {
2333 |   overflow-x: hidden;
2334 | }
2335 | .hider-ribbon .nav-files-container {
2336 |   padding-bottom: 50px;
2337 | }
2338 | 
2339 | .nav-folder-title.is-being-dragged-over {
2340 |   background-color: hsl(var(--accent-hsl));
2341 |   color: var(--text-on-accent);
2342 |   border: none;
2343 | }
2344 | 
2345 | .nav-folder-collapse-indicator {
2346 |   position: static;
2347 |   flex-grow: 0;
2348 |   flex-shrink: 0;
2349 |   width: auto;
2350 |   height: auto;
2351 |   display: flex;
2352 |   margin: 0;
2353 | }
2354 | 
2355 | .nav-folder-children {
2356 |   padding: 0;
2357 | }
2358 | 
2359 | .nav-folder-children > .nav-folder {
2360 |   padding: 0 0 0 5px;
2361 | }
2362 | 
2363 | .nav-file {
2364 |   padding: 0 5px 0 19px;
2365 |   margin-left: 0;
2366 | }
2367 | 
2368 | body:not(.cc-folder-icons) .nav-folder-title-content {
2369 |   padding-left: 7px;
2370 | }
2371 | 
2372 | body:not(.cc-folder-icons) .nav-file {
2373 |   padding-left: 4px;
2374 | }
2375 | 
2376 | body:not(.cc-folder-icons):not(.cc-file-icons) .nav-file {
2377 |   padding-left: 12px;
2378 | }
2379 | 
2380 | .nav-file-tag {
2381 |   line-height: 1;
2382 |   padding: 3px;
2383 |   background-color: var(--shade-5);
2384 |   letter-spacing: 0;
2385 |   margin: 0 0 0 4px;
2386 |   position: relative;
2387 |   align-self: flex-start;
2388 |   top: 0.5em;
2389 | }
2390 | 
2391 | .cc-truncated-explorer-titles .nav-file-tag {
2392 |   top: 0.68em;
2393 | }
2394 | 
2395 | .nav-file-title,
2396 | .nav-folder-title {
2397 |   cursor: var(--cursor);
2398 |   width: 100%;
2399 |   margin: 0;
2400 |   padding: 0 5px;
2401 |   border-radius: var(--radius-s);
2402 |   border: none;
2403 |   display: flex;
2404 |   align-items: center;
2405 | }
2406 | 
2407 | .nav-folder-title {
2408 |   padding-right: 10px;
2409 | }
2410 | 
2411 | .nav-file-title {
2412 |   flex-direction: row-reverse;
2413 | }
2414 | 
2415 | .nav-folder-collapse-indicator {
2416 |   margin-right: -2px;
2417 | }
2418 | 
2419 | [data-type="starred"] .nav-file-title {
2420 |   flex-direction: row;
2421 | }
2422 | 
2423 | .nav-file-title.is-being-dragged,
2424 | .nav-file-title.is-active,
2425 | body:not(.is-grabbing) .nav-file-title.is-active:hover {
2426 |   background-color: var(--shade-plus-darker);
2427 |   color: var(--text-normal);
2428 | }
2429 | 
2430 | .nav-file-title-content {
2431 |   width: 100%;
2432 |   white-space: normal;
2433 |   cursor: var(--cursor);
2434 |   display: flex;
2435 |   align-items: flex-start;
2436 | }
2437 | 
2438 | .cc-truncated-explorer-titles .nav-folder-title-content,
2439 | .cc-truncated-explorer-titles .nav-file-title-content {
2440 |   display: inline-block;
2441 |   white-space: nowrap;
2442 |   overflow: hidden;
2443 |   text-overflow: ellipsis;
2444 |   vertical-align: middle;
2445 | }
2446 | 
2447 | .nav-file-title-content,
2448 | .nav-folder-title-content {
2449 |   padding: 4px 0;
2450 |   border: none;
2451 |   line-height: 1.3;
2452 | }
2453 | 
2454 | .is-mobile .nav-file-title-content,
2455 | .is-mobile .nav-folder-title-content {
2456 |   padding: 7px 0;
2457 | }
2458 | 
2459 | .nav-folder-title-content {
2460 |   display: flex;
2461 |   align-items: center;
2462 |   text-overflow: ellipsis;
2463 |   overflow: hidden;
2464 |   flex-grow: 1;
2465 |   padding-left: 4px;
2466 | }
2467 | 
2468 | .is-mobile .nav-folder-title-content {
2469 |   padding-left: 4px;
2470 | }
2471 | 
2472 | .drop-indicator {
2473 |   border-width: 1px;
2474 | }
2475 | .nav-file-icon {
2476 |   padding: 0;
2477 |   margin: 0;
2478 |   top: 0;
2479 |   line-height: 0;
2480 | }
2481 | 
2482 | body:not(.is-grabbing) .nav-file-title:hover .nav-folder-collapse-indicator,
2483 | body:not(.is-grabbing) .nav-folder-title:hover .nav-folder-collapse-indicator,
2484 | body:not(.is-grabbing) .nav-file-title:hover,
2485 | body:not(.is-grabbing) .nav-folder-title:hover {
2486 |   background: transparent;
2487 | }
2488 | .nav-file-title,
2489 | .nav-folder-title,
2490 | .is-collapsed .search-result-file-title,
2491 | .tag-pane-tag {
2492 |   color: var(--text-normal);
2493 |   font-weight: 500;
2494 |   line-height: 1;
2495 | }
2496 | 
2497 | .search-result-file-title {
2498 |   font-size: var(--font-small) !important;
2499 |   color: var(--text-normal);
2500 |   font-weight: var(--font-normal);
2501 | }
2502 | 
2503 | .tree-view-item-self:hover .tree-view-item-collapse,
2504 | .tree-item-self.is-clickable:hover {
2505 |   color: var(--text-normal);
2506 |   background: transparent;
2507 | }
2508 | 
2509 | .tree-item-self .collapse-icon,
2510 | .search-result-collapse-indicator,
2511 | .search-result-file-title:hover .search-result-collapse-indicator,
2512 | .side-dock-collapsible-section-header-indicator:hover,
2513 | .side-dock-collapsible-section-header:hover
2514 |   .side-dock-collapsible-section-header-indicator,
2515 | .markdown-preview-view .collapse-indicator,
2516 | .tree-view-item-collapse,
2517 | .is-collapsed .search-result-collapse-indicator,
2518 | .nav-folder-collapse-indicator,
2519 | .side-dock-collapsible-section-header-indicator,
2520 | .is-collapsed .side-dock-collapsible-section-header-indicator {
2521 |   color: var(--text-normal);
2522 |   cursor: var(--cursor);
2523 | }
2524 | .nav-folder-title.is-being-dragged-over .nav-folder-collapse-indicator {
2525 |   color: var(--text-on-accent);
2526 | }
2527 | 
2528 | .nav-file.is-active > .nav-file-title,
2529 | .nav-file.is-active > .nav-folder-title,
2530 | .nav-file.is-active > .nav-folder-collapse-indicator,
2531 | .nav-folder.is-active > .nav-file-title,
2532 | .nav-folder.is-active > .nav-folder-title,
2533 | .nav-folder.is-active > .nav-folder-collapse-indicator {
2534 |   background-color: var(--shade-plus-darker);
2535 | }
2536 | 
2537 | /* --------------- */
2538 | /* Outline */
2539 | 
2540 | .outline {
2541 |   padding: 10px 10px 5rem;
2542 |   font-size: var(--font-small);
2543 | }
2544 | .outline .pane-empty {
2545 |   font-size: var(--font-small);
2546 |   color: var(--text-faint);
2547 |   padding: 0 0 0 15px;
2548 |   width: 100%;
2549 | }
2550 | 
2551 | .outline .tree-item-self {
2552 |   cursor: var(--cursor);
2553 |   font-size: var(--font-small);
2554 |   color: var(--text-normal);
2555 |   font-weight: 500;
2556 |   display: flex;
2557 |   align-items: flex-start;
2558 |   line-height: 1;
2559 |   padding: 0;
2560 |   margin: 0;
2561 | }
2562 | .tree-item-self.is-clickable:hover .tree-item-collapse {
2563 |   color: var(--text-normal);
2564 | }
2565 | 
2566 | .outline .tree-item-self .collapse-icon {
2567 |   position: relative;
2568 |   top: 0.6em;
2569 |   margin-left: 3px;
2570 | }
2571 | .outline > .tree-item > .tree-item-self .right-triangle {
2572 |   opacity: unset;
2573 | }
2574 | .outline .tree-item-inner {
2575 |   display: flex;
2576 |   align-items: flex-start;
2577 |   position: relative;
2578 |   padding: 4px 6px;
2579 |   line-height: 1.4;
2580 | }
2581 | .outline .tree-item-inner::before {
2582 |   flex-shrink: 0;
2583 |   content: "●";
2584 |   display: block;
2585 |   align-items: center;
2586 |   justify-content: center;
2587 |   width: 12px;
2588 |   height: 12px;
2589 |   font-size: 7px;
2590 |   position: relative;
2591 |   top: 0.8em;
2592 |   margin-right: 4px;
2593 | }
2594 | .outline .tree-item-inner:not(:only-child)::before {
2595 |   display: none;
2596 | }
2597 | 
2598 | .outline .tree-item-self.is-clickable:hover {
2599 |   background-color: var(--shade-plus-darker);
2600 |   border-radius: var(--radius-m);
2601 | }
2602 | 
2603 | .outline .tree-item-children {
2604 |   margin-left: 22px;
2605 | }
2606 | 
2607 | /* --------------- */
2608 | /* Search */
2609 | 
2610 | .suggestion-container {
2611 |   overflow: hidden;
2612 |   border: 1px solid var(--shade-10);
2613 |   border-radius: var(--radius-l);
2614 |   box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
2615 | }
2616 | 
2617 | .search-suggest-item.mod-group {
2618 |   letter-spacing: 0;
2619 |   text-transform: none;
2620 |   font-weight: 500;
2621 |   font-size: 14px;
2622 |   color: var(--text-muted);
2623 | }
2624 | 
2625 | .search-suggest-item {
2626 |   font-size: 14px;
2627 | }
2628 | 
2629 | .search-suggest-item:hover {
2630 |   background-color: var(--shade-plus-darker);
2631 | }
2632 | 
2633 | .search-suggest-name {
2634 |   font-weight: 500;
2635 | }
2636 | 
2637 | .search-suggest-info-text {
2638 |   color: var(--text-notmal);
2639 | }
2640 | 
2641 | .hider-ribbon .search-results-children {
2642 |   padding-bottom: 3rem;
2643 | }
2644 | .hider-ribbon .backlink-pane .search-results-children {
2645 |   padding-bottom: 0;
2646 | }
2647 | .search-result-file-match {
2648 |   margin-top: 0;
2649 |   cursor: var(--cursor) !important;
2650 |   border-radius: var(--radius-m);
2651 |   position: relative;
2652 |   padding: 6px 10px 6px 10px;
2653 |   margin-bottom: 5px;
2654 |   width: 100%;
2655 |   left: 0;
2656 | }
2657 | .search-result-file-match:hover {
2658 |   color: var(--text-normal);
2659 |   background: transparent;
2660 | }
2661 | .search-result-file-match:after {
2662 |   display: none;
2663 | }
2664 | .search-result-file-match:last-child {
2665 |   margin-bottom: 1rem;
2666 | }
2667 | .search-result-container:before {
2668 |   height: 1px;
2669 | }
2670 | .search-result-container.is-loading:before {
2671 |   background-color: var(--background-modifier-accent);
2672 | }
2673 | .search-result {
2674 |   margin-bottom: 0;
2675 | }
2676 | 
2677 | .search-result-file-match:before {
2678 |   content: none;
2679 | }
2680 | .search-result-file-match:not(.search-info-more-matches) {
2681 |   border: 3px solid transparent;
2682 |   background: var(--shade-0);
2683 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
2684 |   transition: border-color 150ms ease-out;
2685 | }
2686 | .theme-dark .search-result-file-match:not(.search-info-more-matches) {
2687 |   border: 3px solid transparent;
2688 |   background: var(--shade-10);
2689 | }
2690 | 
2691 | .search-result-file-match:not(.search-info-more-matches):hover {
2692 |   border: 3px solid hsla(var(--accent-hsl), 0.6);
2693 | }
2694 | 
2695 | .search-result-file-match.search-info-more-matches:hover {
2696 |   background: var(--shade-plus-darker);
2697 | }
2698 | 
2699 | .search-result-file-matched-text {
2700 |   background: hsla(var(--accent-hsl), 0.15);
2701 | }
2702 | 
2703 | .theme-dark .search-result-file-matched-text {
2704 |   background: hsla(var(--accent-hsl), 0.25);
2705 | }
2706 | 
2707 | .graph-controls .search-input-container input,
2708 | .workspace-leaf-content .search-input-container input,
2709 | .workspace-leaf-content .search-input-container input:hover,
2710 | .workspace-leaf-content .search-input-container input:focus {
2711 |   font-size: 13px;
2712 |   padding: 6px 10px;
2713 |   line-height: 1;
2714 |   height: auto;
2715 |   border-radius: var(--radius-m);
2716 | }
2717 | 
2718 | .graph-controls .search-input-container input,
2719 | .workspace-leaf-content .search-input-container input {
2720 |   background-color: var(--shade-0);
2721 |   border: 1px solid var(--shade-10);
2722 | }
2723 | 
2724 | .graph-controls .search-input-container input:hover,
2725 | .workspace-leaf-content .search-input-container input:hover {
2726 |   border: 1px solid var(--shade-10);
2727 | }
2728 | 
2729 | .graph-controls .search-input-container input:focus,
2730 | .workspace-leaf-content .search-input-container input:focus {
2731 |   border: 1px solid hsla(var(--accent-hsl), 0.5);
2732 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1),
2733 |     0 0 0 2px hsla(var(--accent-hsl), 0.5);
2734 | }
2735 | 
2736 | .search-input-container {
2737 |   flex-grow: 0;
2738 |   width: auto;
2739 |   margin: 0;
2740 |   padding: 10px 10px;
2741 | }
2742 | 
2743 | .workspace-leaf-content .setting-item {
2744 |   padding: 0;
2745 |   border: none;
2746 |   justify-content: space-between;
2747 | }
2748 | .workspace-leaf-content .setting-item-control {
2749 |   flex-shrink: 0;
2750 |   flex-grow: 1;
2751 | }
2752 | 
2753 | .search-input-clear-button {
2754 |   cursor: var(--cursor);
2755 |   top: 50%;
2756 |   right: 18px;
2757 |   bottom: unset;
2758 |   line-height: 1;
2759 |   height: unset;
2760 |   width: unset;
2761 |   margin: 0;
2762 |   padding: 0;
2763 |   text-align: unset;
2764 |   vertical-align: unset;
2765 |   align-items: center;
2766 |   color: var(--text-faint);
2767 |   transform: translateY(-50%);
2768 | }
2769 | .search-input-clear-button:hover {
2770 |   color: var(--text-normal);
2771 | }
2772 | .search-input-clear-button:before {
2773 |   font-weight: 600;
2774 |   font-size: 18px;
2775 |   display: block !important;
2776 | }
2777 | .search-input {
2778 |   max-width: 100%;
2779 |   margin-left: 0;
2780 |   width: 500px;
2781 | }
2782 | input.search-input:focus {
2783 |   border-color: var(--background-modifier-border);
2784 | }
2785 | .workspace-leaf-content[data-type="search"] .search-result-file-matches {
2786 |   border-left: 0;
2787 |   padding-left: 0;
2788 | }
2789 | .search-empty-state {
2790 |   font-size: var(--font-small);
2791 |   color: var(--text-faint);
2792 |   padding-left: 5px;
2793 |   margin: 0;
2794 | }
2795 | .search-result-container {
2796 |   padding: 0 10px 5px 10px;
2797 | }
2798 | .search-result-file-title {
2799 |   vertical-align: middle;
2800 |   cursor: var(--cursor) !important;
2801 | 
2802 |   align-items: center;
2803 |   display: flex;
2804 |   line-height: 1;
2805 |   font-size: 13px !important;
2806 |   font-weight: 500;
2807 |   padding: 0;
2808 |   margin: 0 0 5px;
2809 | }
2810 | .search-result-file-title .tree-item-inner {
2811 |   display: block;
2812 |   overflow: hidden;
2813 |   text-overflow: ellipsis;
2814 |   white-space: nowrap;
2815 |   padding: 6px 0 6px 2px;
2816 | }
2817 | .search-result-file-title .tree-item-inner:before {
2818 |   flex-shrink: 0;
2819 |   top: 1px;
2820 |   padding-left: 2px;
2821 | }
2822 | 
2823 | .is-collapsed .search-result-file-title {
2824 |   font-size: 13px !important;
2825 | }
2826 | 
2827 | .tree-item-self .collapse-icon {
2828 |   margin: 0 0 0 -2px;
2829 |   padding: 0;
2830 |   width: auto;
2831 | }
2832 | 
2833 | .tree-item-self .tree-item-icon:after {
2834 |   display: none;
2835 | }
2836 | 
2837 | .tree-item-self.is-clickable:hover {
2838 |   background-color: transparent;
2839 | }
2840 | 
2841 | .tree-item-flair-outer:after {
2842 |   content: unset;
2843 | }
2844 | 
2845 | .tree-item-flair {
2846 |   background-color: transparent;
2847 |   padding: 0;
2848 | }
2849 | 
2850 | .search-result .tree-item-flair {
2851 |   display: none;
2852 | }
2853 | 
2854 | .search-result-file-matches {
2855 |   color: var(--text-normal);
2856 |   font-size: 12px;
2857 |   line-height: 1.6;
2858 |   margin: 0;
2859 |   padding: 0;
2860 |   border-bottom: none;
2861 | }
2862 | 
2863 | .search-info-more-matches {
2864 |   font-size: 12px;
2865 |   padding-top: 4px;
2866 |   padding-bottom: 4px;
2867 |   color: var(--text-normal);
2868 | }
2869 | .side-dock-collapsible-section-header-indicator {
2870 |   display: none;
2871 | }
2872 | .side-dock-collapsible-section-header {
2873 |   background: transparent;
2874 |   font-weight: 500;
2875 |   color: var(--text-muted);
2876 |   cursor: var(--cursor);
2877 |   margin-right: 0;
2878 |   margin-left: 0;
2879 |   text-transform: capitalize;
2880 |   letter-spacing: unset;
2881 |   font-size: 12px;
2882 |   padding: 6px 10px;
2883 | }
2884 | .side-dock-collapsible-section-header:hover,
2885 | .side-dock-collapsible-section-header:not(.is-collapsed) {
2886 |   color: var(--text-muted);
2887 |   background: transparent;
2888 | }
2889 | .outgoing-link-pane,
2890 | .backlink-pane {
2891 |   padding: 10px 10px 50px;
2892 |   margin-bottom: 0 !important;
2893 | }
2894 | .outgoing-link-pane .search-result-container,
2895 | .backlink-pane .search-result-container {
2896 |   padding: 0 0 5px 10px;
2897 |   margin-left: 0;
2898 | }
2899 | .outgoing-link-pane .tree-item-self .collapse-icon,
2900 | .backlink-pane .tree-item-self .collapse-icon {
2901 |   padding: 2px;
2902 |   margin: -2px 0 -2px -2px;
2903 | }
2904 | .outgoing-link-pane .tree-item-self .collapse-icon > svg,
2905 | .backlink-pane .tree-item-self .collapse-icon > svg {
2906 |   color: var(--shade-40);
2907 | }
2908 | .outgoing-link-pane .search-result-file-title,
2909 | .backlink-pane .search-result-file-title {
2910 |   padding-left: 0;
2911 | }
2912 | .outgoing-link-pane .tree-item-self,
2913 | .backlink-pane .tree-item-self {
2914 |   align-items: center;
2915 |   font-size: 13px;
2916 |   text-transform: capitalize;
2917 |   padding: 6px 0;
2918 |   line-height: 1;
2919 |   font-weight: 500;
2920 | }
2921 | 
2922 | .is-mobile .outgoing-link-pane .tree-item-self,
2923 | .is-mobile .backlink-pane .tree-item-self {
2924 |   font-size: 1rem !important;
2925 | }
2926 | 
2927 | .outgoing-link-pane .tree-item-self {
2928 |   align-items: flex-start;
2929 | }
2930 | .outgoing-link-pane .search-results .tree-item-self,
2931 | .backlink-pane .search-results-children .tree-item-self {
2932 |   padding: 0;
2933 | }
2934 | .outgoing-link-pane > .tree-item-self.is-clickable:hover,
2935 | .backlink-pane > .tree-item-self.is-clickable:hover {
2936 |   color: var(--text-muted);
2937 | }
2938 | .outgoing-link-pane .tree-item-self .tree-item-flair,
2939 | .backlink-pane .tree-item-self .tree-item-flair {
2940 |   color: var(--shade-30);
2941 | }
2942 | .outgoing-link-pane .tree-item-self:hover .tree-item-flair,
2943 | .backlink-pane .tree-item-self:hover .tree-item-flair {
2944 |   background-color: transparent;
2945 |   color: var(--shade-30);
2946 | }
2947 | .outgoing-link-pane > .tree-item-self > .collapse-icon,
2948 | .backlink-pane > .tree-item-self > .collapse-icon {
2949 |   color: var(--text-muted);
2950 |   margin-right: 2px;
2951 | }
2952 | .list-item-ending-flair {
2953 |   right: 0;
2954 |   background: transparent;
2955 | }
2956 | .outgoing-link-pane .list-item-ending-flair,
2957 | .backlink-pane .list-item-ending-flair {
2958 |   right: 12px;
2959 | }
2960 | .outgoing-link-pane .search-result-file-match,
2961 | .backlink-pane .search-result-file-match {
2962 |   background-color: var(--shade-3);
2963 | }
2964 | .outgoing-link-pane .search-result-container:before {
2965 |   display: none;
2966 | }
2967 | .outgoing-link-item {
2968 |   border-radius: var(--radius-m);
2969 |   margin: 0 0 5px;
2970 | }
2971 | .tree-item-self.is-clickable.outgoing-link-item:hover {
2972 |   background-color: var(--shade-plus-darker);
2973 | }
2974 | .outgoing-link-item > .tree-item-icon {
2975 |   color: var(--text-muted);
2976 |   margin-left: 5px;
2977 |   padding: 0 5px 0 0;
2978 |   position: relative;
2979 |   top: 1px;
2980 | }
2981 | 
2982 | .outgoing-link-item .tree-item-inner {
2983 |   line-height: 1.3;
2984 |   color: var(--text-normal);
2985 | }
2986 | 
2987 | .outgoing-link-item .tree-item-inner-subtext {
2988 |   padding: 3px 0 0;
2989 |   color: var(--text-muted);
2990 | }
2991 | 
2992 | .tag-pane-tag .list-item-ending-flair {
2993 |   right: 10px;
2994 | }
2995 | .pane-list-item:hover .pane-list-item-ending-flair,
2996 | .list-item:hover .list-item-ending-flair {
2997 |   background: transparent;
2998 |   color: var(--text-muted);
2999 | }
3000 | .search-result-file-title:hover {
3001 |   color: var(--text-normal);
3002 |   background: transparent;
3003 | }
3004 | .workspace-leaf-content .search-input,
3005 | .workspace-leaf-content .search-input:hover,
3006 | .workspace-leaf-content .search-input:focus {
3007 |   font-size: var(--font-small);
3008 |   padding: 7px 10px;
3009 |   height: 28px;
3010 |   border-radius: 5px;
3011 |   background: var(--background-primary);
3012 |   border: 1px solid var(--background-modifier-border);
3013 |   transition: border-color 0.1s ease-in-out;
3014 | }
3015 | .workspace-leaf-content .search-input:hover {
3016 |   border-color: var(--background-modifier-border-hover);
3017 |   transition: border-color 0.1s ease-in-out;
3018 | }
3019 | .workspace-leaf-content .search-input:focus {
3020 |   background: var(--background-primary);
3021 |   border-color: var(--background-modifier-border-focus);
3022 |   transition: all 0.1s ease-in-out;
3023 | }
3024 | .workspace-leaf-content .search-input::placeholder {
3025 |   color: var(--text-faint);
3026 |   font-size: var(--font-small);
3027 | }
3028 | .workspace-split.mod-root
3029 |   .workspace-split.mod-vertical
3030 |   .workspace-leaf-content {
3031 |   padding-right: 0;
3032 | }
3033 | .workspace-split.mod-horizontal.mod-right-split {
3034 |   width: 0;
3035 | }
3036 | .workspace-split.mod-vertical > .workspace-leaf {
3037 |   padding-right: 1px;
3038 | }
3039 | .workspace-leaf-content[data-type="starred"] .item-list {
3040 |   padding-top: 12px;
3041 | }
3042 | .workspace-leaf-content[data-type="starred"] .nav-file {
3043 |   padding-left: 5px;
3044 | }
3045 | .workspace-split.mod-right-split .view-content {
3046 |   padding: 0 0 0 0;
3047 | }
3048 | 
3049 | /* --------------- */
3050 | /* Tag pane */
3051 | 
3052 | .tag-container {
3053 |   padding: 10px 10px 50px;
3054 | }
3055 | 
3056 | .tag-pane-tag {
3057 |   cursor: var(--cursor);
3058 |   padding: 0 6px;
3059 |   display: flex;
3060 |   justify-content: space-between;
3061 |   align-items: center;
3062 |   margin-top: 2px;
3063 | }
3064 | 
3065 | .tag-pane-tag > .tree-item-inner:first-child {
3066 |   margin-left: 14px;
3067 | }
3068 | 
3069 | .tag-pane-tag:hover {
3070 |   background: transparent;
3071 | }
3072 | 
3073 | .tag-pane-tag-text {
3074 |   color: var(--text-accent);
3075 |   display: inline-block;
3076 |   padding: 6px 0;
3077 |   border-radius: var(--radius-m);
3078 |   margin: 0;
3079 | }
3080 | 
3081 | .tag-pane-tag-text::before {
3082 |   content: "#";
3083 | }
3084 | 
3085 | .tag-container .tree-item {
3086 |   padding: 0;
3087 | }
3088 | 
3089 | .tag-container .tree-item-self .collapse-icon {
3090 |   padding: 4px;
3091 |   margin: -4px 0 -4px -6px;
3092 | }
3093 | 
3094 | .tag-container .tree-item-self {
3095 |   border-radius: var(--radius-m);
3096 | }
3097 | .tag-container .tree-item-self:hover {
3098 |   background-color: var(--shade-plus-darker);
3099 | }
3100 | 
3101 | .tag-pane-tag-count {
3102 |   padding: 0;
3103 |   color: var(--shade-30);
3104 |   display: block;
3105 |   position: static;
3106 |   font-size: inherit;
3107 | }
3108 | .tag-pane-tag:hover .tag-pane-tag-count {
3109 |   background-color: transparent;
3110 |   color: var(--shade-30);
3111 | }
3112 | .pane-list-item-ending-flair {
3113 |   background: transparent;
3114 | }
3115 | 
3116 | .nav-file.is-active .nav-file-title:hover {
3117 |   background: var(--background-tertiary) !important;
3118 | }
3119 | 
3120 | /* --------------- */
3121 | /* Status bar */
3122 | 
3123 | .status-bar,
3124 | .is-translucent .status-bar {
3125 |   display: flex;
3126 |   align-items: center;
3127 |   font-size: 11px;
3128 |   position: absolute;
3129 |   right: 0;
3130 |   bottom: 0;
3131 |   background: rgb(255, 255, 255);
3132 |   border-top: 1px solid var(--shade-plus-darker);
3133 |   border-left: 1px solid var(--shade-plus-darker);
3134 |   border-top-left-radius: var(--radius-m);
3135 |   line-height: 1;
3136 |   padding: 8px 12px 8px 0;
3137 |   color: var(--text-muted);
3138 |   max-height: unset;
3139 |   box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.08);
3140 |   margin: 0;
3141 | }
3142 | 
3143 | .theme-dark .status-bar {
3144 |   background: rgb(50, 50, 50);
3145 |   border-color: var(--shade-3);
3146 | }
3147 | 
3148 | .status-bar-item {
3149 |   padding: 0 0 0 10px;
3150 | }
3151 | 
3152 | .status-bar-item-segment {
3153 |   margin-right: 10px;
3154 | }
3155 | 
3156 | .status-bar-item-icon {
3157 |   display: block;
3158 | }
3159 | 
3160 | .status-bar-item-icon svg {
3161 |   display: block;
3162 |   width: 1em;
3163 |   height: 1em;
3164 |   fill: currentColor;
3165 | }
3166 | 
3167 | /* --------------- */
3168 | /* Default ribbon sidedock icons */
3169 | 
3170 | .workspace-ribbon .workspace-ribbon-collapse-btn,
3171 | .workspace-ribbon.mod-left .workspace-ribbon-collapse-btn {
3172 |   color: var(--text-muted);
3173 |   display: flex;
3174 |   align-items: center;
3175 |   justify-content: center;
3176 |   cursor: pointer;
3177 |   position: absolute;
3178 |   height: unset;
3179 |   width: unset;
3180 |   top: unset;
3181 |   line-height: 0;
3182 |   padding: 4px 6px;
3183 |   bottom: 28px;
3184 |   border-radius: var(--radius-s);
3185 |   transition: none;
3186 |   opacity: 1;
3187 |   z-index: 9;
3188 | }
3189 | 
3190 | .workspace-ribbon.mod-left .workspace-ribbon-collapse-btn {
3191 |   position: static;
3192 |   margin-bottom: 5px;
3193 | }
3194 | 
3195 | .hider-frameless .workspace-ribbon.mod-left .workspace-ribbon-collapse-btn {
3196 |   margin-top: 32px;
3197 | }
3198 | 
3199 | .workspace-ribbon.mod-right .workspace-ribbon-collapse-btn {
3200 |   margin-bottom: 33px;
3201 |   position: static;
3202 |   border: 1px solid transparent;
3203 | }
3204 | 
3205 | .workspace-ribbon.mod-right:not(.is-collapsed) .workspace-ribbon-collapse-btn {
3206 |   margin-bottom: 33px;
3207 |   position: static;
3208 |   border: 1px solid var(--shade-10);
3209 |   background: rgb(245, 245, 245);
3210 |   box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
3211 | }
3212 | 
3213 | .theme-dark
3214 |   .workspace-ribbon.mod-right:not(.is-collapsed)
3215 |   .workspace-ribbon-collapse-btn {
3216 |   border: 1px solid var(--shade-20);
3217 |   background: rgb(60, 60, 60);
3218 | }
3219 | 
3220 | .hider-ribbon .workspace-ribbon-collapse-btn {
3221 |   display: none !important;
3222 | }
3223 | 
3224 | .workspace-ribbon .workspace-ribbon-collapse-btn:hover {
3225 |   background: var(--shade-plus-darker);
3226 | }
3227 | 
3228 | .workspace-ribbon-collapse-btn {
3229 |   margin: 0;
3230 |   padding-top: 8px;
3231 | }
3232 | .workspace-ribbon-collapse-btn,
3233 | .view-action,
3234 | .side-dock-ribbon-tab,
3235 | .side-dock-ribbon-action {
3236 |   cursor: var(--cursor);
3237 | }
3238 | .workspace-ribbon {
3239 |   width: unset;
3240 |   border-width: 0;
3241 |   background: var(--background-primary);
3242 | }
3243 | .workspace-ribbon.mod-right {
3244 |   opacity: 1;
3245 |   height: unset;
3246 |   position: fixed;
3247 |   width: unset;
3248 |   top: auto;
3249 |   bottom: 0;
3250 |   z-index: 9;
3251 |   right: 0;
3252 |   position: absolute;
3253 |   background: transparent;
3254 |   border-right: 0;
3255 |   padding: 0 5px 0 0;
3256 | }
3257 | .mod-right:not(.is-collapsed) ~ .workspace-split.mod-right-split {
3258 |   margin-right: 0;
3259 | }
3260 | .side-dock-ribbon-action {
3261 |   padding: 6px 0;
3262 | }
3263 | .side-dock-settings {
3264 |   margin-bottom: 5px;
3265 |   padding: 0;
3266 | }
3267 | .hider-ribbon .side-dock-settings {
3268 |   padding: 5px 5px 5px 0;
3269 | }
3270 | .side-dock-ribbon {
3271 |   border-left: 0;
3272 | }
3273 | .is-mobile .side-dock-ribbon {
3274 |   border-right: 1px solid transparent;
3275 |   padding: calc(env(safe-area-inset-top) + 4px) 0
3276 |     calc(env(safe-area-inset-bottom) + 4px) env(safe-area-inset-left);
3277 | }
3278 | body.hider-frameless:not(.hider-ribbon) .side-dock-actions {
3279 |   padding-top: 0;
3280 | }
3281 | body:not(.hider-ribbon) .side-dock-ribbon-action {
3282 |   padding: 6px 0 0 0;
3283 | }
3284 | body:not(.hider-ribbon).is-mobile .side-dock-ribbon-action {
3285 |   padding: 9px 0;
3286 | }
3287 | 
3288 | /* --------------- */
3289 | /* Popovers */
3290 | 
3291 | .popover,
3292 | .popover.hover-popover {
3293 |   min-height: 40px;
3294 |   box-shadow: 0 20px 40px var(--background-modifier-box-shadow);
3295 |   pointer-events: auto !important;
3296 |   border: 1px solid var(--background-modifier-border);
3297 | }
3298 | .popover .markdown-embed-link {
3299 |   display: none;
3300 | }
3301 | .popover .markdown-embed .markdown-preview-view {
3302 |   font-size: calc(100% * var(--scale-small) / 100);
3303 |   padding: 16px;
3304 | }
3305 | .popover.hover-popover .markdown-embed .markdown-embed-content {
3306 |   max-height: none;
3307 | }
3308 | .popover.hover-popover.mod-empty,
3309 | .popover.mod-empty {
3310 |   padding: 16px;
3311 | }
3312 | 
3313 | /* --------------- */
3314 | /* Graphs */
3315 | 
3316 | /* Full bleed */
3317 | body:not(.plugin-sliding-panes-rotate-header)
3318 |   .workspace-leaf-content[data-type="localgraph"]
3319 |   .view-header,
3320 | body:not(.plugin-sliding-panes-rotate-header)
3321 |   .workspace-leaf-content[data-type="graph"]
3322 |   .view-header {
3323 |   position: static;
3324 |   background: transparent !important;
3325 |   width: 100%;
3326 | }
3327 | body:not(.plugin-sliding-panes-rotate-header)
3328 |   .workspace-leaf-content[data-type="localgraph"]
3329 |   .view-content,
3330 | body:not(.plugin-sliding-panes-rotate-header)
3331 |   .workspace-leaf-content[data-type="graph"]
3332 |   .view-content {
3333 |   height: 100%;
3334 | }
3335 | body:not(.plugin-sliding-panes-rotate-header)
3336 |   .workspace-leaf-content[data-type="localgraph"]
3337 |   .view-header-title,
3338 | body:not(.plugin-sliding-panes-rotate-header)
3339 |   .workspace-leaf-content[data-type="graph"]
3340 |   .view-header-title {
3341 |   display: none;
3342 | }
3343 | body:not(.plugin-sliding-panes-rotate-header)
3344 |   .workspace-leaf-content[data-type="localgraph"]
3345 |   .view-actions,
3346 | body:not(.plugin-sliding-panes-rotate-header)
3347 |   .workspace-leaf-content[data-type="graph"]
3348 |   .view-actions {
3349 |   background: transparent;
3350 | }
3351 | 
3352 | .graph-controls {
3353 |   top: 10px !important;
3354 |   left: 10px;
3355 | 
3356 |   color: var(--shade-90);
3357 |   border: 1px solid var(--shade-10);
3358 |   background: rgb(245, 245, 245);
3359 |   box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);
3360 | 
3361 |   font-weight: 500;
3362 |   border-radius: var(--radius-m);
3363 |   padding: 18px;
3364 | }
3365 | 
3366 | .graph-controls.is-close {
3367 |   background: transparent;
3368 |   border: none;
3369 |   box-shadow: none;
3370 |   padding: 0;
3371 |   line-height: 1;
3372 | }
3373 | 
3374 | .theme-dark .graph-controls {
3375 |   border: 1px solid var(--shade-20);
3376 |   background: rgba(60, 60, 60, 0.5);
3377 | }
3378 | 
3379 | .theme-dark .graph-controls.is-close {
3380 |   background: transparent;
3381 |   border: none;
3382 | }
3383 | 
3384 | .graph-controls .collapse-icon {
3385 |   font-size: 14px;
3386 |   margin-left: -3px;
3387 | }
3388 | 
3389 | .graph-controls .tree-item-self {
3390 |   cursor: pointer;
3391 |   color: var(--text-normal);
3392 |   font-weight: 500;
3393 |   display: flex;
3394 |   align-items: center;
3395 |   line-height: 1;
3396 |   padding: 0;
3397 |   margin: 5px 0;
3398 | }
3399 | 
3400 | .graph-control-section:not(:last-child) .tree-item-children {
3401 |   border-bottom: none;
3402 | }
3403 | 
3404 | .graph-control-section .tree-item-children {
3405 |   margin: 0 !important;
3406 |   padding-bottom: 16px;
3407 | }
3408 | 
3409 | .graph-controls .search-input-container {
3410 |   padding: 0;
3411 |   margin-bottom: 10px !important;
3412 | }
3413 | 
3414 | .graph-controls .tree-item-collapse {
3415 |   color: var(--text-normal);
3416 |   padding: 0;
3417 |   position: static;
3418 |   line-height: 1;
3419 |   display: flex;
3420 | }
3421 | 
3422 | .graph-controls > .tree-item > .tree-item-self .right-triangle {
3423 |   opacity: unset;
3424 | }
3425 | 
3426 | .graph-controls .graph-control-section-header {
3427 |   padding: 4px;
3428 | }
3429 | 
3430 | .graph-controls .setting-item-name {
3431 |   font-size: 13px;
3432 |   color: var(--text-normal);
3433 | }
3434 | 
3435 | .graph-controls .setting-item.mod-toggle .setting-item-control {
3436 |   margin-top: 0;
3437 | }
3438 | 
3439 | .graph-controls.is-close .graph-controls-button.mod-open,
3440 | .graph-controls:not(.is-close) .graph-controls-button.mod-reset,
3441 | .graph-controls:not(.is-close) .graph-controls-button.mod-close,
3442 | .graph-controls:not(.is-close):hover .graph-controls-button.mod-reset,
3443 | .graph-controls:not(.is-close):hover .graph-controls-button.mod-close {
3444 |   display: flex;
3445 | }
3446 | 
3447 | .graph-controls-button {
3448 |   padding: 3px 3px;
3449 |   font-size: 16px;
3450 |   line-height: 1;
3451 |   border-radius: var(--radius-s);
3452 |   color: var(--text-muted);
3453 | }
3454 | 
3455 | .graph-controls-button:hover {
3456 |   background-color: var(--shade-plus-darker);
3457 | }
3458 | 
3459 | .graph-controls-button.mod-close {
3460 |   align-items: center;
3461 |   top: 4px;
3462 |   right: 4px;
3463 | }
3464 | 
3465 | .graph-controls-button.mod-reset {
3466 |   top: 4px;
3467 |   right: 26px;
3468 | }
3469 | 
3470 | .graph-controls.is-close .graph-controls-button {
3471 |   padding: 6px 7px;
3472 |   opacity: 1;
3473 | }
3474 | 
3475 | /* Tree-Item */
3476 | .tree-item-children {
3477 |   margin-left: 14px;
3478 | }
3479 | .local-graph-jumps-slider-container,
3480 | .workspace-split.mod-left-split .local-graph-jumps-slider-container,
3481 | .workspace-split.mod-right-split .local-graph-jumps-slider-container,
3482 | .workspace-fake-target-overlay .local-graph-jumps-slider-container {
3483 |   background: transparent;
3484 |   opacity: 0.6;
3485 |   padding: 0;
3486 |   left: 12px;
3487 |   transition: opacity 0.2s linear;
3488 |   height: auto;
3489 | }
3490 | .mod-root .local-graph-jumps-slider-container {
3491 |   right: 0;
3492 |   left: 0;
3493 |   width: var(--line-width);
3494 |   max-width: var(--max-width);
3495 |   margin: 0 auto;
3496 |   top: 30px;
3497 | }
3498 | .workspace-split.mod-left-split .local-graph-jumps-slider-container:hover,
3499 | .workspace-split.mod-right-split .local-graph-jumps-slider-container:hover,
3500 | .workspace-fake-target-overlay .local-graph-jumps-slider-container:hover,
3501 | .local-graph-jumps-slider-container:hover {
3502 |   opacity: 0.8;
3503 |   transition: opacity 0.2s linear;
3504 | }
3505 | 
3506 | .graph-view {
3507 |   font-family: var(--text) !important;
3508 | }
3509 | 
3510 | /* filled color for the circle when not hover*/
3511 | .graph-view.color-fill {
3512 |   color: var(--text-normal);
3513 | }
3514 | 
3515 | /*  color for the connecting line when not hover  --background-modifier-border*/
3516 | .graph-view.color-line {
3517 |   color: var(--shade-10);
3518 | }
3519 | 
3520 | /* color for text */
3521 | .graph-view.color-text {
3522 |   font-family: var(--text) !important;
3523 |   color: var(--text-normal);
3524 | }
3525 | 
3526 | /* filled color for the circle when hover*/
3527 | .graph-view.color-fill-highlight {
3528 |   color: var(--text-accent);
3529 | }
3530 | 
3531 | /*  color for the connecting line when hover*/
3532 | .graph-view.color-line-highlight {
3533 |   color: var(--text-accent);
3534 |   border: 0;
3535 | }
3536 | 
3537 | /* color for the circle stroke */
3538 | .graph-view.color-circle {
3539 |   color: var(--text-accent);
3540 | }
3541 | 
3542 | .graph-view.color-fill-unresolved {
3543 |   color: var(--shade-20);
3544 |   opacity: 1;
3545 | }
3546 | 
3547 | .graph-view.color-fill-tag {
3548 |   color: rgb(var(--teal-rgb)) !important;
3549 | }
3550 | 
3551 | .graph-view.color-fill-attachment {
3552 |   color: rgb(var(--yellow-rgb)) !important;
3553 | }
3554 | 
3555 | /* --------------- */
3556 | /* Settings */
3557 | 
3558 | .modal-close-button {
3559 |   display: flex;
3560 |   font-size: 20px;
3561 |   line-height: 1;
3562 |   top: 9px;
3563 |   right: 9px;
3564 |   cursor: var(--cursor);
3565 |   width: 20px;
3566 |   height: 20px;
3567 |   align-items: center;
3568 |   justify-content: center;
3569 | }
3570 | .document-search-close-button:before,
3571 | .modal-close-button:before {
3572 |   line-height: 1;
3573 |   font-weight: 600;
3574 |   display: flex;
3575 |   align-items: center;
3576 |   justify-content: center;
3577 | }
3578 | .horizontal-tab-content,
3579 | .vertical-tab-content {
3580 |   background: var(--background-primary);
3581 | }
3582 | .modal.mod-settings .vertical-tab-header {
3583 |   background: var(--background-secondary);
3584 |   padding-top: 5px;
3585 | }
3586 | .vertical-tab-header-group-title {
3587 |   color: var(--shade-40);
3588 |   font-size: 13px;
3589 |   font-weight: 700;
3590 |   text-transform: none;
3591 |   letter-spacing: 0;
3592 |   padding: 6px 18px;
3593 | }
3594 | .vertical-tab-header-group-items {
3595 |   padding: 0 10px;
3596 | }
3597 | .vertical-tab-nav-item {
3598 |   font-size: 14px;
3599 |   padding: 5px 8px;
3600 |   color: var(--text-normal);
3601 |   border: none;
3602 |   background: transparent;
3603 |   cursor: var(--cursor);
3604 |   font-weight: 500;
3605 |   border-radius: var(--radius-s);
3606 |   line-height: 1.4;
3607 | }
3608 | .vertical-tab-nav-item:hover {
3609 |   background: transparent;
3610 | }
3611 | .vertical-tab-nav-item.is-active {
3612 |   color: var(--text-normal);
3613 |   background: var(--shade-plus-darker);
3614 | }
3615 | .setting-item-name {
3616 |   font-weight: 500;
3617 | }
3618 | .hotkey-list-container,
3619 | .hotkey-search-container {
3620 |   padding-left: 2px;
3621 | }
3622 | .setting-hotkey {
3623 |   display: flex;
3624 |   align-items: center;
3625 |   background-color: var(--background-modifier-border);
3626 |   padding: 4px 4px 4px 10px;
3627 |   line-height: 18px;
3628 |   min-height: 0;
3629 | }
3630 | .setting-add-hotkey-button,
3631 | .setting-restore-hotkey-button {
3632 |   color: var(--text-muted);
3633 | }
3634 | .setting-hotkey.mod-empty {
3635 |   background: transparent;
3636 | }
3637 | .dropdown {
3638 |   font-size: 14px;
3639 |   font-weight: 500;
3640 |   font-family: var(--text);
3641 |   background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23000%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
3642 |   color: var(--text-normal);
3643 |   padding: 4px 28px 4px 14px;
3644 |   background-color: #ffffff;
3645 |   border: 1px solid rgba(0, 0, 0, 0.12);
3646 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08);
3647 |   border-radius: var(--radius-m);
3648 |   cursor: var(--cursor);
3649 | }
3650 | .theme-dark .dropdown {
3651 |   color: #dfdedf;
3652 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.1),
3653 |     inset 0px 1px 1px rgba(255, 255, 255, 0.3);
3654 |   background-color: var(--shade-50);
3655 |   background-image: url("data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23FFF%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E");
3656 | }
3657 | .theme-dark .dropdown:focus,
3658 | .dropdown:focus {
3659 |   border-color: rgba(0, 0, 0, 0.12);
3660 | }
3661 | 
3662 | .is-mobile .dropdown {
3663 |   padding: 12px 28px 12px 14px;
3664 | }
3665 | 
3666 | .is-mobile .modal-setting-back-button {
3667 |   color: var(--text-normal);
3668 |   font-weight: 500;
3669 |   border-bottom: 1px solid var(--shade-5);
3670 | }
3671 | 
3672 | /* --------------- */
3673 | /* Scroll bars */
3674 | 
3675 | ::-webkit-scrollbar {
3676 |   width: 10px;
3677 |   height: 10px;
3678 |   background-color: transparent;
3679 | }
3680 | ::-webkit-scrollbar-track {
3681 |   background-color: transparent;
3682 | }
3683 | ::-webkit-scrollbar-thumb {
3684 |   background-clip: padding-box;
3685 |   border: 3px solid transparent;
3686 |   min-height: 40px;
3687 | }
3688 | 
3689 | .modal .vertical-tab-header::-webkit-scrollbar-track,
3690 | .mod-left-split .workspace-tabs ::-webkit-scrollbar-track {
3691 |   background-color: transparent;
3692 | }
3693 | 
3694 | /* Tooltip */
3695 | .tooltip {
3696 |   animation: unset !important;
3697 | }
3698 | 
3699 | /*  */
3700 | 
3701 | .cc-no-sidebar-animation .workspace-split.mod-right-split,
3702 | .cc-no-sidebar-animation .workspace-split.mod-left-split {
3703 |   transition: none !important;
3704 | }
3705 | 
3706 | .cc-no-tree-animation .collapse-icon svg,
3707 | .cc-no-tree-animation .tree-item-children,
3708 | .cc-no-tree-animation .nav-folder-children {
3709 |   transition: none !important;
3710 | }
3711 | body.plugin-sliding-panes-rotate-header
3712 |   .workspace
3713 |   > .mod-root
3714 |   > .workspace-leaf
3715 |   > .workspace-leaf-content
3716 |   > .view-header {
3717 |   padding: 0 !important;
3718 |   display: flex;
3719 |   align-items: center;
3720 | }
3721 | body.plugin-sliding-panes-rotate-header
3722 |   .workspace
3723 |   > .mod-root
3724 |   > .workspace-leaf
3725 |   > .workspace-leaf-content
3726 |   > .view-header
3727 |   > .view-header-title-container:before {
3728 |   display: none;
3729 | }
3730 | body.plugin-sliding-panes-rotate-header .workspace > .mod-root .view-header {
3731 |   text-orientation: sideways;
3732 | }
3733 | body.plugin-sliding-panes-stacking .workspace > .mod-root > .workspace-leaf,
3734 | body.plugin-sliding-panes .workspace-split.mod-vertical > .workspace-leaf {
3735 |   box-shadow: var(--shade-plus-darker) -1px -0px !important;
3736 | }
3737 | 
3738 | body.plugin-sliding-panes-stacking.theme-dark
3739 |   .workspace
3740 |   > .mod-root
3741 |   > .workspace-leaf,
3742 | body.plugin-sliding-panes.theme-dark
3743 |   .workspace-split.mod-vertical
3744 |   > .workspace-leaf {
3745 |   box-shadow: var(--dark-separator) -1px -0px !important;
3746 | }
3747 | 
3748 | body.plugin-sliding-panes .mod-horizontal .workspace-leaf {
3749 |   box-shadow: none !important;
3750 | }
3751 | 
3752 | body.plugin-sliding-panes:not(.is-fullscreen)
3753 |   .workspace-split.is-collapsed
3754 |   ~ .workspace-split.mod-root
3755 |   .view-header {
3756 |   padding-top: 0;
3757 |   transition: none;
3758 | }
3759 | body.plugin-sliding-panes .view-header-title:before {
3760 |   background: none;
3761 | }
3762 | body.plugin-sliding-panes .view-header {
3763 |   background: none;
3764 | }
3765 | body.plugin-sliding-panes-rotate-header
3766 |   .workspace
3767 |   > .mod-root
3768 |   .view-header-title-container
3769 |   body.plugin-sliding-panes-rotate-header.plugin-sliding-panes-header-alt
3770 |   .workspace
3771 |   > .mod-root
3772 |   .view-header-title {
3773 |   margin-top: 0;
3774 | }
3775 | body.plugin-sliding-panes-rotate-header
3776 |   .workspace
3777 |   > .mod-root
3778 |   > .workspace-leaf
3779 |   > .workspace-leaf-content
3780 |   > .view-header
3781 |   > .view-header-title-container
3782 |   > .view-header-title {
3783 |   line-height: 1;
3784 |   padding: 10px 6px !important;
3785 |   margin: 0;
3786 |   transform: translateX(1.5px);
3787 | }
3788 | body.plugin-sliding-panes-rotate-header
3789 |   .workspace
3790 |   > .mod-root
3791 |   .view-header-title-container {
3792 |   margin-left: 0;
3793 |   padding-top: 0;
3794 | }
3795 | body.plugin-sliding-panes-rotate-header.plugin-sliding-panes-header-alt
3796 |   .workspace
3797 |   > .mod-root
3798 |   > .workspace-leaf
3799 |   > .workspace-leaf-content
3800 |   > .view-header
3801 |   .view-header-title-container {
3802 |   display: flex;
3803 |   align-items: center;
3804 |   margin: 0 0;
3805 |   width: 100%;
3806 |   max-width: unset;
3807 | }
3808 | body.plugin-sliding-panes-rotate-header .view-header-title-container {
3809 |   position: static;
3810 | }
3811 | body.plugin-sliding-panes-rotate-header
3812 |   .app-container
3813 |   .workspace
3814 |   > .mod-root
3815 |   > .workspace-leaf
3816 |   > .workspace-leaf-content
3817 |   > .view-header
3818 |   .view-actions {
3819 |   padding-left: 0;
3820 |   padding-bottom: 0px;
3821 |   bottom: 0;
3822 | 
3823 |   width: 100%;
3824 |   margin: 0 0 28px;
3825 |   display: flex;
3826 |   align-items: center;
3827 |   justify-content: center;
3828 | }
3829 | body.plugin-sliding-panes-rotate-header.hider-ribbon
3830 |   .workspace-split.mod-left-split.is-collapsed
3831 |   + .mod-root
3832 |   > .workspace-leaf
3833 |   > .workspace-leaf-content
3834 |   > .view-header
3835 |   .view-actions {
3836 |   margin-bottom: 47px !important;
3837 | }
3838 | body.plugin-sliding-panes-rotate-header
3839 |   .workspace
3840 |   > .mod-root
3841 |   > .workspace-leaf
3842 |   > .workspace-leaf-content
3843 |   > .view-header
3844 |   .view-action {
3845 |   margin: 5px 0 0 0 !important;
3846 | }
3847 | body.plugin-sliding-panes-rotate-header .view-header-icon {
3848 |   opacity: 0.5;
3849 | }
3850 | body.plugin-sliding-panes.is-fullscreen .view-header-icon {
3851 |   padding-top: 8px;
3852 | }
3853 | html
3854 |   > body.plugin-sliding-panes-rotate-header
3855 |   .workspace
3856 |   > .mod-root
3857 |   > .workspace-leaf
3858 |   > .workspace-leaf-content
3859 |   > .view-header
3860 |   .view-header-icon {
3861 |   margin: 28px 0 17px;
3862 | }
3863 | body.plugin-sliding-panes .mod-root .graph-controls {
3864 |   top: 20px;
3865 |   left: 30px;
3866 | }
3867 | 
3868 | .plugin-sliding-panes
3869 |   .workspace-split.mod-root.mod-vertical
3870 |   .workspace-leaf-resize-handle {
3871 |   display: none;
3872 | }
3873 | 
3874 | .plugin-sliding-panes-rotate-header .markdown-preview-sizer {
3875 |   padding-top: 5rem;
3876 | }
3877 | 
3878 | .plugin-sliding-panes-rotate-header
3879 |   .markdown-embed-content
3880 |   .markdown-preview-sizer {
3881 |   padding-top: 0;
3882 | }
3883 | 
3884 | .plugin-sliding-panes-rotate-header .markdown-preview-section > div {
3885 |   padding-left: var(--header-width);
3886 |   padding-right: calc(var(--header-width) * 2);
3887 | }
3888 | 
3889 | html .plugin-sliding-panes-rotate-header .CodeMirror-lines {
3890 |   padding-top: 5rem;
3891 | }
3892 | 
3893 | .plugin-sliding-panes-rotate-header .view-header-icon:after {
3894 |   line-height: 0;
3895 | }
3896 | 
3897 | html .plugin-sliding-panes-rotate-header.embedded-note-title .CodeMirror-lines {
3898 |   padding-top: 0;
3899 | }
3900 | 
3901 | #calendar-container {
3902 |   --color-background-day-empty: var(--background-secondary-alt);
3903 |   --color-background-day-active: var(--background-tertiary);
3904 |   --color-background-day-hover: var(--background-tertiary);
3905 |   --color-dot: var(--text-faint);
3906 |   --color-text-title: var(--text-normal);
3907 |   --color-text-heading: var(--text-muted);
3908 |   --color-text-day: var(--text-normal);
3909 |   --color-text-today: var(--text-normal);
3910 |   --color-arrow: var(--text-faint);
3911 |   --color-background-day-empty: transparent;
3912 | }
3913 | #calendar-container .right-nav {
3914 |   align-items: center;
3915 | }
3916 | #calendar-container .calendar {
3917 |   background-color: var(--shade-3);
3918 |   border-spacing: 0;
3919 |   box-shadow: 0px 1px 1px 1px rgba(0, 0, 0, 0.1);
3920 |   border-radius: var(--radius-l);
3921 |   padding: 5px;
3922 |   border-collapse: separate;
3923 | }
3924 | #calendar-container h2 {
3925 |   font-weight: 400;
3926 |   font-size: 16px;
3927 | }
3928 | .mod-root #calendar-container {
3929 |   width: var(--line-width);
3930 |   max-width: var(--max-width);
3931 |   margin: 0 auto;
3932 |   padding: 0;
3933 | }
3934 | #calendar-container h2 .arrow {
3935 |   color: var(--text-faint);
3936 |   cursor: var(--cursor);
3937 | }
3938 | #calendar-container h2 .arrow:hover,
3939 | #calendar-container h2 .arrow:hover .arrow {
3940 |   fill: var(--text-muted);
3941 |   color: var(--text-muted);
3942 | }
3943 | #calendar-container tr th {
3944 |   font-weight: 500;
3945 |   font-size: 11px;
3946 |   text-transform: none;
3947 |   color: var(--text-normal);
3948 |   padding: 5px 0 10px;
3949 |   letter-spacing: 0;
3950 | }
3951 | #calendar-container tr td {
3952 |   border-radius: 4px;
3953 |   cursor: var(--cursor);
3954 |   transition: none;
3955 | 
3956 |   border: none;
3957 |   padding: 0;
3958 |   width: calc(100% / 7);
3959 | }
3960 | #calendar-container td:not(:empty):hover {
3961 |   background: none;
3962 | }
3963 | #calendar-container .nav {
3964 |   padding: 0;
3965 | }
3966 | #calendar-container tr td .dot {
3967 |   margin: 0;
3968 | }
3969 | #calendar-container .arrow {
3970 |   cursor: var(--cursor);
3971 |   width: auto;
3972 |   display: flex;
3973 |   line-height: 1;
3974 |   padding: 4px 6px;
3975 |   border-radius: var(--radius-s);
3976 | }
3977 | #calendar-container .arrow:hover {
3978 |   background-color: var(--shade-plus-darker);
3979 | }
3980 | #calendar-container .arrow > svg {
3981 |   color: var(--text-muted);
3982 |   width: 13px;
3983 |   height: 13px;
3984 | }
3985 | #calendar-container .reset-button {
3986 |   color: var(--text-muted);
3987 |   font-size: var(--font-smaller);
3988 |   line-height: 1;
3989 |   padding: 4px 6px;
3990 |   margin: 0 5px;
3991 |   border-radius: var(--radius-s);
3992 | }
3993 | #calendar-container .reset-button:hover {
3994 |   color: var(--text-muted);
3995 |   background-color: var(--shade-plus-darker);
3996 | }
3997 | #calendar-container .title {
3998 |   font-size: 18px;
3999 | }
4000 | 
4001 | #calendar-container .month,
4002 | #calendar-container .title,
4003 | #calendar-container .reset-button {
4004 |   letter-spacing: 0;
4005 |   cursor: var(--cursor);
4006 |   font-size: 13px;
4007 |   font-weight: 500;
4008 |   text-transform: none;
4009 | }
4010 | 
4011 | #calendar-container .today {
4012 |   color: var(--text-accent);
4013 |   font-weight: 700;
4014 | }
4015 | 
4016 | #calendar-container .active {
4017 |   color: var(--text-normal);
4018 | }
4019 | #calendar-container .week-num:hover,
4020 | #calendar-container .day:hover {
4021 |   background: var(--shade-0);
4022 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
4023 | }
4024 | 
4025 | #calendar-container .active,
4026 | #calendar-container .active.today {
4027 |   background: var(--shade-0);
4028 |   font-weight: 500;
4029 |   box-shadow: inset 0 0 0 2px hsla(var(--accent-hsl), 0.5),
4030 |     0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
4031 | }
4032 | 
4033 | #calendar-container .active.today {
4034 |   color: var(--text-accent);
4035 |   font-weight: 700;
4036 | }
4037 | 
4038 | #calendar-container .active.day:hover {
4039 |   background: var(--shade-0);
4040 |   box-shadow: inset 0 0 0 2px hsla(var(--accent-hsl), 0.5),
4041 |     0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
4042 | }
4043 | 
4044 | #calendar-container svg.dot,
4045 | #calendar-container .active svg.dot {
4046 |   fill: var(--text-accent);
4047 | }
4048 | #calendar-container svg.task,
4049 | #calendar-container .active svg.task {
4050 |   stroke: var(--text-accent);
4051 |   stroke-width: 1px;
4052 | }
4053 | #calendar-container svg.dot,
4054 | #calendar-container svg.task {
4055 |   width: 4px;
4056 |   height: 4px;
4057 | }
4058 | #calendar-container .year {
4059 |   color: var(--text-normal);
4060 | }
4061 | 
4062 | #calendar-container .day {
4063 |   font-size: 14px;
4064 |   line-height: 1;
4065 |   padding: 10px 0;
4066 |   margin: 1px;
4067 |   border-radius: var(--radius-s);
4068 |   transition: box-shadow 100ms ease-out, background-color 100ms ease-out;
4069 | }
4070 | 
4071 | #calendar-container .day > .dot-container {
4072 |   position: absolute;
4073 |   bottom: 3px;
4074 |   left: 0;
4075 |   right: 0;
4076 |   height: 4px;
4077 | }
4078 | 
4079 | .markdown-source-view,
4080 | .cm-s-obsidian .cm-formatting-hashtag,
4081 | .cm-s-obsidian {
4082 |   line-height: var(--line-height);
4083 |   font-family: var(--text-editor) !important;
4084 | }
4085 | .cm-s-obsidian .cm-header {
4086 |   font-weight: var(--bold-weight);
4087 | }
4088 | 
4089 | .markdown-preview-section strong,
4090 | .cm-s-obsidian .cm-strong {
4091 |   font-weight: var(--strong-weight);
4092 |   color: var(--strong-color);
4093 | }
4094 | 
4095 | .markdown-preview-section em,
4096 | .cm-s-obsidian .cm-em {
4097 |   color: var(--em-color);
4098 | }
4099 | 
4100 | /* --------------- */
4101 | /* Editor mode */
4102 | 
4103 | .CodeMirror-sizer {
4104 |   margin-left: 0 !important;
4105 |   border-right-width: 0px !important;
4106 | }
4107 | 
4108 | .CodeMirror-scroll {
4109 |   padding-left: 3.5rem;
4110 |   padding-right: 3.5rem;
4111 |   margin-right: 0;
4112 |   margin-bottom: 0;
4113 | }
4114 | 
4115 | .workspace-tabs .CodeMirror-scroll {
4116 |   padding-left: 1.5rem;
4117 |   padding-right: 1.5rem;
4118 | }
4119 | 
4120 | .markdown-source-view.mod-cm5 {
4121 |   padding-left: 0;
4122 |   padding-right: 0;
4123 | }
4124 | 
4125 | .CodeMirror-scroll::-webkit-scrollbar-track,
4126 | .CodeMirror-scroll::-webkit-scrollbar-thumb,
4127 | .CodeMirror-scroll::-webkit-scrollbar {
4128 |   opacity: 0;
4129 |   border: none;
4130 |   background-color: transparent;
4131 | }
4132 | 
4133 | .markdown-source-view {
4134 |   padding: 0;
4135 | }
4136 | .cm-s-obsidian .CodeMirror-code {
4137 |   padding-right: 0;
4138 | }
4139 | html .CodeMirror-lines {
4140 |   padding-top: 2.5rem;
4141 |   padding-bottom: 170px;
4142 | }
4143 | 
4144 | .CodeMirror pre.CodeMirror-line,
4145 | .CodeMirror pre.CodeMirror-line-like {
4146 |   padding-left: 0;
4147 |   padding-right: 0;
4148 | }
4149 | .workspace .markdown-preview-view {
4150 |   padding: 0;
4151 | }
4152 | .workspace .markdown-preview-view .markdown-embed {
4153 |   margin: 0;
4154 | }
4155 | .workspace .markdown-preview-view .markdown-embed-content {
4156 |   max-height: none;
4157 | }
4158 | .markdown-embed-title,
4159 | .internal-embed .markdown-preview-section {
4160 |   max-width: 100%;
4161 | }
4162 | 
4163 | 
4164 | /* Transcluded notes embeds */
4165 | 
4166 | .markdown-preview-view.is-readable-line-width
4167 |   .markdown-embed
4168 |   .markdown-preview-sizer {
4169 |   max-width: 100%;
4170 |   width: 100%;
4171 | }
4172 | 
4173 | .markdown-embed h1:first-child {
4174 |   margin-block-start: 0em;
4175 | }
4176 | 
4177 | .markdown-preview-view .markdown-embed {
4178 |   margin-top: var(--nested-padding);
4179 |   padding: 0 calc(var(--nested-padding) / 2) 0 var(--nested-padding);
4180 | }
4181 | .markdown-embed-title {
4182 |   line-height: inherit;
4183 |   height: unset;
4184 |   color: var(--shade-40);
4185 | }
4186 | .markdown-embed .markdown-preview-sizer:first-child ul {
4187 |   margin-block-start: 2px;
4188 | }
4189 | .markdown-embed .markdown-preview-section:last-child blockquote,
4190 | .markdown-embed .markdown-preview-section:last-child p,
4191 | .markdown-embed .markdown-preview-section:last-child ul {
4192 |   margin-block-end: 0;
4193 | }
4194 | .internal-embed:not([src*="#^"]) .markdown-embed-link {
4195 |   left: 0;
4196 |   width: 100%;
4197 | }
4198 | .markdown-embed-link,
4199 | .file-embed-link {
4200 |   top: 0px;
4201 |   right: 0;
4202 |   text-align: right;
4203 | }
4204 | .file-embed-link svg,
4205 | .markdown-embed-link svg {
4206 |   position: relative;
4207 |   top: 2px;
4208 |   width: 16px;
4209 |   opacity: 0;
4210 | }
4211 | .markdown-embed:hover .file-embed-link svg,
4212 | .markdown-embed:hover .markdown-embed-link svg {
4213 |   opacity: 1;
4214 | }
4215 | .markdown-preview-view .markdown-embed-content > .markdown-preview-view {
4216 |   max-height: none !important;
4217 | }
4218 | .markdown-embed .markdown-preview-view {
4219 |   padding: 0;
4220 | }
4221 | .internal-embed .markdown-embed {
4222 |   border: 0;
4223 |   border-left: 2px solid var(--shade-plus-darker);
4224 |   border-radius: 0;
4225 | }
4226 | 
4227 | /* --------------- */
4228 | /* Checkboxes */
4229 | 
4230 | input[type="checkbox"] {
4231 |   width: 0.866em;
4232 |   height: 0.866em;
4233 |   cursor: var(--cursor);
4234 |   -webkit-appearance: none;
4235 |   appearance: none;
4236 |   padding: 0;
4237 |   background: var(--shade-0);
4238 |   border: 1px solid var(--shade-40);
4239 |   box-sizing: border-box;
4240 |   box-shadow: inset 0px 1px 3px rgba(0, 0, 0, 0.15);
4241 |   border-radius: 4px;
4242 | }
4243 | 
4244 | .theme-dark input[type="checkbox"] {
4245 |   background: linear-gradient(
4246 |     180deg,
4247 |     rgba(255, 255, 255, 0.14) 0%,
4248 |     rgba(255, 255, 255, 0.28) 100%
4249 |   );
4250 |   box-shadow: 0px 0px 1px rgba(0, 0, 0, 0.25),
4251 |     inset 0px 0.5px 0px rgba(255, 255, 255, 0.15);
4252 |   border-color: var(--shade-5);
4253 | }
4254 | 
4255 | input[type="checkbox"]:focus,
4256 | input[type="checkbox"]:hover {
4257 |   outline: 0;
4258 | }
4259 | .is-flashing input[type="checkbox"]:checked,
4260 | input[type="checkbox"]:checked {
4261 |   background: hsl(var(--accent-hsl));
4262 |   box-shadow: none;
4263 |   border-color: transparent;
4264 | }
4265 | 
4266 | .is-flashing input[type="checkbox"]:checked:before,
4267 | input[type="checkbox"]:checked:before {
4268 |   background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="8" height="8" fill="none" viewBox="0 0 8 8"><path fill="white" d="M3.215 7.785c.336 0 .594-.12.77-.383L7.59 2a.955.955 0 00.176-.535c0-.469-.368-.82-.848-.82-.328 0-.535.117-.734.43l-2.98 4.663-1.485-1.742A.795.795 0 001.07 3.7c-.484 0-.84.352-.84.824 0 .215.06.387.243.598L2.48 7.453c.2.23.434.332.735.332z"/></svg>');
4269 |   background-repeat: no-repeat;
4270 |   background-position: center center;
4271 |   background-size: 66%;
4272 |   line-height: 1;
4273 |   width: 100%;
4274 |   height: 100%;
4275 |   content: " ";
4276 |   display: block;
4277 | }
4278 | 
4279 | .markdown-preview-section > .contains-task-list {
4280 |   padding-bottom: 0.5em;
4281 | }
4282 | .markdown-preview-view ul > li.task-list-item.is-checked {
4283 |   text-decoration: none;
4284 |   color: var(--text-normal);
4285 | }
4286 | .markdown-preview-view .task-list-item-checkbox {
4287 |   width: 0.866em;
4288 |   height: 0.866em;
4289 |   position: relative;
4290 |   line-height: 0;
4291 |   margin-left: -1.1em;
4292 |   margin-right: 6px;
4293 |   filter: none;
4294 | 
4295 |   margin-bottom: 0;
4296 |   top: 2px;
4297 | }
4298 | .markdown-preview-view ol .task-list-item-checkbox {
4299 |   margin-left: 0;
4300 | }
4301 | .markdown-preview-view ul > li.task-list-item {
4302 |   text-indent: 0;
4303 | }
4304 | .markdown-preview-view .task-list-item {
4305 |   padding-inline-start: 0;
4306 | }
4307 | .side-dock-plugin-panel-inner {
4308 |   padding-right: 6px;
4309 |   padding-left: 6px;
4310 | }
4311 | 
4312 | /* --------------- */
4313 | /* Folding */
4314 | 
4315 | .markdown-preview-view .collapse-indicator {
4316 |   position: relative;
4317 |   cursor: pointer;
4318 |   margin: 0;
4319 |   float: none;
4320 |   display: inline;
4321 |   line-height: inherit;
4322 |   font-size: unset;
4323 |   width: 0;
4324 |   height: 0.75em;
4325 |   padding: 0;
4326 | }
4327 | 
4328 | .markdown-preview-view .collapse-indicator > svg.right-triangle {
4329 |   color: var(--shade-40);
4330 |   width: 14px;
4331 |   height: 14px;
4332 |   position: absolute;
4333 |   left: -2.33rem;
4334 |   top: 50%;
4335 |   transform: translateY(-50%);
4336 | }
4337 | 
4338 | .is-mobile .markdown-preview-view .collapse-indicator > svg.right-triangle {
4339 |   width: 16px;
4340 |   height: 16px;
4341 | }
4342 | 
4343 | 
4344 | .markdown-preview-view
4345 |   .heading-collapse-indicator.collapse-indicator
4346 |   > svg.right-triangle {
4347 |   left: -1.2rem;
4348 | }
4349 | 
4350 | .is-mobile .markdown-preview-view .heading-collapse-indicator {
4351 |   margin-left: 0;
4352 | }
4353 | 
4354 | .markdown-preview-view .is-collapsed .collapse-indicator > svg.right-triangle {
4355 |   transform: translateY(-50%) rotate(-90deg);
4356 | }
4357 | 
4358 | .markdown-preview-view li.is-collapsed,
4359 | .markdown-preview-view .markdown-preview-section > div.is-collapsed > * {
4360 |   background-image: linear-gradient(
4361 |     to right,
4362 |     var(--shade-10) 50%,
4363 |     transparent 50%
4364 |   );
4365 |   background-position: 0 bottom;
4366 |   background-repeat: repeat-x;
4367 |   background-size: 6px 3px;
4368 | }
4369 | .markdown-preview-view .heading-collapse-indicator {
4370 |   margin-left: 0;
4371 |   padding: 0;
4372 | }
4373 | .markdown-preview-view .heading-collapse-indicator:before {
4374 |   font-size: 1rem;
4375 |   left: -1.3rem;
4376 | }
4377 | .markdown-preview-view h4 .heading-collapse-indicator,
4378 | .markdown-preview-view h5 .heading-collapse-indicator,
4379 | .markdown-preview-view h6 .heading-collapse-indicator {
4380 |   margin-top: -7px;
4381 | }
4382 | 
4383 | span[title="Fold line"],
4384 | span[title="Unfold line"] {
4385 |   line-height: 1;
4386 |   position: relative;
4387 |   /* top: 4px; */
4388 |   font-size: 0;
4389 |   color: transparent;  
4390 |   display: flex;
4391 |   height: 100%;
4392 |   align-items: center;
4393 | }
4394 | 
4395 | .CodeMirror-foldgutter-open,
4396 | .CodeMirror-foldgutter-folded {
4397 |   background-color: rgba(var(--background-rgb), 0.6);
4398 |   color: var(--text-faint);
4399 |   cursor: var(--cursor);
4400 |   line-height: 1;
4401 |   display: flex;
4402 |   height: var(--editor-line-height-rem);
4403 |   align-items: center;
4404 |   transition: color 140ms ease;
4405 | }
4406 | 
4407 | span[title="Fold line"]:hover,
4408 | span[title="Unfold line"]:hover,
4409 | .CodeMirror-foldgutter-open:hover,
4410 | .CodeMirror-foldgutter-folded:hover {
4411 |   color: var(--text-muted);
4412 | }
4413 | span[title="Fold line"]:after,
4414 | span[title="Unfold line"]:after,
4415 | .CodeMirror-foldgutter-open:after,
4416 | .CodeMirror-foldgutter-folded:after {
4417 |   text-align: center;
4418 |   color: var(--text-faint);
4419 |   font-size: 0.9rem;
4420 |   display: flex;
4421 |   align-items: center;
4422 |   justify-content: center;
4423 |   width: 0.9rem;
4424 |   height: 0.9rem;
4425 |   line-height: 1;
4426 |   font-weight: 600;
4427 | }
4428 | 
4429 | span[title="Fold line"]:after,
4430 | span[title="Unfold line"]:after {
4431 |   font-size: 1rem;
4432 |   line-height: 1;
4433 | }
4434 | 
4435 | span[title="Unfold line"]:after,
4436 | .CodeMirror-foldgutter-folded:after {
4437 |   content: "›";
4438 |   transform: translateY(-2px);
4439 | }
4440 | 
4441 | span[title="Fold line"]:after,
4442 | .CodeMirror-foldgutter-open:after {
4443 |   content: "›";
4444 |   transform: rotate(90deg);
4445 | }
4446 | 
4447 | .CodeMirror-linenumbers,
4448 | .CodeMirror-foldgutter {
4449 |   width: 18px;
4450 | }
4451 | 
4452 | .CodeMirror-gutter.CodeMirror-linenumbers,
4453 | .CodeMirror-gutter.CodeMirror-foldgutter {
4454 |   background: transparent;
4455 | }
4456 | 
4457 | .CodeMirror-linenumbers {
4458 |   margin-left: -20px;
4459 | }
4460 | 
4461 | .CodeMirror-gutter-wrapper {
4462 |   padding: 0;
4463 |   height: 100%;
4464 |   width: 18px;
4465 |   left: -1.5em !important;
4466 |   display: flex;
4467 | }
4468 | 
4469 | .CodeMirror-gutter-elt {
4470 |   width: unset !important;
4471 |   position: static;
4472 | }
4473 | 
4474 | .cm-s-obsidian .CodeMirror-linenumber {
4475 |   font-family: var(--text);
4476 |   width: 18px !important;
4477 |   min-width: 0;
4478 |   position: absolute;
4479 |   left: -20px !important;
4480 |   padding: 3px 0 0;
4481 |   display: flex;
4482 |   justify-content: flex-end;
4483 |   font-feature-settings: normal;
4484 | }
4485 | 
4486 | .workspace-split > .workspace-leaf .cm-s-obsidian .CodeMirror-gutters {
4487 |   width: 18px;
4488 |   left: 0 !important;
4489 |   padding-right: 0;
4490 |   transform: translateX(2rem);
4491 | }
4492 | 
4493 | .is-mobile .cm-s-obsidian .cm-gutters {
4494 |   background-color: transparent !important;
4495 | }
4496 | 
4497 | .CodeMirror-foldmarker {
4498 |   font-size: 0 !important;
4499 |   color: transparent;
4500 |   margin-left: 6px;
4501 |   position: relative;
4502 |   top: 1px;
4503 | }
4504 | 
4505 | /* --------------- */
4506 | /* Preview mode  */
4507 | 
4508 | .markdown-preview-view hr {
4509 |   height: 1px;
4510 |   border-width: 2px 0 0 0;
4511 | }
4512 | 
4513 | .markdown-preview-section a,
4514 | .markdown-preview-view .internal-link {
4515 |   margin-bottom: 0;
4516 |   position: relative;
4517 |   text-decoration: none;
4518 |   box-shadow: 0 3px transparent;
4519 |   transition: box-shadow 100ms ease-out;
4520 | }
4521 | .markdown-preview-section a:hover {
4522 |   color: var(--text-accent);
4523 |   box-shadow: inset 0 -2px hsla(var(--accent-hsl), 0.15);
4524 |   text-shadow: -1px -1px 0 rgb(var(--background-rgb)),
4525 |     1px -1px 0 rgb(var(--background-rgb)), -1px 1px 0 rgb(var(--background-rgb)),
4526 |     1px 1px 0 rgb(var(--background-rgb));
4527 | }
4528 | .external-link {
4529 |   background: none;
4530 |   padding-right: 0;
4531 | }
4532 | 
4533 | .external-link::after {
4534 |   display: inline-block;
4535 |   width: 0.7em;
4536 |   height: 0.7em;
4537 |   content: " ";
4538 |   margin-left: 2px;
4539 |   background-color: var(--shade-20);
4540 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path d="M3.707 13.707l8.293-8.293v3.586c0 0.552 0.448 1 1 1s1-0.448 1-1v-6c0-0.404-0.244-0.769-0.617-0.924-0.124-0.051-0.254-0.076-0.383-0.076v-0.001h-6c-0.552 0-1 0.448-1 1s0.448 1 1 1h3.586l-8.293 8.293c-0.195 0.195-0.293 0.451-0.293 0.707s0.098 0.512 0.293 0.707c0.39 0.391 1.024 0.391 1.414 0z"></path></svg>');
4541 | }
4542 | 
4543 | .kanban-plugin__item-markdown .external-link::after {
4544 |   position: relative;
4545 |   top: 0.4em;
4546 | }
4547 | 
4548 | .external-link[href*="obsidian://search"]::after
4549 | {
4550 |   width: 0.9em;
4551 |   height: 0.9em;
4552 |   content: " ";
4553 |   margin-left: 2px;
4554 |   top: 0.1em;
4555 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.263 70.738c-2.138 -2.033 -4.183 -4.154 -5.696 -5.767c-1.55 -1.575 -2.483 -2.721 -2.483 -2.721l-11.667 -5.571C63.917 51.542 66.667 44.846 66.667 37.5c0 -16.079 -13.083 -29.167 -29.167 -29.167S8.333 21.421 8.333 37.5s13.083 29.167 29.167 29.167c7.346 0 14.042 -2.75 19.179 -7.246l5.571 11.667c0 0 1.146 0.933 2.721 2.483c1.613 1.512 3.733 3.558 5.767 5.696c2.058 2.108 4.117 4.217 5.658 5.8c1.508 1.617 2.517 2.692 2.517 2.692l8.838 -8.838c0 0 -1.075 -1.008 -2.692 -2.517C83.479 74.854 81.371 72.796 79.263 70.738zM37.5 58.333c-11.488 0 -20.833 -9.346 -20.833 -20.833s9.346 -20.833 20.833 -20.833s20.833 9.346 20.833 20.833S48.988 58.333 37.5 58.333z"></path></svg>');
4556 | }
4557 | 
4558 | .footnotes-list {
4559 |   margin-block-start: -10px;
4560 |   padding-inline-start: 20px;
4561 |   font-size: var(--font-small);
4562 | }
4563 | .footnotes-list p {
4564 |   display: inline;
4565 |   margin-block-end: 0;
4566 |   margin-block-start: 0;
4567 | }
4568 | .footnote-ref a {
4569 |   text-decoration: none;
4570 | }
4571 | .footnote-backref {
4572 |   color: var(--text-faint);
4573 | }
4574 | iframe {
4575 |   border: 0;
4576 | }
4577 | 
4578 | .markdown-preview-view img {
4579 |   margin: 0 auto;
4580 |   max-width: 100%;
4581 | }
4582 | 
4583 | .markdown-preview-view audio,
4584 | .markdown-preview-view video {
4585 |   margin: 0 auto;
4586 |   width: 100%;
4587 | }
4588 | .markdown-preview-view .mod-highlighted {
4589 |   transition: background-color 0.3s ease;
4590 |   background-color: var(--text-selection);
4591 |   color: inherit;
4592 | }
4593 | 
4594 | /* Metadata */
4595 | 
4596 | .frontmatter-collapse-indicator.collapse-indicator {
4597 |   display: none;
4598 | }
4599 | .frontmatter-container .tag {
4600 |   font-size: var(--font-smaller);
4601 | }
4602 | .frontmatter-container .frontmatter-alias {
4603 |   color: var(--text-muted);
4604 | }
4605 | .frontmatter-container {
4606 |   color: var(--text-muted);
4607 |   font-size: var(--font-small);
4608 |   padding: 10px 0;
4609 |   background: transparent;
4610 |   border-radius: 0;
4611 |   margin: 0;
4612 |   border: 0;
4613 |   border-bottom: 1px solid var(--background-modifier-border);
4614 | }
4615 | .frontmatter-container .frontmatter-container-header {
4616 |   padding: 0;
4617 |   font-weight: 500;
4618 |   border-bottom: 0;
4619 |   font-size: var(--font-small);
4620 | }
4621 | 
4622 | /* Blockquotes */
4623 | 
4624 | .markdown-preview-view blockquote {
4625 |   border-radius: 0;
4626 |   border: solid var(--quote-opening-modifier);
4627 |   border-width: 0px 0px 0px 1px;
4628 |   background-color: transparent;
4629 |   color: var(--text-muted);
4630 |   padding: 0 0 0 calc(var(--nested-padding) / 2);
4631 |   margin-inline-start: var(--nested-padding);
4632 | }
4633 | 
4634 | /* Tables */
4635 | 
4636 | .markdown-preview-view th {
4637 |   font-weight: var(--bold-weight);
4638 |   text-align: left;
4639 |   border-top: none;
4640 | }
4641 | .markdown-preview-view th:last-child,
4642 | .markdown-preview-view td:last-child {
4643 |   border-right: none;
4644 | }
4645 | .markdown-preview-view th:first-child,
4646 | .markdown-preview-view td:first-child {
4647 |   border-left: none;
4648 |   padding-left: 0;
4649 | }
4650 | .markdown-preview-view tr:last-child td {
4651 |   border-bottom: none;
4652 | }
4653 | 
4654 | /* Preview Mode Lists  */
4655 | 
4656 | .markdown-preview-view ul li p,
4657 | .markdown-preview-view ol li p {
4658 |   display: inline;
4659 | }
4660 | 
4661 | /* Code */
4662 | .theme-light :not(pre) > code[class*="language-"],
4663 | .theme-light pre[class*="language-"] {
4664 |   background-color: var(--background-primary-alt);
4665 | }
4666 | .theme-light code[class*="language-"],
4667 | .theme-light pre[class*="language-"] {
4668 |   text-shadow: none;
4669 | }
4670 | .markdown-preview-section .frontmatter code {
4671 |   color: var(--text-muted);
4672 |   font-size: var(--font-small);
4673 | }
4674 | .cm-s-obsidian .hmd-fold-html-stub,
4675 | .cm-s-obsidian .hmd-fold-code-stub,
4676 | .cm-s-obsidian.CodeMirror .HyperMD-hover > .HyperMD-hover-content code,
4677 | .cm-s-obsidian .cm-inline-code,
4678 | .cm-s-obsidian .HyperMD-codeblock,
4679 | .cm-s-obsidian .HyperMD-hr,
4680 | .cm-s-obsidian .cm-hmd-frontmatter,
4681 | .cm-s-obsidian .cm-hmd-orgmode-markup,
4682 | .cm-s-obsidian .cm-formatting-code,
4683 | .cm-s-obsidian .cm-math,
4684 | .cm-s-obsidian span.hmd-fold-math-placeholder,
4685 | .cm-s-obsidian .CodeMirror-linewidget kbd,
4686 | .cm-s-obsidian .hmd-fold-html kbd .CodeMirror-code {
4687 |   font-family: var(--font-monospace);
4688 | }
4689 | .cm-s-obsidian span.cm-inline-code,
4690 | .cm-s-obsidian pre.HyperMD-codeblock {
4691 |   color: var(--text-normal);
4692 | }
4693 | .cm-s-obsidian .cm-hmd-frontmatter {
4694 |   font-size: var(--font-small);
4695 |   color: var(--text-muted);
4696 | }
4697 | .cm-s-obsidian div.HyperMD-codeblock-bg,
4698 | .cm-s-obsidian div.HyperMD-codeblock-begin-bg,
4699 | .cm-s-obsidian div.HyperMD-codeblock-end-bg {
4700 |   background-color: var(--shade-5);
4701 |   border: none;
4702 | }
4703 | 
4704 | body {
4705 |   --svg-xs: 13px;
4706 |   --svg-s: 14px;
4707 |   --svg-m: 15px;
4708 |   --svg-l: 16px;
4709 |   --svg-xl: 18px;
4710 |   --svg-xxl: 20px;
4711 | 
4712 |   --folder-h: 0deg;
4713 |   --folder-s: 100%;
4714 |   --folder-b: 100%;
4715 | }
4716 | 
4717 | body.is-mobile {
4718 |   --svg-xs: 17px;
4719 |   --svg-s: 18px;
4720 |   --svg-m: 19px;
4721 |   --svg-l: 20px;
4722 |   --svg-xl: 22px;
4723 |   --svg-xxl: 24px;
4724 | }
4725 | 
4726 | .view-action > svg,
4727 | .view-header-icon > svg,
4728 | .nav-action-button svg,
4729 | .workspace-tab-header-inner-icon > svg {
4730 |   width: var(--svg-xl);
4731 |   height: var(--svg-xl);
4732 | }
4733 | 
4734 | .side-dock-ribbon-action > svg {
4735 |   width: 17px;
4736 |   height: 17px;
4737 | }
4738 | 
4739 | .is-mobile .view-action > svg,
4740 | .is-mobile .side-dock-ribbon-action > svg,
4741 | .is-mobile .view-header-icon > svg,
4742 | .is-mobile .nav-action-button svg,
4743 | .is-mobile .workspace-tab-header-inner-icon > svg,
4744 | .workspace-drawer-header-icon > svg {
4745 |   width: var(--svg-xxl);
4746 |   height: var(--svg-xxl);
4747 | }
4748 | 
4749 | .menu-item-icon svg {
4750 |   width: var(--svg-s);
4751 |   height: var(--svg-s);
4752 | }
4753 | 
4754 | .setting-hotkey-icon.setting-delete-hotkey {
4755 |   display: flex;
4756 |   padding: 2px;
4757 |   line-height: 1;
4758 |   position: relative;
4759 |   margin-left: 6px;
4760 |   align-items: center;
4761 |   justify-content: center;
4762 | }
4763 | 
4764 | body.cc-custom-icons .setting-hotkey-icon.setting-delete-hotkey > svg {
4765 |   width: 12px;
4766 |   height: 12px;
4767 | }
4768 | 
4769 | .setting-add-hotkey-button,
4770 | .setting-restore-hotkey-button {
4771 |   line-height: 1;
4772 |   height: unset;
4773 |   padding: 4px 6px;
4774 | }
4775 | 
4776 | .setting-add-hotkey-button:hover,
4777 | .setting-restore-hotkey-button:hover {
4778 |   color: var(--text-muted);
4779 |   background: var(--shade-plus-darker);
4780 | }
4781 | 
4782 | .setting-add-hotkey-button > svg {
4783 |   width: var(--svg-xl);
4784 |   height: var(--svg-xl);
4785 |   position: static;
4786 |   display: block;
4787 | }
4788 | 
4789 | .view-header-icon,
4790 | .workspace-tab-header,
4791 | .side-dock-ribbon-tab,
4792 | .view-action {
4793 |   background: transparent;
4794 |   color: var(--text-muted);
4795 |   cursor: var(--cursor);
4796 | }
4797 | 
4798 | .view-header-icon {
4799 |   align-items: center;
4800 |   border-radius: var(--radius-s);
4801 |   color: var(--shade-40);
4802 |   cursor: grab;
4803 |   display: flex;
4804 |   justify-content: center;
4805 |   line-height: 1;
4806 |   opacity: 1 !important;
4807 |   padding: 4px 6px !important;
4808 |   position: static;
4809 |   top: 0;
4810 | }
4811 | 
4812 | .view-header-icon:hover {
4813 |   color: var(--text-muted);
4814 |   background-color: var(--shade-plus-darker);
4815 | }
4816 | 
4817 | .view-header-icon:hover,
4818 | .nav-action-button:hover,
4819 | .workspace-tab-header:hover,
4820 | .side-dock-ribbon-tab:hover,
4821 | .side-dock-ribbon-action:hover {
4822 |   background: var(--shade-plus-darker);
4823 |   color: var(--text-muted);
4824 |   opacity: 1;
4825 | }
4826 | .workspace-tab-header-inner {
4827 |   line-height: 1;
4828 |   padding: 0;
4829 | }
4830 | 
4831 | .nav-action-button {
4832 |   padding: 3px 5px;
4833 |   opacity: 1;
4834 |   margin: 0 2px 0 0;
4835 |   cursor: var(--cursor);
4836 |   display: flex;
4837 |   border-radius: var(--radius-m);
4838 |   background-color: var(--background-primary);
4839 |   box-shadow: 0px 1px 1px rgb(0, 0, 0, 0.08);
4840 |   border: 1px solid rgba(0, 0, 0, 0.12);
4841 | }
4842 | 
4843 | .nav-action-button:last-child {
4844 |   margin-right: 0;
4845 | }
4846 | 
4847 | .theme-dark .nav-action-button {
4848 |   color: var(--text-normal);
4849 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.1),
4850 |     inset 0px 1px 1px rgba(255, 255, 255, 0.3);
4851 |   background-color: var(--shade-20);
4852 |   border: 1px solid rgba(0, 0, 0, 0.5);
4853 | }
4854 | 
4855 | .is-mobile .nav-action-button {
4856 |   padding: 6px 8px;
4857 |   margin: 0 5px 0 0;
4858 | }
4859 | 
4860 | .is-mobile .nav-action-button svg {
4861 |   width: var(--svg-xxl);
4862 |   height: var(--svg-xxl);
4863 | }
4864 | 
4865 | .nav-action-button.is-active {
4866 |   color: var(--text-muted);
4867 |   background-color: var(--background-primary);
4868 |   border-color: hsla(var(--accent-hsl), 0.7);
4869 |   box-shadow: 0px 1px 1px rgb(0, 0, 0, 0.08),
4870 |     inset 0 0 0 1px hsla(var(--accent-hsl), 0.7);
4871 | }
4872 | 
4873 | .nav-action-button.is-active:hover {
4874 |   color: var(--text-muted);
4875 | }
4876 | 
4877 | .nav-action-button:hover {
4878 |   background-color: var(--background-primary);
4879 | }
4880 | 
4881 | .theme-dark .nav-action-button.is-active,
4882 | .theme-dark .nav-action-button:hover {
4883 |   color: var(--text-normal);
4884 |   background-color: var(--shade-20);
4885 | }
4886 | 
4887 | .theme-dark .nav-action-button.is-active {
4888 |   color: var(--text-normal);
4889 |   background-color: var(--shade-20);
4890 | }
4891 | 
4892 | .setting-item[data-id="folder-h"] .setting-item-name::before,
4893 | .setting-item[data-id="folder-s"] .setting-item-name::before,
4894 | .setting-item[data-id="folder-b"] .setting-item-name::before,
4895 | body.cc-folder-icons .nav-folder-title-content::before {
4896 |   flex-shrink: 0;
4897 |   flex-grow: 0;
4898 |   margin-right: 5px;
4899 |   position: relative;
4900 |   top: -1px;
4901 |   content: " ";
4902 |   display: inline-block;
4903 |   width: var(--svg-l);
4904 |   height: var(--svg-l);
4905 |   background-size: contain;
4906 |   background-repeat: no-repeat;
4907 |   background-position: center center;
4908 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB3aWR0aD0iNjQiIGhlaWdodD0iNjQiIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDE2LjkzMyAxNi45MzMiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiPgogPGRlZnM+CiAgPGxpbmVhckdyYWRpZW50IGlkPSJsaW5lYXJHcmFkaWVudDE3NjkiIHgxPSI0NDUuMjgiIHgyPSI0NDUuMjgiIHkxPSIxNzkuMjgiIHkyPSIyMDAuMDciIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoLjM4OTU2IDAgMCAuMzgxODQgLTE2NS41MiAtNjMuNDQpIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+CiAgIDxzdG9wIHN0b3AtY29sb3I9IiM2MGMwZjAiIG9mZnNldD0iMCIvPgogICA8c3RvcCBzdG9wLWNvbG9yPSIjODNkNGZiIiBvZmZzZXQ9IjEiLz4KICA8L2xpbmVhckdyYWRpZW50PgogIDxsaW5lYXJHcmFkaWVudCBpZD0ibGluZWFyR3JhZGllbnQ4NjAiIHgxPSI4LjQ2NjciIHgyPSI4LjQ2NjciIHkxPSIyOTMuMyIgeTI9IjI5Mi43NyIgZ3JhZGllbnRUcmFuc2Zvcm09InRyYW5zbGF0ZSgwLC0yODAuMDcpIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+CiAgIDxzdG9wIHN0b3AtY29sb3I9IiMwMDhlYTIiIHN0b3Atb3BhY2l0eT0iLjI1IiBvZmZzZXQ9IjAiLz4KICAgPHN0b3Agc3RvcC1jb2xvcj0iI2ZmZiIgc3RvcC1vcGFjaXR5PSIuMTUiIG9mZnNldD0iMSIvPgogIDwvbGluZWFyR3JhZGllbnQ+CiAgPGxpbmVhckdyYWRpZW50IGlkPSJsaW5lYXJHcmFkaWVudDg2OCIgeDE9IjguNDY2NyIgeDI9IjguNDY2NyIgeTE9IjI5NC42MiIgeTI9IjI5My41NiIgZ3JhZGllbnRUcmFuc2Zvcm09Im1hdHJpeCguOTk5OTggMCAwIC45OTk5OCAwIC0yODAuMDYpIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+CiAgIDxzdG9wIHN0b3AtY29sb3I9IiMwMDhlYTIiIHN0b3Atb3BhY2l0eT0iLjI1MDk4IiBvZmZzZXQ9IjAiLz4KICAgPHN0b3Agc3RvcC1jb2xvcj0iIzAwOGVhMiIgc3RvcC1vcGFjaXR5PSIuMTUiIG9mZnNldD0iLjc1Njc4Ii8+CiAgIDxzdG9wIHN0b3AtY29sb3I9IiNmZmYiIHN0b3Atb3BhY2l0eT0iLjE1IiBvZmZzZXQ9IjEiLz4KICA8L2xpbmVhckdyYWRpZW50PgogIDxsaW5lYXJHcmFkaWVudCBpZD0ibGluZWFyR3JhZGllbnQ4OTciIHgxPSI2Ljg3OTIiIHgyPSI2Ljg3OTIiIHkxPSIyODUuMzYiIHkyPSIyODMuNzciIGdyYWRpZW50VHJhbnNmb3JtPSJtYXRyaXgoLjk5OTk4IDAgMCAuOTk5OTggMCAtMjgwLjA2KSIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiPgogICA8c3RvcCBvZmZzZXQ9IjAiLz4KICAgPHN0b3Agc3RvcC1vcGFjaXR5PSIwIiBvZmZzZXQ9IjEiLz4KICA8L2xpbmVhckdyYWRpZW50PgogIDxsaW5lYXJHcmFkaWVudCBpZD0ibGluZWFyR3JhZGllbnQ5MDciIHgxPSIxLjA1ODMiIHgyPSIxNS44NzUiIHkxPSIyODkuNTkiIHkyPSIyODkuNTkiIGdyYWRpZW50VHJhbnNmb3JtPSJ0cmFuc2xhdGUoMCwtMjgwLjA3KSIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiPgogICA8c3RvcCBzdG9wLWNvbG9yPSIjNDZhMmQ3IiBzdG9wLW9wYWNpdHk9Ii41IiBvZmZzZXQ9IjAiLz4KICAgPHN0b3Agc3RvcC1jb2xvcj0iIzQ2YTJkNyIgc3RvcC1vcGFjaXR5PSIwIiBvZmZzZXQ9Ii4xMDc4MyIvPgogICA8c3RvcCBzdG9wLWNvbG9yPSIjNDZhMmQ3IiBzdG9wLW9wYWNpdHk9Ii4wOTU4MDgiIG9mZnNldD0iLjg5Mzk4Ii8+CiAgIDxzdG9wIHN0b3AtY29sb3I9IiM0NmEyZDciIHN0b3Atb3BhY2l0eT0iLjUiIG9mZnNldD0iMSIvPgogIDwvbGluZWFyR3JhZGllbnQ+CiA8L2RlZnM+CiA8aW1hZ2UgeD0iLjUyOTE2IiB5PSIxLjk2OSIgd2lkdGg9IjE1Ljg3NSIgaGVpZ2h0PSIxMy4yMjkiIGltYWdlLXJlbmRlcmluZz0ib3B0aW1pemVRdWFsaXR5IiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPSJub25lIiB4bGluazpocmVmPSJkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUR3QUFBQXlDQVlBQUFBQTlyZ0NBQUFBQ1hCSVdYTUFBQTdYQUFBTzF3Rnhoais4QUFBQSBHWFJGV0hSVGIyWjBkMkZ5WlFCM2QzY3VhVzVyYzJOaGNHVXViM0pubSs0OEdnQUFBYlZKUkVGVWFJSHRtbDlUZ2xBUVJ3OS9qTXJSIDZhM3YvLzJxMGF6TUZPaGh1WEpMUmdIdjVHM2RNOFBncUhBNTdDNjgvQklPU2J4dENMVzNSVXZ5NjNNT0ZNQUVTT2t2WFFNbHNBVysgZ0IyUmlpZmV2Z0Rtd0FOd0IyUUR6N1VEMXNBU1dBRWJvQXB6bWVISWFTczdCeDZCbWZmOUVHcGdDdHdqTjIrQjNJQ1NpS3FkTi9zQyBxZXdNYWVlaHNqVEgzQ0NkNFViakJYaEhXdjBTMGdkcnVrcE9rRFllVTFrZjF5M1Q1cHdGMHVKdmlIVFZkUkVkNStpenppbHFaTXhLIHZORnlnbG16blNQcmt5S3lHZExpYTJTbSsxVDYxQnNpUFhHc1l3ZDhJamQ3VFhPemMrK1BvV1Q5eFNlMDdWMFJwc0pEM2h3YnBNT2Uga05FcTg2T0hoTUcxK1NWbTJEMVRTdVIxV2YyRnNDTjBCL1ZkOHhaNUdDK0FyMlB6b0lXTWRyU1NheEFHN3hsbHd0b3hZZTJZc0haTSBXRHNtckIwVDFvNEphOGVFdFdQQzJqRmg3Wml3ZGt4WU95YXNIUlBXamdscjUycUZvNDhNbnNuZUw2V05EZllKblB4SGFzU3RCR29uIHZFV2lQZEZtSkVmaXNsb2ZOSkVwbDgycStSa3p1a1FBSlRST2RnVThJM210S3ZkK1dOSm1tOGFFUzJPalJMcDJBYnpTZEcrbytIQnMgdUxuZElnWGNqMnFYME5pQWVHeDBCdGEvQVpTZ2EvMllEcHN1QUFBQUFFbEZUa1N1UW1DQyAiLz4KIDxwYXRoIGQ9Im0yLjIxIDIuMzhoMi42OTVjMC43NTA3NCAwIDAuNzgzMDIgMC4wMjg1IDEuNTQyMSAwLjYyOTYyIDAuNzgxNTkgMC41OTA0IDAuOTQ3NzkgMC42MDcgMS44NjM2IDAuNjA3bDYuNDEyNi0wLjA1MjRjMC42MzgtNWUtMyAxLjE1MTcgMC41MTM2MyAxLjE1MTcgMS4xNTE2djYuNzdjMCAwLjYzODAyLTAuNTEzNjQgMS4xNTE3LTEuMTUxNyAxLjE1MTdoLTEyLjUxM2MtMC42MzgwMiAwLTEuMTUxNy0wLjUxMzY0LTEuMTUxNy0xLjE1MTd2LTcuOTU0MmMwLTAuNjM4MDIgMC41MTM2NC0xLjE1MTcgMS4xNTE3LTEuMTUxN3oiIGZpbGw9IiM0NmEyZDciLz4KIDxwYXRoIGQ9Im0yLjIxMDIgMi4zODEyYy0wLjYzODAxIDAtMS4xNTE4IDAuNTEzODQtMS4xNTE4IDEuMTUxOHYyLjgxNjdoMTQuODE2di0xLjYzM2MwLTAuNjM4MDEtMC41MTM4Ny0xLjE1NjMtMS4xNTE4LTEuMTUxM2wtNi40MTI0IDAuMDUyMTk0Yy0wLjkxNTgyIDAtMS4wODE4LTAuMDE2Nzk4LTEuODYzNC0wLjYwNzE4LTAuNzU5MDgtMC42MDExLTAuNzkxMjgtMC42Mjk0MS0xLjU0Mi0wLjYyOTQxaC0yLjY5NXoiIGZpbGw9InVybCgjbGluZWFyR3JhZGllbnQ4OTcpIiBvcGFjaXR5PSIuMzUiIHN0cm9rZS13aWR0aD0iLjI2NDU4Ii8+CiA8cmVjdCB4PSIxLjA1ODMiIHk9IjQuNDkiIHdpZHRoPSIxNC44MTciIGhlaWdodD0iMTAuMDU0IiByeD0iMS4xNTE3IiByeT0iMS4xMjg4IiBmaWxsPSJ1cmwoI2xpbmVhckdyYWRpZW50MTc2OSkiLz4KIDxyZWN0IHg9IjEuMDU4MyIgeT0iMTIuNyIgd2lkdGg9IjE0LjgxNyIgaGVpZ2h0PSIuNTI5MTUiIGZpbGw9InVybCgjbGluZWFyR3JhZGllbnQ4NjApIi8+CiA8cGF0aCBkPSJtMS4wNjU1IDEzLjQ5NGMwLjAzNzUyIDAuNTkxNjggMC41MzEyIDEuMDU4MyAxLjE0NDYgMS4wNTgzaDEyLjUxM2MwLjYxMzQgMCAxLjEwNzEtMC40NjY2NCAxLjE0NDYtMS4wNTgzaC0xNC44MDJ6IiBmaWxsPSJ1cmwoI2xpbmVhckdyYWRpZW50ODY4KSIgc3Ryb2tlLXdpZHRoPSIuMjY0NTgiLz4KIDxyZWN0IHg9IjEuMDU4MyIgeT0iNC40OSIgd2lkdGg9IjE0LjgxNyIgaGVpZ2h0PSIxMC4wNTQiIHJ4PSIxLjE1MTciIHJ5PSIxLjEyODgiIGZpbGw9InVybCgjbGluZWFyR3JhZGllbnQ5MDcpIi8+CiA8cGF0aCBkPSJtMi4yMTAyIDQuNDk3OWMtMC42MzgwMSAwLTEuMTUxOCAwLjUwMzIzLTEuMTUxOCAxLjEyODZ2MC4yMzUxMmMwLTAuNjA4OSAwLjUxMzg0LTEuMDk5MSAxLjE1MTgtMS4wOTkxaDEyLjUxM2MwLjYzODAxIDAgMS4xNTE4IDAuNDkwMjQgMS4xNTE4IDEuMDk5MXYtMC4yMzUxMmMwLTAuNjI1MzYtMC41MTM4NC0xLjEyODYtMS4xNTE4LTEuMTI4NnoiIGZpbGw9IiNmZmYiIG9wYWNpdHk9Ii4xIiBzdHJva2Utd2lkdGg9Ii4yNjQ1OCIvPgo8L3N2Zz4K");
4909 |   filter: hue-rotate(var(--folder-h)) saturate(var(--folder-s))
4910 |     brightness(var(--folder-b));
4911 | }
4912 | 
4913 | body.cc-folder-icons.cc-truncated-explorer-titles
4914 |   .nav-folder-title-content::before {
4915 |   top: 2px;
4916 | }
4917 | 
4918 | .setting-item[data-id="folder-s"] .setting-item-name::before,
4919 | .setting-item[data-id="folder-b"] .setting-item-name::before,
4920 | .setting-item[data-id="folder-h"] .setting-item-name::before {
4921 |   top: 1px;
4922 |   margin-right: 6px;
4923 | }
4924 | 
4925 | body.cc-folder-icons
4926 |   .nav-folder.mod-root
4927 |   > .nav-folder-title
4928 |   .nav-folder-title-content::before {
4929 |   display: none;
4930 | }
4931 | 
4932 | body.cc-file-icons .nav-file-title-content::before {
4933 |   flex-shrink: 0;
4934 |   flex-grow: 0;
4935 |   margin-right: 5px;
4936 |   position: relative;
4937 |   top: 1px;
4938 |   content: " ";
4939 |   display: inline-block;
4940 |   width: var(--svg-l);
4941 |   height: var(--svg-l);
4942 |   background-size: contain;
4943 |   background-repeat: no-repeat;
4944 |   background-position: center center;
4945 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjZmZmIiBkPSJNOS43NzMgNC45NDljMC0xLjA2OC44NjUtMS45MzMgMS45MzItMS45MzNoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MnYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMyVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDYgMS41MTZ2MS41LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMzIDMuNDMzdjU0LjExOWEzLjQzMyAzLjQzMyAwIDAwMy40MzIgMy40MzJoNDAuNTlhMy40MzMgMy40MzMgMCAwMDMuNDMyLTMuNDMyaC0xLjUgMS41VjIxLjM3N2MwLTEuMzkyLS42NDctMi42MzItMS4xNzItMy40M2ExMC4wMjQgMTAuMDI0IDAgMDAtMS4xOTUtMS40OTJzMCAwIDAgMGwtLjAwNy0uMDA3LS4wMDMtLjAwMy0xMi40NC0xMi40NHMwIDAgMCAwYTIuMjI1IDIuMjI1IDAgMDEtLjEyNS0uMTQ0bC0xLjE1Ni45NTYgMS4xNTYtLjk1NmMtLjQ1NC0uNTUtMi4xMzYtMi4zNDYtNC45Mi0yLjM0NkgxMS43MDdoMHoiLz48cGF0aCBmaWxsPSIjZmZmIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2OSA3LjM2OSAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiNDQ0MiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiM2NjYiIGQ9Ik0zMy4yNzQgMzQuODQ0bC00LjgwNy0xMy4wNkgyNi4xMWwtNC43ODQgMTIuOTkzYy0uNjUyIDEuNzk3LS45MzIgMi4wNjYtMi40MDQgMi4yMzVWMzhoNS40MDJ2LS45ODhjLTEuNzk3LS4yMjUtMi4wMS0uNTI4LTEuNDQ4LTIuMTlsLjc5Ny0yLjI5MWg1LjY5NGwuODA4IDIuMjljLjU3MyAxLjY1Mi4zMzcgMS45NjYtMS40NDggMi4xOVYzOGg2LjkxOHYtLjk4OGMtMS40MDQtLjE2OS0xLjczLS40MzgtMi4zNy0yLjE2OHptLTkuMTg3LTMuNTI2bDIuNDE1LTcuMDA4IDIuNDQ4IDcuMDA4aC00Ljg2M3pNMTcgNDRoMzB2M0gxN3pNMTcgNTFoMzB2M0gxN3oiLz48L2c+PC9zdmc+");
4946 | }
4947 | 
4948 | body.theme-dark.cc-file-icons .nav-file-title-content::before {
4949 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjNTg1ODU4IiBkPSJNOS43NzMgNC45NDhjMC0xLjA2Ny44NjUtMS45MzIgMS45MzItMS45MzJoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MXYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMzVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDYgMS41MTZ2MS41LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMzIDMuNDMydjU0LjEyYTMuNDMzIDMuNDMzIDAgMDAzLjQzMiAzLjQzMmg0MC41OWEzLjQzMyAzLjQzMyAwIDAwMy40MzItMy40MzNoLTEuNSAxLjVWMjEuMzc3YzAtMS4zOTEtLjY0Ny0yLjYzMS0xLjE3Mi0zLjQzYTEwLjAyIDEwLjAyIDAgMDAtMS4xOTUtMS40OTFzMCAwIDAgMGwtLjAwNy0uMDA3LS4wMDMtLjAwMy0xMi40NC0xMi40NHMwIDAgMCAwYTIuMjI1IDIuMjI1IDAgMDEtLjEyNS0uMTQ0bC0xLjE1Ni45NTYgMS4xNTYtLjk1NmMtLjQ1NC0uNTUtMi4xMzYtMi4zNDYtNC45Mi0yLjM0NkgxMS43MDdoMHoiLz48cGF0aCBmaWxsPSIjN0I3QjdCIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2NyA3LjM2NyAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiM3QjdCN0IiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiNFMEUwRTAiIGQ9Ik0zMy4yNzQgMzQuODQ0bC00LjgwNy0xMy4wNkgyNi4xMWwtNC43ODQgMTIuOTkzYy0uNjUyIDEuNzk3LS45MzIgMi4wNjYtMi40MDQgMi4yMzVWMzhoNS40MDJ2LS45ODhjLTEuNzk3LS4yMjUtMi4wMS0uNTI4LTEuNDQ4LTIuMTlsLjc5Ny0yLjI5MWg1LjY5NGwuODA4IDIuMjljLjU3MyAxLjY1Mi4zMzcgMS45NjYtMS40NDggMi4xOVYzOGg2LjkxOHYtLjk4OGMtMS40MDQtLjE2OS0xLjczLS40MzgtMi4zNy0yLjE2OHptLTkuMTg3LTMuNTI2bDIuNDE1LTcuMDA4IDIuNDQ4IDcuMDA4aC00Ljg2M3pNMTcgNDRoMzB2M0gxN3pNMTcgNTFoMzB2M0gxN3oiLz48L2c+PC9zdmc+");
4950 | }
4951 | 
4952 | 
4953 | body.cc-file-icons .is-unsupported > .nav-file-title-content::before {
4954 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjZmZmIiBkPSJNOS43NzMgNC45NDljMC0xLjA2OC44NjUtMS45MzMgMS45MzItMS45MzNoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MnYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMyVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDYgMS41MTZ2MS41LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMzIDMuNDMzdjU0LjExOWEzLjQzMyAzLjQzMyAwIDAwMy40MzIgMy40MzJoNDAuNTlhMy40MzMgMy40MzMgMCAwMDMuNDMyLTMuNDMyaC0xLjUgMS41VjIxLjM3N2MwLTEuMzkyLS42NDctMi42MzItMS4xNzItMy40M2ExMC4wMjQgMTAuMDI0IDAgMDAtMS4xOTUtMS40OTJzMCAwIDAgMGwtLjAwNy0uMDA3LS4wMDMtLjAwMy0xMi40NC0xMi40NHMwIDAgMCAwYTIuMjI1IDIuMjI1IDAgMDEtLjEyNS0uMTQ0bC0xLjE1Ni45NTYgMS4xNTYtLjk1NmMtLjQ1NC0uNTUtMi4xMzYtMi4zNDYtNC45Mi0yLjM0NkgxMS43MDdoMHoiLz48cGF0aCBmaWxsPSIjZmZmIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2OSA3LjM2OSAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiNDQ0MiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjwvc3ZnPg==");
4955 | }
4956 | 
4957 | body.theme-dark.cc-file-icons .is-unsupported > .nav-file-title-content::before {
4958 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjNTg1ODU4IiBkPSJNOS43NzMgNC45NDhjMC0xLjA2Ny44NjUtMS45MzIgMS45MzItMS45MzJoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MXYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMzVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDUgMy4wMTZ2LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMyIDMuNDMydjU0LjEyYTMuNDMzIDMuNDMzIDAgMDAzLjQzMiAzLjQzMmg0MC41OWEzLjQzMyAzLjQzMyAwIDAwMy40MzItMy40MzNoLTEuNSAxLjVWMjEuMzc3YzAtMS4zOTEtLjY0Ny0yLjYzMS0xLjE3Mi0zLjQzYTEwLjAzIDEwLjAzIDAgMDAtMS4xOTUtMS40OTFsLS4wMDctLjAwNy0uMDAzLS4wMDMtMTIuNDQtMTIuNDRhMi4yMiAyLjIyIDAgMDEtLjEyNS0uMTQ0Yy0uNDU0LS41NS0yLjEzNi0yLjM0Ni00LjkyLTIuMzQ2SDExLjcwN2gwdjEuNXoiLz48cGF0aCBmaWxsPSIjN0I3QjdCIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2NyA3LjM2NyAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiM3QjdCN0IiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjwvc3ZnPg==");
4959 | }
4960 | 
4961 | body.cc-file-icons
4962 |   .is-unsupported[data-path$=".zip"]
4963 |   > .nav-file-title-content::before {
4964 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjZmZmIiBkPSJNOS43NzMgNC45NDljMC0xLjA2OC44NjUtMS45MzMgMS45MzItMS45MzNoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MnYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMyVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDYgMS41MTZ2MS41LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMzIDMuNDMzdjU0LjExOWEzLjQzMyAzLjQzMyAwIDAwMy40MzIgMy40MzJoNDAuNTlhMy40MzMgMy40MzMgMCAwMDMuNDMyLTMuNDMyaC0xLjUgMS41VjIxLjM3N2MwLTEuMzkyLS42NDctMi42MzItMS4xNzItMy40M2ExMC4wMjQgMTAuMDI0IDAgMDAtMS4xOTUtMS40OTJzMCAwIDAgMGwtLjAwNy0uMDA3LS4wMDMtLjAwMy0xMi40NC0xMi40NHMwIDAgMCAwYTIuMjI1IDIuMjI1IDAgMDEtLjEyNS0uMTQ0bC0xLjE1Ni45NTYgMS4xNTYtLjk1NmMtLjQ1NC0uNTUtMi4xMzYtMi4zNDYtNC45Mi0yLjM0NkgxMS43MDdoMHoiLz48cGF0aCBmaWxsPSIjZmZmIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2OSA3LjM2OSAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiNDQ0MiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiM4ODgiIGQ9Ik0yMS4wMDIgMzUuNDl2MTYuMjQ3YzAgLjY5My41NTcgMS4yNSAxLjI1IDEuMjVoNy40OThjLjY5MyAwIDEuMjUtLjU1NyAxLjI1LTEuMjVWMzUuNDloLTkuOTk4em0yLjUgOS45OThIMjguNXY1aC00Ljk5OXYtNXpNMjYgMi45OTVoLTV2NC45OTloNXYtNXptMCA0Ljk5OXY1aDQuOTk4di01SDI2em0wIDVoLTV2NC45OThoNXYtNC45OTl6bTAgNC45OTh2NWg0Ljk5OHYtNUgyNnptMCA1aC01djQuOTk5aDV2LTV6bTAgNC45OTl2NWg0Ljk5OHYtNUgyNnoiLz48L2c+PC9zdmc+");
4965 | }
4966 | 
4967 | body.theme-dark.cc-file-icons
4968 |   .is-unsupported[data-path$=".zip"]
4969 |   > .nav-file-title-content::before {
4970 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjNTg1ODU4IiBkPSJNOS43NzMgNC45NDhjMC0xLjA2Ny44NjUtMS45MzIgMS45MzItMS45MzJoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MXYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMzVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDUgMy4wMTZ2LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMyIDMuNDMydjU0LjEyYTMuNDMzIDMuNDMzIDAgMDAzLjQzMiAzLjQzMmg0MC41OWEzLjQzMyAzLjQzMyAwIDAwMy40MzItMy40MzNoLTEuNSAxLjVWMjEuMzc3YzAtMS4zOTEtLjY0Ny0yLjYzMS0xLjE3Mi0zLjQzYTEwLjAzIDEwLjAzIDAgMDAtMS4xOTUtMS40OTFsLS4wMDctLjAwNy0uMDAzLS4wMDMtMTIuNDQtMTIuNDRhMi4yMiAyLjIyIDAgMDEtLjEyNS0uMTQ0Yy0uNDU0LS41NS0yLjEzNi0yLjM0Ni00LjkyLTIuMzQ2SDExLjcwN2gwdjEuNXoiLz48cGF0aCBmaWxsPSIjN0I3QjdCIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2NyA3LjM2NyAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiM3QjdCN0IiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiNFMEUwRTAiIGQ9Ik0yMS4wMDIgMzUuNDl2MTYuMjQ3YzAgLjY5My41NTcgMS4yNSAxLjI1IDEuMjVoNy40OThjLjY5MyAwIDEuMjUtLjU1NyAxLjI1LTEuMjVWMzUuNDloLTkuOTk4em0yLjUgOS45OThIMjguNXY1aC00Ljk5OXYtNXpNMjYgMi45OTVoLTV2NC45OTloNXYtNXptMCA0Ljk5OXY1aDQuOTk4di01SDI2em0wIDVoLTV2NC45OThoNXYtNC45OTl6bTAgNC45OTh2NWg0Ljk5OHYtNUgyNnptMCA1aC01djQuOTk5aDV2LTV6bTAgNC45OTl2NWg0Ljk5OHYtNUgyNnoiLz48L2c+PC9zdmc+");
4971 | }
4972 | 
4973 | body.cc-file-icons
4974 |   .nav-file-title[data-path$=".svg"]
4975 |   > .nav-file-title-content::before,
4976 | body.cc-file-icons
4977 |   .nav-file-title[data-path$=".bmp"]
4978 |   > .nav-file-title-content::before,
4979 | body.cc-file-icons
4980 |   .nav-file-title[data-path$=".jpeg"]
4981 |   > .nav-file-title-content::before,
4982 | body.cc-file-icons
4983 |   .nav-file-title[data-path$=".jpg"]
4984 |   > .nav-file-title-content::before,
4985 | body.cc-file-icons
4986 |   .nav-file-title[data-path$=".png"]
4987 |   > .nav-file-title-content::before {
4988 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjZmZmIiBkPSJNOS43NzMgNC45NDljMC0xLjA2OC44NjUtMS45MzMgMS45MzItMS45MzNoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MnYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMyVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDYgMS41MTZ2MS41LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMzIDMuNDMzdjU0LjExOWEzLjQzMyAzLjQzMyAwIDAwMy40MzIgMy40MzJoNDAuNTlhMy40MzMgMy40MzMgMCAwMDMuNDMyLTMuNDMyaC0xLjUgMS41VjIxLjM3N2MwLTEuMzkyLS42NDctMi42MzItMS4xNzItMy40M2ExMC4wMjQgMTAuMDI0IDAgMDAtMS4xOTUtMS40OTJzMCAwIDAgMGwtLjAwNy0uMDA3LS4wMDMtLjAwMy0xMi40NC0xMi40NHMwIDAgMCAwYTIuMjI1IDIuMjI1IDAgMDEtLjEyNS0uMTQ0bC0xLjE1Ni45NTYgMS4xNTYtLjk1NmMtLjQ1NC0uNTUtMi4xMzYtMi4zNDYtNC45Mi0yLjM0NkgxMS43MDdoMHoiLz48cGF0aCBmaWxsPSIjZmZmIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2OSA3LjM2OSAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiNDQ0MiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiM2NjYiIGQ9Ik0yNS4yNDkgMzkuNWEyLjI1IDIuMjUgMCAxMDAtNC41IDIuMjUgMi4yNSAwIDAwMCA0LjV6TTI5Ljc0OSA0NGwtMi4yNS0zLTQuNSA2aDE4bC02Ljc1LTktNC41IDZ6Ii8+PHBhdGggZmlsbD0iIzY2NiIgZD0iTTQzLjk5OSAyOWgtMjRjLTEuNjU0IDAtMyAxLjM0Ni0zIDN2MThjMCAxLjY1NCAxLjM0NiAzIDMgM2gyNGMxLjY1NCAwIDMtMS4zNDYgMy0zVjMyYzAtMS42NTQtMS4zNDYtMy0zLTN6bS0yNCAyMVYzMmgyNGwuMDAzIDE4SDE5Ljk5OXoiLz48L2c+PC9zdmc+");
4989 | }
4990 | 
4991 | body.theme-dark.cc-file-icons
4992 |   .nav-file-title[data-path$=".svg"]
4993 |   > .nav-file-title-content::before,
4994 | body.theme-dark.cc-file-icons
4995 |   .nav-file-title[data-path$=".bmp"]
4996 |   > .nav-file-title-content::before,
4997 | body.theme-dark.cc-file-icons
4998 |   .nav-file-title[data-path$=".jpeg"]
4999 |   > .nav-file-title-content::before,
5000 | body.theme-dark.cc-file-icons
5001 |   .nav-file-title[data-path$=".jpg"]
5002 |   > .nav-file-title-content::before,
5003 | body.theme-dark.cc-file-icons
5004 |   .nav-file-title[data-path$=".png"]
5005 |   > .nav-file-title-content::before {
5006 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjNTg1ODU4IiBkPSJNOS43NzMgNC45NDhjMC0xLjA2Ny44NjUtMS45MzIgMS45MzItMS45MzJoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MXYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMzVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDUgMy4wMTZ2LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMyIDMuNDMydjU0LjEyYTMuNDMzIDMuNDMzIDAgMDAzLjQzMiAzLjQzMmg0MC41OWEzLjQzMyAzLjQzMyAwIDAwMy40MzItMy40MzNoLTEuNSAxLjVWMjEuMzc3YzAtMS4zOTEtLjY0Ny0yLjYzMS0xLjE3Mi0zLjQzYTEwLjAzIDEwLjAzIDAgMDAtMS4xOTUtMS40OTFsLS4wMDctLjAwNy0uMDAzLS4wMDMtMTIuNDQtMTIuNDRhMi4yMiAyLjIyIDAgMDEtLjEyNS0uMTQ0Yy0uNDU0LS41NS0yLjEzNi0yLjM0Ni00LjkyLTIuMzQ2SDExLjcwN2gwdjEuNXoiLz48cGF0aCBmaWxsPSIjN0I3QjdCIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2NyA3LjM2NyAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiM3QjdCN0IiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiNFMEUwRTAiIGQ9Ik0yNS4yNDkgMzkuNWEyLjI1IDIuMjUgMCAxMDAtNC41IDIuMjUgMi4yNSAwIDAwMCA0LjV6TTI5Ljc0OSA0NGwtMi4yNS0zLTQuNSA2aDE4bC02Ljc1LTktNC41IDZ6Ii8+PHBhdGggZmlsbD0iI0UwRTBFMCIgZD0iTTQzLjk5OSAyOWgtMjRjLTEuNjU0IDAtMyAxLjM0Ni0zIDN2MThjMCAxLjY1NCAxLjM0NiAzIDMgM2gyNGMxLjY1NCAwIDMtMS4zNDYgMy0zVjMyYzAtMS42NTQtMS4zNDYtMy0zLTN6bS0yNCAyMVYzMmgyNGwuMDAzIDE4SDE5Ljk5OXoiLz48L2c+PC9zdmc+");
5007 | }
5008 | 
5009 | body.cc-file-icons
5010 |   .nav-file-title[data-path$=".pdf"]
5011 |   > .nav-file-title-content::before {
5012 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,");
5013 | }
5014 | 
5015 | body.theme-dark.cc-file-icons
5016 |   .nav-file-title[data-path$=".pdf"]
5017 |   > .nav-file-title-content::before {
5018 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,");
5019 | }
5020 | 
5021 | body.cc-file-icons
5022 |   .nav-file-title[data-path$=".docx"]
5023 |   > .nav-file-title-content::before,
5024 | body.cc-file-icons
5025 |   .nav-file-title[data-path$=".doc"]
5026 |   > .nav-file-title-content::before {
5027 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjZmZmIiBkPSJNOS43NzMgNC45NDljMC0xLjA2OC44NjUtMS45MzMgMS45MzItMS45MzNoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MnYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMyVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDUgMy4wMTZ2LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMyIDMuNDMzdjU0LjExOWEzLjQzMyAzLjQzMyAwIDAwMy40MzIgMy40MzJoNDAuNTlhMy40MzMgMy40MzMgMCAwMDMuNDMyLTMuNDMyaC0xLjUgMS41VjIxLjM3N2MwLTEuMzkyLS42NDctMi42MzItMS4xNzItMy40M2ExMC4wMjYgMTAuMDI2IDAgMDAtMS4xOTUtMS40OTJsLS4wMDctLjAwNy0uMDAzLS4wMDMtMTIuNDQtMTIuNDRhMi4yMTggMi4yMTggMCAwMS0uMTI1LS4xNDRjLS40NTQtLjU1LTIuMTM2LTIuMzQ2LTQuOTItMi4zNDZIMTEuNzA3aDB2MS41eiIvPjxwYXRoIGZpbGw9IiNmZmYiIGQ9Ik0zNy43NzcgMy40MnYxNC4wODVjMCAxLjA3MS44NjIgMS45MzMgMS45MzMgMS45MzNoMTMuOTc5YTcuMzY5IDcuMzY5IDAgMDAtMS4zOTctMS45MzNMMzkuNzI5IDQuOTQyYy0uNjA5LS43Ny0xLjI4Ni0xLjIzNi0xLjkzMy0xLjUyMWwtLjAyLS4wMDF6Ii8+PHBhdGggZmlsbD0iI0NDQyIgZD0iTTM5LjcxIDIyLjMzN2E0LjgyOCA0LjgyOCAwIDAxLTQuODMzLTQuODMyVjNsLjk4OS4wMTVjMS4wNjEgMCAxLjkxLjQwNSAxLjkxLjQwNXYxNC4wODVjMCAxLjA3MS44NjMgMS45MzMgMS45MzQgMS45MzNoMTMuOTc5cy41MzguOTczLjUzOCAxLjkzOXYuOTZIMzkuNzF6Ii8+PGc+PHBhdGggZmlsbD0iIzY2NiIgZD0iTTIwLjgxNCAzNS42NjdMMjIuMTU5IDUxaDIuNzAybDcuMTg1LTE0LjE3Mi45OSAxNC4xNzJoMi43NDFsNy44MzEtMTUuMjY3YzEuMDk1LTIuMTIyIDEuNTQzLTIuNDEyIDMuMjQ0LTIuNjFsLjIzNy0xLjE2aC02LjA1MWwtLjIzOCAxLjE2YzEuOTI1LjIzNyAyLjAxNy41OCAxLjA2OCAyLjUxOGwtNS45MDYgMTIuMjM1LS43NjUtMTIuMTk1Yy0uMTE4LTEuOTUxLjA4LTIuMjk0IDIuMTYyLTIuNTU4bC4yNS0xLjE2aC03LjVsLS4yNTEgMS4xNmMxLjk1MS4yMzcgMi4wMTcuNTggMS4wODEgMi41MThsLTUuODggMTIuMjM1LS43OS0xMi4xOTVjLS4xMi0xLjk1MS4wNzgtMi4yOTQgMi4xNzQtMi41NThsLjIzOC0xLjE2aC03LjcyNmwtLjIyNCAxLjE2YzEuNTAzLjE5OCAxLjkxMi40ODggMi4wODMgMi41NDR6Ii8+PC9nPjwvc3ZnPg==");
5028 | }
5029 | 
5030 | body.theme-dark.cc-file-icons
5031 |   .nav-file-title[data-path$=".docx"]
5032 |   > .nav-file-title-content::before,
5033 | body.theme-dark.cc-file-icons
5034 |   .nav-file-title[data-path$=".doc"]
5035 |   > .nav-file-title-content::before {
5036 |   background-image: url("data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSI2NCIgaGVpZ2h0PSI2NCIgZmlsbD0ibm9uZSIgdmlld0JveD0iMCAwIDY0IDY0Ij48cGF0aCBmaWxsPSIjNTg1ODU4IiBkPSJNOS43NzMgNC45NDhjMC0xLjA2Ny44NjUtMS45MzIgMS45MzItMS45MzJoMjQuMTZjMi4xMDcgMCAzLjQwNSAxLjM2OCAzLjc2NCAxLjgwMi4wNy4wODUuMTQyLjE3LjIyLjI0OGwxMi40NCAxMi40NC4wMS4wMWMuMTAzLjEwMyAxLjkyOCAxLjk1NiAxLjkyOCAzLjg2MXYzNy42OUExLjkzMyAxLjkzMyAwIDAxNTIuMjk1IDYxaC00MC41OWExLjkzMyAxLjkzMyAwIDAxLTEuOTMyLTEuOTMzVjQuOTQ4eiIvPjxwYXRoIHN0cm9rZT0iIzAwMCIgc3Ryb2tlLW9wYWNpdHk9Ii4yIiBzdHJva2Utd2lkdGg9IjMiIGQ9Ik0xMS43MDUgMy4wMTZ2LTEuNWEzLjQzMyAzLjQzMyAwIDAwLTMuNDMyIDMuNDMydjU0LjEyYTMuNDMzIDMuNDMzIDAgMDAzLjQzMiAzLjQzMmg0MC41OWEzLjQzMyAzLjQzMyAwIDAwMy40MzItMy40MzNoLTEuNSAxLjVWMjEuMzc3YzAtMS4zOTEtLjY0Ny0yLjYzMS0xLjE3Mi0zLjQzYTEwLjAzIDEwLjAzIDAgMDAtMS4xOTUtMS40OTFsLS4wMDctLjAwNy0uMDAzLS4wMDMtMTIuNDQtMTIuNDRhMi4yMiAyLjIyIDAgMDEtLjEyNS0uMTQ0Yy0uNDU0LS41NS0yLjEzNi0yLjM0Ni00LjkyLTIuMzQ2SDExLjcwN2gwdjEuNXoiLz48cGF0aCBmaWxsPSIjN0I3QjdCIiBkPSJNMzcuNzc3IDMuNDJ2MTQuMDg1YzAgMS4wNzEuODYyIDEuOTMzIDEuOTMzIDEuOTMzaDEzLjk3OWE3LjM2NyA3LjM2NyAwIDAwLTEuMzk3LTEuOTMzTDM5LjcyOSA0Ljk0MmMtLjYwOS0uNzctMS4yODYtMS4yMzYtMS45MzMtMS41MjFsLS4wMi0uMDAxeiIvPjxwYXRoIGZpbGw9IiM3QjdCN0IiIGQ9Ik0zOS43MSAyMi4zMzdhNC44MjggNC44MjggMCAwMS00LjgzMy00LjgzMlYzbC45ODkuMDE1YzEuMDYxIDAgMS45MS40MDUgMS45MS40MDV2MTQuMDg1YzAgMS4wNzEuODYzIDEuOTMzIDEuOTM0IDEuOTMzaDEzLjk3OXMuNTM4Ljk3My41MzggMS45Mzl2Ljk2SDM5LjcxeiIvPjxnPjxwYXRoIGZpbGw9IiNFMEUwRTAiIGQ9Ik0yMC44MTQgMzUuNjY3TDIyLjE1OSA1MWgyLjcwMmw3LjE4NS0xNC4xNzIuOTkgMTQuMTcyaDIuNzQxbDcuODMxLTE1LjI2N2MxLjA5NS0yLjEyMiAxLjU0My0yLjQxMiAzLjI0NC0yLjYxbC4yMzctMS4xNmgtNi4wNTFsLS4yMzggMS4xNmMxLjkyNS4yMzcgMi4wMTcuNTggMS4wNjggMi41MThsLTUuOTA2IDEyLjIzNS0uNzY1LTEyLjE5NWMtLjExOC0xLjk1MS4wOC0yLjI5NCAyLjE2Mi0yLjU1OGwuMjUtMS4xNmgtNy41bC0uMjUxIDEuMTZjMS45NTEuMjM3IDIuMDE3LjU4IDEuMDgxIDIuNTE4bC01Ljg4IDEyLjIzNS0uNzktMTIuMTk1Yy0uMTItMS45NTEuMDc4LTIuMjk0IDIuMTc0LTIuNTU4bC4yMzgtMS4xNmgtNy43MjZsLS4yMjQgMS4xNmMxLjUwMy4xOTggMS45MTIuNDg4IDIuMDgzIDIuNTQ0eiIvPjwvZz48L3N2Zz4=");
5037 | }
5038 | 
5039 | body.theme-dark.cc-file-icons
5040 |   .nav-file-title
5041 |   > .nav-file-title-content::before {
5042 |     filter: hue-rotate(20deg) saturate(160%);
5043 |   }
5044 | 
5045 | body:not(.cc-folder-icons).cc-file-icons .nav-file-title-content::before {
5046 |   margin-right: 4px;
5047 |   margin-left: -1px;
5048 | }
5049 | 
5050 | body.cc-custom-icons .collapse-icon > svg,
5051 | body.cc-custom-icons .style-settings-collapse-indicator > svg {
5052 |   color: var(--shade-60);
5053 |   width: 12px;
5054 |   height: 12px;
5055 | }
5056 | 
5057 | .nav-folder-collapse-indicator.collapse-icon > svg {
5058 |   color: var(--shade-40);
5059 | }
5060 | 
5061 | .workspace-leaf-content[data-type="starred"] .nav-file-icon {
5062 |   display: none;
5063 | }
5064 | 
5065 | .workspace-drawer-active-tab-back-icon,
5066 | .workspace-drawer-active-tab-back-icon > svg {
5067 |   width: 0.9rem;
5068 |   height: 0.9rem;
5069 |   color: var(--shade-30);
5070 | }
5071 | 
5072 | /* ------------ */
5073 | 
5074 | body.cc-custom-icons svg.blocks,
5075 | body.cc-custom-icons svg.audio-file,
5076 | body.cc-custom-icons svg.bracket-glyph,
5077 | body.cc-custom-icons svg.broken-link,
5078 | body.cc-custom-icons svg.bullet-list-glyph,
5079 | body.cc-custom-icons svg.bullet-list,
5080 | body.cc-custom-icons svg.calendar-with-checkmark,
5081 | body.cc-custom-icons svg.check-in-circle,
5082 | body.cc-custom-icons svg.check-small,
5083 | body.cc-custom-icons svg.checkbox-glyph,
5084 | body.cc-custom-icons svg.checkmark,
5085 | body.cc-custom-icons svg.clock,
5086 | body.cc-custom-icons svg.cloud,
5087 | body.cc-custom-icons svg.code-glyph,
5088 | body.cc-custom-icons svg.create-new,
5089 | body.cc-custom-icons svg.cross-in-box,
5090 | body.cc-custom-icons svg.cross,
5091 | body.cc-custom-icons svg.crossed-star,
5092 | body.cc-custom-icons svg.dice,
5093 | body.cc-custom-icons svg.document,
5094 | body.cc-custom-icons svg.documents,
5095 | body.cc-custom-icons svg.dot-network,
5096 | body.cc-custom-icons svg.double-down-arrow-glyph,
5097 | body.cc-custom-icons svg.double-up-arrow-glyph,
5098 | body.cc-custom-icons svg.down-arrow-with-tail,
5099 | body.cc-custom-icons svg.down-chevron-glyph,
5100 | body.cc-custom-icons svg.enter,
5101 | body.cc-custom-icons svg.exit-fullscreen,
5102 | body.cc-custom-icons svg.expand-vertically,
5103 | body.cc-custom-icons svg.filled-pin,
5104 | body.cc-custom-icons svg.folder,
5105 | body.cc-custom-icons svg.fullscreen,
5106 | body.cc-custom-icons svg.gear,
5107 | body.cc-custom-icons svg.hashtag,
5108 | body.cc-custom-icons svg.go-to-file,
5109 | body.cc-custom-icons svg.help,
5110 | body.cc-custom-icons svg.highlight-glyph,
5111 | body.cc-custom-icons svg.horizontal-split,
5112 | body.cc-custom-icons svg.image-file,
5113 | body.cc-custom-icons svg.image-glyph,
5114 | body.cc-custom-icons svg.indent-glyph,
5115 | body.cc-custom-icons svg.info,
5116 | body.cc-custom-icons svg.install,
5117 | body.cc-custom-icons svg.keyboard-glyph,
5118 | body.cc-custom-icons svg.left-arrow-with-tail,
5119 | body.cc-custom-icons svg.left-arrow,
5120 | body.cc-custom-icons svg.left-chevron-glyph,
5121 | body.cc-custom-icons svg.lines-of-text,
5122 | body.cc-custom-icons svg.link-glyph,
5123 | body.cc-custom-icons svg.link,
5124 | body.cc-custom-icons svg.magnifying-glass,
5125 | body.cc-custom-icons svg.microphone-filled,
5126 | body.cc-custom-icons svg.microphone,
5127 | body.cc-custom-icons svg.minus-with-circle,
5128 | body.cc-custom-icons svg.note-glyph,
5129 | body.cc-custom-icons svg.number-list-glyph,
5130 | body.cc-custom-icons svg.open-vault,
5131 | body.cc-custom-icons svg.pane-layout,
5132 | body.cc-custom-icons svg.paper-plane,
5133 | body.cc-custom-icons svg.paused,
5134 | body.cc-custom-icons svg.pdf-file,
5135 | body.cc-custom-icons svg.pencil,
5136 | body.cc-custom-icons svg.pin,
5137 | body.cc-custom-icons svg.plus-with-circle,
5138 | body.cc-custom-icons svg.popup-open,
5139 | body.cc-custom-icons svg.presentation,
5140 | body.cc-custom-icons svg.price-tag-glyph,
5141 | body.cc-custom-icons svg.quote-glyph,
5142 | body.cc-custom-icons svg.redo-glyph,
5143 | body.cc-custom-icons svg.reset,
5144 | body.cc-custom-icons svg.right-arrow-with-tail,
5145 | body.cc-custom-icons svg.right-arrow,
5146 | body.cc-custom-icons svg.right-chevron-glyph,
5147 | body.cc-custom-icons svg.right-triangle,
5148 | body.cc-custom-icons svg.run-command,
5149 | body.cc-custom-icons svg.search,
5150 | body.cc-custom-icons svg.sheets-in-box,
5151 | body.cc-custom-icons svg.stacked-levels,
5152 | body.cc-custom-icons svg.star-list,
5153 | body.cc-custom-icons svg.star,
5154 | body.cc-custom-icons svg.strikethrough-glyph,
5155 | body.cc-custom-icons svg.switch,
5156 | body.cc-custom-icons svg.sync-small,
5157 | body.cc-custom-icons svg.sync,
5158 | body.cc-custom-icons svg.tag-glyph,
5159 | body.cc-custom-icons svg.three-horizontal-bars,
5160 | body.cc-custom-icons svg.trash,
5161 | body.cc-custom-icons svg.undo-glyph,
5162 | body.cc-custom-icons svg.unindent-glyph,
5163 | body.cc-custom-icons svg.up-and-down-arrows,
5164 | body.cc-custom-icons svg.up-arrow-with-tail,
5165 | body.cc-custom-icons svg.up-chevron-glyph,
5166 | body.cc-custom-icons svg.vault,
5167 | body.cc-custom-icons svg.vertical-split,
5168 | body.cc-custom-icons svg.vertical-three-dots,
5169 | body.cc-custom-icons svg.wrench-screwdriver-glyph,
5170 | body.cc-custom-icons svg.clock-glyph,
5171 | body.cc-custom-icons svg.command-glyph,
5172 | body.cc-custom-icons svg.add-note-glyph,
5173 | body.cc-custom-icons svg.calendar-glyph,
5174 | body.cc-custom-icons svg.duplicate-glyph,
5175 | body.cc-custom-icons svg.file-explorer-glyph,
5176 | body.cc-custom-icons svg.graph-glyph,
5177 | body.cc-custom-icons svg.import-glyph,
5178 | body.cc-custom-icons svg.languages,
5179 | body.cc-custom-icons svg.links-coming-in,
5180 | body.cc-custom-icons svg.links-going-out,
5181 | body.cc-custom-icons svg.merge-files-glyph,
5182 | body.cc-custom-icons svg.merge-files,
5183 | body.cc-custom-icons svg.open-elsewhere-glyph,
5184 | body.cc-custom-icons svg.paper-plane-glyph,
5185 | body.cc-custom-icons svg.paste-text,
5186 | body.cc-custom-icons svg.paste,
5187 | body.cc-custom-icons svg.percent-sign-glyph,
5188 | body.cc-custom-icons svg.play-audio-glyph,
5189 | body.cc-custom-icons svg.presentation-glyph,
5190 | body.cc-custom-icons svg.question-mark-glyph,
5191 | body.cc-custom-icons svg.restore-file-glyph,
5192 | body.cc-custom-icons svg.scissors-glyph,
5193 | body.cc-custom-icons svg.scissors,
5194 | body.cc-custom-icons svg.search-glyph,
5195 | body.cc-custom-icons svg.select-all-text,
5196 | body.cc-custom-icons svg.split,
5197 | body.cc-custom-icons svg.star-glyph,
5198 | body.cc-custom-icons svg.stop-audio-glyph,
5199 | body.cc-custom-icons svg.two-blank-pages,
5200 | body.cc-custom-icons svg.tomorrow-glyph,
5201 | body.cc-custom-icons svg.yesterday-glyph,
5202 | body.cc-custom-icons svg.workspace-glyph,
5203 | body.cc-custom-icons svg.box-glyph {
5204 |   stroke-width: 0;
5205 |   background-color: currentColor;
5206 | }
5207 | 
5208 | body.cc-custom-icons svg.blocks > path,
5209 | body.cc-custom-icons svg.audio-file > path,
5210 | body.cc-custom-icons svg.bracket-glyph > path,
5211 | body.cc-custom-icons svg.broken-link > path,
5212 | body.cc-custom-icons svg.bullet-list-glyph > path,
5213 | body.cc-custom-icons svg.bullet-list > path,
5214 | body.cc-custom-icons svg.calendar-with-checkmark > path,
5215 | body.cc-custom-icons svg.check-in-circle > path,
5216 | body.cc-custom-icons svg.check-small > path,
5217 | body.cc-custom-icons svg.checkbox-glyph > path,
5218 | body.cc-custom-icons svg.checkmark > path,
5219 | body.cc-custom-icons svg.clock > path,
5220 | body.cc-custom-icons svg.cloud > path,
5221 | body.cc-custom-icons svg.code-glyph > path,
5222 | body.cc-custom-icons svg.create-new > path,
5223 | body.cc-custom-icons svg.cross-in-box > path,
5224 | body.cc-custom-icons svg.cross > path,
5225 | body.cc-custom-icons svg.crossed-star > path,
5226 | body.cc-custom-icons svg.dice > path,
5227 | body.cc-custom-icons svg.document > path,
5228 | body.cc-custom-icons svg.documents > path,
5229 | body.cc-custom-icons svg.dot-network > path,
5230 | body.cc-custom-icons svg.double-down-arrow-glyph > path,
5231 | body.cc-custom-icons svg.double-up-arrow-glyph > path,
5232 | body.cc-custom-icons svg.down-arrow-with-tail > path,
5233 | body.cc-custom-icons svg.down-chevron-glyph > path,
5234 | body.cc-custom-icons svg.enter > path,
5235 | body.cc-custom-icons svg.exit-fullscreen > path,
5236 | body.cc-custom-icons svg.expand-vertically > path,
5237 | body.cc-custom-icons svg.filled-pin > path,
5238 | body.cc-custom-icons svg.folder > path,
5239 | body.cc-custom-icons svg.fullscreen > path,
5240 | body.cc-custom-icons svg.gear > path,
5241 | body.cc-custom-icons svg.hashtag > path,
5242 | body.cc-custom-icons svg.go-to-file > path,
5243 | body.cc-custom-icons svg.help > path,
5244 | body.cc-custom-icons svg.highlight-glyph > path,
5245 | body.cc-custom-icons svg.horizontal-split > path,
5246 | body.cc-custom-icons svg.image-file > path,
5247 | body.cc-custom-icons svg.image-glyph > path,
5248 | body.cc-custom-icons svg.indent-glyph > path,
5249 | body.cc-custom-icons svg.info > path,
5250 | body.cc-custom-icons svg.install > path,
5251 | body.cc-custom-icons svg.keyboard-glyph > path,
5252 | body.cc-custom-icons svg.left-arrow-with-tail > path,
5253 | body.cc-custom-icons svg.left-arrow > path,
5254 | body.cc-custom-icons svg.left-chevron-glyph > path,
5255 | body.cc-custom-icons svg.lines-of-text > path,
5256 | body.cc-custom-icons svg.link-glyph > path,
5257 | body.cc-custom-icons svg.link > path,
5258 | body.cc-custom-icons svg.magnifying-glass > path,
5259 | body.cc-custom-icons svg.microphone-filled > path,
5260 | body.cc-custom-icons svg.microphone > path,
5261 | body.cc-custom-icons svg.minus-with-circle > path,
5262 | body.cc-custom-icons svg.note-glyph > path,
5263 | body.cc-custom-icons svg.number-list-glyph > path,
5264 | body.cc-custom-icons svg.open-vault > path,
5265 | body.cc-custom-icons svg.pane-layout > path,
5266 | body.cc-custom-icons svg.paper-plane > path,
5267 | body.cc-custom-icons svg.paused > path,
5268 | body.cc-custom-icons svg.pdf-file > path,
5269 | body.cc-custom-icons svg.pencil > path,
5270 | body.cc-custom-icons svg.pin > path,
5271 | body.cc-custom-icons svg.plus-with-circle > path,
5272 | body.cc-custom-icons svg.popup-open > path,
5273 | body.cc-custom-icons svg.presentation > path,
5274 | body.cc-custom-icons svg.price-tag-glyph > path,
5275 | body.cc-custom-icons svg.quote-glyph > path,
5276 | body.cc-custom-icons svg.redo-glyph > path,
5277 | body.cc-custom-icons svg.reset > path,
5278 | body.cc-custom-icons svg.right-arrow-with-tail > path,
5279 | body.cc-custom-icons svg.right-arrow > path,
5280 | body.cc-custom-icons svg.right-chevron-glyph > path,
5281 | body.cc-custom-icons svg.right-triangle > path,
5282 | body.cc-custom-icons svg.run-command > path,
5283 | body.cc-custom-icons svg.search > path,
5284 | body.cc-custom-icons svg.sheets-in-box > path,
5285 | body.cc-custom-icons svg.stacked-levels > path,
5286 | body.cc-custom-icons svg.star-list > path,
5287 | body.cc-custom-icons svg.star > path,
5288 | body.cc-custom-icons svg.strikethrough-glyph > path,
5289 | body.cc-custom-icons svg.switch > path,
5290 | body.cc-custom-icons svg.sync-small > path,
5291 | body.cc-custom-icons svg.sync > path,
5292 | body.cc-custom-icons svg.tag-glyph > path,
5293 | body.cc-custom-icons svg.three-horizontal-bars > path,
5294 | body.cc-custom-icons svg.trash > path,
5295 | body.cc-custom-icons svg.undo-glyph > path,
5296 | body.cc-custom-icons svg.unindent-glyph > path,
5297 | body.cc-custom-icons svg.up-and-down-arrows > path,
5298 | body.cc-custom-icons svg.up-arrow-with-tail > path,
5299 | body.cc-custom-icons svg.up-chevron-glyph > path,
5300 | body.cc-custom-icons svg.vault > path,
5301 | body.cc-custom-icons svg.vertical-split > path,
5302 | body.cc-custom-icons svg.vertical-three-dots > path,
5303 | body.cc-custom-icons svg.wrench-screwdriver-glyph > path,
5304 | body.cc-custom-icons svg.clock-glyph > path,
5305 | body.cc-custom-icons svg.command-glyph > path,
5306 | body.cc-custom-icons svg.add-note-glyph > path,
5307 | body.cc-custom-icons svg.calendar-glyph > path,
5308 | body.cc-custom-icons svg.duplicate-glyph > path,
5309 | body.cc-custom-icons svg.file-explorer-glyph > path,
5310 | body.cc-custom-icons svg.graph-glyph > path,
5311 | body.cc-custom-icons svg.import-glyph > path,
5312 | body.cc-custom-icons svg.languages > path,
5313 | body.cc-custom-icons svg.links-coming-in > path,
5314 | body.cc-custom-icons svg.links-going-out > path,
5315 | body.cc-custom-icons svg.merge-files-glyph > path,
5316 | body.cc-custom-icons svg.merge-files > path,
5317 | body.cc-custom-icons svg.open-elsewhere-glyph > path,
5318 | body.cc-custom-icons svg.paper-plane-glyph > path,
5319 | body.cc-custom-icons svg.paste-text > path,
5320 | body.cc-custom-icons svg.paste > path,
5321 | body.cc-custom-icons svg.percent-sign-glyph > path,
5322 | body.cc-custom-icons svg.play-audio-glyph > path,
5323 | body.cc-custom-icons svg.presentation-glyph > path,
5324 | body.cc-custom-icons svg.question-mark-glyph > path,
5325 | body.cc-custom-icons svg.restore-file-glyph > path,
5326 | body.cc-custom-icons svg.scissors-glyph > path,
5327 | body.cc-custom-icons svg.scissors > path,
5328 | body.cc-custom-icons svg.search-glyph > path,
5329 | body.cc-custom-icons svg.select-all-text > path,
5330 | body.cc-custom-icons svg.split > path,
5331 | body.cc-custom-icons svg.star-glyph > path,
5332 | body.cc-custom-icons svg.stop-audio-glyph > path,
5333 | body.cc-custom-icons svg.two-blank-pages > path,
5334 | body.cc-custom-icons svg.tomorrow-glyph > path,
5335 | body.cc-custom-icons svg.yesterday-glyph > path,
5336 | body.cc-custom-icons svg.workspace-glyph > path,
5337 | body.cc-custom-icons svg.box-glyph > path {
5338 |   display: none;
5339 | }
5340 | 
5341 | body.cc-custom-icons svg.blocks {
5342 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M16.667 45.833h25c2.304 0 4.167 -1.863 4.167 -4.167V16.667c0 -2.304 -1.863 -4.167 -4.167 -4.167H16.667C14.363 12.5 12.5 14.363 12.5 16.667v25C12.5 43.971 14.363 45.833 16.667 45.833zM16.667 87.5h25c2.304 0 4.167 -1.863 4.167 -4.167v-25c0 -2.304 -1.863 -4.167 -4.167 -4.167H16.667c-2.304 0 -4.167 1.863 -4.167 4.167v25C12.5 85.638 14.363 87.5 16.667 87.5zM58.333 87.5h25c2.304 0 4.167 -1.863 4.167 -4.167v-25c0 -2.304 -1.863 -4.167 -4.167 -4.167h-25c-2.304 0 -4.167 1.863 -4.167 4.167v25C54.167 85.638 56.029 87.5 58.333 87.5zM88.721 26.221l-14.942 -14.942c-1.629 -1.629 -4.263 -1.629 -5.892 0l-14.942 14.942c-1.629 1.629 -1.629 4.263 0 5.892l14.942 14.942c1.629 1.629 4.263 1.629 5.892 0l14.942 -14.942C90.35 30.483 90.35 27.85 88.721 26.221z"></path></svg>');
5343 | }
5344 | body.cc-custom-icons svg.audio-file {
5345 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M66.667 87.5c14.696 -6.446 24.996 -20.454 24.996 -37.5S81.363 18.946 66.667 12.5v8.333c9.946 5.775 16.663 16.863 16.663 29.167S76.613 73.392 66.667 79.167V87.5z M66.667 29.167v41.667c5.104 -4.583 8.333 -13.454 8.333 -20.833S71.771 33.75 66.667 29.167zM16.667 70.833h11.238l23.95 15.967C52.55 87.263 53.358 87.5 54.167 87.5c0.675 0 1.35 -0.163 1.967 -0.492C57.488 86.283 58.333 84.871 58.333 83.333V16.667c0 -1.538 -0.846 -2.95 -2.2 -3.675 -1.35 -0.729 -3 -0.642 -4.275 0.208L27.904 29.167H16.667C12.071 29.167 8.333 32.904 8.333 37.5v25C8.333 67.096 12.071 70.833 16.667 70.833zM16.667 37.5h12.5c0.138 0 0.254 -0.067 0.388 -0.079 0.267 -0.025 0.521 -0.083 0.783 -0.158 0.283 -0.088 0.546 -0.188 0.8 -0.325 0.108 -0.063 0.238 -0.071 0.342 -0.138L50 24.45v51.1l-18.521 -12.35c-0.104 -0.071 -0.233 -0.083 -0.342 -0.138 -0.254 -0.138 -0.513 -0.242 -0.792 -0.325 -0.267 -0.079 -0.525 -0.133 -0.8 -0.158C29.413 62.567 29.3 62.5 29.167 62.5H16.667V37.5z"></path></svg>');
5346 | }
5347 | body.cc-custom-icons svg.bracket-glyph {
5348 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 16.667L41.667 8.333 16.667 8.333 16.667 91.667 41.667 91.667 41.667 83.333 25 83.333 25 16.667zM58.333 83.333L58.333 91.667 83.333 91.667 83.333 8.333 58.333 8.333 58.333 16.667 75 16.667 75 83.333z"></path></svg>');
5349 | }
5350 | body.cc-custom-icons svg.broken-link {
5351 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M70.621 58.838L79.463 50c8.117 -8.121 8.117 -21.342 0 -29.463 -8.125 -8.125 -21.346 -8.117 -29.463 0l-2.946 2.946 5.892 5.892 2.946 -2.946c4.871 -4.863 12.8 -4.871 17.679 0 4.871 4.875 4.871 12.804 0 17.679l-8.842 8.838c-1.029 1.029 -2.225 1.813 -3.517 2.375L55.892 50l5.892 -5.892 -2.946 -2.946c-3.929 -3.933 -9.162 -6.104 -14.729 -6.104 -0.979 0 -1.933 0.133 -2.879 0.275L15.446 9.554 9.554 15.446l75 75 5.892 -5.892 -23.067 -23.067C68.533 60.721 69.621 59.838 70.621 58.838zM44.108 73.571c-4.871 4.863 -12.8 4.871 -17.679 0 -4.871 -4.875 -4.871 -12.804 0 -17.679l6.15 -6.146 -5.892 -5.892L20.538 50c-8.117 8.121 -8.117 21.342 0 29.463 4.063 4.063 9.396 6.092 14.729 6.092 5.338 0 10.675 -2.029 14.733 -6.092l2.946 -2.946 -5.892 -5.892L44.108 73.571z"></path></svg>');
5352 | }
5353 | body.cc-custom-icons svg.bullet-list-glyph {
5354 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M16.667 25H25V33.333H16.667zM16.667 45.833H25V54.167H16.667zM16.667 66.667H25V75H16.667zM83.333 33.333L83.333 25 78.333 25 38.333 25 33.429 25 33.429 33.333 38.333 33.333 78.333 33.333zM33.333 45.833H83.333V54.167H33.333zM33.333 66.667H83.333V75H33.333z"></path></svg>');
5355 | }
5356 | body.cc-custom-icons svg.bullet-list {
5357 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M16.667 25H25V33.333H16.667zM16.667 45.833H25V54.167H16.667zM16.667 66.667H25V75H16.667zM83.333 33.333L83.333 25 78.333 25 38.333 25 33.429 25 33.429 33.333 38.333 33.333 78.333 33.333zM33.333 45.833H83.333V54.167H33.333zM33.333 66.667H83.333V75H33.333z"></path></svg>');
5358 | }
5359 | body.cc-custom-icons svg.calendar-with-checkmark {
5360 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 16.667h-8.333V8.333h-8.333v8.333H37.5V8.333H29.167v8.333H20.833C16.238 16.667 12.5 20.404 12.5 25v8.333v50c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V33.333V25C87.5 20.404 83.763 16.667 79.167 16.667zM79.175 83.333H20.833V33.333h58.333L79.175 83.333z M45.833 72.558L69.613 48.779 63.721 42.888 45.833 60.775 36.279 51.221 30.388 57.113z"></path></svg>');
5361 | }
5362 | body.cc-custom-icons svg.check-in-circle {
5363 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M41.663 56.613L32.083 47.05 26.2 52.95 41.671 68.388 69.613 40.446 63.721 34.554z"></path></svg>');
5364 | }
5365 | body.cc-custom-icons svg.check-small {
5366 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M41.663 56.613L32.083 47.05 26.2 52.95 41.671 68.388 69.613 40.446 63.721 34.554z"></path></svg>');
5367 | }
5368 | body.cc-custom-icons svg.checkbox-glyph {
5369 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 64.942L27.946 51.221 22.054 57.113 41.667 76.725 82.113 36.279 76.221 30.388z"></path></svg>');
5370 | }
5371 | body.cc-custom-icons svg.checkmark {
5372 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 64.942L27.946 51.221 22.054 57.113 41.667 76.725 82.113 36.279 76.221 30.388z"></path></svg>');
5373 | }
5374 | body.cc-custom-icons svg.clock {
5375 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M54.167 29.167L45.833 29.167 45.833 51.725 59.554 65.446 65.446 59.554 54.167 48.275z"></path></svg>');
5376 | }
5377 | body.cc-custom-icons svg.cloud {
5378 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M78.933 46.3C77.113 31.958 64.833 20.833 50 20.833C38.517 20.833 28.542 27.546 23.988 38.125C15.038 40.8 8.333 49.25 8.333 58.333c0 11.488 9.346 20.833 20.833 20.833h45.833c9.192 0 16.667 -7.475 16.667 -16.667C91.667 54.667 86.229 48.075 78.933 46.3zM75 70.833H29.167c-6.892 0 -12.5 -5.608 -12.5 -12.5c0 -5.85 4.996 -11.483 11.138 -12.563l2.421 -0.425l0.8 -2.325C33.954 34.475 41.229 29.167 50 29.167c11.488 0 20.833 9.346 20.833 20.833v4.167h4.167c4.596 0 8.333 3.738 8.333 8.333S79.596 70.833 75 70.833z"></path></svg>');
5379 | }
5380 | body.cc-custom-icons svg.code-glyph {
5381 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M34.554 26.221L10.775 50 34.554 73.779 40.446 67.888 22.558 50 40.446 32.113zM65.446 73.779L89.225 50 65.446 26.221 59.554 32.113 77.442 50 59.554 67.888z"></path></svg>');
5382 | }
5383 | body.cc-custom-icons svg.add-note-glyph,
5384 | body.cc-custom-icons
5385 |   .side-dock-ribbon-action[aria-label="Create new Zettelkasten note"]
5386 |   > svg.sheets-in-box,
5387 | body.cc-custom-icons .nav-action-button[aria-label="New note"] svg.document,
5388 | body.cc-custom-icons svg.create-new {
5389 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.07 36.167c-.045-.134-.082-.263-.137-.392-.204-.442-.458-.862-.816-1.22l-25-25c-.359-.36-.78-.613-1.221-.818-.125-.058-.258-.091-.392-.137a4.131 4.131 0 00-1.079-.213c-.092-.008-.17-.054-.258-.054H25c-4.596 0-8.333 3.738-8.333 8.334v66.666c0 4.596 3.737 8.334 8.333 8.334h50c4.596 0 8.333-3.738 8.333-8.334V37.5c0-.087-.046-.167-.054-.258a4.126 4.126 0 00-.208-1.075zM25 83.333V16.667h25l25 25 .008 41.666H25z M54.167 37.5h-8.334V50h-12.5v8.333h12.5v12.5h8.334v-12.5h12.5V50h-12.5V37.5z"></path></svg>');
5390 | }
5391 | body.cc-custom-icons svg.cross-in-box {
5392 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M38.217 67.675L50 55.892 61.783 67.675 67.675 61.783 55.892 50 67.675 38.217 61.783 32.325 50 44.108 38.217 32.325 32.325 38.217 44.108 50 32.325 61.783z M50 91.667c22.975 0 41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333S8.333 27.025 8.333 50S27.025 91.667 50 91.667zM50 16.667c18.379 0 33.333 14.954 33.333 33.333s-14.954 33.333 -33.333 33.333s-33.333 -14.954 -33.333 -33.333S31.621 16.667 50 16.667z"></path></svg>');
5393 | }
5394 | body.cc-custom-icons svg.cross {
5395 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M67.467 26.433L49.788 44.108 32.113 26.433 26.221 32.325 43.896 50 26.221 67.675 32.113 73.567 49.788 55.892 67.467 73.567 73.358 67.675 55.683 50 73.358 32.325z"></path></svg>');
5396 | }
5397 | body.cc-custom-icons svg.crossed-star {
5398 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M20.938 86.563c-0.383 1.663 0.283 3.392 1.692 4.362C23.346 91.417 24.171 91.667 25 91.667c0.804 0 1.613 -0.233 2.313 -0.7L50 75.842l22.688 15.125c1.45 0.967 3.35 0.929 4.771 -0.1c1.408 -1.029 2.029 -2.833 1.55 -4.508l-7.621 -26.667l18.9 -17.008c1.238 -1.113 1.692 -2.858 1.158 -4.433c-0.538 -1.575 -1.958 -2.688 -3.617 -2.817L64.075 33.542l-10.279 -22.754C53.125 9.292 51.638 8.333 50 8.333s-3.125 0.958 -3.796 2.45L35.925 33.542L12.171 35.429C10.537 35.558 9.133 36.629 8.583 38.167c-0.558 1.538 -0.158 3.258 1.008 4.4l17.558 17.113L20.938 86.563zM50 22.621l8.508 18.838l2.45 0.196c0.004 0 0.004 0 0.004 0l16.55 1.313l-13.629 12.267c-0.004 0.004 -0.004 0.004 -0.004 0.008l-1.929 1.733l0.713 2.488c0 0 0 0.008 0 0.013l5.221 18.271L50 65.825V22.621z"></path></svg>');
5399 | }
5400 | body.cc-custom-icons svg.dice {
5401 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 12.5H20.833C16.238 12.5 12.5 16.238 12.5 20.833v58.333c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V20.833C87.5 16.238 83.763 12.5 79.167 12.5zM20.833 79.167V20.833h58.333l0.008 58.333H20.833z M39.583 33.333A6.25 6.25 0 0 1 33.333 39.583A6.25 6.25 0 0 1 27.083 33.333A6.25 6.25 0 0 1 39.583 33.333z M56.25 50A6.25 6.25 0 0 1 50 56.25A6.25 6.25 0 0 1 43.75 50A6.25 6.25 0 0 1 56.25 50z M72.917 66.667A6.25 6.25 0 0 1 66.667 72.917A6.25 6.25 0 0 1 60.417 66.667A6.25 6.25 0 0 1 72.917 66.667z"></path></svg>');
5402 | }
5403 | body.cc-custom-icons svg.document {
5404 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.071 36.167c-0.046 -0.133 -0.083 -0.263 -0.138 -0.392c-0.204 -0.442 -0.458 -0.863 -0.817 -1.221l-25 -25c-0.358 -0.358 -0.779 -0.613 -1.221 -0.817c-0.125 -0.058 -0.258 -0.092 -0.392 -0.138c-0.35 -0.117 -0.708 -0.192 -1.079 -0.212C54.333 8.379 54.254 8.333 54.167 8.333H25C20.404 8.333 16.667 12.071 16.667 16.667v66.667c0 4.596 3.738 8.333 8.333 8.333h50c4.596 0 8.333 -3.738 8.333 -8.333V37.5c0 -0.088 -0.046 -0.167 -0.054 -0.258C83.258 36.875 83.188 36.517 83.071 36.167zM69.108 33.333H58.333V22.558L69.108 33.333zM25 83.333V16.667h25v20.833c0 2.304 1.863 4.167 4.167 4.167h20.833l0.008 41.667H25z"></path></svg>');
5405 | }
5406 | body.cc-custom-icons svg.documents {
5407 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 8.333H41.667C37.071 8.333 33.333 12.071 33.333 16.667v16.667H16.667c-4.596 0 -8.333 3.738 -8.333 8.333v41.667c0 4.596 3.738 8.333 8.333 8.333h41.667c4.596 0 8.333 -3.738 8.333 -8.333v-16.667h16.667c4.596 0 8.333 -3.738 8.333 -8.333V16.667C91.667 12.071 87.929 8.333 83.333 8.333zM16.667 83.333V41.667h41.667l0.008 41.667H16.667zM83.333 58.333h-16.667v-16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333h-16.667V16.667h41.667V58.333z M25 50H50V58.333H25zM25 66.667H50V75H25z"></path></svg>');
5408 | }
5409 | body.cc-custom-icons svg.dot-network {
5410 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M81.25 12.5C75.504 12.5 70.833 17.171 70.833 22.917c0 1.488 0.325 2.9 0.892 4.188l-8.146 9.162C60.896 34.425 57.663 33.333 54.167 33.333c-3.083 0 -5.933 0.9 -8.413 2.358L36.279 26.221L36.183 26.317C37 24.658 37.5 22.813 37.5 20.833c0 -6.904 -5.596 -12.5 -12.5 -12.5S12.5 13.929 12.5 20.833s5.596 12.5 12.5 12.5c1.979 0 3.821 -0.5 5.483 -1.317L30.388 32.113L39.863 41.583C38.396 44.067 37.5 46.921 37.5 50c0 4.154 1.583 7.913 4.104 10.838l-10.738 10.733C29.692 71.108 28.421 70.833 27.083 70.833C21.342 70.833 16.667 75.504 16.667 81.25S21.342 91.667 27.083 91.667S37.5 86.996 37.5 81.25c0 -1.338 -0.275 -2.608 -0.738 -3.788l11.825 -11.825C50.342 66.263 52.2 66.667 54.167 66.667c9.192 0 16.667 -7.475 16.667 -16.667c0 -2.65 -0.679 -5.121 -1.783 -7.35l8.821 -9.929C78.938 33.087 80.063 33.333 81.25 33.333C86.996 33.333 91.667 28.663 91.667 22.917S86.996 12.5 81.25 12.5zM54.167 58.333c-4.596 0 -8.333 -3.738 -8.333 -8.333s3.738 -8.333 8.333 -8.333c4.596 0 8.333 3.738 8.333 8.333S58.763 58.333 54.167 58.333z"></path></svg>');
5411 | }
5412 | body.cc-custom-icons svg.double-down-arrow-glyph {
5413 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M70.579 45.579L50 66.163 29.421 45.579 20.579 54.421 50 83.838 79.421 54.421z M70.579 16.413L50 36.996 29.421 16.413 20.579 25.254 50 54.671 79.421 25.254z"></path></svg>');
5414 | }
5415 | body.cc-custom-icons svg.double-up-arrow-glyph {
5416 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 16.163L20.579 45.579 29.421 54.421 50 33.838 70.579 54.421 79.421 45.579z M20.579 74.746L29.421 83.588 50 63.004 70.579 83.588 79.421 74.746 50 45.329z"></path></svg>');
5417 | }
5418 | body.cc-custom-icons svg.down-arrow-with-tail {
5419 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M77.946 52.946L72.054 47.054 54.167 64.942 54.167 25 45.833 25 45.833 64.942 27.946 47.054 22.054 52.946 50 80.892z"></path></svg>');
5420 | }
5421 | body.cc-custom-icons svg.down-chevron-glyph {
5422 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M70.579 33.079L50 53.663 29.421 33.079 20.579 41.921 50 71.338 79.421 41.921z"></path></svg>');
5423 | }
5424 | body.cc-custom-icons svg.enter {
5425 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.175 12.5h-58.333c-4.596 0 -8.333 3.738 -8.333 8.333v16.667h8.333V20.833h58.333v58.333h-58.333v-16.667h-8.333v16.667c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V20.833C87.508 16.238 83.767 12.5 79.175 12.5z M45.833 66.667L66.667 50 45.833 33.333 45.833 45.837 12.5 45.837 12.5 54.171 45.833 54.171z"></path></svg>');
5426 | }
5427 | body.cc-custom-icons svg.exit-fullscreen {
5428 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 16.667L33.333 16.667 33.333 33.333 16.667 33.333 16.667 41.667 41.667 41.667zM33.333 83.333L41.667 83.333 41.667 58.333 16.667 58.333 16.667 66.667 33.333 66.667zM83.333 58.333L58.333 58.333 58.333 83.333 66.667 83.333 66.667 66.667 83.333 66.667zM83.333 33.333L66.667 33.333 66.667 16.667 58.333 16.667 58.333 41.667 83.333 41.667z"></path></svg>');
5429 | }
5430 | body.cc-custom-icons svg.expand-vertically {
5431 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M29.167 70.833L50 91.667 70.833 70.833 54.167 70.833 54.167 29.167 70.833 29.167 50 8.333 29.167 29.167 45.833 29.167 45.833 70.833z"></path></svg>');
5432 | }
5433 | body.cc-custom-icons svg.filled-pin {
5434 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 91.667l4.167 -8.333v-12.5h20.833c2.304 0 4.167 -1.863 4.167 -4.167v-6.608c0 -2.192 -0.892 -4.342 -2.442 -5.892L70.833 48.275V33.333c2.304 0 4.167 -1.863 4.167 -4.167V16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333H33.333C28.738 8.333 25 12.071 25 16.667v12.5c0 2.304 1.867 4.167 4.167 4.167v14.942L23.275 54.167C21.721 55.717 20.833 57.867 20.833 60.058V66.667c0 2.304 1.867 4.167 4.167 4.167h20.833v12.5L50 91.667zM33.333 16.667h33.333v8.333H33.333V16.667zM29.167 60.058l7.113 -7.113C37.063 52.167 37.5 51.108 37.5 50V33.333h25v16.667c0 1.108 0.438 2.167 1.221 2.946L70.833 60.058V62.5H29.167V60.058z"></path></svg>');
5435 | }
5436 | body.cc-custom-icons svg.folder {
5437 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 20.833h-35.775L40.446 13.721C39.667 12.938 38.604 12.5 37.5 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v58.333c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V29.167C91.667 24.571 87.929 20.833 83.333 20.833zM16.667 79.167V29.167h29.167h4.167h33.333l0.008 50H16.667z"></path></svg>');
5438 | }
5439 | body.cc-custom-icons svg.fullscreen {
5440 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M20.833 20.833L41.667 20.833 41.667 12.5 12.5 12.5 12.5 41.667 20.833 41.667zM41.667 79.167L20.833 79.167 20.833 58.333 12.5 58.333 12.5 87.5 41.667 87.5zM87.5 58.333L79.167 58.333 79.167 79.167 58.333 79.167 58.333 87.5 87.5 87.5zM79.167 41.667L87.5 41.667 87.5 12.5 58.333 12.5 58.333 20.833 79.167 20.833z"></path></svg>');
5441 | }
5442 | body.cc-custom-icons svg.gear {
5443 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 66.667c9.192 0 16.667 -7.475 16.667 -16.667s-7.475 -16.667 -16.667 -16.667s-16.667 7.475 -16.667 16.667S40.808 66.667 50 66.667zM50 41.667c4.517 0 8.333 3.817 8.333 8.333s-3.817 8.333 -8.333 8.333s-8.333 -3.817 -8.333 -8.333S45.483 41.667 50 41.667z M11.854 67.233l4.167 7.208c2.213 3.821 7.538 5.254 11.375 3.042l2.204 -1.275C32.025 78.113 34.688 79.675 37.5 80.842V83.333c0 4.596 3.738 8.333 8.333 8.333h8.333c4.596 0 8.333 -3.738 8.333 -8.333v-2.492c2.813 -1.167 5.475 -2.729 7.9 -4.629l2.204 1.275c3.846 2.208 9.158 0.783 11.379 -3.046l4.163 -7.204c2.3 -3.979 0.933 -9.088 -3.046 -11.383l-2.104 -1.217C83.221 53.092 83.333 51.546 83.333 50s-0.113 -3.096 -0.338 -4.629l2.104 -1.217c3.979 -2.3 5.346 -7.404 3.046 -11.383l-4.163 -7.204c-2.213 -3.833 -7.533 -5.271 -11.379 -3.05l-2.204 1.275C67.975 21.888 65.313 20.325 62.5 19.158V16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333h-8.333C41.238 8.333 37.5 12.071 37.5 16.667v2.492c-2.813 1.167 -5.475 2.729 -7.9 4.629L27.396 22.512c-3.85 -2.213 -9.167 -0.779 -11.379 3.05L11.854 32.767c-2.3 3.979 -0.933 9.088 3.046 11.383l2.104 1.217C16.779 46.904 16.667 48.454 16.667 50s0.113 3.092 0.338 4.629l-2.104 1.217C10.921 58.146 9.554 63.254 11.854 67.233zM25.713 55.742C25.242 53.854 25 51.921 25 50c0 -1.925 0.242 -3.858 0.708 -5.742c0.45 -1.804 -0.346 -3.688 -1.958 -4.617L19.071 36.933l4.158 -7.204L28 32.488c1.6 0.921 3.613 0.688 4.95 -0.592c2.846 -2.696 6.279 -4.713 9.933 -5.829C44.638 25.533 45.833 23.913 45.833 22.083V16.667h8.333v5.417c0 1.829 1.196 3.45 2.95 3.983c3.654 1.121 7.088 3.133 9.933 5.829c1.338 1.279 3.358 1.508 4.95 0.592l4.767 -2.754l4.167 7.204L76.25 39.642c-1.613 0.933 -2.408 2.817 -1.958 4.617C74.758 46.142 75 48.075 75 50c0 1.921 -0.242 3.854 -0.713 5.742c-0.446 1.804 0.35 3.688 1.963 4.617l4.679 2.704l-4.158 7.204l-4.771 -2.754c-1.596 -0.921 -3.613 -0.692 -4.95 0.592c-2.846 2.696 -6.279 4.713 -9.933 5.829C55.363 74.467 54.167 76.088 54.167 77.917l0.008 5.417H45.833v-5.417c0 -1.829 -1.196 -3.45 -2.95 -3.983c-3.654 -1.121 -7.088 -3.133 -9.933 -5.829c-0.792 -0.758 -1.825 -1.146 -2.867 -1.146c-0.717 0 -1.433 0.183 -2.083 0.558l-4.767 2.758l-4.167 -7.204L23.75 60.358C25.363 59.429 26.158 57.546 25.713 55.742z"></path></svg>');
5444 | }
5445 | body.cc-custom-icons svg.hashtag {
5446 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M66.742 15.896L63.467 33.333h-20.692l2.983 -15.896L37.575 15.896L34.3 33.333H16.667v8.333h16.071l-3.129 16.667H12.5v8.333h15.546l-2.975 15.854l8.188 1.538L36.525 66.667h20.692l-2.975 15.854l8.188 1.538L65.692 66.667H83.333v-8.333h-16.079l3.129 -16.667H87.5V33.333h-15.554l2.983 -15.896L66.742 15.896zM58.775 58.333H38.088l3.129 -16.667h20.692L58.775 58.333z"></path></svg>');
5447 | }
5448 | body.cc-custom-icons svg.go-to-file {
5449 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M57.113 9.554C56.333 8.771 55.275 8.333 54.167 8.333H25C20.404 8.333 16.667 12.071 16.667 16.667v66.667c0 4.596 3.738 8.333 8.333 8.333h50c4.596 0 8.333 -3.738 8.333 -8.333V37.5c0 -1.108 -0.438 -2.167 -1.221 -2.946L57.113 9.554zM25 16.667h27.442L75 39.225l0.008 38.225l-10.7 -10.7C65.767 64.271 66.667 61.413 66.667 58.333c0 -9.192 -7.475 -16.667 -16.667 -16.667s-16.667 7.475 -16.667 16.667s7.475 16.667 16.667 16.667c3.079 0 5.938 -0.9 8.417 -2.358L69.108 83.333H25V16.667zM50 66.667c-4.596 0 -8.333 -3.738 -8.333 -8.333s3.738 -8.333 8.333 -8.333s8.333 3.738 8.333 8.333S54.596 66.667 50 66.667z"></path></svg>');
5450 | }
5451 | body.cc-custom-icons svg.help {
5452 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 25C40.962 25 33.608 32.354 33.608 41.392h8.333C41.942 36.946 45.558 33.333 50 33.333s8.058 3.613 8.058 8.058c0 2.492 -2.004 4.3 -5.067 6.775 -1.063 0.863 -2.067 1.683 -2.879 2.496C45.954 54.817 45.833 59.229 45.833 59.721V62.5h8.333l-0.004 -2.638c0.004 -0.067 0.138 -1.608 1.838 -3.304 0.625 -0.625 1.413 -1.25 2.229 -1.908 3.246 -2.629 8.158 -6.6 8.158 -13.258C66.392 32.354 59.038 25 50 25zM45.833 66.667H54.167V75H45.833z M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z"></path></svg>');
5453 | }
5454 | body.cc-custom-icons svg.highlight-glyph {
5455 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M86.279 24.275l-14.729 -14.721c-1.617 -1.621 -4.237 -1.629 -5.867 -0.025L29.567 45.083c-0.563 0.558 -0.958 1.262 -1.138 2.033l-4.267 18.488L16.667 75h11.783l4.758 -4.704 14.95 -3.45c0.75 -0.175 1.438 -0.554 1.988 -1.092l36.113 -35.563C87.05 29.413 87.496 28.35 87.5 27.238S87.067 25.063 86.279 24.275zM47.242 56.913l-8.838 -8.833 30.179 -29.713 8.833 8.833L47.242 56.913zM16.667 83.333H83.333V91.667H16.667z"></path></svg>');
5456 | }
5457 | body.cc-custom-icons svg.horizontal-split {
5458 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M29.167 70.833L50 91.667 70.833 70.833 54.167 70.833 54.167 29.167 70.833 29.167 50 8.333 29.167 29.167 45.833 29.167 45.833 70.833z"></path></svg>');
5459 | }
5460 | body.cc-custom-icons svg.image-file {
5461 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M37.496 39.583A6.25 6.25 0 0 1 31.246 45.833A6.25 6.25 0 0 1 24.996 39.583A6.25 6.25 0 0 1 37.496 39.583z M43.746 58.333L37.496 50 24.996 66.667 37.496 66.667 49.996 66.667 74.996 66.667 56.246 41.667z M83.329 16.667h-66.667c-4.596 0 -8.333 3.738 -8.333 8.333v50c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V25C91.662 20.404 87.925 16.667 83.329 16.667zM16.663 75V25h66.667l0.008 50H16.663z"></path></svg>');
5462 | }
5463 | body.cc-custom-icons svg.image-glyph {
5464 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M37.496 39.583A6.25 6.25 0 0 1 31.246 45.833A6.25 6.25 0 0 1 24.996 39.583A6.25 6.25 0 0 1 37.496 39.583z M43.746 58.333L37.496 50 24.996 66.667 37.496 66.667 49.996 66.667 74.996 66.667 56.246 41.667z M83.329 16.667h-66.667c-4.596 0 -8.333 3.738 -8.333 8.333v50c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V25C91.662 20.404 87.925 16.667 83.329 16.667zM16.663 75V25h66.667l0.008 50H16.663z"></path></svg>');
5465 | }
5466 | body.cc-custom-icons svg.indent-glyph {
5467 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 62.5H83.333V70.833H41.667zM16.667 79.167H83.333V87.5H16.667zM41.667 45.833H83.333V54.167H41.667zM41.667 29.167H83.333V37.5H41.667zM16.667 12.5H83.333V20.833H16.667zM16.667 33.333L16.667 66.667 33.333 50z"></path></svg>');
5468 | }
5469 | body.cc-custom-icons svg.info {
5470 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M45.833 45.833H54.167V70.833H45.833zM45.833 29.167H54.167V37.5H45.833z"></path></svg>');
5471 | }
5472 | body.cc-custom-icons svg.install {
5473 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 66.667L66.667 45.833 54.167 45.833 54.167 16.667 45.833 16.667 45.833 45.833 33.333 45.833z M83.333 75H16.667v-29.167H8.333v29.167c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333v-29.167h-8.333V75z"></path></svg>');
5474 | }
5475 | body.cc-custom-icons svg.keyboard-glyph {
5476 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M91.667 11.111H8.333C3.731 11.111 0 14.842 0 19.444v50c0 4.602 3.731 8.333 8.333 8.333h83.333c4.602 0 8.333 -3.731 8.333 -8.333V19.444c0 -4.602 -3.731 -8.333 -8.333 -8.333zm1.389 58.333c0 0.766 -0.623 1.389 -1.389 1.389H8.333c-0.766 0 -1.389 -0.623 -1.389 -1.389V19.444c0 -0.766 0.623 -1.389 1.389 -1.389h83.333c0.766 0 1.389 0.623 1.389 1.389v50zM29.514 46.875v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm-58.333 14.236v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083H14.236c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm66.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zM21.181 32.639v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083H14.236c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm16.667 0v-4.861c0 -1.151 -0.933 -2.083 -2.083 -2.083h-4.861c-1.151 0 -2.083 0.933 -2.083 2.083v4.861c0 1.151 0.933 2.083 2.083 2.083h4.861c1.151 0 2.083 -0.933 2.083 -2.083zm-17.014 27.431v-2.778c0 -1.151 -0.933 -2.083 -2.083 -2.083H31.25c-1.151 0 -2.083 0.933 -2.083 2.083v2.778c0 1.151 0.933 2.083 2.083 2.083h37.5c1.151 0 2.083 -0.933 2.083 -2.083z"></path></svg>');
5477 | }
5478 | body.cc-custom-icons svg.left-arrow-with-tail {
5479 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M52.946 72.054L35.058 54.167 75 54.167 75 45.833 35.058 45.833 52.946 27.946 47.054 22.054 19.108 50 47.054 77.946z"></path></svg>');
5480 | }
5481 | body.cc-custom-icons
5482 |   .workspace-drawer-active-tab-back-icon
5483 |   > svg.left-arrow-with-tail,
5484 | body.cc-custom-icons svg.left-arrow {
5485 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M58.079 20.579L28.663 50 58.079 79.421 66.921 70.579 46.338 50 66.921 29.421z"></path></svg>');
5486 | }
5487 | body.cc-custom-icons svg.left-chevron-glyph {
5488 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M58.079 20.579L28.663 50 58.079 79.421 66.921 70.579 46.338 50 66.921 29.421z"></path></svg>');
5489 | }
5490 | body.cc-custom-icons svg.lines-of-text {
5491 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M16.667 79.167H83.333V87.5H16.667zM16.667 62.5H62.5V70.833H16.667zM16.667 45.833H83.333V54.167H16.667zM16.667 12.5H83.333V20.833H16.667zM16.667 29.167H62.5V37.5H16.667z"></path></svg>');
5492 | }
5493 | body.cc-custom-icons svg.link-glyph {
5494 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M35.271 47.054c4.721 -4.721 12.954 -4.721 17.675 0L55.892 50l5.892 -5.892l-2.946 -2.946c-3.929 -3.933 -9.162 -6.104 -14.729 -6.104S33.308 37.229 29.379 41.163L20.538 50c-8.117 8.121 -8.117 21.342 0 29.463c4.063 4.063 9.396 6.092 14.729 6.092c5.338 0 10.675 -2.029 14.733 -6.092l2.946 -2.946l-5.892 -5.892l-2.946 2.946c-4.875 4.863 -12.804 4.871 -17.679 0c-4.871 -4.875 -4.871 -12.804 0 -17.679L35.271 47.054z M50 20.538l-2.946 2.946l5.892 5.892l2.946 -2.946c4.871 -4.863 12.8 -4.871 17.679 0c4.871 4.875 4.871 12.804 0 17.679l-8.842 8.838c-4.721 4.721 -12.954 4.721 -17.675 0L44.108 50l-5.892 5.892l2.946 2.946c3.929 3.933 9.162 6.104 14.729 6.104s10.8 -2.171 14.729 -6.104L79.463 50c8.117 -8.121 8.117 -21.342 0 -29.463C71.338 12.413 58.117 12.417 50 20.538z"></path></svg>');
5495 | }
5496 | body.cc-custom-icons svg.link {
5497 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M35.271 47.054c4.721 -4.721 12.954 -4.721 17.675 0L55.892 50l5.892 -5.892l-2.946 -2.946c-3.929 -3.933 -9.162 -6.104 -14.729 -6.104S33.308 37.229 29.379 41.163L20.538 50c-8.117 8.121 -8.117 21.342 0 29.463c4.063 4.063 9.396 6.092 14.729 6.092c5.338 0 10.675 -2.029 14.733 -6.092l2.946 -2.946l-5.892 -5.892l-2.946 2.946c-4.875 4.863 -12.804 4.871 -17.679 0c-4.871 -4.875 -4.871 -12.804 0 -17.679L35.271 47.054z M50 20.538l-2.946 2.946l5.892 5.892l2.946 -2.946c4.871 -4.863 12.8 -4.871 17.679 0c4.871 4.875 4.871 12.804 0 17.679l-8.842 8.838c-4.721 4.721 -12.954 4.721 -17.675 0L44.108 50l-5.892 5.892l2.946 2.946c3.929 3.933 9.162 6.104 14.729 6.104s10.8 -2.171 14.729 -6.104L79.463 50c8.117 -8.121 8.117 -21.342 0 -29.463C71.338 12.413 58.117 12.417 50 20.538z"></path></svg>');
5498 | }
5499 | body.cc-custom-icons svg.magnifying-glass {
5500 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.263 70.738c-2.138 -2.033 -4.183 -4.154 -5.696 -5.767c-1.55 -1.575 -2.483 -2.721 -2.483 -2.721l-11.667 -5.571C63.917 51.542 66.667 44.846 66.667 37.5c0 -16.079 -13.083 -29.167 -29.167 -29.167S8.333 21.421 8.333 37.5s13.083 29.167 29.167 29.167c7.346 0 14.042 -2.75 19.179 -7.246l5.571 11.667c0 0 1.146 0.933 2.721 2.483c1.613 1.512 3.733 3.558 5.767 5.696c2.058 2.108 4.117 4.217 5.658 5.8c1.508 1.617 2.517 2.692 2.517 2.692l8.838 -8.838c0 0 -1.075 -1.008 -2.692 -2.517C83.479 74.854 81.371 72.796 79.263 70.738zM37.5 58.333c-11.488 0 -20.833 -9.346 -20.833 -20.833s9.346 -20.833 20.833 -20.833s20.833 9.346 20.833 20.833S48.988 58.333 37.5 58.333z"></path></svg>');
5501 | }
5502 | body.cc-custom-icons svg.microphone-filled {
5503 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 66.667c9.192 0 16.667 -7.475 16.667 -16.667V25c0 -9.238 -7.438 -16.754 -16.579 -16.754c-0.288 0 -0.583 0.037 -0.871 0.104C40.388 8.767 33.333 16.071 33.333 25v25C33.333 59.192 40.808 66.667 50 66.667z M45.833 83.046V91.667h8.333v-8.621c16.413 -2.063 29.167 -16.075 29.167 -33.046h-8.333c0 13.788 -11.213 25 -25 25s-25 -11.213 -25 -25H16.667C16.667 66.967 29.421 80.983 45.833 83.046z"></path></svg>');
5504 | }
5505 | body.cc-custom-icons svg.microphone {
5506 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M66.667 50V25c0 -9.238 -7.438 -16.754 -16.579 -16.754c-0.288 0 -0.583 0.037 -0.871 0.104C40.388 8.767 33.333 16.071 33.333 25v25c0 9.192 7.475 16.667 16.667 16.667S66.667 59.192 66.667 50zM41.667 50V25c0 -4.596 3.738 -8.333 8.333 -8.333c0.229 0 0.454 -0.021 0.679 -0.063C54.95 16.917 58.333 20.563 58.333 25v25c0 4.596 -3.738 8.333 -8.333 8.333S41.667 54.596 41.667 50z M25 50H16.667c0 16.967 12.754 30.983 29.167 33.046V91.667h8.333v-8.621c16.413 -2.063 29.167 -16.075 29.167 -33.046h-8.333c0 13.788 -11.213 25 -25 25S25 63.788 25 50z"></path></svg>');
5507 | }
5508 | body.cc-custom-icons svg.minus-with-circle {
5509 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M29.167 45.833H70.833V54.167H29.167z M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z"></path></svg>');
5510 | }
5511 | body.cc-custom-icons svg.note-glyph {
5512 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 12.5H20.833C16.238 12.5 12.5 16.238 12.5 20.833v58.333c0 4.596 3.738 8.333 8.333 8.333h33.333c0.546 0 1.083 -0.108 1.588 -0.317s0.967 -0.513 1.358 -0.904l29.167 -29.167c0.358 -0.358 0.613 -0.779 0.817 -1.221c0.058 -0.125 0.092 -0.254 0.138 -0.388c0.117 -0.35 0.192 -0.708 0.212 -1.079C87.454 54.338 87.5 54.254 87.5 54.167V20.833C87.5 16.238 83.763 12.5 79.167 12.5zM20.833 20.833h58.333v29.167h-25c-2.304 0 -4.167 1.867 -4.167 4.167v25H20.833V20.833zM58.333 73.275V58.333h14.942L58.333 73.275z"></path></svg>');
5513 | }
5514 | body.cc-custom-icons svg.number-list-glyph {
5515 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M22.008 50.267c-1.783 1.367 -3 2.538 -3.646 3.546 -0.646 1 -1.038 2.075 -1.163 3.2h11.162v-3.117H22.554c0.338 -0.338 0.633 -0.629 0.883 -0.838 0.258 -0.208 0.758 -0.592 1.504 -1.125 1.262 -0.908 2.129 -1.75 2.608 -2.517 0.483 -0.775 0.721 -1.563 0.721 -2.408 0 -0.788 -0.208 -1.512 -0.629 -2.133 -0.417 -0.638 -0.988 -1.117 -1.717 -1.421 -0.725 -0.317 -1.746 -0.463 -3.054 -0.463 -1.25 0 -2.238 0.158 -2.942 0.475 -0.717 0.325 -1.258 0.792 -1.65 1.408 -0.392 0.596 -0.663 1.442 -0.808 2.517l3.725 0.317c0.104 -0.783 0.308 -1.321 0.613 -1.642 0.3 -0.304 0.692 -0.45 1.163 -0.45 0.458 0 0.833 0.146 1.133 0.45 0.304 0.296 0.45 0.65 0.45 1.075 0 0.379 -0.154 0.792 -0.45 1.238C23.796 48.804 23.1 49.438 22.008 50.267zM22.238 76.875c-0.475 0 -0.867 -0.15 -1.175 -0.438 -0.308 -0.292 -0.533 -0.813 -0.675 -1.575L16.667 75.354c0.246 0.85 0.592 1.55 1.046 2.108 0.454 0.554 1.033 0.979 1.738 1.275C20.15 79.025 21.113 79.167 22.333 79.167c1.25 0 2.254 -0.196 3.021 -0.583 0.771 -0.4 1.354 -0.95 1.767 -1.679 0.408 -0.729 0.608 -1.475 0.608 -2.267 0 -0.633 -0.121 -1.175 -0.367 -1.638 -0.25 -0.446 -0.592 -0.813 -1.038 -1.088 -0.275 -0.175 -0.671 -0.325 -1.192 -0.458 0.646 -0.354 1.117 -0.763 1.438 -1.246 0.317 -0.479 0.471 -1 0.471 -1.596 0 -0.996 -0.388 -1.821 -1.171 -2.483 -0.779 -0.663 -2.042 -0.992 -3.788 -0.992 -1.521 0 -2.7 0.3 -3.529 0.913 -0.833 0.596 -1.392 1.471 -1.683 2.608l3.517 0.629c0.096 -0.675 0.279 -1.142 0.554 -1.408s0.629 -0.408 1.071 -0.408c0.429 0 0.763 0.133 1.004 0.371 0.246 0.25 0.362 0.579 0.362 0.992 0 0.433 -0.158 0.804 -0.488 1.125s-0.738 0.467 -1.221 0.467c-0.117 0 -0.275 -0.017 -0.483 -0.046L21 73.083c0.513 -0.15 0.917 -0.233 1.204 -0.233 0.55 0 0.988 0.171 1.304 0.525 0.321 0.342 0.479 0.829 0.479 1.467 0 0.608 -0.167 1.108 -0.496 1.475C23.158 76.679 22.742 76.875 22.238 76.875zM26.188 34.863V20.833H23.108C22.712 21.7 22.163 22.429 21.467 23.012 20.767 23.604 19.783 24.104 18.517 24.533v3.142C19.375 27.404 20.087 27.121 20.658 26.825c0.571 -0.288 1.154 -0.675 1.763 -1.15v9.192H26.188zM37.5 25H83.333V33.333H37.5zM37.5 45.833H83.333V54.167H37.5zM37.5 66.667H83.333V75H37.5z"></path></svg>');
5516 | }
5517 | body.cc-custom-icons svg.open-vault {
5518 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 8.375H25c-5.025 0 -12.5 3.329 -12.5 12.5v12.5v25v12.5v8.333c0 9.171 7.475 12.5 12.5 12.5h62.5v-8.333H25.05C23.125 83.325 20.833 82.563 20.833 79.208c0 -0.421 0.037 -0.796 0.1 -1.138c0.467 -2.396 2.429 -2.988 4.112 -3.029H83.333c0.075 0 0.129 -0.037 0.204 -0.042H87.5v-4.125V62.5V16.708C87.5 12.113 83.763 8.375 79.167 8.375zM79.167 66.708H20.833v-8.333v-25v-12.5c0 -3.358 2.292 -4.117 4.167 -4.167h29.167v29.167l8.333 -4.167l8.333 4.167v-29.167h8.333V62.5V66.708z"></path></svg>');
5519 | }
5520 | body.cc-custom-icons svg.pane-layout {
5521 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M62.5 12.5H37.433h-16.667c-4.596 0 -8.333 3.738 -8.333 8.333v16.667v25.067v16.667c0 4.596 3.738 8.333 8.333 8.333h16.667H62.5h16.667c4.596 0 8.333 -3.738 8.333 -8.333v-16.667V37.5V20.833c0 -4.596 -3.738 -8.333 -8.333 -8.333H62.5zM79.167 33.333h-12.5V20.833h12.5V33.333zM20.767 41.667h12.5v16.733h-12.5V41.667zM41.6 41.667H58.333v16.733H41.6V41.667zM66.667 41.667h12.5v16.733h-12.5V41.667zM58.333 20.833v12.5H41.6V20.833H58.333zM33.267 20.833v12.5h-12.5V20.833H33.267zM20.767 66.733h12.5v12.5h-12.5V66.733zM41.6 79.233v-12.5H58.333v12.5H41.6zM66.667 79.233v-12.5h12.504v12.5H66.667z"></path></svg>');
5522 | }
5523 | body.cc-custom-icons svg.paper-plane {
5524 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M85.679 13.917c-1.217 -0.829 -2.779 -0.954 -4.121 -0.329l-70.833 33.333C9.246 47.621 8.313 49.117 8.333 50.75c0.025 1.633 1 3.104 2.5 3.758L33.333 64.354v28.008l24.317 -17.367l19.85 8.683c0.533 0.238 1.104 0.35 1.667 0.35c0.754 0 1.5 -0.204 2.167 -0.608c1.158 -0.704 1.904 -1.929 1.996 -3.283l4.167 -62.5C87.588 16.163 86.9 14.75 85.679 13.917zM75.404 73.667l-21.954 -9.608L66.667 38.196l-31.871 17.708l-12.217 -5.346L78.708 24.142L75.404 73.667z"></path></svg>');
5525 | }
5526 | body.cc-custom-icons svg.paused {
5527 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M54.167 37.5H62.5V62.5H54.167zM37.5 37.5H45.833V62.5H37.5z"></path></svg>');
5528 | }
5529 | body.cc-custom-icons svg.pdf-file {
5530 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M34.446 61.167c-0.767 0 -1.283 0.075 -1.55 0.15v4.908c0.317 0.075 0.713 0.096 1.258 0.096 1.996 0 3.225 -1.008 3.225 -2.713C37.379 62.083 36.321 61.167 34.446 61.167zM48.975 61.217c-0.833 0 -1.375 0.075 -1.696 0.15v10.875c0.321 0.075 0.838 0.075 1.304 0.075 3.404 0.025 5.621 -1.85 5.621 -5.817C54.229 63.042 52.208 61.217 48.975 61.217z M58.333 8.333H25C20.4 8.333 16.667 12.067 16.667 16.667v66.667c0 4.6 3.733 8.333 8.333 8.333h50c4.6 0 8.333 -3.733 8.333 -8.333V33.333L58.333 8.333zM39.575 67.458c-1.288 1.208 -3.188 1.75 -5.4 1.75c-0.496 0 -0.942 -0.025 -1.283 -0.075v5.942H29.167v-16.4C30.325 58.483 31.954 58.333 34.246 58.333c2.321 0 3.971 0.442 5.083 1.329c1.058 0.842 1.775 2.221 1.775 3.846C41.1 65.142 40.558 66.521 39.575 67.458zM55.438 73.104c-1.75 1.454 -4.412 2.146 -7.667 2.146c-1.95 0 -3.329 -0.125 -4.267 -0.25v-16.321C44.883 58.454 46.683 58.333 48.583 58.333c3.154 0 5.204 0.567 6.804 1.775c1.729 1.283 2.813 3.329 2.813 6.267C58.2 69.554 57.038 71.75 55.438 73.104zM70.833 61.542h-6.383v3.796h5.967v3.058h-5.967v6.683h-3.775v-16.621H70.833V61.542zM58.333 37.5c-2.304 0 -4.167 0 -4.167 0V16.667l20.833 20.833H58.333z"></path></svg>');
5531 | }
5532 | body.cc-custom-icons svg.pencil {
5533 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.354 30.838c1.575 -1.575 2.442 -3.667 2.442 -5.892s-0.867 -4.317 -2.442 -5.892l-6.608 -6.608c-1.575 -1.575 -3.667 -2.442 -5.892 -2.442s-4.317 0.867 -5.888 2.438L16.667 56.604V75h18.388L79.354 30.838zM66.854 18.338l6.613 6.604 -6.625 6.6 -6.608 -6.604L66.854 18.338zM25 66.667v-6.604l29.333 -29.242 6.608 6.608L31.613 66.667H25zM16.667 83.333H83.333V91.667H16.667z"></path></svg>');
5534 | }
5535 | body.cc-custom-icons svg.pin {
5536 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 91.667l4.167 -8.333v-12.5h20.833c2.304 0 4.167 -1.863 4.167 -4.167v-6.608c0 -2.192 -0.892 -4.342 -2.442 -5.892L70.833 48.275V33.333c2.304 0 4.167 -1.863 4.167 -4.167V16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333H33.333C28.738 8.333 25 12.071 25 16.667v12.5c0 2.304 1.867 4.167 4.167 4.167v14.942L23.275 54.167C21.721 55.717 20.833 57.867 20.833 60.058V66.667c0 2.304 1.867 4.167 4.167 4.167h20.833v12.5L50 91.667zM33.333 16.667h33.333v8.333H33.333V16.667zM29.167 60.058l7.113 -7.113C37.063 52.167 37.5 51.108 37.5 50V33.333h25v16.667c0 1.108 0.438 2.167 1.221 2.946L70.833 60.058V62.5H29.167V60.058z"></path></svg>');
5537 | }
5538 | body.cc-custom-icons svg.plus-with-circle {
5539 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M54.167 29.167L45.833 29.167 45.833 45.833 29.167 45.833 29.167 54.167 45.833 54.167 45.833 70.833 54.167 70.833 54.167 54.167 70.833 54.167 70.833 45.833 54.167 45.833z M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667c22.975 0 41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z"></path></svg>');
5540 | }
5541 | body.cc-custom-icons svg.presentation {
5542 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v41.667c0 4.596 3.738 8.333 8.333 8.333h29.167v12.5H33.333v8.333h12.5h8.333h12.5v-8.333h-12.5v-12.5h29.167c4.596 0 8.333 -3.738 8.333 -8.333V20.833C91.667 16.238 87.929 12.5 83.333 12.5zM16.667 62.5V20.833h66.667l0.004 41.667H16.667z M41.667 54.167L62.5 41.667 41.667 29.167z"></path></svg>');
5543 | }
5544 | body.cc-custom-icons svg.price-tag-glyph {
5545 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M48.779 9.554C48 8.771 46.938 8.333 45.833 8.333H25C23.896 8.333 22.833 8.771 22.054 9.554l-12.5 12.5C8.771 22.833 8.333 23.892 8.333 25v20.833c0 1.108 0.438 2.167 1.221 2.946l41.667 41.667C52.033 91.258 53.1 91.667 54.167 91.667s2.133 -0.408 2.946 -1.221l33.333 -33.333c1.629 -1.629 1.629 -4.263 0 -5.892L48.779 9.554zM54.167 81.608l-37.5 -37.5V26.725L26.725 16.667h17.383l37.5 37.5L54.167 81.608z M41.667 34.804A6.863 6.863 0 0 1 34.804 41.667A6.863 6.863 0 0 1 27.942 34.804A6.863 6.863 0 0 1 41.667 34.804z"></path></svg>');
5546 | }
5547 | body.cc-custom-icons svg.quote-glyph {
5548 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M91.458 36.338c-0.071 -0.454 -0.104 -0.7 -0.104 -0.7l-0.108 0.025C89.438 27.192 81.925 20.833 72.917 20.833 62.563 20.833 54.167 29.229 54.167 39.583s8.396 18.75 18.75 18.75c0.929 0 1.821 -0.142 2.708 -0.271 -0.288 0.967 -0.583 1.95 -1.058 2.833 -0.475 1.283 -1.217 2.396 -1.954 3.517 -0.617 1.212 -1.704 2.033 -2.504 3.071 -0.838 1.008 -1.979 1.679 -2.883 2.517 -0.888 0.875 -2.05 1.313 -2.975 1.929 -0.967 0.554 -1.808 1.167 -2.708 1.458 -0.867 0.358 -1.625 0.667 -2.246 0.925 -1.258 0.521 -1.975 0.821 -1.975 0.821l2.017 8.079c0 0 0.908 -0.217 2.488 -0.6 0.796 -0.2 1.767 -0.433 2.871 -0.713 1.129 -0.208 2.333 -0.779 3.675 -1.3 1.321 -0.596 2.858 -0.992 4.283 -1.946 1.433 -0.908 3.088 -1.667 4.546 -2.883 1.413 -1.254 3.117 -2.342 4.375 -3.933 1.375 -1.492 2.733 -3.058 3.788 -4.842 1.221 -1.7 2.05 -3.567 2.925 -5.413 0.792 -1.846 1.429 -3.733 1.95 -5.567 0.988 -3.675 1.429 -7.167 1.6 -10.154 0.142 -2.992 0.058 -5.479 -0.117 -7.279C91.658 37.733 91.546 36.904 91.458 36.338zM45.625 36.338c-0.071 -0.454 -0.104 -0.7 -0.104 -0.7l-0.108 0.025C43.604 27.192 36.092 20.833 27.083 20.833 16.729 20.833 8.333 29.229 8.333 39.583S16.729 58.333 27.083 58.333c0.929 0 1.821 -0.142 2.708 -0.271 -0.288 0.967 -0.583 1.95 -1.058 2.833 -0.475 1.283 -1.217 2.396 -1.954 3.517 -0.617 1.212 -1.704 2.033 -2.504 3.071 -0.838 1.008 -1.979 1.679 -2.883 2.517 -0.888 0.875 -2.05 1.313 -2.975 1.929 -0.967 0.554 -1.808 1.167 -2.708 1.458 -0.867 0.358 -1.625 0.667 -2.246 0.925C12.208 74.825 11.492 75.125 11.492 75.125l2.017 8.079c0 0 0.908 -0.217 2.488 -0.6 0.796 -0.2 1.767 -0.433 2.871 -0.713 1.129 -0.208 2.333 -0.779 3.675 -1.3 1.321 -0.596 2.858 -0.992 4.283 -1.946 1.433 -0.908 3.088 -1.667 4.546 -2.883 1.413 -1.254 3.117 -2.342 4.375 -3.933 1.375 -1.492 2.733 -3.058 3.788 -4.842 1.221 -1.7 2.05 -3.567 2.925 -5.413 0.792 -1.846 1.429 -3.733 1.95 -5.567 0.988 -3.675 1.429 -7.167 1.6 -10.154 0.142 -2.992 0.058 -5.479 -0.117 -7.279C45.825 37.733 45.713 36.904 45.625 36.338z"></path></svg>');
5549 | }
5550 | body.cc-custom-icons svg.redo-glyph {
5551 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M37.5 75h12.5v-8.333H37.5c-6.892 0 -12.5 -5.608 -12.5 -12.5s5.608 -12.5 12.5 -12.5h25v12.5l20.833 -16.667l-20.833 -16.667v12.5H37.5c-11.488 0 -20.833 9.346 -20.833 20.833S26.013 75 37.5 75z"></path></svg>');
5552 | }
5553 | body.cc-custom-icons svg.reset {
5554 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 66.667c6.963 0 12.5 -5.546 12.5 -12.5s-5.538 -12.5 -12.5 -12.5s-12.5 5.546 -12.5 12.5S43.038 66.667 50 66.667z M86.738 46.608c-0.5 -2.429 -1.238 -4.796 -2.188 -7.033c-0.938 -2.217 -2.1 -4.358 -3.458 -6.379c-1.35 -1.996 -2.888 -3.858 -4.575 -5.538c-1.683 -1.692 -3.554 -3.233 -5.55 -4.588c-2.013 -1.358 -4.158 -2.517 -6.367 -3.454c-2.242 -0.954 -4.608 -1.688 -7.046 -2.192c-2.5 -0.513 -5.079 -0.758 -7.658 -0.75V8.333L33.333 20.833l16.563 12.5V25.008C51.913 25 53.929 25.192 55.875 25.592c1.892 0.392 3.733 0.963 5.475 1.704c1.721 0.725 3.388 1.633 4.95 2.683c1.554 1.05 3.008 2.25 4.325 3.571c1.313 1.308 2.517 2.763 3.558 4.313c1.058 1.567 1.963 3.233 2.692 4.963c0.742 1.738 1.308 3.579 1.7 5.463C78.967 50.2 79.167 52.179 79.167 54.167s-0.2 3.967 -0.592 5.875c-0.392 1.892 -0.958 3.733 -1.7 5.479c-0.729 1.721 -1.633 3.388 -2.683 4.95c-1.054 1.554 -2.258 3.008 -3.575 4.329c-1.313 1.317 -2.763 2.513 -4.317 3.558c-1.55 1.046 -3.213 1.95 -4.954 2.688c-1.738 0.738 -3.575 1.308 -5.463 1.7c-3.833 0.783 -7.942 0.783 -11.758 0c-1.892 -0.392 -3.733 -0.963 -5.475 -1.704c-1.733 -0.733 -3.396 -1.638 -4.954 -2.688c-1.546 -1.042 -2.996 -2.242 -4.313 -3.558c-1.313 -1.317 -2.517 -2.771 -3.563 -4.317c-1.058 -1.567 -1.963 -3.233 -2.692 -4.958c-0.742 -1.742 -1.308 -3.583 -1.7 -5.467C21.033 58.133 20.833 56.154 20.833 54.167H12.5c0 2.546 0.258 5.088 0.763 7.558c0.5 2.425 1.238 4.792 2.188 7.038c0.938 2.217 2.1 4.358 3.462 6.379c1.346 1.988 2.883 3.85 4.571 5.538c1.692 1.696 3.558 3.238 5.546 4.579c1.996 1.354 4.142 2.517 6.371 3.458c2.242 0.954 4.608 1.688 7.046 2.192C44.913 91.408 47.454 91.667 50 91.667s5.088 -0.258 7.558 -0.763c2.429 -0.504 4.796 -1.238 7.033 -2.188c2.238 -0.946 4.383 -2.108 6.375 -3.458c1.992 -1.342 3.858 -2.883 5.546 -4.579c1.688 -1.688 3.225 -3.554 4.583 -5.55c1.354 -2.013 2.517 -4.158 3.454 -6.367c0.954 -2.25 1.688 -4.617 2.188 -7.05C87.242 59.254 87.5 56.713 87.5 54.167S87.242 49.079 86.738 46.608z"></path></svg>');
5555 | }
5556 | body.cc-custom-icons svg.right-arrow-with-tail {
5557 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M47.054 72.054L52.946 77.946 80.892 50 52.946 22.054 47.054 27.946 64.942 45.833 25 45.833 25 54.167 64.942 54.167z"></path></svg>');
5558 | }
5559 | body.cc-custom-icons svg.right-arrow {
5560 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.921 79.421L71.338 50 41.921 20.579 33.079 29.421 53.663 50 33.079 70.579z"></path></svg>');
5561 | }
5562 | body.cc-custom-icons svg.right-chevron-glyph {
5563 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.921 79.421L71.338 50 41.921 20.579 33.079 29.421 53.663 50 33.079 70.579z"></path></svg>');
5564 | }
5565 | body.cc-custom-icons svg.right-triangle {
5566 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M70.579 33.079L50 53.663 29.421 33.079 20.579 41.921 50 71.338 79.421 41.921z"></path></svg>');
5567 | }
5568 | body.cc-custom-icons svg.run-command {
5569 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 58.333H75V66.667H50zM26.221 40.446L35.775 50 26.221 59.554 32.113 65.446 47.558 50 32.113 34.554z M83.333 16.667H16.667C12.071 16.667 8.333 20.404 8.333 25v50c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V25C91.667 20.404 87.929 16.667 83.333 16.667zM16.667 75V25h66.667l0.008 50H16.667z"></path></svg>');
5570 | }
5571 | body.cc-custom-icons svg.search {
5572 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.263 70.738c-2.138 -2.033 -4.183 -4.154 -5.696 -5.767c-1.55 -1.575 -2.483 -2.721 -2.483 -2.721l-11.667 -5.571C63.917 51.542 66.667 44.846 66.667 37.5c0 -16.079 -13.083 -29.167 -29.167 -29.167S8.333 21.421 8.333 37.5s13.083 29.167 29.167 29.167c7.346 0 14.042 -2.75 19.179 -7.246l5.571 11.667c0 0 1.146 0.933 2.721 2.483c1.613 1.512 3.733 3.558 5.767 5.696c2.058 2.108 4.117 4.217 5.658 5.8c1.508 1.617 2.517 2.692 2.517 2.692l8.838 -8.838c0 0 -1.075 -1.008 -2.692 -2.517C83.479 74.854 81.371 72.796 79.263 70.738zM37.5 58.333c-11.488 0 -20.833 -9.346 -20.833 -20.833s9.346 -20.833 20.833 -20.833s20.833 9.346 20.833 20.833S48.988 58.333 37.5 58.333z"></path></svg>');
5573 | }
5574 | body.cc-custom-icons svg.sheets-in-box {
5575 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v33.333v4.167v20.833c0 4.6 3.733 8.333 8.333 8.333h66.667c4.6 0 8.333 -3.733 8.333 -8.333v-20.833v-4.167V20.833C91.667 16.238 87.929 12.5 83.333 12.5zM79.167 50h-12.5h-0.592c-1.858 7.175 -8.321 12.5 -16.075 12.5s-14.217 -5.325 -16.075 -12.5H33.333H16.667V20.833h66.667v29.167H79.167z"></path></svg>');
5576 | }
5577 | body.cc-custom-icons svg.stacked-levels {
5578 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 54.208h-29.167V41.667h4.167c4.596 0 8.333 -3.738 8.333 -8.333V16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333h-16.667C37.071 8.333 33.333 12.071 33.333 16.667v16.667c0 4.596 3.738 8.333 8.333 8.333h4.167v12.542H16.667V75H12.5v16.667h16.667v-16.667H25v-12.458h20.833V75h-4.167v16.667h16.667v-16.667h-4.167v-12.458h20.833V75h-4.167v16.667h16.667v-16.667h-4.167V54.208zM41.667 33.333V16.667h16.667l0.008 16.667H41.667z"></path></svg>');
5579 | }
5580 | body.cc-custom-icons svg.star-list {
5581 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 62.5L79.167 50 70.833 50 70.833 62.5 61.583 62.5 58.333 62.5 58.333 70.833 61.583 70.833 70.833 70.833 70.833 83.333 79.167 83.333 79.167 70.833 87.763 70.833 91.667 70.833 91.667 62.5 87.763 62.5zM16.667 29.167H62.5V37.5H16.667zM16.667 45.833H62.5V54.167H16.667zM16.667 62.5H50V70.833H16.667z"></path></svg>');
5582 | }
5583 | body.cc-custom-icons svg.star {
5584 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M27.15 59.679l-6.208 26.883c-0.383 1.663 0.283 3.392 1.692 4.362C23.346 91.417 24.171 91.667 25 91.667c0.804 0 1.613 -0.233 2.313 -0.7L50 75.842l22.688 15.125c1.45 0.967 3.354 0.929 4.771 -0.1c1.408 -1.029 2.029 -2.833 1.55 -4.508l-7.621 -26.667l18.9 -17.008c1.238 -1.117 1.692 -2.858 1.158 -4.433c-0.538 -1.575 -1.958 -2.683 -3.617 -2.817L64.075 33.542l-10.279 -22.754C53.125 9.292 51.638 8.333 50 8.333s-3.125 0.958 -3.796 2.454L35.925 33.542L12.171 35.429C10.537 35.558 9.133 36.629 8.583 38.167c-0.558 1.538 -0.158 3.258 1.008 4.4L27.15 59.679zM39.038 41.654c1.512 -0.121 2.846 -1.054 3.467 -2.442L50 22.625l7.496 16.588c0.621 1.388 1.954 2.321 3.467 2.442l16.55 1.313l-13.629 12.267c-1.183 1.067 -1.654 2.708 -1.221 4.242l5.221 18.271l-15.567 -10.379c-1.4 -0.938 -3.221 -0.938 -4.621 0l-16.267 10.846l4.375 -18.942c0.325 -1.417 -0.108 -2.904 -1.15 -3.917l-12.658 -12.342L39.038 41.654z"></path></svg>');
5585 | }
5586 | body.cc-custom-icons svg.strikethrough-glyph {
5587 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 45.833h-33.333c-16.667 0 -16.667 -7.567 -16.667 -10.417C33.333 32.842 33.333 25 50 25c11.667 0 12.458 6.992 12.5 8.392L66.667 33.333h4.167c0 -5.767 -4.354 -16.667 -20.833 -16.667C27.433 16.667 25 29.779 25 35.417c0 3.033 0.617 6.946 3.067 10.417H16.667v8.333h33.333H83.333V45.833zM50 75c-15.804 0 -16.625 -7.563 -16.667 -8.333H25c0 0.167 0.288 16.667 25 16.667 21.754 0 25 -11.746 25 -18.75 0 -0.608 -0.037 -1.321 -0.117 -2.083h-8.358C66.658 63.333 66.667 64.067 66.667 64.583 66.667 67.433 66.667 75 50 75z"></path></svg>');
5588 | }
5589 | body.cc-custom-icons svg.switch {
5590 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 45.833H29.588c0 -0.013 0 -0.025 0.004 -0.037 0.271 -1.329 0.679 -2.642 1.212 -3.904 0.525 -1.238 1.171 -2.429 1.921 -3.542 0.742 -1.1 1.6 -2.138 2.542 -3.083C36.213 34.325 37.25 33.467 38.358 32.721c1.108 -0.75 2.296 -1.392 3.533 -1.917 1.258 -0.533 2.571 -0.942 3.908 -1.212 2.742 -0.563 5.654 -0.563 8.408 0 1.325 0.271 2.642 0.679 3.904 1.212 1.233 0.521 2.421 1.171 3.542 1.921 1.108 0.746 2.142 1.6 3.075 2.538l5.9 -5.883c-1.308 -1.317 -2.767 -2.517 -4.317 -3.563 -1.554 -1.05 -3.221 -1.958 -4.95 -2.692 -1.771 -0.75 -3.617 -1.321 -5.479 -1.7 -3.846 -0.788 -7.913 -0.788 -11.746 0 -1.871 0.383 -3.717 0.954 -5.483 1.704C36.908 23.863 35.242 24.767 33.692 25.817 32.15 26.854 30.7 28.054 29.375 29.375S26.854 32.15 25.821 33.688c-1.05 1.554 -1.958 3.221 -2.692 4.958 -0.75 1.767 -1.321 3.613 -1.7 5.479C21.313 44.688 21.25 45.263 21.167 45.833H8.333l16.667 16.667L41.667 45.833zM58.333 54.167h12.079c-0.004 0.013 0 0.025 -0.004 0.033 -0.275 1.35 -0.683 2.663 -1.217 3.908 -0.513 1.221 -1.158 2.413 -1.913 3.533 -0.746 1.1 -1.604 2.142 -2.554 3.092 -0.938 0.938 -1.971 1.792 -3.079 2.542 -1.117 0.75 -2.304 1.396 -3.538 1.921 -1.262 0.533 -2.575 0.942 -3.908 1.212 -2.738 0.563 -5.654 0.563 -8.404 0 -1.329 -0.271 -2.642 -0.679 -3.904 -1.212 -1.238 -0.525 -2.429 -1.171 -3.542 -1.921 -1.1 -0.742 -2.138 -1.6 -3.083 -2.542L29.375 70.625c1.321 1.321 2.775 2.521 4.313 3.558 1.554 1.05 3.221 1.958 4.958 2.692 1.767 0.75 3.613 1.321 5.479 1.7C46.046 78.967 48.021 79.167 50 79.167s3.954 -0.2 5.867 -0.592c1.871 -0.379 3.721 -0.954 5.487 -1.704 1.729 -0.733 3.396 -1.638 4.95 -2.688 1.55 -1.046 3.008 -2.25 4.313 -3.558 1.321 -1.321 2.521 -2.775 3.563 -4.321 1.058 -1.571 1.967 -3.238 2.688 -4.946 0.742 -1.75 1.313 -3.596 1.7 -5.483 0.113 -0.563 0.179 -1.138 0.263 -1.708H91.667l-16.667 -16.667L58.333 54.167z"></path></svg>');
5591 | }
5592 | body.cc-custom-icons svg.sync-small {
5593 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 45.833H29.588c0 -0.013 0 -0.025 0.004 -0.037 0.271 -1.329 0.679 -2.642 1.212 -3.904 0.525 -1.238 1.171 -2.429 1.921 -3.542 0.742 -1.1 1.6 -2.138 2.542 -3.083C36.213 34.325 37.25 33.467 38.358 32.721c1.108 -0.75 2.296 -1.392 3.533 -1.917 1.258 -0.533 2.571 -0.942 3.908 -1.212 2.742 -0.563 5.654 -0.563 8.408 0 1.325 0.271 2.642 0.679 3.904 1.212 1.233 0.521 2.421 1.171 3.542 1.921 1.108 0.746 2.142 1.6 3.075 2.538l5.9 -5.883c-1.308 -1.317 -2.767 -2.517 -4.317 -3.563 -1.554 -1.05 -3.221 -1.958 -4.95 -2.692 -1.771 -0.75 -3.617 -1.321 -5.479 -1.7 -3.846 -0.788 -7.913 -0.788 -11.746 0 -1.871 0.383 -3.717 0.954 -5.483 1.704C36.908 23.863 35.242 24.767 33.692 25.817 32.15 26.854 30.7 28.054 29.375 29.375S26.854 32.15 25.821 33.688c-1.05 1.554 -1.958 3.221 -2.692 4.958 -0.75 1.767 -1.321 3.613 -1.7 5.479C21.313 44.688 21.25 45.263 21.167 45.833H8.333l16.667 16.667L41.667 45.833zM58.333 54.167h12.079c-0.004 0.013 0 0.025 -0.004 0.033 -0.275 1.35 -0.683 2.663 -1.217 3.908 -0.513 1.221 -1.158 2.413 -1.913 3.533 -0.746 1.1 -1.604 2.142 -2.554 3.092 -0.938 0.938 -1.971 1.792 -3.079 2.542 -1.117 0.75 -2.304 1.396 -3.538 1.921 -1.262 0.533 -2.575 0.942 -3.908 1.212 -2.738 0.563 -5.654 0.563 -8.404 0 -1.329 -0.271 -2.642 -0.679 -3.904 -1.212 -1.238 -0.525 -2.429 -1.171 -3.542 -1.921 -1.1 -0.742 -2.138 -1.6 -3.083 -2.542L29.375 70.625c1.321 1.321 2.775 2.521 4.313 3.558 1.554 1.05 3.221 1.958 4.958 2.692 1.767 0.75 3.613 1.321 5.479 1.7C46.046 78.967 48.021 79.167 50 79.167s3.954 -0.2 5.867 -0.592c1.871 -0.379 3.721 -0.954 5.487 -1.704 1.729 -0.733 3.396 -1.638 4.95 -2.688 1.55 -1.046 3.008 -2.25 4.313 -3.558 1.321 -1.321 2.521 -2.775 3.563 -4.321 1.058 -1.571 1.967 -3.238 2.688 -4.946 0.742 -1.75 1.313 -3.596 1.7 -5.483 0.113 -0.563 0.179 -1.138 0.263 -1.708H91.667l-16.667 -16.667L58.333 54.167z"></path></svg>');
5594 | }
5595 | body.cc-custom-icons svg.sync {
5596 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 45.833H29.588c0 -0.013 0 -0.025 0.004 -0.037 0.271 -1.329 0.679 -2.642 1.212 -3.904 0.525 -1.238 1.171 -2.429 1.921 -3.542 0.742 -1.1 1.6 -2.138 2.542 -3.083C36.213 34.325 37.25 33.467 38.358 32.721c1.108 -0.75 2.296 -1.392 3.533 -1.917 1.258 -0.533 2.571 -0.942 3.908 -1.212 2.742 -0.563 5.654 -0.563 8.408 0 1.325 0.271 2.642 0.679 3.904 1.212 1.233 0.521 2.421 1.171 3.542 1.921 1.108 0.746 2.142 1.6 3.075 2.538l5.9 -5.883c-1.308 -1.317 -2.767 -2.517 -4.317 -3.563 -1.554 -1.05 -3.221 -1.958 -4.95 -2.692 -1.771 -0.75 -3.617 -1.321 -5.479 -1.7 -3.846 -0.788 -7.913 -0.788 -11.746 0 -1.871 0.383 -3.717 0.954 -5.483 1.704C36.908 23.863 35.242 24.767 33.692 25.817 32.15 26.854 30.7 28.054 29.375 29.375S26.854 32.15 25.821 33.688c-1.05 1.554 -1.958 3.221 -2.692 4.958 -0.75 1.767 -1.321 3.613 -1.7 5.479C21.313 44.688 21.25 45.263 21.167 45.833H8.333l16.667 16.667L41.667 45.833zM58.333 54.167h12.079c-0.004 0.013 0 0.025 -0.004 0.033 -0.275 1.35 -0.683 2.663 -1.217 3.908 -0.513 1.221 -1.158 2.413 -1.913 3.533 -0.746 1.1 -1.604 2.142 -2.554 3.092 -0.938 0.938 -1.971 1.792 -3.079 2.542 -1.117 0.75 -2.304 1.396 -3.538 1.921 -1.262 0.533 -2.575 0.942 -3.908 1.212 -2.738 0.563 -5.654 0.563 -8.404 0 -1.329 -0.271 -2.642 -0.679 -3.904 -1.212 -1.238 -0.525 -2.429 -1.171 -3.542 -1.921 -1.1 -0.742 -2.138 -1.6 -3.083 -2.542L29.375 70.625c1.321 1.321 2.775 2.521 4.313 3.558 1.554 1.05 3.221 1.958 4.958 2.692 1.767 0.75 3.613 1.321 5.479 1.7C46.046 78.967 48.021 79.167 50 79.167s3.954 -0.2 5.867 -0.592c1.871 -0.379 3.721 -0.954 5.487 -1.704 1.729 -0.733 3.396 -1.638 4.95 -2.688 1.55 -1.046 3.008 -2.25 4.313 -3.558 1.321 -1.321 2.521 -2.775 3.563 -4.321 1.058 -1.571 1.967 -3.238 2.688 -4.946 0.742 -1.75 1.313 -3.596 1.7 -5.483 0.113 -0.563 0.179 -1.138 0.263 -1.708H91.667l-16.667 -16.667L58.333 54.167z"></path></svg>');
5597 | }
5598 | body.cc-custom-icons svg.tag-glyph {
5599 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M66.742 15.896L63.467 33.333h-20.692l2.983 -15.896L37.575 15.896L34.3 33.333H16.667v8.333h16.071l-3.129 16.667H12.5v8.333h15.546l-2.975 15.854l8.188 1.538L36.525 66.667h20.692l-2.975 15.854l8.188 1.538L65.692 66.667H83.333v-8.333h-16.079l3.129 -16.667H87.5V33.333h-15.554l2.983 -15.896L66.742 15.896zM58.775 58.333H38.088l3.129 -16.667h20.692L58.775 58.333z"></path></svg>');
5600 | }
5601 | body.cc-custom-icons svg.three-horizontal-bars {
5602 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M16.667 25H83.333V33.333H16.667zM16.667 45.833H83.333V54.167H16.667zM16.667 66.667H83.333V75H16.667z"></path></svg>');
5603 | }
5604 | body.cc-custom-icons svg.trash {
5605 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M20.846 83.333c0 4.596 3.737 8.334 8.333 8.334h41.667c4.596 0 8.333-3.738 8.333-8.334v-50h8.334V25H70.846v-8.333c0-4.596-3.738-8.334-8.334-8.334h-25c-4.595 0-8.333 3.738-8.333 8.334V25H12.513v8.333h8.333v50zm16.667-66.666h25V25h-25v-8.333zm33.333 16.666l.004 50H29.18v-50h41.666z M37.513 41.667h8.333V75h-8.333V41.667zm16.666 0h8.334V75h-8.334V41.667z"></path></svg>');
5606 | }
5607 | body.cc-custom-icons svg.undo-glyph {
5608 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M37.5 41.667h25c6.892 0 12.5 5.608 12.5 12.5s-5.608 12.5 -12.5 12.5h-12.5v8.333h12.5c11.488 0 20.833 -9.346 20.833 -20.833s-9.346 -20.833 -20.833 -20.833H37.5V20.833L16.667 37.5l20.833 16.667V41.667z"></path></svg>');
5609 | }
5610 | body.cc-custom-icons svg.unindent-glyph {
5611 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M16.667 25H25V75H16.667zM59.554 22.054L31.608 50 59.554 77.946 65.446 72.054 47.558 54.167 83.333 54.167 83.333 45.833 47.558 45.833 65.446 27.946z"></path></svg>');
5612 | }
5613 | body.cc-custom-icons svg.up-and-down-arrows {
5614 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M29.167 83.333L37.5 83.333 37.5 33.333 50 33.333 33.333 16.667 16.667 33.333 29.167 33.333zM83.333 66.667L70.833 66.667 70.833 16.667 62.5 16.667 62.5 66.667 50 66.667 66.667 83.333z"></path></svg>');
5615 | }
5616 | body.cc-custom-icons svg.up-arrow-with-tail {
5617 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M45.833 35.058L45.833 75 54.167 75 54.167 35.058 72.054 52.946 77.946 47.054 50 19.108 22.054 47.054 27.946 52.946z"></path></svg>');
5618 | }
5619 | body.cc-custom-icons svg.up-chevron-glyph {
5620 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 28.663L20.579 58.079 29.421 66.921 50 46.338 70.579 66.921 79.421 58.079z"></path></svg>');
5621 | }
5622 | body.cc-custom-icons svg.vault {
5623 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 8.375H25c-5.025 0 -12.5 3.329 -12.5 12.5v12.5v25v12.5v8.333c0 9.171 7.475 12.5 12.5 12.5h62.5v-8.333H25.05C23.125 83.325 20.833 82.563 20.833 79.208c0 -0.421 0.037 -0.796 0.1 -1.138c0.467 -2.396 2.429 -2.988 4.112 -3.029H83.333c0.075 0 0.129 -0.037 0.204 -0.042H87.5v-4.125V62.5V16.708C87.5 12.113 83.763 8.375 79.167 8.375zM79.167 66.708H20.833v-8.333v-25v-12.5c0 -3.358 2.292 -4.117 4.167 -4.167h29.167v29.167l8.333 -4.167l8.333 4.167v-29.167h8.333V62.5V66.708z"></path></svg>');
5624 | }
5625 | body.cc-custom-icons svg.vertical-split {
5626 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M70.833 45.833L29.167 45.833 29.167 29.167 8.333 50 29.167 70.833 29.167 54.167 70.833 54.167 70.833 70.833 91.667 50 70.833 29.167z"></path></svg>');
5627 | }
5628 | body.cc-custom-icons svg.vertical-three-dots {
5629 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 41.667c-4.583 0 -8.333 3.75 -8.333 8.333s3.75 8.333 8.333 8.333 8.333 -3.75 8.333 -8.333S54.583 41.667 50 41.667zM50 16.667c-4.583 0 -8.333 3.75 -8.333 8.333s3.75 8.333 8.333 8.333 8.333 -3.75 8.333 -8.333S54.583 16.667 50 16.667zM50 66.667c-4.583 0 -8.333 3.75 -8.333 8.333s3.75 8.333 8.333 8.333 8.333 -3.75 8.333 -8.333S54.583 66.667 50 66.667z"></path></svg>');
5630 | }
5631 | body.cc-custom-icons svg.wrench-screwdriver-glyph {
5632 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M89.633 25.467l-16.208 16.204l-14.729 -14.733l16.204 -16.204c-9.808 -4.033 -21.496 -2.075 -29.458 5.896c-7.963 7.963 -9.925 19.654 -5.892 29.463l-26.15 26.146c-1.629 1.629 -1.629 4.263 0 5.892l8.842 8.842c1.629 1.629 4.263 1.629 5.892 0l26.146 -26.15c9.808 4.033 21.5 2.071 29.463 -5.892C91.704 46.963 93.663 35.271 89.633 25.467z"></path></svg>');
5633 | }
5634 | body.cc-custom-icons svg.clock-glyph {
5635 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M54.167 29.167L45.833 29.167 45.833 51.725 59.554 65.446 65.446 59.554 54.167 48.275z"></path></svg>');
5636 | }
5637 | body.cc-custom-icons svg.command-glyph {
5638 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 58.333H75V66.667H50zM26.221 40.446L35.775 50 26.221 59.554 32.113 65.446 47.558 50 32.113 34.554z M83.333 16.667H16.667C12.071 16.667 8.333 20.404 8.333 25v50c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V25C91.667 20.404 87.929 16.667 83.333 16.667zM16.667 75V25h66.667l0.008 50H16.667z"></path></svg>');
5639 | }
5640 | body.cc-custom-icons svg.calendar-glyph {
5641 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M29.167 45.833H37.5V54.167H29.167zM29.167 62.5H37.5V70.833H29.167zM45.833 45.833H54.167V54.167H45.833zM45.833 62.5H54.167V70.833H45.833zM62.5 45.833H70.833V54.167H62.5zM62.5 62.5H70.833V70.833H62.5z M20.833 91.667h58.333c4.596 0 8.333 -3.738 8.333 -8.333V33.333V25c0 -4.596 -3.738 -8.333 -8.333 -8.333h-8.333V8.333h-8.333v8.333H37.5V8.333H29.167v8.333H20.833C16.238 16.667 12.5 20.404 12.5 25v8.333v50C12.5 87.929 16.238 91.667 20.833 91.667zM79.167 33.333l0.004 50H20.833V33.333H79.167z"></path></svg>');
5642 | }
5643 | body.cc-custom-icons svg.dice-glyph {
5644 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M39.583 33.333A6.25 6.25 0 0 1 33.333 39.583A6.25 6.25 0 0 1 27.083 33.333A6.25 6.25 0 0 1 39.583 33.333z M56.25 50A6.25 6.25 0 0 1 50 56.25A6.25 6.25 0 0 1 43.75 50A6.25 6.25 0 0 1 56.25 50z M72.917 66.667A6.25 6.25 0 0 1 66.667 72.917A6.25 6.25 0 0 1 60.417 66.667A6.25 6.25 0 0 1 72.917 66.667z M39.583 66.667A6.25 6.25 0 0 1 33.333 72.917A6.25 6.25 0 0 1 27.083 66.667A6.25 6.25 0 0 1 39.583 66.667z M72.917 33.333A6.25 6.25 0 0 1 66.667 39.583A6.25 6.25 0 0 1 60.417 33.333A6.25 6.25 0 0 1 72.917 33.333z M79.167 12.5H20.833C16.238 12.5 12.5 16.238 12.5 20.833v58.333c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V20.833C87.5 16.238 83.763 12.5 79.167 12.5zM20.833 79.167V20.833h58.333l0.008 58.333H20.833z"></path></svg>');
5645 | }
5646 | body.cc-custom-icons svg.duplicate-glyph {
5647 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M45.833 41.667L37.5 41.667 37.5 54.167 25 54.167 25 62.5 37.5 62.5 37.5 75 45.833 75 45.833 62.5 58.333 62.5 58.333 54.167 45.833 54.167z M16.667 91.667h50c4.596 0 8.333 -3.738 8.333 -8.333V33.333c0 -4.596 -3.738 -8.333 -8.333 -8.333H16.667C12.071 25 8.333 28.738 8.333 33.333v50C8.333 87.929 12.071 91.667 16.667 91.667zM16.667 33.333h50l0.008 50H16.667V33.333z M83.333 8.333H33.333v8.333h50v50h8.333V16.667C91.667 12.071 87.929 8.333 83.333 8.333z"></path></svg>');
5648 | }
5649 | body.cc-custom-icons
5650 |   .workspace-tab-header[aria-label="File explorer"]
5651 |   svg.folder,
5652 | body.cc-custom-icons svg.file-explorer-glyph {
5653 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M87.5 16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333H20.833C16.238 8.333 12.5 12.071 12.5 16.667v66.667c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V16.667zM20.833 16.667h58.333v29.167H20.833V16.667zM20.833 83.333v-29.167h58.337v29.167H20.833z M58.333 29.167L41.667 29.167 41.667 25 33.333 25 33.333 37.5 66.667 37.5 66.667 25 58.333 25zM58.333 62.5L58.333 66.667 41.667 66.667 41.667 62.5 33.333 62.5 33.333 75 66.667 75 66.667 62.5z"></path></svg>');
5654 | }
5655 | body.cc-custom-icons svg.graph-glyph {
5656 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.167 12.5c-6.892 0 -12.5 5.608 -12.5 12.5c0 2.092 0.567 4.033 1.475 5.771l-4.65 5.425C60.829 34.392 57.621 33.333 54.167 33.333c-3.079 0 -5.938 0.9 -8.417 2.358L39.858 29.8C40.975 27.742 41.667 25.421 41.667 22.917C41.667 14.875 35.125 8.333 27.083 8.333S12.5 14.875 12.5 22.917S19.042 37.5 27.083 37.5c2.504 0 4.825 -0.692 6.883 -1.808L39.858 41.583C38.4 44.063 37.5 46.921 37.5 50c0 4.154 1.583 7.913 4.104 10.838l-7.05 7.05l0.104 0.104C32.996 67.171 31.15 66.667 29.167 66.667c-6.892 0 -12.5 5.608 -12.5 12.5s5.608 12.5 12.5 12.5s12.5 -5.608 12.5 -12.5c0 -1.983 -0.504 -3.829 -1.325 -5.492l0.104 0.104l8.142 -8.142C50.342 66.263 52.2 66.667 54.167 66.667c9.192 0 16.667 -7.475 16.667 -16.667c0 -2.688 -0.7 -5.188 -1.829 -7.438l5.221 -6.092C75.742 37.129 77.408 37.5 79.167 37.5c6.892 0 12.5 -5.608 12.5 -12.5S86.058 12.5 79.167 12.5zM29.167 83.333c-2.3 0 -4.167 -1.867 -4.167 -4.167s1.867 -4.167 4.167 -4.167s4.167 1.867 4.167 4.167S31.467 83.333 29.167 83.333zM20.833 22.917C20.833 19.471 23.638 16.667 27.083 16.667S33.333 19.471 33.333 22.917S30.529 29.167 27.083 29.167S20.833 26.363 20.833 22.917zM54.167 58.333c-4.596 0 -8.333 -3.738 -8.333 -8.333s3.738 -8.333 8.333 -8.333s8.333 3.738 8.333 8.333S58.763 58.333 54.167 58.333zM79.167 29.167c-2.3 0 -4.167 -1.867 -4.167 -4.167s1.867 -4.167 4.167 -4.167s4.167 1.867 4.167 4.167S81.467 29.167 79.167 29.167z"></path></svg>');
5657 | }
5658 | body.cc-custom-icons
5659 |   .side-dock-ribbon-action[aria-label="Open Markdown importer"]
5660 |   > svg.blocks,
5661 | body.cc-custom-icons svg.import-glyph {
5662 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 75L66.667 54.167 54.167 54.167 54.167 8.333 45.833 8.333 45.833 54.167 33.333 54.167z M79.167 37.5h-16.667v8.333h16.667v37.5H20.833v-37.5h16.667V37.5H20.833c-4.596 0 -8.333 3.738 -8.333 8.333v37.5c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333v-37.5C87.5 41.238 83.763 37.5 79.167 37.5z"></path></svg>');
5663 | }
5664 | body.cc-custom-icons svg.languages {
5665 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M77.083 41.667l18.333 45.833h-8.979l-5.004 -12.5h-17.042l-4.996 12.5h-8.975L68.75 41.667h8.333zM41.667 8.333v8.333h25v8.333h-8.2a75.925 75.925 0 0 1 -15.083 26.254 61.933 61.933 0 0 0 9.733 7.113l-3.129 7.825A70.896 70.896 0 0 1 37.5 57.188a69.483 69.483 0 0 1 -25.837 14.783l-2.233 -8.038a61.25 61.25 0 0 0 22.196 -12.675A75.325 75.325 0 0 1 19.863 33.333h9.333A66.8 66.8 0 0 0 37.5 45.321a67.354 67.354 0 0 0 12.125 -20.317L8.333 25V16.667h25V8.333h8.333zm31.25 45.354L67.721 66.667h10.383L72.917 53.688z"></path></svg>');
5666 | }
5667 | body.cc-custom-icons svg.links-coming-in {
5668 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M58.004 51.445c-4.273-4.273-11.724-4.273-15.996 0L39.34 54.11l-5.332-5.332 2.666-2.666a18.723 18.723 0 0113.33-5.525c5.039 0 9.775 1.965 13.33 5.525l8.003 7.998c7.346 7.35 7.346 19.315 0 26.664a18.791 18.791 0 01-13.33 5.513c-4.831 0-9.662-1.836-13.335-5.513l-2.666-2.666 5.333-5.332 2.666 2.666c4.412 4.4 11.588 4.408 16 0 4.408-4.412 4.408-11.588 0-16l-8.002-7.998z M44.673 27.447l2.667 2.666-5.333 5.332-2.666-2.666c-4.408-4.4-11.584-4.409-16 0-4.408 4.412-4.408 11.588 0 16l8.002 7.998c4.273 4.272 11.724 4.272 15.997 0l2.666-2.666 5.332 5.332-2.666 2.666a18.722 18.722 0 01-13.33 5.524 18.722 18.722 0 01-13.33-5.524l-8.003-7.998c-7.345-7.35-7.345-19.315 0-26.664 7.354-7.354 19.319-7.35 26.664 0zM82.141 13.712L69.957 25.896l-8.053-8.053v21.461h21.461l-8.05-8.05L87.5 19.072l-5.359-5.36z"></path></svg>');
5669 | }
5670 | body.cc-custom-icons svg.links-going-out {
5671 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M58.004 51.445c-4.273-4.273-11.724-4.273-15.996 0L39.34 54.11l-5.332-5.332 2.666-2.666a18.722 18.722 0 0113.33-5.525c5.039 0 9.775 1.965 13.33 5.525l8.003 7.998c7.346 7.35 7.346 19.315 0 26.664a18.79 18.79 0 01-13.33 5.513c-4.831 0-9.662-1.836-13.335-5.513l-2.666-2.666 5.333-5.332 2.666 2.666c4.412 4.4 11.588 4.408 16 0 4.408-4.412 4.408-11.588 0-16l-8.002-7.998z M44.673 27.447l2.667 2.666-5.333 5.332-2.666-2.666c-4.408-4.4-11.584-4.408-16 0-4.408 4.412-4.408 11.588 0 16l8.002 7.998c4.273 4.272 11.724 4.272 15.997 0l2.666-2.666 5.332 5.332-2.666 2.666a18.722 18.722 0 01-13.33 5.524 18.722 18.722 0 01-13.33-5.524l-8.003-7.998c-7.345-7.35-7.345-19.315 0-26.664 7.354-7.354 19.319-7.35 26.664 0zM67.262 39.304L79.447 27.12l8.053 8.053V13.712H66.038l8.05 8.05-12.184 12.184 5.358 5.358z"></path></svg>');
5672 | }
5673 | body.cc-custom-icons svg.merge-files-glyph {
5674 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M87.5 31.417H68.583V12.5a4.167 4.167 0 0 0 -4.167 -4.167H12.5A4.167 4.167 0 0 0 8.333 12.5V64.417a4.167 4.167 0 0 0 4.167 4.167H31.417V87.5a4.167 4.167 0 0 0 4.167 4.167H87.5a4.167 4.167 0 0 0 4.167 -4.167V35.583A4.167 4.167 0 0 0 87.5 31.417ZM83.333 83.333H39.75V64.417a4.167 4.167 0 0 0 -4.167 -4.167H16.667V16.667H60.25V35.583a4.167 4.167 0 0 0 4.167 4.167H83.333Z"></path></svg>');
5675 | }
5676 | body.cc-custom-icons svg.merge-files {
5677 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M87.5 31.417H68.583V12.5a4.167 4.167 0 0 0 -4.167 -4.167H12.5A4.167 4.167 0 0 0 8.333 12.5V64.417a4.167 4.167 0 0 0 4.167 4.167H31.417V87.5a4.167 4.167 0 0 0 4.167 4.167H87.5a4.167 4.167 0 0 0 4.167 -4.167V35.583A4.167 4.167 0 0 0 87.5 31.417ZM83.333 83.333H39.75V64.417a4.167 4.167 0 0 0 -4.167 -4.167H16.667V16.667H60.25V35.583a4.167 4.167 0 0 0 4.167 4.167H83.333Z"></path></svg>');
5678 | }
5679 | body.cc-custom-icons svg.popup-open,
5680 | body.cc-custom-icons svg.open-elsewhere-glyph {
5681 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v58.333c0 4.596 3.738 8.333 8.333 8.333h20.833v-8.333H16.667V29.167h66.667v50h-20.833v8.333h20.833c4.596 0 8.333 -3.738 8.333 -8.333V20.833C91.667 16.238 87.929 12.5 83.333 12.5z M54.167 87.5L54.167 66.667 66.667 66.667 50 45.833 33.333 66.667 45.833 66.667 45.833 87.5z"></path></svg>');
5682 | }
5683 | body.cc-custom-icons svg.paper-plane-glyph {
5684 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M85.679 13.917c-1.217 -0.829 -2.779 -0.954 -4.121 -0.329l-70.833 33.333C9.246 47.621 8.313 49.117 8.333 50.75c0.025 1.633 1 3.104 2.5 3.758L33.333 64.354v28.008l24.317 -17.367l19.85 8.683c0.533 0.238 1.104 0.35 1.667 0.35c0.754 0 1.5 -0.204 2.167 -0.608c1.158 -0.704 1.904 -1.929 1.996 -3.283l4.167 -62.5C87.588 16.163 86.9 14.75 85.679 13.917zM75.404 73.667l-21.954 -9.608L66.667 38.196l-31.871 17.708l-12.217 -5.346L78.708 24.142L75.404 73.667z"></path></svg>');
5685 | }
5686 | body.cc-custom-icons svg.paste-text {
5687 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 45.833V20.833c0 -4.596 -3.738 -8.333 -8.333 -8.333h-12.5c0 -2.3 -1.863 -4.167 -4.167 -4.167H33.333C31.029 8.333 29.167 10.2 29.167 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v54.167c0 4.596 3.738 8.333 8.333 8.333h29.167c0 4.596 3.738 8.333 8.333 8.333h29.167c4.596 0 8.333 -3.738 8.333 -8.333v-29.167C91.667 49.571 87.929 45.833 83.333 45.833zM45.833 54.167v20.833H16.667V20.833h12.5v8.333h33.333V20.833h12.5v25h-20.833C49.571 45.833 45.833 49.571 45.833 54.167zM54.167 83.333v-29.167h29.167l0.004 29.167H54.167z"></path></svg>');
5688 | }
5689 | body.cc-custom-icons svg.paste {
5690 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 45.833V20.833c0 -4.596 -3.738 -8.333 -8.333 -8.333h-12.5c0 -2.3 -1.863 -4.167 -4.167 -4.167H33.333C31.029 8.333 29.167 10.2 29.167 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v54.167c0 4.596 3.738 8.333 8.333 8.333h29.167c0 4.596 3.738 8.333 8.333 8.333h29.167c4.596 0 8.333 -3.738 8.333 -8.333v-29.167C91.667 49.571 87.929 45.833 83.333 45.833zM45.833 54.167v20.833H16.667V20.833h12.5v8.333h33.333V20.833h12.5v25h-20.833C49.571 45.833 45.833 49.571 45.833 54.167zM54.167 83.333v-29.167h29.167l0.004 29.167H54.167z"></path></svg>');
5691 | }
5692 | body.cc-custom-icons svg.percent-sign-glyph {
5693 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M72.917 87.5a14.583 14.583 0 1 1 0 -29.167 14.583 14.583 0 0 1 0 29.167zm0 -8.333a6.25 6.25 0 1 0 0 -12.5 6.25 6.25 0 0 0 0 12.5zm-45.833 -37.5a14.583 14.583 0 1 1 0 -29.167 14.583 14.583 0 0 1 0 29.167zm0 -8.333a6.25 6.25 0 1 0 0 -12.5 6.25 6.25 0 0 0 0 12.5zm52.379 -18.688l5.892 5.892L20.542 85.354l-5.892 -5.892L79.458 14.646z"></path></svg>');
5694 | }
5695 | body.cc-custom-icons svg.play-audio-glyph {
5696 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M37.5 70.833L70.833 50 37.5 29.167z"></path></svg>');
5697 | }
5698 | body.cc-custom-icons svg.presentation-glyph {
5699 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v41.667c0 4.596 3.738 8.333 8.333 8.333h29.167v12.5H33.333v8.333h12.5h8.333h12.5v-8.333h-12.5v-12.5h29.167c4.596 0 8.333 -3.738 8.333 -8.333V20.833C91.667 16.238 87.929 12.5 83.333 12.5zM16.667 62.5V20.833h66.667l0.004 41.667H16.667z M41.667 54.167L62.5 41.667 41.667 29.167z"></path></svg>');
5700 | }
5701 | body.cc-custom-icons svg.question-mark-glyph {
5702 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 25C40.962 25 33.608 32.354 33.608 41.392h8.333C41.942 36.946 45.558 33.333 50 33.333s8.058 3.613 8.058 8.058c0 2.492 -2.004 4.3 -5.067 6.775 -1.063 0.863 -2.067 1.683 -2.879 2.496C45.954 54.817 45.833 59.229 45.833 59.721V62.5h8.333l-0.004 -2.638c0.004 -0.067 0.138 -1.608 1.838 -3.304 0.625 -0.625 1.413 -1.25 2.229 -1.908 3.246 -2.629 8.158 -6.6 8.158 -13.258C66.392 32.354 59.038 25 50 25zM45.833 66.667H54.167V75H45.833z M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z"></path></svg>');
5703 | }
5704 | body.cc-custom-icons svg.restore-file-glyph {
5705 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 66.667c6.963 0 12.5 -5.546 12.5 -12.5s-5.538 -12.5 -12.5 -12.5s-12.5 5.546 -12.5 12.5S43.038 66.667 50 66.667z M86.738 46.608c-0.5 -2.429 -1.238 -4.796 -2.188 -7.033c-0.938 -2.217 -2.1 -4.358 -3.458 -6.379c-1.35 -1.996 -2.888 -3.858 -4.575 -5.538c-1.683 -1.692 -3.554 -3.233 -5.55 -4.588c-2.013 -1.358 -4.158 -2.517 -6.367 -3.454c-2.242 -0.954 -4.608 -1.688 -7.046 -2.192c-2.5 -0.513 -5.079 -0.758 -7.658 -0.75V8.333L33.333 20.833l16.563 12.5V25.008C51.913 25 53.929 25.192 55.875 25.592c1.892 0.392 3.733 0.963 5.475 1.704c1.721 0.725 3.388 1.633 4.95 2.683c1.554 1.05 3.008 2.25 4.325 3.571c1.313 1.308 2.517 2.763 3.558 4.313c1.058 1.567 1.963 3.233 2.692 4.963c0.742 1.738 1.308 3.579 1.7 5.463C78.967 50.2 79.167 52.179 79.167 54.167s-0.2 3.967 -0.592 5.875c-0.392 1.892 -0.958 3.733 -1.7 5.479c-0.729 1.721 -1.633 3.388 -2.683 4.95c-1.054 1.554 -2.258 3.008 -3.575 4.329c-1.313 1.317 -2.763 2.513 -4.317 3.558c-1.55 1.046 -3.213 1.95 -4.954 2.688c-1.738 0.738 -3.575 1.308 -5.463 1.7c-3.833 0.783 -7.942 0.783 -11.758 0c-1.892 -0.392 -3.733 -0.963 -5.475 -1.704c-1.733 -0.733 -3.396 -1.638 -4.954 -2.688c-1.546 -1.042 -2.996 -2.242 -4.313 -3.558c-1.313 -1.317 -2.517 -2.771 -3.563 -4.317c-1.058 -1.567 -1.963 -3.233 -2.692 -4.958c-0.742 -1.742 -1.308 -3.583 -1.7 -5.467C21.033 58.133 20.833 56.154 20.833 54.167H12.5c0 2.546 0.258 5.088 0.763 7.558c0.5 2.425 1.238 4.792 2.188 7.038c0.938 2.217 2.1 4.358 3.462 6.379c1.346 1.988 2.883 3.85 4.571 5.538c1.692 1.696 3.558 3.238 5.546 4.579c1.996 1.354 4.142 2.517 6.371 3.458c2.242 0.954 4.608 1.688 7.046 2.192C44.913 91.408 47.454 91.667 50 91.667s5.088 -0.258 7.558 -0.763c2.429 -0.504 4.796 -1.238 7.033 -2.188c2.238 -0.946 4.383 -2.108 6.375 -3.458c1.992 -1.342 3.858 -2.883 5.546 -4.579c1.688 -1.688 3.225 -3.554 4.583 -5.55c1.354 -2.013 2.517 -4.158 3.454 -6.367c0.954 -2.25 1.688 -4.617 2.188 -7.05C87.242 59.254 87.5 56.713 87.5 54.167S87.242 49.079 86.738 46.608z"></path></svg>');
5706 | }
5707 | body.cc-custom-icons svg.scissors-glyph {
5708 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 27.083C41.667 19.042 35.125 12.5 27.083 12.5S12.5 19.042 12.5 27.083S19.042 41.667 27.083 41.667c2.438 0 4.7 -0.658 6.721 -1.721l9.821 10.533l-9.658 9.658C31.908 59.025 29.588 58.333 27.083 58.333C19.042 58.333 12.5 64.875 12.5 72.917S19.042 87.5 27.083 87.5s14.583 -6.542 14.583 -14.583c0 -2.504 -0.692 -4.825 -1.808 -6.883l9.454 -9.45L70.833 79.671C73.179 82.017 76.358 83.333 79.671 83.333H91.667L38.958 35.492C40.65 33.108 41.667 30.221 41.667 27.083zM27.083 33.333C23.638 33.333 20.833 30.529 20.833 27.083S23.638 20.833 27.083 20.833S33.333 23.638 33.333 27.083S30.529 33.333 27.083 33.333zM27.083 79.167C23.638 79.167 20.833 76.363 20.833 72.917S23.638 66.667 27.083 66.667S33.333 69.471 33.333 72.917S30.529 79.167 27.083 79.167z M70.833 20.329l-15.446 18.392l5.892 5.892L91.667 16.667h-11.996C76.358 16.667 73.179 17.983 70.833 20.329z"></path></svg>');
5709 | }
5710 | body.cc-custom-icons svg.scissors {
5711 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M41.667 27.083C41.667 19.042 35.125 12.5 27.083 12.5S12.5 19.042 12.5 27.083S19.042 41.667 27.083 41.667c2.438 0 4.7 -0.658 6.721 -1.721l9.821 10.533l-9.658 9.658C31.908 59.025 29.588 58.333 27.083 58.333C19.042 58.333 12.5 64.875 12.5 72.917S19.042 87.5 27.083 87.5s14.583 -6.542 14.583 -14.583c0 -2.504 -0.692 -4.825 -1.808 -6.883l9.454 -9.45L70.833 79.671C73.179 82.017 76.358 83.333 79.671 83.333H91.667L38.958 35.492C40.65 33.108 41.667 30.221 41.667 27.083zM27.083 33.333C23.638 33.333 20.833 30.529 20.833 27.083S23.638 20.833 27.083 20.833S33.333 23.638 33.333 27.083S30.529 33.333 27.083 33.333zM27.083 79.167C23.638 79.167 20.833 76.363 20.833 72.917S23.638 66.667 27.083 66.667S33.333 69.471 33.333 72.917S30.529 79.167 27.083 79.167z M70.833 20.329l-15.446 18.392l5.892 5.892L91.667 16.667h-11.996C76.358 16.667 73.179 17.983 70.833 20.329z"></path></svg>');
5712 | }
5713 | body.cc-custom-icons svg.search-glyph {
5714 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M79.263 70.738c-2.138 -2.033 -4.183 -4.154 -5.696 -5.767c-1.55 -1.575 -2.483 -2.721 -2.483 -2.721l-11.667 -5.571C63.917 51.542 66.667 44.846 66.667 37.5c0 -16.079 -13.083 -29.167 -29.167 -29.167S8.333 21.421 8.333 37.5s13.083 29.167 29.167 29.167c7.346 0 14.042 -2.75 19.179 -7.246l5.571 11.667c0 0 1.146 0.933 2.721 2.483c1.613 1.512 3.733 3.558 5.767 5.696c2.058 2.108 4.117 4.217 5.658 5.8c1.508 1.617 2.517 2.692 2.517 2.692l8.838 -8.838c0 0 -1.075 -1.008 -2.692 -2.517C83.479 74.854 81.371 72.796 79.263 70.738zM37.5 58.333c-11.488 0 -20.833 -9.346 -20.833 -20.833s9.346 -20.833 20.833 -20.833s20.833 9.346 20.833 20.833S48.988 58.333 37.5 58.333z"></path></svg>');
5715 | }
5716 | body.cc-custom-icons svg.select-all-text {
5717 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M70.833 20.833h-8.333V12.5h8.333V20.833zM79.167 37.5h8.333V29.167h-8.333V37.5zM79.167 54.167h8.333v-8.333h-8.333V54.167zM45.833 87.5h8.333v-8.333h-8.333V87.5zM29.167 20.833h8.333V12.5H29.167V20.833zM12.5 70.833h8.333v-8.333H12.5V70.833zM20.833 87.5v-8.333H12.5C12.5 83.75 16.25 87.5 20.833 87.5zM79.167 12.5v8.333h8.333C87.5 16.25 83.75 12.5 79.167 12.5zM45.833 20.833h8.333V12.5h-8.333V20.833zM12.5 37.5h8.333V29.167H12.5V37.5zM29.167 87.5h8.333v-8.333H29.167V87.5zM12.5 54.167h8.333v-8.333H12.5V54.167zM12.5 20.833h8.333V12.5C16.25 12.5 12.5 16.25 12.5 20.833zM77.958 72.042l6 -6c1.333 -1.333 0.375 -3.542 -1.458 -3.542H66.667c-2.292 0 -4.167 1.875 -4.167 4.167v15.792c0 1.875 2.25 2.792 3.542 1.458l6 -6l8.333 8.333c1.625 1.625 4.25 1.625 5.875 0c1.625 -1.625 1.625 -4.25 0 -5.875L77.958 72.042z"></path></svg>');
5718 | }
5719 | body.cc-custom-icons svg.split {
5720 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M61.875 20.208l6 6 -12 12 5.917 5.917 12 -12 6 6c1.292 1.292 3.542 0.375 3.542 -1.5V18.75c0 -1.167 -0.917 -2.083 -2.083 -2.083h-17.875c-1.875 0 -2.792 2.25 -1.5 3.542zM36.625 16.667H18.75c-1.167 0 -2.083 0.917 -2.083 2.083v17.875c0 1.875 2.25 2.792 3.542 1.458L26.208 32.083 45.833 51.667V79.167c0 2.292 1.875 4.167 4.167 4.167s4.167 -1.875 4.167 -4.167v-29.167c0 -1.083 -0.458 -2.167 -1.208 -2.958l-20.833 -20.875 6 -6c1.292 -1.25 0.375 -3.5 -1.5 -3.5z"></path></svg>');
5721 | }
5722 | body.cc-custom-icons svg.star-glyph {
5723 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M91.446 38.246c-0.538 -1.575 -1.958 -2.688 -3.617 -2.817L64.075 33.542l-10.279 -22.754C53.125 9.292 51.638 8.333 50 8.333s-3.125 0.958 -3.796 2.45L35.925 33.542L12.171 35.429C10.542 35.558 9.138 36.629 8.583 38.167s-0.163 3.258 1.008 4.4l17.554 17.113l-6.208 26.883c-0.383 1.663 0.288 3.392 1.692 4.362C23.346 91.417 24.171 91.667 25 91.667c0.804 0 1.613 -0.233 2.313 -0.7L50 75.842l22.688 15.125c1.45 0.967 3.354 0.929 4.771 -0.1c1.408 -1.029 2.029 -2.833 1.55 -4.508l-7.621 -26.667l18.9 -17.008C91.525 41.567 91.979 39.825 91.446 38.246z"></path></svg>');
5724 | }
5725 | body.cc-custom-icons svg.stop-audio-glyph {
5726 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.025 8.333 8.333 27.025 8.333 50s18.692 41.667 41.667 41.667s41.667 -18.692 41.667 -41.667S72.975 8.333 50 8.333zM50 83.333c-18.379 0 -33.333 -14.954 -33.333 -33.333s14.954 -33.333 33.333 -33.333s33.333 14.954 33.333 33.333S68.379 83.333 50 83.333z M37.5 37.5H62.5V62.5H37.5z"></path></svg>');
5727 | }
5728 | body.cc-custom-icons svg.two-blank-pages {
5729 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 8.333H41.667C37.071 8.333 33.333 12.071 33.333 16.667v16.667H16.667c-4.596 0 -8.333 3.738 -8.333 8.333v41.667c0 4.596 3.738 8.333 8.333 8.333h41.667c4.596 0 8.333 -3.738 8.333 -8.333v-16.667h16.667c4.596 0 8.333 -3.738 8.333 -8.333V16.667C91.667 12.071 87.929 8.333 83.333 8.333zM16.667 83.333V41.667h41.667l0.008 41.667H16.667zM83.333 58.333h-16.667v-16.667c0 -4.596 -3.738 -8.333 -8.333 -8.333h-16.667V16.667h41.667V58.333z M25 50H50V58.333H25zM25 66.667H50V75H25z"></path></svg>');
5730 | }
5731 | body.cc-custom-icons svg.tomorrow-glyph {
5732 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M33.333 62.5L45.833 62.5 45.833 75 54.167 75 54.167 62.5 66.667 62.5 66.667 54.167 54.167 54.167 54.167 41.667 45.833 41.667 45.833 54.167 33.333 54.167z M79.167 16.667h-8.333V8.333h-8.333v8.333H37.5V8.333H29.167v8.333H20.833C16.238 16.667 12.5 20.404 12.5 25v8.333v50c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V33.333V25C87.5 20.404 83.763 16.667 79.167 16.667zM79.175 83.333H20.833V33.333h58.333L79.175 83.333z"></path></svg>');
5733 | }
5734 | body.cc-custom-icons svg.yesterday-glyph {
5735 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M33.333 54.167H66.667V62.5H33.333z M79.167 16.667h-8.333V8.333h-8.333v8.333H37.5V8.333H29.167v8.333H20.833C16.238 16.667 12.5 20.404 12.5 25v8.333v50c0 4.596 3.738 8.333 8.333 8.333h58.333c4.596 0 8.333 -3.738 8.333 -8.333V33.333V25C87.5 20.404 83.763 16.667 79.167 16.667zM79.175 83.333H20.833V33.333h58.333L79.175 83.333z"></path></svg>');
5736 | }
5737 | body.cc-custom-icons svg.workspace-glyph {
5738 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M50 8.333C27.413 8.333 8.333 27.413 8.333 50c0 13.288 6.633 25.325 16.667 33.017V83.333h0.425C32.375 88.521 40.888 91.667 50 91.667s17.625 -3.146 24.575 -8.333H75v-0.317c10.033 -7.692 16.667 -19.725 16.667 -33.017C91.667 27.413 72.588 8.333 50 8.333zM33.642 78.862c1.238 -5.604 6.225 -9.808 12.192 -9.808h8.333c5.967 0 10.954 4.208 12.192 9.808C61.492 81.683 55.9 83.333 50 83.333S38.508 81.683 33.642 78.862zM73.375 73.504c-3.154 -7.5 -10.575 -12.783 -19.208 -12.783h-8.333c-8.633 0 -16.058 5.287 -19.208 12.783C20.513 67.425 16.667 59.067 16.667 50c0 -18.071 15.263 -33.333 33.333 -33.333s33.333 15.263 33.333 33.333C83.333 59.067 79.488 67.425 73.375 73.504z M50 25c-9.5 0 -16.667 7.167 -16.667 16.667s7.167 16.667 16.667 16.667s16.667 -7.167 16.667 -16.667S59.5 25 50 25zM50 50c-4.908 0 -8.333 -3.425 -8.333 -8.333s3.425 -8.333 8.333 -8.333s8.333 3.425 8.333 8.333S54.908 50 50 50z"></path></svg>');
5739 | }
5740 | body.cc-custom-icons svg.box-glyph {
5741 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M90.442 22.046l-12.496 -12.492C77.167 8.771 76.108 8.333 75 8.333H25C23.892 8.333 22.833 8.771 22.054 9.554L9.558 22.046C8.8 22.8 8.333 23.842 8.333 24.996V79.167c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V24.996C91.667 23.842 91.2 22.8 90.442 22.046zM26.725 16.667h46.55l4.163 4.163H22.563L26.725 16.667zM16.667 79.167V29.163h66.667L83.342 79.167H16.667z M62.5 50L37.5 50 37.5 41.667 29.167 41.667 29.167 58.333 70.833 58.333 70.833 41.667 62.5 41.667z"></path></svg>');
5742 | }
5743 | 
5744 | /* Misc overrides */
5745 | 
5746 | body.cc-custom-icons .nav-action-button[aria-label="New folder"] svg.folder {
5747 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M54.167 37.5L45.833 37.5 45.833 50 33.333 50 33.333 58.333 45.833 58.333 45.833 70.833 54.167 70.833 54.167 58.333 66.667 58.333 66.667 50 54.167 50z M83.333 20.833h-35.775L40.446 13.721C39.667 12.938 38.608 12.5 37.5 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v58.333c0 4.596 3.738 8.333 8.333 8.333h66.667c4.596 0 8.333 -3.738 8.333 -8.333V29.167C91.667 24.571 87.929 20.833 83.333 20.833zM16.667 79.167V29.167h29.167h4.167h33.333l0.008 50H16.667z"></path></svg>');
5748 | }
5749 | 
5750 | body.cc-custom-icons .workspace-leaf-content .view-header-icon > svg {
5751 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M29.167 41.667H45.833V58.333H29.167zM29.167 16.667H45.833V33.333H29.167zM29.167 66.667H45.833V83.333H29.167zM54.167 41.667H70.833V58.333H54.167zM54.167 16.667H70.833V33.333H54.167zM54.167 66.667H70.833V83.333H54.167z"></path></svg>');
5752 | }
5753 | 
5754 | body.cc-custom-icons
5755 |   .side-dock-ribbon-action[aria-label="Insert template"]
5756 |   > svg.documents {
5757 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M86.841 25.927l-12.78-12.779A7.312 7.312 0 0068.898 11H37.811c-4.036.015-7.311 3.29-7.311 7.326V51.23H12.828c-1.01 0-1.828.819-1.828 1.828v3.657c0 1.01.818 1.828 1.828 1.828h42.047v7.446c0 1.632 1.976 2.445 3.126 1.288L68.935 56.26a1.95 1.95 0 000-2.747L58 42.497c-1.15-1.158-3.126-.344-3.126 1.287v7.447H37.811V18.326h24.37v15.84a3.646 3.646 0 003.657 3.656h15.85v43.867H37.81V65.854H30.5V81.69A7.314 7.314 0 0037.81 89h43.867C85.714 89 89 85.725 89 81.689V31.105a7.358 7.358 0 00-2.159-5.178zM69.492 30.51V18.92l11.592 11.59H69.492z M37.81 10.7h31.088c2.014 0 3.949.81 5.375 2.236l12.78 12.778-.212.213-12.78-12.779A7.312 7.312 0 0068.898 11H37.811c-4.036.015-7.311 3.29-7.311 7.326V51.23H12.828c-1.01 0-1.828.819-1.828 1.828v3.657c0 1.01.818 1.828 1.828 1.828h42.047v7.446c0 1.632 1.976 2.445 3.126 1.288L68.935 56.26a1.95 1.95 0 000-2.747L58 42.497c-1.15-1.158-3.126-.344-3.126 1.287v7.447H37.811V18.326h24.37v15.84a3.646 3.646 0 003.657 3.656h15.85v43.867H37.81V65.854H30.5V81.69A7.314 7.314 0 0037.81 89h43.867C85.714 89 89 85.725 89 81.689V31.105a7.358 7.358 0 00-2.159-5.178l.212-.213a7.658 7.658 0 012.247 5.39V81.69c0 4.202-3.421 7.611-7.623 7.611H37.81a7.614 7.614 0 01-7.611-7.611V65.554h7.91V81.39h43.278V38.122h-15.55a3.946 3.946 0 01-3.957-3.955v-15.54h-23.77V50.93h16.464v-7.147c0-1.9 2.3-2.846 3.639-1.498l10.934 11.016a2.25 2.25 0 010 3.169L58.214 67.487c-1.339 1.348-3.639.401-3.639-1.499v-7.146H12.828a2.128 2.128 0 01-2.128-2.128v-3.657c0-1.175.952-2.128 2.128-2.128H30.2V18.326c0-4.201 3.41-7.61 7.61-7.626zm31.982 8.945V30.21H80.36L69.792 19.645zm-.3 10.866h11.592L69.492 18.92v11.59z"></path></svg>');
5758 | }
5759 | 
5760 | body.cc-custom-icons .view-action[aria-label^="Preview"] > svg {
5761 |   -webkit-mask-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="red" d="M83.333 12.5H16.667C12.071 12.5 8.333 16.238 8.333 20.833v45.833c0 4.596 3.738 8.333 8.333 8.333h29.167v8.333H33.333v8.333h12.5h8.333h12.5v-8.333h-12.5v-8.333h29.167c4.596 0 8.333 -3.738 8.333 -8.333V20.833C91.667 16.238 87.929 12.5 83.333 12.5zM16.667 58.333V20.833h66.667l0.008 37.5H16.667z"></path></svg>');
5762 | }
5763 | 
5764 | .markdown-source-view.mod-cm6 .cm-scroller,
5765 | .cm-s-obsidian {
5766 |   font-family: var(--text-editor);
5767 |   font-size: var(--editor-font-size);
5768 |   font-weight: var(--editor-font-weight);
5769 |   line-height: var(--editor-line-height);
5770 |   font-feature-settings: var(--editor-font-features);
5771 |   -webkit-font-smoothing: antialiased;
5772 |   -moz-osx-font-smoothing: grayscale;
5773 | }
5774 | 
5775 | .cm-s-obsidian .HyperMD-codeblock {
5776 |   line-height: var(--editor-line-height);
5777 | }
5778 | 
5779 | .cm-s-obsidian span.cm-comment {
5780 |   color: var(--shade-70);
5781 |   font-style: italic;
5782 | }
5783 | 
5784 | .cm-s-obsidian span.cm-quote {
5785 |   color: var(--text-normal);
5786 |   font-style: italic;
5787 | }
5788 | 
5789 | .cm-s-obsidian span.cm-url.cm-string:not(.cm-hmd-footnote-url) {
5790 |   color: var(--shade-20);
5791 | }
5792 | 
5793 | .cm-s-obsidian span.cm-link {
5794 |   color: var(--text-accent);
5795 | }
5796 | 
5797 | .cm-s-obsidian span.cm-formatting-link,
5798 | .cm-s-obsidian span.cm-formatting-image.cm-link,
5799 | .cm-s-obsidian span.cm-formatting-link-string.cm-url.cm-string {
5800 |   color: var(--shade-10);
5801 |   display: inline-block;
5802 |   padding: 0 1px;
5803 |   font-weight: 600;
5804 | }
5805 | 
5806 | .cm-s-obsidian pre.HyperMD-footnote span.cm-link.cm-hmd-footnote {
5807 |   color: var(--text-accent);
5808 | }
5809 | 
5810 | .cm-s-obsidian pre.HyperMD-footnote span.cm-link.cm-hmd-footnote.cm-formatting {
5811 |   color: var(--shade-10);
5812 | }
5813 | 
5814 | .cm-s-obsidian span.cm-footref,
5815 | .cm-s-obsidian span.cm-blockid {
5816 |   vertical-align: unset;
5817 |   margin-top: 0;
5818 |   font-size: unset;
5819 | }
5820 | 
5821 | .cm-s-obsidian span.cm-blockid {
5822 |   font-family: var(--font-monospace);
5823 |   font-size: 0.6em;
5824 | }
5825 | 
5826 | .cm-formatting-list-ul:before {
5827 |   color: var(--text-normal);
5828 | }
5829 | 
5830 | .cm-formatting-list-ol {
5831 |   color: var(--text-normal) !important;
5832 |   white-space: pre;
5833 |   display: inline-flex;
5834 |   justify-content: flex-end;
5835 |   width: 1rem;
5836 | }
5837 | 
5838 | .cm-s-obsidian span.cm-hashtag,
5839 | .frontmatter-container .tag,
5840 | .tag {
5841 |   background-color: transparent;
5842 |   text-decoration: none;
5843 | 
5844 |   display: inline;
5845 |   color: var(--text-accent);
5846 |   margin: 0;
5847 |   text-align: unset;
5848 |   vertical-align: unset;
5849 |   border: none;
5850 |   font-size: unset;
5851 |   padding: 0 !important;
5852 |   border-radius: 0;
5853 | }
5854 | 
5855 | .cm-s-obsidian pre.HyperMD-header {
5856 |   padding-left: 0 !important;
5857 | }
5858 | .CodeMirror-linenumber {
5859 |   font-size: var(--font-small) !important;
5860 |   font-feature-settings: "tnum";
5861 |   color: var(--text-faint);
5862 |   padding-top: 3px;
5863 | }
5864 | .cm-s-obsidian span.cm-url {
5865 |   color: var(--text-accent);
5866 | }
5867 | 
5868 | .cm-s-obsidian span.cm-hmd-internal-link {
5869 |   color: var(--text-accent);
5870 | }
5871 | .cm-s-obsidian span.cm-link.cm-strikethrough,
5872 | .cm-s-obsidian span.cm-hmd-internal-link.cm-strikethrough {
5873 |   text-decoration: line-through;
5874 |   text-decoration-color: var(--text-muted);
5875 |   text-decoration-thickness: 3px;
5876 | }
5877 | .cm-strikethrough {
5878 |   text-decoration-color: var(--text-muted);
5879 |   text-decoration-thickness: 3px;
5880 | }
5881 | 
5882 | /* Editor Mode Footnotes */
5883 | 
5884 | .cm-s-obsidian span.cm-footref {
5885 |   font-size: var(--font-normal);
5886 | }
5887 | .cm-s-obsidian pre.HyperMD-footnote {
5888 |   font-size: var(--font-small);
5889 |   padding-left: 20px;
5890 | }
5891 | 
5892 | /* Editor Mode Tables */
5893 | .CodeMirror pre.HyperMD-table-row {
5894 |   font-family: var(--font-monospace);
5895 |   font-size: calc(var(--font-normal) - 1px);
5896 | }
5897 | 
5898 | /* Editor Mode Lists */
5899 | .cm-formatting-list {
5900 |   color: var(--text-normal) !important;
5901 | }
5902 | .cm-s-obsidian span.cm-formatting-task {
5903 |   display: inline-block;
5904 |   font-weight: 500;
5905 |   color: var(--text-normal);
5906 |   min-width: 1.3em;
5907 |   font-family: inherit;
5908 | }
5909 | 
5910 | /* Editor Mode Quotes */
5911 | .cm-formatting-quote {
5912 |   color: var(--text-faint) !important;
5913 | }
5914 | 
5915 | /* Fancy cursor */
5916 | .cc-fancy-cursor .CodeMirror-cursor {
5917 |   border-left: 2px solid var(--text-accent);
5918 |   transform: translateX(-0.5px);
5919 |   border-radius: 2px;
5920 | }
5921 | 
5922 | .cc-soft-blink-cursor .CodeMirror-focused .CodeMirror-cursors {
5923 |   visibility: visible !important;
5924 |   transition: 100ms opacity ease-in;
5925 |   opacity: 1;
5926 | }
5927 | 
5928 | .cc-soft-blink-cursor .CodeMirror-focused .CodeMirror-cursors[style^="visibility"] {
5929 |   opacity: 0;
5930 | }
5931 | 
5932 | /* Pretty editor */
5933 | 
5934 | .cc-editor-heading-hash .cm-formatting-header.obsidian-search-match-highlight {
5935 |   background: transparent;
5936 | }
5937 | 
5938 | .cc-editor-heading-hash .cm-formatting-header {
5939 |   font-family: var(--text);
5940 |   color: var(--text-faint) !important;
5941 |   font-weight: var(--normal-weight) !important;
5942 | }
5943 | 
5944 | .cc-editor-heading-hash
5945 |   div:not(.CodeMirror-activeline)
5946 |   > pre.HyperMD-header
5947 |   .cm-formatting-header:not(:only-child) {
5948 |   color: transparent !important;
5949 | }
5950 | 
5951 | .cc-editor-heading-hash
5952 |   div:not(.CodeMirror-activeline)
5953 |   > pre.HyperMD-header
5954 |   .cm-formatting-header:not(:only-child):after {
5955 |   font-family: var(--text);
5956 |   color: var(--shade-20);
5957 |   display: inline-block;
5958 |   padding-right: 5px;
5959 | }
5960 | 
5961 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header {
5962 |   position: relative;
5963 | }
5964 | 
5965 | .cc-editor-heading-hash
5966 |   .cm-s-obsidian
5967 |   .HyperMD-header
5968 |   .cm-formatting-header:not(:only-child) {
5969 |   position: absolute;
5970 |   left: 0;
5971 |   transform: translateX(-100%);
5972 |   font-size: 11px !important;
5973 |   display: block;
5974 |   height: 100%;
5975 | }
5976 | 
5977 | .is-mobile.cc-editor-heading-hash
5978 |   .cm-s-obsidian
5979 |   .HyperMD-header
5980 |   .cm-formatting-header:not(:only-child) {
5981 |   letter-spacing: -3px;
5982 | }
5983 | 
5984 | .cc-block-quotes .cm-formatting-quote {
5985 |   font-style: italic;
5986 |   font-weight: 800;
5987 |   color: var(--shade-10) !important;
5988 | }
5989 | 
5990 | .cc-block-quotes .HyperMD-quote-lazy {
5991 |   padding-left: 1rem !important;
5992 | }
5993 | 
5994 | .cc-editor-list-bullets .cm-s-obsidian pre.HyperMD-list-line {
5995 |   padding-top: 0;
5996 |   padding-bottom: 10px;
5997 | }
5998 | 
5999 | .cc-editor-list-bullets .cm-s-obsidian span.cm-formatting-list-ul {
6000 |   color: transparent !important;
6001 |   position: relative;
6002 | }
6003 | 
6004 | .cc-list-relationship-lines .cm-hmd-list-indent > .cm-tab {
6005 |   display: inline-block;
6006 | }
6007 | 
6008 | .cc-list-relationship-lines .cm-hmd-list-indent > .cm-tab:after {
6009 |   content: " ";
6010 |   display: block;
6011 |   width: 1px;
6012 |   position: absolute;
6013 |   top: 0;
6014 |   transform: translateX(-1.5px);
6015 |   background: var(--shade-5);
6016 |   height: 100%;
6017 | }
6018 | 
6019 | .cc-em-strong .cm-formatting-strong.cm-header,
6020 | .cc-em-strong .cm-formatting-em.cm-header,
6021 | .cc-em-strong .cm-formatting-strong,
6022 | .cc-em-strong .cm-formatting-em {
6023 |   color: var(--shade-20);
6024 |   font-size: 0.777em;
6025 | }
6026 | 
6027 | .cm-s-obsidian .cm-em.cm-header {
6028 |   font-style: italic;
6029 | }
6030 | 
6031 | .cm-s-obsidian .cm-strong.cm-header {
6032 |   font-weight: 800;
6033 | }
6034 | 
6035 | .cc-hr
6036 |   .cm-s-obsidian
6037 |   div:not(.CodeMirror-activeline)
6038 |   > .HyperMD-hr
6039 |   span.cm-builtin,
6040 | .cc-hr .cm-s-obsidian div:not(.CodeMirror-activeline) > .HyperMD-hr span.cm-hr {
6041 |   color: transparent;
6042 | }
6043 | 
6044 | .cc-hr .HyperMD-hr {
6045 |   position: relative;
6046 | }
6047 | 
6048 | .cc-hr .cm-s-obsidian div:not(.CodeMirror-activeline) > .HyperMD-hr-bg:after {
6049 |   content: " ";
6050 |   display: block;
6051 |   position: absolute;
6052 |   width: 100%;
6053 |   height: 1px;
6054 |   background-color: var(--shade-10);
6055 |   top: 50%;
6056 | }
6057 | 
6058 | .cm-s-obsidian span.cm-formatting-highlight,
6059 | .cm-s-obsidian span.cm-highlight,
6060 | .cm-s-obsidian span.obsidian-search-match-highlight {
6061 |   background-color: var(--text-highlight-bg);
6062 | }
6063 | 
6064 | /* Icons */
6065 | 
6066 | .cc-editor-list-bullets .cm-formatting-list-ul:before {
6067 |   line-height: 0;
6068 |   position: absolute;
6069 |   top: 51%;
6070 |   left: 0;
6071 |   display: block;
6072 |   transform: translate(-56%, -50%);
6073 |   width: 6px;
6074 |   height: 6px;
6075 |   content: url('data:image/svg+xml; utf8, <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 24 24" style="fill:rgba(0, 0, 0);"><path d="M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z"></path></svg>');
6076 | }
6077 | 
6078 | .theme-dark.cc-editor-list-bullets .cm-formatting-list-ul:before {
6079 |   content: url('data:image/svg+xml; utf8, <svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 24 24" style="fill:rgba(204,204,204);"><path d="M12,2C6.486,2,2,6.486,2,12s4.486,10,10,10s10-4.486,10-10S17.514,2,12,2z"></path></svg>');
6080 | }
6081 | 
6082 | body {
6083 |   --text-preview: var(--text-editor);
6084 |   --preview-font-size: var(--editor-font-size);
6085 |   --preview-line-height: var(--editor-line-height);
6086 |   --preview-line-height-rem: calc(var(--preview-line-height) * 1rem);
6087 |   --preview-font-weight: var(--editor-font-weight);
6088 |   --preview-font-features: var(--editor-font-features);
6089 | 
6090 |   --hr-spacing-top: calc(var(--editor-line-height-rem) / 2);
6091 |   --hr-spacing-bottom: calc(var(--editor-line-height-rem) * 1.5);
6092 | }
6093 | 
6094 | .markdown-preview-view {
6095 |   font-family: var(--text-preview);
6096 |   font-size: var(--preview-font-size);
6097 |   font-weight: var(--preview-font-weight);
6098 |   line-height: var(--preview-line-height);
6099 |   font-feature-settings: var(--preview-font-features);
6100 |   -webkit-font-smoothing: antialiased;
6101 |   -moz-osx-font-smoothing: grayscale;
6102 | }
6103 | 
6104 | .markdown-preview-section > div {
6105 |   padding-left: 3.5rem;
6106 |   padding-right: 3.5rem;
6107 | }
6108 | 
6109 | .is-mobile .markdown-preview-section > div {
6110 |   padding-left: 1.75rem;
6111 |   padding-right: 1.75rem;
6112 | }
6113 | 
6114 | .workspace-tabs
6115 |   .view-content
6116 |   > div
6117 |   > .markdown-preview-view
6118 |   > .markdown-preview-section
6119 |   > div {
6120 |   padding-left: 1rem;
6121 |   padding-right: 1rem;
6122 | }
6123 | 
6124 | .workspace-tabs
6125 |   .view-content
6126 |   > div
6127 |   > .markdown-preview-view
6128 |   .markdown-preview-section
6129 |   ul.contains-task-list {
6130 |   padding-inline-start: 1.5em;
6131 | }
6132 | 
6133 | /* Pretty preview */
6134 | .cc-pretty-preview .markdown-preview-section > div > * {
6135 |   line-height: var(--editor-line-height);
6136 |   margin: 0 0 var(--editor-line-height-rem);
6137 | }
6138 | 
6139 | .cc-pretty-preview .markdown-preview-section > div .math * {
6140 |   letter-spacing: 0;
6141 |   margin-bottom: 0;
6142 | }
6143 | 
6144 | .cc-pretty-preview .markdown-preview-view div[data-tag-name="h1"] + div > h2 {
6145 |   margin-top: var(--editor-line-height-rem);
6146 | }
6147 | 
6148 | .cc-pretty-preview .markdown-preview-view div[data-tag-name="h2"] + div > h3,
6149 | .cc-pretty-preview .markdown-preview-view div[data-tag-name="h3"] + div > h4,
6150 | .cc-pretty-preview .markdown-preview-view div[data-tag-name="h4"] + div > h5 {
6151 |   margin-top: calc(var(--editor-line-height-rem) / 2);
6152 | }
6153 | 
6154 | .cc-pretty-preview .markdown-preview-view div[data-tag-name="h5"] + div > h6 {
6155 |   margin-top: 0;
6156 | }
6157 | 
6158 | .cc-pretty-preview
6159 |   .markdown-preview-view
6160 |   mjx-container[jax="CHTML"][display="true"] {
6161 |   margin: 0;
6162 | }
6163 | 
6164 | .cc-pretty-preview .markdown-preview-view li blockquote,
6165 | .cc-pretty-preview .markdown-preview-view ol ol,
6166 | .cc-pretty-preview .markdown-preview-view ul ul {
6167 |   margin-bottom: 0;
6168 | }
6169 | 
6170 | .cc-pretty-preview .markdown-preview-view ul li,
6171 | .cc-pretty-preview .markdown-preview-view ol li {
6172 |   margin-top: 5px;
6173 |   margin-bottom: 5px;
6174 | }
6175 | 
6176 | .cc-seamless-embed .internal-embed .markdown-embed {
6177 |   border-left: none;
6178 |   padding: 0;
6179 | }
6180 | 
6181 | .cc-seamless-embed .markdown-preview-view .markdown-embed-content {
6182 |   overflow: visible;
6183 | }
6184 | 
6185 | .cc-seamless-embed .markdown-embed-link svg {
6186 |   opacity: 1;
6187 | }
6188 | 
6189 | .cc-seamless-embed .internal-embed:not([src*="#^"]) .markdown-embed-link {
6190 |   width: unset;
6191 |   left: unset;
6192 | }
6193 | 
6194 | .cc-seamless-embed .internal-embed:not([src*="#^"]) .markdown-embed-link {
6195 |   width: unset;
6196 |   left: unset;
6197 | }
6198 | 
6199 | .cc-seamless-embed .markdown-embed-link {
6200 |   top: 0;
6201 |   line-height: inherit;
6202 | }
6203 | 
6204 | .cc-seamless-embed .markdown-embed-title {
6205 |   display: none;
6206 | }
6207 | 
6208 | .markdown-preview-view .internal-query.is-embed .internal-query-header {
6209 |   padding: 10px 0;
6210 | }
6211 | 
6212 | .markdown-preview-view .internal-query.is-embed {
6213 |   margin: 2.7rem 0;
6214 |   border: none;
6215 |   background: var(--shade-5);
6216 |   border-radius: var(--radius-l);
6217 |   padding: 10px;
6218 | }
6219 | 
6220 | .markdown-preview-view .internal-query.is-embed .internal-query-header-title {
6221 |   font-weight: 500;
6222 |   font-style: italic;
6223 | }
6224 | 
6225 | .markdown-preview-view hr {
6226 |   margin-bottom: var(--hr-spacing-bottom) !important;
6227 |   box-sizing: content-box;
6228 |   border: 0;
6229 |   color: transparent;
6230 |   display: block;
6231 |   width: 100%;
6232 |   height: var(--hr-spacing-top);
6233 |   border-bottom: 1px solid var(--shade-10);
6234 | }
6235 | 
6236 | .markdown-preview-view img {
6237 |   border: 0;
6238 |   max-width: 100%;
6239 |   display: block;
6240 |   margin: inherit auto;
6241 | }
6242 | 
6243 | .markdown-preview-view img.emoji {
6244 |   display: inline;
6245 |   margin: 0;
6246 | }
6247 | 
6248 | .markdown-preview-view svg:not(:root) {
6249 |   overflow: hidden;
6250 | }
6251 | 
6252 | .markdown-preview-view ul {
6253 |   margin-left: 0;
6254 |   padding-inline-start: 1.2em;
6255 |   list-style: disc;
6256 | }
6257 | .markdown-preview-view ol {
6258 |   margin-left: 0;
6259 |   padding-inline-start: 1.2em;
6260 |   list-style: decimal;
6261 | }
6262 | 
6263 | .markdown-preview-view .footnotes li > p {
6264 |   display: block;
6265 |   margin-bottom: 0;
6266 | }
6267 | 
6268 | .markdown-preview-view .footnotes li > p + p {
6269 |   margin-top: 0.3rem;
6270 | }
6271 | 
6272 | .markdown-preview-view blockquote {
6273 |   font-style: italic;
6274 |   border-radius: unset;
6275 |   border: unset;
6276 |   border-width: unset;
6277 |   background-color: unset;
6278 |   color: unset;
6279 |   padding: 0 0 0 1.4375rem;
6280 |   margin-inline-start: unset;
6281 |   border-left: 2px solid var(--shade-plus-darker);
6282 | }
6283 | 
6284 | .markdown-preview-view blockquote p {
6285 |   margin: 0;
6286 | }
6287 | 
6288 | .markdown-preview-view table {
6289 |   border: 1px solid var(--shade-plus-darker);
6290 |   margin-bottom: var(--editor-line-height-rem);
6291 |   border-collapse: unset;
6292 |   border-spacing: 0;
6293 |   overflow: hidden;
6294 | }
6295 | 
6296 | .markdown-preview-view th,
6297 | .markdown-preview-view td {
6298 |   vertical-align: top;
6299 |   border-color: var(--shade-plus-darker);
6300 |   border-right: none;
6301 | }
6302 | 
6303 | .cc-hide-table-vertical-dividers .markdown-preview-view th,
6304 | .cc-hide-table-vertical-dividers .markdown-preview-view td {
6305 |   border-left: none;
6306 | }
6307 | 
6308 | .markdown-preview-view th:first-child,
6309 | .markdown-preview-view td:first-child {
6310 |   padding-left: 15px;
6311 | }
6312 | 
6313 | .markdown-preview-view th {
6314 |   font-family: var(--text);
6315 |   background-color: var(--shade-plus-darker);
6316 |   border-bottom: none;
6317 |   font-weight: 400;
6318 |   font-size: 16px;
6319 | }
6320 | 
6321 | .markdown-preview-view tr + tr td {
6322 |   border-top: none;
6323 | }
6324 | 
6325 | .markdown-preview-view br {
6326 |   margin-bottom: 0;
6327 | }
6328 | 
6329 | .markdown-preview-view em,
6330 | .markdown-preview-view i {
6331 |   line-height: 0;
6332 |   vertical-align: baseline;
6333 | }
6334 | 
6335 | .markdown-preview-view code {
6336 |   color: var(--text-normal);
6337 |   font-size: 0.9em;
6338 |   margin: -2px 0;
6339 | }
6340 | 
6341 | .markdown-preview-view pre > code {
6342 |   margin: 0;
6343 |   background: none;
6344 | }
6345 | 
6346 | .markdown-preview-view pre {
6347 |   padding: 0 !important;
6348 |   border-radius: var(--radius-l);
6349 | }
6350 | 
6351 | .markdown-preview-view pre > code {
6352 |   padding: 1.4rem;
6353 |   display: block;
6354 | }
6355 | 
6356 | .cc-soft-wrap-code-blocks code[class*="language-"],
6357 | .cc-soft-wrap-code-blocks pre[class*="language-"] {
6358 |   overflow: hidden;
6359 |   white-space: pre-wrap ;
6360 | }
6361 | 
6362 | .markdown-preview-view sub,
6363 | .markdown-preview-view sup {
6364 |   font-size: 75%;
6365 |   line-height: 0;
6366 |   position: relative;
6367 |   vertical-align: baseline;
6368 | }
6369 | 
6370 | .markdown-preview-view sup {
6371 |   top: -0.5em;
6372 | }
6373 | 
6374 | .markdown-preview-view sub {
6375 |   bottom: -0.25em;
6376 | }
6377 | 
6378 | .frontmatter-container .tag,
6379 | .tag {
6380 |   display: inline;
6381 |   border: none;
6382 |   font-size: unset;
6383 |   padding: unset;
6384 | }
6385 | 
6386 | .file-embed-link svg, .markdown-embed-link svg {
6387 |  width: 16px;
6388 |  height: 16px;
6389 | }
6390 | 
6391 | .markdown-preview-view .markdown-embed-content p:first-child {
6392 |   margin-top: 0;
6393 | }
6394 | 
6395 | :root {
6396 |   --h1-size: 1.602em;
6397 |   --h1-line-height: 1.4;
6398 |   --h1-margin-top: 3;
6399 |   --h1-margin-bottom: 1;
6400 |   --h1-weight: 500;
6401 |   --h1-style: normal;
6402 | 
6403 |   --h2-size: 1.424em;
6404 |   --h2-line-height: 1.4;
6405 |   --h2-margin-top: 2.25;
6406 |   --h2-margin-bottom: 0.5;
6407 |   --h2-weight: 500;
6408 |   --h2-style: normal;
6409 | 
6410 |   --h3-size: 1.266em;
6411 |   --h3-line-height: 1.4;
6412 |   --h3-margin-top: 1.75;
6413 |   --h3-margin-bottom: 0.5;
6414 |   --h3-weight: 500;
6415 |   --h3-style: normal;
6416 | 
6417 |   --h4-size: 1.125em;
6418 |   --h4-line-height: 1.5;
6419 |   --h4-margin-top: 1.5;
6420 |   --h4-margin-bottom: 0.5;
6421 |   --h4-weight: 500;
6422 |   --h4-style: normal;
6423 | 
6424 |   --h5-size: 1em;
6425 |   --h5-line-height: 1.5;
6426 |   --h5-margin-top: 1.5;
6427 |   --h5-margin-bottom: 0.5;
6428 |   --h5-weight: 500;
6429 |   --h5-style: normal;
6430 | 
6431 |   --h6-size: 1em;
6432 |   --h6-line-height: 1.5;
6433 |   --h6-margin-top: 1.5;
6434 |   --h6-margin-bottom: 0.5;
6435 |   --h6-weight: 500;
6436 |   --h6-style: italic;
6437 | 
6438 |   /* Hidden settings */
6439 | 
6440 |   --h1-color: var(--text-normal);
6441 |   --h2-color: var(--text-normal);
6442 |   --h3-color: var(--text-normal);
6443 |   --h4-color: var(--text-normal);
6444 |   --h5-color: var(--text-normal);
6445 |   --h5-color: var(--text-normal);
6446 | }
6447 | 
6448 | .cc-pretty-preview .markdown-preview-view h1,
6449 | .markdown-preview-view h1 {
6450 |   color: var(--h1-color);
6451 |   font-size: var(--h1-size) !important;
6452 |   line-height: var(--h1-line-height);
6453 |   margin-top: calc(var(--h1-margin-top) * var(--editor-line-height-rem));
6454 |   margin-bottom: calc(var(--h1-margin-bottom) * var(--editor-line-height-rem));
6455 |   font-weight: var(--h1-weight);
6456 |   font-style: var(--h1-style);
6457 | }
6458 | 
6459 | .popover .markdown-embed .markdown-preview-view h1,
6460 | .cc-pretty-preview .workspace-tabs .markdown-preview-view h1,
6461 | .workspace-tabs .markdown-preview-view h1 {
6462 |   margin-top: calc(var(--h2-margin-top) * var(--editor-line-height-small-rem));
6463 |   margin-bottom: calc(
6464 |     var(--h2-margin-bottom) * var(--editor-line-height-small-rem)
6465 |   );
6466 | }
6467 | 
6468 | .cc-pretty-preview .markdown-preview-view h2,
6469 | .markdown-preview-view h2 {
6470 |   color: var(--h2-color);
6471 |   font-size: var(--h2-size) !important;
6472 |   line-height: var(--h2-line-height);
6473 |   margin-top: calc(var(--h2-margin-top) * var(--editor-line-height-rem));
6474 |   margin-bottom: calc(var(--h2-margin-bottom) * var(--editor-line-height-rem));
6475 |   font-weight: var(--h2-weight);
6476 |   font-style: var(--h2-style);
6477 | }
6478 | 
6479 | .popover .markdown-embed .markdown-preview-view h2,
6480 | .cc-pretty-preview .workspace-tabs .markdown-preview-view h2,
6481 | .workspace-tabs .markdown-preview-view h2 {
6482 |   margin-top: calc(var(--h2-margin-top) * var(--editor-line-height-small-rem));
6483 |   margin-bottom: calc(
6484 |     var(--h2-margin-bottom) * var(--editor-line-height-small-rem)
6485 |   );
6486 | }
6487 | 
6488 | .cc-pretty-preview .markdown-preview-view h3,
6489 | .markdown-preview-view h3 {
6490 |   color: var(--h3-color);
6491 |   font-size: var(--h3-size) !important;
6492 |   line-height: var(--h3-line-height);
6493 |   margin-top: calc(var(--h3-margin-top) * var(--editor-line-height-rem));
6494 |   margin-bottom: calc(var(--h3-margin-bottom) * var(--editor-line-height-rem));
6495 |   font-weight: var(--h3-weight);
6496 |   font-style: var(--h3-style);
6497 | }
6498 | 
6499 | .popover .markdown-embed .markdown-preview-view h3,
6500 | .cc-pretty-preview .workspace-tabs .markdown-preview-view h3,
6501 | .workspace-tabs .markdown-preview-view h3 {
6502 |   margin-top: calc(var(--h3-margin-top) * var(--editor-line-height-small-rem));
6503 |   margin-bottom: calc(
6504 |     var(--h3-margin-bottom) * var(--editor-line-height-small-rem)
6505 |   );
6506 | }
6507 | 
6508 | .cc-pretty-preview .markdown-preview-view h4,
6509 | .markdown-preview-view h4 {
6510 |   color: var(--h4-color);
6511 |   font-size: var(--h4-size) !important;
6512 |   line-height: var(--h4-line-height);
6513 |   margin-top: calc(var(--h4-margin-top) * var(--editor-line-height-rem));
6514 |   margin-bottom: calc(var(--h4-margin-bottom) * var(--editor-line-height-rem));
6515 |   font-weight: var(--h4-weight);
6516 |   font-style: var(--h4-style);
6517 | }
6518 | 
6519 | .popover .markdown-embed .markdown-preview-view h4,
6520 | .cc-pretty-preview .workspace-tabs .markdown-preview-view h4,
6521 | .workspace-tabs .markdown-preview-view h4 {
6522 |   margin-top: calc(var(--h4-margin-top) * var(--editor-line-height-small-rem));
6523 |   margin-bottom: calc(
6524 |     var(--h4-margin-bottom) * var(--editor-line-height-small-rem)
6525 |   );
6526 | }
6527 | 
6528 | .cc-pretty-preview .markdown-preview-view h5,
6529 | .markdown-preview-view h5 {
6530 |   color: var(--h5-color);
6531 |   font-size: var(--h5-size) !important;
6532 |   line-height: var(--h5-line-height);
6533 |   margin-top: calc(var(--h5-margin-top) * var(--editor-line-height-rem));
6534 |   margin-bottom: calc(var(--h5-margin-bottom) * var(--editor-line-height-rem));
6535 |   font-weight: var(--h5-weight);
6536 |   font-style: var(--h5-style);
6537 | }
6538 | 
6539 | .popover .markdown-embed .markdown-preview-view h5,
6540 | .cc-pretty-preview .workspace-tabs .markdown-preview-view h5,
6541 | .workspace-tabs .markdown-preview-view h5 {
6542 |   margin-top: calc(var(--h5-margin-top) * var(--editor-line-height-small-rem));
6543 |   margin-bottom: calc(
6544 |     var(--h5-margin-bottom) * var(--editor-line-height-small-rem)
6545 |   );
6546 | }
6547 | 
6548 | .cc-pretty-preview .markdown-preview-view h6,
6549 | .markdown-preview-view h6 {
6550 |   color: var(--h6-color);
6551 |   font-size: var(--h6-size) !important;
6552 |   line-height: var(--h6-line-height);
6553 |   margin-top: calc(var(--h6-margin-top) * var(--editor-line-height-rem));
6554 |   margin-bottom: calc(var(--h6-margin-bottom) * var(--editor-line-height-rem));
6555 |   font-weight: var(--h6-weight);
6556 |   font-style: var(--h6-style);
6557 |   color: var(--text-normal);
6558 | }
6559 | 
6560 | .popover .markdown-embed .markdown-preview-view h6,
6561 | .cc-pretty-preview .workspace-tabs .markdown-preview-view h6,
6562 | .workspace-tabs .markdown-preview-view h6 {
6563 |   margin-top: calc(var(--h6-margin-top) * var(--editor-line-height-small-rem));
6564 |   margin-bottom: calc(
6565 |     var(--h6-margin-bottom) * var(--editor-line-height-small-rem)
6566 |   );
6567 | }
6568 | 
6569 | .empty-state-title,
6570 | .cm-s-obsidian .HyperMD-header.HyperMD-header-1 {
6571 |   color: var(--h1-color);
6572 |   font-size: var(--h1-size) !important;
6573 |   font-weight: var(--h1-weight) !important;
6574 |   font-style: var(--h1-style);
6575 |   line-height: var(--h1-line-height) !important;
6576 | }
6577 | 
6578 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header .cm-formatting-header-1:not(:only-child) {
6579 |   line-height: calc(var(--h1-size) * 1.8) !important;
6580 | }
6581 | 
6582 | .cm-s-obsidian .HyperMD-header.HyperMD-header-2 {
6583 |   color: var(--h2-color);
6584 |   font-size: var(--h2-size) !important;
6585 |   font-weight: var(--h2-weight) !important;
6586 |   font-style: var(--h2-style);
6587 |   line-height: var(--h2-line-height) !important;
6588 | }
6589 | 
6590 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header .cm-formatting-header-2:not(:only-child) {
6591 |   line-height: calc(var(--h2-size) * 1.8) !important;
6592 | }
6593 | 
6594 | .cm-s-obsidian .HyperMD-header.HyperMD-header-3 {
6595 |   color: var(--h3-color);
6596 |   font-size: var(--h3-size) !important;
6597 |   font-weight: var(--h3-weight) !important;
6598 |   font-style: var(--h3-style);
6599 |   line-height: var(--h3-line-height) !important;
6600 | }
6601 | 
6602 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header .cm-formatting-header-3:not(:only-child) {
6603 |   line-height: calc(var(--h3-size) * 1.8) !important;
6604 | }
6605 | 
6606 | .cm-s-obsidian .HyperMD-header.HyperMD-header-4 {
6607 |   color: var(--h4-color);
6608 |   font-variant: unset;
6609 |   text-transform: unset;
6610 |   letter-spacing: unset;
6611 |   font-size: var(--h4-size) !important;
6612 |   font-weight: var(--h4-weight) !important;
6613 |   font-style: var(--h4-style);
6614 |   line-height: var(--h4-line-height) !important;
6615 | }
6616 | 
6617 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header .cm-formatting-header-4:not(:only-child) {
6618 |   line-height: calc(var(--h4-size) * 1.8) !important;
6619 | }
6620 | 
6621 | .cm-s-obsidian .HyperMD-header.HyperMD-header-5 {
6622 |   color: var(--h5-color);
6623 |   font-variant: unset;
6624 |   text-transform: unset;
6625 |   letter-spacing: unset;
6626 |   font-size: var(--h5-size) !important;
6627 |   font-weight: var(--h5-weight) !important;
6628 |   font-style: var(--h5-style);
6629 |   line-height: var(--h5-line-height) !important;
6630 | }
6631 | 
6632 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header .cm-formatting-header-5:not(:only-child) {
6633 |   line-height: calc(var(--h5-size) * 1.8) !important;
6634 | }
6635 | 
6636 | .cm-s-obsidian .HyperMD-header.HyperMD-header-6 {
6637 |   font-variant: unset;
6638 |   text-transform: unset;
6639 |   letter-spacing: unset;
6640 |   color: var(--h6-color);
6641 |   font-size: var(--h6-size) !important;
6642 |   font-weight: var(--h6-weight) !important;
6643 |   font-style: var(--h6-style);
6644 |   line-height: var(--h6-line-height) !important;
6645 | }
6646 | 
6647 | .cc-editor-heading-hash .cm-s-obsidian .HyperMD-header .cm-formatting-header-6:not(:only-child) {
6648 |   line-height: calc(var(--h6-size) * 1.8) !important;
6649 | }
6650 | 
6651 | .cm-s-obsidian .cm-header-1,
6652 | .cm-s-obsidian .cm-header-2,
6653 | .cm-s-obsidian .cm-header-3,
6654 | .cm-s-obsidian .cm-header-4,
6655 | .cm-s-obsidian .cm-header-5,
6656 | .cm-s-obsidian .cm-header-6 {
6657 |   color: inherit;
6658 |   font-size: inherit;
6659 |   font-weight: inherit;
6660 |   font-style: inherit;
6661 |   line-height: inherit;
6662 | }
6663 | 
6664 | /* Embedded note titles */
6665 | 
6666 | .embedded-note-titles .markdown-preview-sizer {
6667 |   padding-top: 0rem;
6668 | }
6669 | 
6670 | html .embedded-note-titles .CodeMirror-lines {
6671 |   padding-top: 0;
6672 | }
6673 | 
6674 | .embedded-note-titles .markdown-preview-view:not(.community-plugin-readme) > h1,
6675 | .embedded-note-titles .CodeMirror-scroll > h1 {
6676 |   color: var(--h1-color);
6677 |   padding: 3.6rem 0 var(--editor-line-height-rem);
6678 |   margin: 0;
6679 |   font-family: var(--text-preview);
6680 |   font-weight: var(--h1-weight);
6681 |   font-size: var(--h1-size);
6682 |   line-height: var(--h1-line-height);
6683 | }
6684 | 
6685 | .embedded-note-titles .CodeMirror-scroll > h1 {
6686 |   position: absolute;
6687 |   width: calc(100% - 7rem);
6688 |   font-family: var(--text-editor);
6689 | }
6690 | 
6691 | .embedded-note-titles.plugin-sliding-panes-rotate-header
6692 |   .markdown-preview-view
6693 |   > h1,
6694 | .embedded-note-titles.plugin-sliding-panes-rotate-header
6695 |   .CodeMirror-scroll
6696 |   > h1 {
6697 |   padding: 5rem 0 var(--editor-line-height-rem);
6698 | }
6699 | 
6700 | .embedded-note-titles
6701 |   .markdown-preview-view:not(.community-plugin-readme)
6702 |   > h1 {
6703 |   padding-left: 3.5rem !important;
6704 |   padding-right: 3.5rem !important;
6705 | }
6706 | 
6707 | .embedded-note-titles .is-readable-line-width.markdown-preview-view > h1 {
6708 |   margin: 0 auto;
6709 |   width: var(--line-width) !important;
6710 |   max-width: var(--max-width) !important;
6711 | }
6712 | 
6713 | .embedded-note-titles.plugin-sliding-panes-rotate-header
6714 |   .markdown-preview-view
6715 |   > h1 {
6716 |   padding-left: var(--header-width);
6717 |   padding-right: calc(var(--header-width) * 2);
6718 | }
6719 | 
6720 | .community-plugin-readme.markdown-preview-view h1:first-child,
6721 | .community-plugin-readme.markdown-preview-view h2:first-child,
6722 | .community-plugin-readme.markdown-preview-view h3:first-child,
6723 | .community-plugin-readme.markdown-preview-view h4:first-child,
6724 | .community-plugin-readme.markdown-preview-view h5:first-child,
6725 | .community-plugin-readme.markdown-preview-view h6:first-child,
6726 | .markdown-preview-pusher + div > h1,
6727 | .markdown-preview-pusher + div > h2,
6728 | .markdown-preview-pusher + div > h3,
6729 | .markdown-preview-pusher + div > h4,
6730 | .markdown-preview-pusher + div > h5,
6731 | .markdown-preview-pusher + div > h6,
6732 | .markdown-preview-pusher + div:empty + div > h1,
6733 | .markdown-preview-pusher + div:empty + div > h2,
6734 | .markdown-preview-pusher + div:empty + div > h3,
6735 | .markdown-preview-pusher + div:empty + div > h4,
6736 | .markdown-preview-pusher + div:empty + div > h5,
6737 | .markdown-preview-pusher + div:empty + div > h6,
6738 | .markdown-preview-pusher + div[data-tag-name="pre"] + div > h1,
6739 | .markdown-preview-pusher + div[data-tag-name="pre"] + div > h2,
6740 | .markdown-preview-pusher + div[data-tag-name="pre"] + div > h3,
6741 | .markdown-preview-pusher + div[data-tag-name="pre"] + div > h4,
6742 | .markdown-preview-pusher + div[data-tag-name="pre"] + div > h5,
6743 | .markdown-preview-pusher + div[data-tag-name="pre"] + div > h6 {
6744 |   margin-top: 0 !important;
6745 | }
6746 | 
6747 | .outliner-plugin-bls-zoom.cc-editor-list-bullets .cm-formatting-list-ul {
6748 |   cursor: pointer;
6749 | }
6750 | 
6751 | .CodeMirror > .outliner-plugin-zoom-header {
6752 |   font-family: var(--text);
6753 |   font-size: 0.8em;
6754 |   padding: 1rem 3.5rem 0;
6755 | }
6756 | 
6757 | .outliner-plugin-zoom-header > .outliner-plugin-zoom-title {
6758 |   text-decoration: none;
6759 |   color: hsla(var(--accent-hsl), 0.8);
6760 | }
6761 | .outliner-plugin-zoom-header > .outliner-plugin-zoom-title:hover {
6762 |   color: hsla(var(--accent-hsl), 1);
6763 | }
6764 | .outliner-plugin-zoom-header > .outliner-plugin-zoom-title + span {
6765 |   color: transparent;
6766 |   font-size: 0;
6767 | }
6768 | .outliner-plugin-zoom-header > .outliner-plugin-zoom-title + span:before {
6769 |   font-size: 0.9rem;
6770 |   width: 0.9rem;
6771 |   height: 0.9rem;
6772 |   color: var(--text-muted);
6773 |   display: inline-flex;
6774 |   align-items: center;
6775 |   justify-content: center;
6776 |   line-height: 1;
6777 |   content: "›";
6778 |   padding: 0 2px;
6779 |   position: relative;
6780 | }
6781 | 
6782 | body .kanban-plugin {
6783 |   background-color: var(--shade-0);
6784 | }
6785 | 
6786 | body .kanban-plugin__search-wrapper {
6787 |   background-color: var(--background-primary);
6788 |   border-bottom: 1px solid var(--shade-plus-darker);
6789 | }
6790 | 
6791 | body button.kanban-plugin__search-cancel-button {
6792 |   color: var(--text-normal);
6793 |   border: 1px solid transparent;
6794 |   border-radius: var(--radius-m);
6795 |   font-weight: 500;
6796 |   background-color: var(--shade-plus-darker);
6797 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
6798 |   padding: 7px;
6799 |   position: relative;
6800 |   top: -1px;
6801 |   margin-left: 6px;
6802 | }
6803 | 
6804 | body button.kanban-plugin__search-cancel-button:hover {
6805 |   background-color: var(--shade-10);
6806 | }
6807 | 
6808 | body .kanban-plugin__markdown-preview-view {
6809 |   font: var(--text);
6810 |   font-size: 14px;
6811 | }
6812 | 
6813 | body .kanban-plugin__lane-title-text > .kanban-plugin__markdown-preview-view.markdown-preview-view {
6814 |   font-weight: 500;
6815 | }
6816 | 
6817 | body .kanban-plugin__lane {
6818 |   background: var(--shade-0);
6819 |   border: none;
6820 |   padding: 2px;
6821 | }
6822 | 
6823 | body .kanban-plugin__lane-header-wrapper {
6824 |   border-bottom: 0;
6825 | }
6826 | 
6827 | body .kanban-plugin__drag-container > .kanban-plugin__lane-wrapper > .kanban-plugin__lane {
6828 |   box-shadow: 0px 15px 25px rgba(0, 0, 0, 0.2),
6829 |     0 0 0 3px hsla(var(--accent-hsl), 0.5);
6830 | }
6831 | 
6832 | body .kanban-plugin__lane-items {
6833 |   background-color: var(--shade-5);
6834 |   box-shadow: 0 0 0 4px var(--shade-5);
6835 |   padding: 0 3px;
6836 |   border-radius: var(--radius-l);
6837 | }
6838 | 
6839 | body.theme-dark .kanban-plugin__lane-items {
6840 |   background-color: var(--shade-3);
6841 | }
6842 | 
6843 | body .kanban-plugin__lane-items:empty {
6844 |   border-radius: 0;
6845 |   padding: 4px;
6846 | }
6847 | 
6848 | body .kanban-plugin__item-form {
6849 |   border-top: none;
6850 |   padding-top: 10px;
6851 | }
6852 | 
6853 | body .kanban-plugin__lane-header-wrapper + .kanban-plugin__item-form {
6854 |   padding-bottom: 12px;
6855 | }
6856 | 
6857 | body .kanban-plugin__lane-header-wrapper + .kanban-plugin__item-form,
6858 | body .kanban-plugin__lane-header-wrapper + .kanban-plugin__item-button-wrapper {
6859 |   padding-top: 0;
6860 |   border-bottom: none;
6861 | }
6862 | 
6863 | body .kanban-plugin__item {
6864 |   border-radius: var(--radius-l);
6865 |   background-color: var(--background-primary);
6866 |   border: none;
6867 |   margin-bottom: 6px;
6868 |   font-size: 14px;
6869 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
6870 | }
6871 | 
6872 | body.theme-dark .kanban-plugin__item-content-wrapper {
6873 |   background-color: var(--shade-10);
6874 | }
6875 | 
6876 | body .kanban-plugin__item:last-child {
6877 |   margin-bottom: 0;
6878 | }
6879 | 
6880 | body .kanban-plugin__drag-container > .kanban-plugin__item-wrapper > .kanban-plugin__item {
6881 |   box-shadow: 0px 15px 25px rgba(0, 0, 0, 0.2),
6882 |     0 0 0 3px hsla(var(--accent-hsl), 0.8);
6883 | }
6884 | 
6885 | body .kanban-plugin__item.is-search-hit {
6886 |   box-shadow: 0px 15px 25px rgba(0, 0, 0, 0.2),
6887 |     0 0 0 2px var(--text-highlight-bg-active);
6888 | }
6889 | 
6890 | body .kanban-plugin__drag-container > .kanban-plugin__item-wrapper .kanban-plugin__item-content-wrapper {
6891 |   background-color: var(--background-primary);
6892 | }
6893 | 
6894 | body .markdown-preview-view.kanban-plugin__item-markdown {
6895 |   font-family: var(--text);
6896 |   line-height: 1.4;
6897 | }
6898 | 
6899 | body .is-dragging .markdown-preview-view.kanban-plugin__item-markdown,
6900 | body
6901 |   .kanban-plugin
6902 |   .kanban-plugin__item
6903 |   .markdown-preview-view.kanban-plugin__item-markdown {
6904 |   font-size: 1em;
6905 | }
6906 | 
6907 | body .is-dragging .markdown-preview-view.kanban-plugin__lane-title-text,
6908 | body .kanban-plugin .markdown-preview-view.kanban-plugin__lane-title-text {
6909 |   font-family: var(--text-normal);
6910 |   font-size: 14px;
6911 |   font-weight: 500;
6912 | }
6913 | 
6914 | body .kanban-plugin__markdown-preview-view .task-list-item-checkbox {
6915 |   margin-left: 4px;
6916 | }
6917 | 
6918 | body .kanban-plugin__item-title {
6919 |   display: flex;
6920 |   flex-direction: column;
6921 |   justify-content: center;
6922 | }
6923 | 
6924 | body .kanban-plugin__item-title-wrapper {
6925 |   padding: 8px 10px;
6926 | }
6927 | 
6928 | body .kanban-plugin__item-metadata:empty {
6929 |   display: none;
6930 | }
6931 | 
6932 | body .kanban-plugin__item-tags .kanban-plugin__item-tag {
6933 |   font-weight: 500;
6934 |   color: var(--text-muted);
6935 |   background-color: var(--shade-plus-darker);
6936 |   padding: 4px 5px !important;
6937 |   border-radius: var(--radius-s);
6938 |   line-height: 1;
6939 | }
6940 | 
6941 | body .kanban-plugin__item-tags .kanban-plugin__item-tag:hover {
6942 |   color: var(--text-accent);
6943 | }
6944 | 
6945 | body .kanban-plugin__item-tags .kanban-plugin__item-tag > span {
6946 |   display: inline-block;
6947 |   margin-right: 1px;
6948 |   color: var(--text-faint);
6949 | }
6950 | 
6951 | body .kanban-plugin__item-tags .kanban-plugin__item-tag:hover > span {
6952 |   color: hsla(var(--accent-hsl), 0.5);
6953 | }
6954 | 
6955 | body .kanban-plugin__item-button-wrapper {
6956 |   border-top: none;
6957 | }
6958 | 
6959 | body .kanban-plugin button {
6960 |   background-color: var(--shade-3);
6961 |   font-weight: 500;
6962 | }
6963 | 
6964 | body .kanban-plugin .kanban-plugin__item-edit-button-wrapper button {
6965 |   background-color: var(--shade-0);
6966 | }
6967 | 
6968 | body .kanban-plugin__lane-setting-wrapper > div:last-child {
6969 |   border-bottom: none;
6970 | }
6971 | 
6972 | body .kanban-plugin__lane-action-wrapper button {
6973 |   box-shadow: none;
6974 | }
6975 | 
6976 | body .kanban-plugin button:hover {
6977 |   color: var(--text-on-accent);
6978 |   background-color: var(--interactive-accent);
6979 | }
6980 | 
6981 | body .kanban-plugin__item button.kanban-plugin__item-edit-button,
6982 | body .kanban-plugin__lane button.kanban-plugin__lane-settings-button {
6983 |   margin-top: -1px;
6984 |   margin-bottom: -1px;
6985 |   font-size: 14px;
6986 | }
6987 | 
6988 | body .kanban-plugin__item button.kanban-plugin__item-edit-button.is-enabled,
6989 | body
6990 |   .kanban-plugin__lane
6991 |   button.kanban-plugin__lane-settings-button.is-enabled {
6992 |   color: var(--text-muted);
6993 | }
6994 | 
6995 | body .kanban-plugin__item button.kanban-plugin__item-edit-button:hover,
6996 | body .kanban-plugin__lane button.kanban-plugin__lane-settings-button:hover {
6997 |   color: var(--text-muted);
6998 |   background-color: var(--shade-plus-darker);
6999 | }
7000 | 
7001 | body .kanban-plugin__checkbox-wrapper {
7002 |   border: none;
7003 | }
7004 | 
7005 | body .kanban-plugin__new-lane-button,
7006 | body .kanban-plugin__new-item-button {
7007 |   font-weight: 500;
7008 |   font-size: 14px;
7009 |   background-color: var(--shade-plus-darker);
7010 |   border: 1px solid transparent;
7011 | }
7012 | 
7013 | body button.kanban-plugin__new-lane-button:hover,
7014 | body button.kanban-plugin__new-item-button:hover {
7015 |   background-color: var(--shade-plus-darker);
7016 |   color: var(--text-muted);
7017 | }
7018 | 
7019 | body button.kanban-plugin__new-lane-button {
7020 |   background-color: var(--shade-0);
7021 |   box-shadow: none;
7022 |   border: none;
7023 |   border-radius: var(--radius-m);
7024 |   width: auto;
7025 | }
7026 | 
7027 | body button.kanban-plugin__new-item-button {
7028 |   background-color: transparent;
7029 | }
7030 | 
7031 | body button.kanban-plugin__confirm-action-button:hover,
7032 | body button.kanban-plugin__item-button-delete:hover,
7033 | body button.kanban-plugin__delete-lane-button:hover {
7034 |   color: var(--text-error);
7035 |   background-color: rgba(var(--background-modifier-error-rgb), 0.2);
7036 | }
7037 | 
7038 | body .kanban-plugin__action-confirm-wrapper button {
7039 |   margin-bottom: 5px;
7040 | }
7041 | 
7042 | body .kanban-plugin__grow-wrap > textarea:focus {
7043 |   border-color: hsla(var(--accent-hsl), 0.5);
7044 | }
7045 | 
7046 | body .kanban-plugin__item-input-wrapper {
7047 |   border-top: none;
7048 | }
7049 | 
7050 | body .kanban-plugin__item-input-wrapper .kanban-plugin__grow-wrap > textarea,
7051 | body .kanban-plugin__item-input-wrapper .kanban-plugin__grow-wrap::after {
7052 |   font-size: 14px;
7053 | }
7054 | 
7055 | body .kanban-plugin__item-content-wrapper .kanban-plugin__grow-wrap > textarea,
7056 | body .kanban-plugin__item-content-wrapper .kanban-plugin__grow-wrap::after,
7057 | body .kanban-plugin__lane-input-wrapper .kanban-plugin__grow-wrap > textarea,
7058 | body .kanban-plugin__lane-input-wrapper .kanban-plugin__grow-wrap::after,
7059 | body .kanban-plugin__lane-title .kanban-plugin__grow-wrap > textarea,
7060 | body .kanban-plugin__lane-title .kanban-plugin__grow-wrap::after {
7061 |   font-size: 14px;
7062 | }
7063 | 
7064 | body button.kanban-plugin__item-action-add,
7065 | body button.kanban-plugin__lane-action-add {
7066 |   background-color: var(--interactive-accent);
7067 | }
7068 | 
7069 | body .kanban-plugin__item-settings-actions button,
7070 | body .kanban-plugin__lane-action-wrapper button,
7071 | body .kanban-plugin__action-confirm-wrapper button,
7072 | body .kanban-plugin__lane-input-actions button,
7073 | body .kanban-plugin__item-input-actions button {
7074 |   font-size: 13px;
7075 | }
7076 | 
7077 | body .kanban-plugin__lane-input-actions button,
7078 | body .kanban-plugin__item-input-actions button {
7079 |   box-shadow: 0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1);
7080 | }
7081 | 
7082 | body .kanban-plugin__lane-grip {
7083 |   margin-left: -5px;
7084 |   margin-right: 4px;
7085 | }
7086 | 
7087 | body .kanban-plugin__autocomplete {
7088 |   font-weight: 500;
7089 |   font-size: 14px;
7090 |   border: none;
7091 | }
7092 | 
7093 | body .kanban-plugin__autocomplete-item-active,
7094 | body .kanban-plugin__autocomplete-item {
7095 |   padding: 4px 8px;
7096 | }
7097 | 
7098 | body .kanban-plugin__autocomplete-item:hover,
7099 | body .kanban-plugin__autocomplete-item-active {
7100 |   border-top: 1px solid transparent;
7101 |   background-color: var(--shade-5);
7102 |   color: var(--text-normal);
7103 | }
7104 | 
7105 | body .kanban-plugin__action-confirm-wrapper {
7106 |   margin: 5px 0;
7107 |   border-radius: var(--radius-l);
7108 |   border-width: 3px;
7109 | }
7110 | 
7111 | body .kanban-plugin__action-confirm-text {
7112 |   font-size: 14px;
7113 |   padding-bottom: 5px;
7114 | }
7115 | 
7116 | body .kanban-plugin__setting-item {
7117 |   background-color: var(--background-primary);
7118 | }
7119 | 
7120 | body .kanban-plugin__icon[data-icon="cross"] {
7121 |   color: var(--text-muted);
7122 | 
7123 | }
7124 | 
7125 | body .kanban-plugin__icon[data-icon="cross"] > svg {
7126 |   width: 1.2em;
7127 |   height: 1.2em;
7128 | }
7129 | 
7130 | body .kanban-plugin__lane-form-wrapper {
7131 |   background-color: var(--background-primary);
7132 | }
7133 | body .lt-predictions-container {
7134 |   font-family: var(--text);
7135 |   font-size: 14px;
7136 |   border: 1px solid var(--shade-10);
7137 | }
7138 | 
7139 | body .lt-buttoncontainer > button {
7140 |   font-size: 14px;
7141 |   font-weight: 500;
7142 |   color: var(--text-normal);
7143 |   padding: 4px 14px;
7144 |   background: var(--background-primary);
7145 |   border: 1px solid rgba(0, 0, 0, 0.12);
7146 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08);
7147 |   border-radius: var(--radius-m);
7148 |   cursor: var(--cursor);
7149 | }
7150 | 
7151 | body.theme-dark .lt-buttoncontainer > button {
7152 |   color: #dfdedf;
7153 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.1),
7154 |     inset 0px 1px 1px rgba(255, 255, 255, 0.3);
7155 |   background-color: var(--shade-20);
7156 | }
7157 | 
7158 | body .lt-ignore-btn {
7159 |   background-color: var(--background-primary);
7160 |   font-size: 13px;
7161 |   font-weight: 500;
7162 |   color: var(--text-muted);
7163 |   transition: 100ms color, 100ms background-color;
7164 | }
7165 | 
7166 | body .lt-ignore-btn:hover {
7167 |   background-color: var(--shade-3);
7168 |   color: var(--text-normal);
7169 | }
7170 | 
7171 | body .lt-ignore-btn svg {
7172 |   width: 1em;
7173 |   height: 1em;
7174 | }
7175 | 
7176 | body .lt-title:not(:empty) {
7177 |   font-weight: 500;
7178 | }
7179 | 
7180 | body .lt-status-bar-btn {
7181 |   margin: -2px 0;
7182 | }
7183 | 
7184 | body .lt-status-bar-btn svg {
7185 |   display: none;
7186 |   width: 14px;
7187 |   height: 14px;
7188 | }
7189 | 
7190 | body .lt-status-bar-btn.lt-loading svg {
7191 |   display: block;
7192 | }
7193 | 
7194 | body .workspace-leaf-content[data-type="dictionary-view"] .searchbox > input {
7195 |   margin: 0;
7196 | }
7197 | 
7198 | body .workspace-leaf-content[data-type="dictionary-view"] .searchbox > button {
7199 |   margin: 0 0 0 5px;
7200 |   padding: 0 10px;
7201 |   flex-shrink: 0;
7202 |   flex-grow: 0;
7203 |   color: var(--text-muted);
7204 |   background: var(--background-primary);
7205 |   border: 1px solid rgba(0, 0, 0, 0.12);
7206 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08);
7207 |   border-radius: var(--radius-m);
7208 | }
7209 | 
7210 | body
7211 |   .workspace-leaf-content[data-type="dictionary-view"]
7212 |   .searchbox
7213 |   > button
7214 |   > .gg-search {
7215 |   margin: 0;
7216 |   display: flex;
7217 |   top: -1px;
7218 |   left: -1px;
7219 | }
7220 | 
7221 | body
7222 |   .workspace-leaf-content[data-type="dictionary-view"]
7223 |   .results
7224 |   > .container {
7225 |   background-color: transparent;
7226 |   padding: 0;
7227 | }
7228 | 
7229 | body .workspace-leaf-content[data-type="dictionary-view"] h3 {
7230 |   font-size: 14px;
7231 |   font-weight: 500;
7232 | }
7233 | 
7234 | body .workspace-leaf-content[data-type="dictionary-view"] .container > .main {
7235 |   background: var(--shade-3);
7236 |   box-shadow: 0px 0.5px 1px 0.5px rgb(0 0 0 / 10%);
7237 | }
7238 | 
7239 | body
7240 |   .workspace-leaf-content[data-type="dictionary-view"]
7241 |   .definition:last-child {
7242 |   padding-bottom: 0;
7243 | }
7244 | 
7245 | body
7246 |   .workspace-leaf-content[data-type="dictionary-view"]
7247 |   details[open]
7248 |   summary
7249 |   ~ audio,
7250 | body
7251 |   .workspace-leaf-content[data-type="dictionary-view"]
7252 |   details[open]
7253 |   summary
7254 |   ~ div.definition {
7255 |   animation: none !important;
7256 | }
7257 | 
7258 | audio,
7259 | audio::-webkit-media-controls-panel {
7260 |   background: var(--background-primary);
7261 | }
7262 | 
7263 | audio {
7264 |   border-radius: 40px;
7265 |   border: 1px solid var(--shade-5);
7266 |   box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.08);
7267 | }
7268 | 
7269 | body .zoom-plugin-header {
7270 |   border-bottom: 1px solid var(--shade-plus-darker);
7271 |   padding: 10px 17px;
7272 |   font-size: 14px;
7273 |   font-family: var(--text);
7274 | }
7275 | 
7276 | body .zoom-plugin-title {
7277 |   text-decoration: none;
7278 | }
7279 | 
7280 | body .zoom-plugin-header > span {
7281 |   color: transparent;
7282 |   font-size: 0;
7283 | }
7284 | 
7285 | body .zoom-plugin-header > span:before {
7286 |   font-size: 0.9rem;
7287 |   width: 0.9rem;
7288 |   height: 0.9rem;
7289 |   color: var(--text-muted);
7290 |   display: inline-flex;
7291 |   align-items: center;
7292 |   justify-content: center;
7293 |   line-height: 1;
7294 |   content: "›";
7295 |   padding: 0 2px;
7296 |   position: relative;
7297 | }
7298 | 
7299 | .sr-deck-counts,
7300 | .tag-pane-tag-count.tree-item-flair[aria-label="Due cards"] {
7301 |     display: inline-block;
7302 |     padding: 2px 6px;
7303 |     line-height: 1;
7304 |     font-size: 16px;
7305 | }
7306 | 
7307 | .sr-modal-content .tag-pane-tag:hover .tag-pane-tag-count {
7308 |     color: #fff;
7309 | }


--------------------------------------------------------------------------------
/docs/.obsidian/workspace:
--------------------------------------------------------------------------------
  1 | {
  2 |   "main": {
  3 |     "id": "f30041f8708f4823",
  4 |     "type": "split",
  5 |     "children": [
  6 |       {
  7 |         "id": "0bafdba9f9fff2bf",
  8 |         "type": "leaf",
  9 |         "state": {
 10 |           "type": "markdown",
 11 |           "state": {
 12 |             "file": "How do I/index.md",
 13 |             "mode": "source",
 14 |             "source": false
 15 |           }
 16 |         }
 17 |       }
 18 |     ],
 19 |     "direction": "vertical"
 20 |   },
 21 |   "left": {
 22 |     "id": "68fed40a14d1db04",
 23 |     "type": "split",
 24 |     "children": [
 25 |       {
 26 |         "id": "1f93ca8903506a11",
 27 |         "type": "tabs",
 28 |         "children": [
 29 |           {
 30 |             "id": "e29aec95c9189e06",
 31 |             "type": "leaf",
 32 |             "state": {
 33 |               "type": "file-explorer",
 34 |               "state": {}
 35 |             }
 36 |           },
 37 |           {
 38 |             "id": "25349378c9fbd0b0",
 39 |             "type": "leaf",
 40 |             "state": {
 41 |               "type": "search",
 42 |               "state": {
 43 |                 "query": "path:\"How to\" -index",
 44 |                 "matchingCase": false,
 45 |                 "explainSearch": false,
 46 |                 "collapseAll": false,
 47 |                 "extraContext": false,
 48 |                 "sortOrder": "alphabetical"
 49 |               }
 50 |             }
 51 |           }
 52 |         ]
 53 |       }
 54 |     ],
 55 |     "direction": "horizontal",
 56 |     "width": 305
 57 |   },
 58 |   "right": {
 59 |     "id": "d3a692963577985f",
 60 |     "type": "split",
 61 |     "children": [
 62 |       {
 63 |         "id": "58c516d69801ee5d",
 64 |         "type": "tabs",
 65 |         "children": [
 66 |           {
 67 |             "id": "2e271509c62e45f0",
 68 |             "type": "leaf",
 69 |             "state": {
 70 |               "type": "backlink",
 71 |               "state": {
 72 |                 "file": "How do I/index.md",
 73 |                 "collapseAll": false,
 74 |                 "extraContext": false,
 75 |                 "sortOrder": "alphabetical",
 76 |                 "showSearch": false,
 77 |                 "searchQuery": "",
 78 |                 "backlinkCollapsed": false,
 79 |                 "unlinkedCollapsed": true
 80 |               }
 81 |             }
 82 |           }
 83 |         ]
 84 |       }
 85 |     ],
 86 |     "direction": "horizontal",
 87 |     "width": 300,
 88 |     "collapsed": true
 89 |   },
 90 |   "active": "0bafdba9f9fff2bf",
 91 |   "lastOpenFiles": [
 92 |     "index.md",
 93 |     "! Documentation board.md",
 94 |     "Settings/index.md",
 95 |     "Settings/__Settings.md",
 96 |     "FAQs/index.md",
 97 |     "FAQs/__FAQs.md",
 98 |     "How do I/index.md",
 99 |     "How do I/__How do I.md",
100 |     "How do I/Install the plugin.md",
101 |     "Settings/Local vs. global settings.md"
102 |   ]
103 | }


--------------------------------------------------------------------------------
/docs/.obsidian/workspace.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "main": {
  3 |     "id": "f30041f8708f4823",
  4 |     "type": "split",
  5 |     "children": [
  6 |       {
  7 |         "id": "baf96944d3d89496",
  8 |         "type": "tabs",
  9 |         "children": [
 10 |           {
 11 |             "id": "0bafdba9f9fff2bf",
 12 |             "type": "leaf",
 13 |             "state": {
 14 |               "type": "markdown",
 15 |               "state": {
 16 |                 "file": "FAQs/Frontmatter limitations & gotchas.md",
 17 |                 "mode": "source",
 18 |                 "source": false
 19 |               }
 20 |             }
 21 |           }
 22 |         ]
 23 |       }
 24 |     ],
 25 |     "direction": "vertical"
 26 |   },
 27 |   "left": {
 28 |     "id": "68fed40a14d1db04",
 29 |     "type": "split",
 30 |     "children": [
 31 |       {
 32 |         "id": "1f93ca8903506a11",
 33 |         "type": "tabs",
 34 |         "children": [
 35 |           {
 36 |             "id": "e29aec95c9189e06",
 37 |             "type": "leaf",
 38 |             "state": {
 39 |               "type": "file-explorer",
 40 |               "state": {
 41 |                 "sortOrder": "alphabetical"
 42 |               }
 43 |             }
 44 |           },
 45 |           {
 46 |             "id": "25349378c9fbd0b0",
 47 |             "type": "leaf",
 48 |             "state": {
 49 |               "type": "search",
 50 |               "state": {
 51 |                 "query": "path:\"How to\" -index",
 52 |                 "matchingCase": false,
 53 |                 "explainSearch": false,
 54 |                 "collapseAll": false,
 55 |                 "extraContext": false,
 56 |                 "sortOrder": "alphabetical"
 57 |               }
 58 |             }
 59 |           },
 60 |           {
 61 |             "id": "9142c3b3597d9932",
 62 |             "type": "leaf",
 63 |             "state": {
 64 |               "type": "bookmarks",
 65 |               "state": {}
 66 |             }
 67 |           }
 68 |         ]
 69 |       }
 70 |     ],
 71 |     "direction": "horizontal",
 72 |     "width": 305
 73 |   },
 74 |   "right": {
 75 |     "id": "d3a692963577985f",
 76 |     "type": "split",
 77 |     "children": [
 78 |       {
 79 |         "id": "58c516d69801ee5d",
 80 |         "type": "tabs",
 81 |         "children": [
 82 |           {
 83 |             "id": "2e271509c62e45f0",
 84 |             "type": "leaf",
 85 |             "state": {
 86 |               "type": "backlink",
 87 |               "state": {
 88 |                 "file": "FAQs/Frontmatter limitations & gotchas.md",
 89 |                 "collapseAll": false,
 90 |                 "extraContext": false,
 91 |                 "sortOrder": "alphabetical",
 92 |                 "showSearch": false,
 93 |                 "searchQuery": "",
 94 |                 "backlinkCollapsed": false,
 95 |                 "unlinkedCollapsed": true
 96 |               }
 97 |             }
 98 |           }
 99 |         ]
100 |       }
101 |     ],
102 |     "direction": "horizontal",
103 |     "width": 300,
104 |     "collapsed": true
105 |   },
106 |   "left-ribbon": {
107 |     "hiddenItems": {
108 |       "publish:Publish changes...": false,
109 |       "switcher:Open quick switcher": false,
110 |       "graph:Open graph view": false,
111 |       "canvas:Create new canvas": false,
112 |       "templates:Insert template": false,
113 |       "command-palette:Open command palette": false,
114 |       "markdown-importer:Open format converter": false
115 |     }
116 |   },
117 |   "active": "0bafdba9f9fff2bf",
118 |   "lastOpenFiles": [
119 |     "Settings/Display card checkbox.md",
120 |     "FAQs/Themes with enhanced Kanban support.md",
121 |     "How do I/View a Kanban's archive.md",
122 |     "How do I/Set a WIP Limit.md",
123 |     "How do I/Search a Kanban board.md",
124 |     "How do I/Install the plugin.md",
125 |     "How do I/Create notes from cards.md",
126 |     "How do I/Create a Kanban board.md",
127 |     "How do I/Add an image to a card.md",
128 |     "How do I/Add a time to a card.md",
129 |     "How do I/Add a date to a card.md",
130 |     "Settings/Time trigger.md",
131 |     "Settings/Time format.md",
132 |     "Settings/Show relative date.md",
133 |     "Settings/Prepend append new cards.md",
134 |     "Settings/Note template.md",
135 |     "Settings/Note folder.md",
136 |     "Settings/New line trigger.md",
137 |     "Settings/Maximum number of archived cards.md",
138 |     "Settings/Local vs. global settings.md",
139 |     "Settings/Linked page metadata.md",
140 |     "Settings/Link dates to daily notes.md",
141 |     "Settings/Lane width.md",
142 |     "Settings/Hide tags in card titles.md",
143 |     "Settings/Hide dates in card titles.md",
144 |     "Settings/Hide card display tags.md"
145 |   ]
146 | }


--------------------------------------------------------------------------------
/docs/Assets/Base Template.md:
--------------------------------------------------------------------------------
1 | ## {{title}}
2 | 


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 12.22.08 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 12.22.08 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 12.22.57 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 12.22.57 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 12.23.35 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 12.23.35 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 12.29.20 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 12.29.20 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 12.33.39 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 12.33.39 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 3.32.18 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 3.32.18 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 3.35.03 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 3.35.03 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 3.35.17 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 3.35.17 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 3.46.53 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 3.46.53 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 3.48.15 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 3.48.15 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 4.00.18 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 4.00.18 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 4.02.49 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 4.02.49 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 4.04.40 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 4.04.40 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-13 at 4.04.59 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-13 at 4.04.59 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 11.44.32 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 11.44.32 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 11.49.10 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 11.49.10 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 11.55.06 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 11.55.06 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 11.56.01 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 11.56.01 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 12.01.07 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 12.01.07 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 12.03.06 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 12.03.06 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 12.08.25 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 12.08.25 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 12.09.20 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 12.09.20 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 12.12.29 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 12.12.29 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-14 at 12.13.07 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-14 at 12.13.07 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 5.46.58 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 5.46.58 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 5.47.40 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 5.47.40 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 5.48.16 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 5.48.16 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 5.48.37 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 5.48.37 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 5.51.36 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 5.51.36 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 5.54.15 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 5.54.15 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 6.04.57 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 6.04.57 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 6.05.21 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 6.05.21 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 6.53.47 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 6.53.47 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 6.54.29 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 6.54.29 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 6.59.29 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 6.59.29 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 7.04.26 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 7.04.26 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 7.06.15 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 7.06.15 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 7.06.48 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 7.06.48 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 7.08.08 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 7.08.08 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 7.09.08 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 7.09.08 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.14.52 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.14.52 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.15.11 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.15.11 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.15.31 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.15.31 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.21.37 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.21.37 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.23.04 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.23.04 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.23.46 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.23.46 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.25.31 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.25.31 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-15 at 9.26.41 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-15 at 9.26.41 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 1.02.48 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 1.02.48 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 1.04.58 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 1.04.58 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 1.06.02 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 1.06.02 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 1.06.27 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 1.06.27 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 1.10.38 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 1.10.38 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 10.09.02 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 10.09.02 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 10.09.50 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 10.09.50 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 10.10.15 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 10.10.15 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 10.10.47 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 10.10.47 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 12.58.22 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 12.58.22 PM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 9.15.04 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 9.15.04 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot 2021-09-16 at 9.15.47 AM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot 2021-09-16 at 9.15.47 AM.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot How-to-add-image-to-card.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot How-to-add-image-to-card.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot How-to-add-metadata-to-card.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot How-to-add-metadata-to-card.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot WIP-Limit-exceeded.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot WIP-Limit-exceeded.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot WIP-Limit.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot WIP-Limit.png


--------------------------------------------------------------------------------
/docs/Assets/Screen Shot appending-archive-datetime.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/mgmeyers/obsidian-kanban/8501981a1afacb4c8fc03ec60604aa5eedfbd857/docs/Assets/Screen Shot appending-archive-datetime.png


--------------------------------------------------------------------------------
/docs/FAQs/Frontmatter limitations & gotchas.md:
--------------------------------------------------------------------------------
 1 | 
 2 | There are some quirks to be aware of then adding metadata to a [[Linked page metadata|linked note]]. Links and image embeds must be wrapped in quotes, for example, to show up as [[Linked page metadata]]. In general, if you have trouble getting frontmatter fields to display in a card, try wrapping it in quotes.
 3 | 
 4 | See: [[Add an image to a card]]
 5 | 
 6 | ```yaml
 7 | 
 8 | ---
 9 | 
10 | delivery-notes: "![[LinkToImage.png]]"
11 | 
12 | ---
13 | 
14 | ```
15 | 


--------------------------------------------------------------------------------
/docs/How do I/Add a date to a card.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Dates can be added to cards in two ways.
 3 | 
 4 | When you type the [[Date trigger]], the date selection calendar will display.
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 9.23.04 PM.png]]
 7 | 
 8 | Alternatively, you can right-click on a card, or click on the three dots menu and select `Add a date`, which will also display the date selection calendar.
 9 | 
10 | ![[Screen Shot 2021-09-15 at 9.23.46 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/How do I/Add a time to a card.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Times can be added to cards in two ways.
 3 | 
 4 | When you type the [[Time trigger]], the time selection dropdown will display.
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 9.25.31 PM.png]]
 7 | 
 8 | Alternatively, cards that already have dates will allow you to add a time using the right click or three dots menu.
 9 | 
10 | ![[Screen Shot 2021-09-15 at 9.26.41 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/How do I/Add an image to a card.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Images can be added to cards in two ways.
 3 | 
 4 | ### Embedding images
 5 | 
 6 | Images can be embedded into Kanban cards just like you would in any other obsidian note.
 7 | 
 8 | ![[Screen Shot 2021-09-16 at 9.15.04 AM.png]]
 9 | 
10 | ![[Screen Shot 2021-09-16 at 9.15.47 AM.png]]
11 | 
12 | ### Displaying images from metadata
13 | 
14 | To add an image to a card, first enable a [[Linked page metadata]] key/value, with the key set to the metadata field containing an image. Toggle `Field contains markdown`.
15 | 
16 | ![[Screen Shot How-to-add-metadata-to-card.png]]
17 |   
18 | #### Adding image to frontmatter
19 | 
20 | If the [[Linked page metadata]] key you're pulling in is in the linked page's frontmatter, **image embeds must be wrapped in quotes, or contain other text before the embed**. This is a quirk of [YAML](https://help.obsidian.md/Advanced+topics/YAML+front+matter). (See also: [[Frontmatter limitations & gotchas]])
21 |   
22 | ```yaml
23 | 
24 | ---
25 | 
26 | delivery-notes: "![[LinkToImage.png]]"
27 | 
28 | ---
29 | 
30 | ```
31 | 
32 | ![[Screen Shot How-to-add-image-to-card.png]]
33 | 
34 | #### Adding image to inline metadata
35 | 
36 | Images can also be added to inline metadata if the [Data View](https://github.com/blacksmithgu/obsidian-dataview) plugin is active. When adding an image via inline metadata, quotes are not required.
37 | 
38 | ```markdown
39 | Lorem ipsum dolor sit amet, consectetur adipiscing elit.
40 | 
41 | delivery-notes:: ![[LinkToImage.png]]
42 | 
43 | Pellentesque egestas, nibh et pellentesque ullamcorper, lorem mauris pellentesque tellus, a cursus nunc metus at velit.
44 | 
45 | ```
46 | 


--------------------------------------------------------------------------------
/docs/How do I/Create a Kanban board.md:
--------------------------------------------------------------------------------
 1 | 
 2 | To create a new Kanban board, you can:
 3 | 
 4 | Right-click on a folder and select `New Kanban board`.
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 9.14.52 PM.png]]
 7 | 
 8 | Execute the command palette command, `Kanban: Create new board`, which will create a board at the root of your vault.
 9 | 
10 | ![[Screen Shot 2021-09-15 at 9.15.11 PM.png]]
11 | 
12 | Or convert an empty file into a Kanban board with the command palette command, `Kanban: Convert empty note to Kanban`.
13 | 
14 | ![[Screen Shot 2021-09-15 at 9.15.31 PM.png]]
15 | 


--------------------------------------------------------------------------------
/docs/How do I/Create notes from cards.md:
--------------------------------------------------------------------------------
1 | 
2 | Notes can be created from Kanban cards by right clicking on a card, or clicking on the three dots menu on the right side of a card, and selecting `New note from card`.
3 | 
4 | ![[Screen Shot 2021-09-13 at 12.29.20 PM.png|400]]
5 | 
6 | This will create a new note in the [[Note folder]] using the [[Note template]] with the card's content as the title. The card will then link to the new note.
7 | 
8 | ![[Screen Shot 2021-09-13 at 12.33.39 PM.png|250]]
9 | 


--------------------------------------------------------------------------------
/docs/How do I/Install the plugin.md:
--------------------------------------------------------------------------------
1 | 
2 | The Kanban plugin can be found in [Obsidian's](https://obsidian.md/) community plugins library, `Settings > Community Plugins > Browse`. Once installed, the plugin must also be activated. See here for [[Create a Kanban board|instructions on creating Kanban boards]].
3 | 
4 | ![[Screen Shot 2021-09-16 at 1.02.48 PM.png]]
5 | 


--------------------------------------------------------------------------------
/docs/How do I/Search a Kanban board.md:
--------------------------------------------------------------------------------
1 | 
2 | You can search a Kanban board like you would any other file in Obsidian. By default, the hotkey is  `Command` or `CTRL` + `F`.
3 | 
4 | ![[Screen Shot 2021-09-15 at 9.21.37 PM.png]]
5 | 


--------------------------------------------------------------------------------
/docs/How do I/Set a WIP Limit.md:
--------------------------------------------------------------------------------
 1 | 
 2 | To set a WIP (work in progress) limit for a lane, specify it in parentheses after the lane title
 3 | when creating or renaming it. For example, to set the limit cards amount in the existing "In Progress"
 4 | lane to 5, rename it to `In Progress (5)`.
 5 | 
 6 | This limit will be displayed next to the item counter of the lane:
 7 | 
 8 | ![[Screen Shot WIP-Limit.png]]
 9 | 
10 | Once the number of cards exceeds the limit, the counter text will become bold:
11 | 
12 | ![[Screen Shot WIP-Limit-exceeded.png]]
13 | 
14 | To update the WIP limit, simply rename the lane specifying the new value.
15 | 


--------------------------------------------------------------------------------
/docs/How do I/View a Kanban's archive.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Currently, a Kanban's archive can only be viewed by viewing the board as markdown.
 3 | 
 4 | ![[Screen Shot 2021-09-13 at 4.04.40 PM.png]]
 5 | 
 6 | At the bottom, you will see the board's archive (if it has one).
 7 | 
 8 | ![[Screen Shot 2021-09-13 at 4.04.59 PM.png]]
 9 | 
10 | To return to Kanban view, press `Ctrl + p`, search for "Kanban: Toggle between Kanban and markdown mode" and run it with `Enter`.
11 | 


--------------------------------------------------------------------------------
/docs/Obsidian Kanban Plugin.md:
--------------------------------------------------------------------------------
 1 | Create markdown-backed Kanban boards in [Obsidian](https://obsidian.md/)
 2 | 
 3 | - [Bugs, Issues, & Feature Requests](https://github.com/mgmeyers/obsidian-kanban/issues)
 4 | - [Development Roadmap](https://github.com/mgmeyers/obsidian-kanban/projects/1)
 5 | 
 6 | ![[Screen Shot 2021-09-16 at 12.58.22 PM.png]]
 7 | 
 8 | ![[Screen Shot 2021-09-16 at 1.10.38 PM.png]]
 9 | 
10 | ## Support
11 | 
12 | If you find this plugin useful and would like to support its development, you can sponsor [me](https://github.com/mgmeyers) on Github, or buy me a coffee.
13 | 
14 | [![GitHub Sponsors](https://img.shields.io/github/sponsors/mgmeyers?label=Sponsor&logo=GitHub%20Sponsors&style=for-the-badge)](https://github.com/sponsors/mgmeyers)
15 | 
16 | <a href="https://www.buymeacoffee.com/mgme"><img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=mgme&button_colour=5F7FFF&font_colour=ffffff&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00"></a>
17 | 


--------------------------------------------------------------------------------
/docs/Settings/Add date and time to archived cards.md:
--------------------------------------------------------------------------------
1 | When active, a time stamp will be added to cards when they are archived. By default, this is placed at the beginning of the card, but it can be placed at the end using the [[Add archive date/time after card title]] setting. The timestamp can be separated from the card's content using the [[Archive date time separator]] setting. The date format can be controlled with the [[Archive date time format]] setting.
2 | 
3 | ![[Screen Shot 2021-09-15 at 7.04.26 PM.png]]
4 | 


--------------------------------------------------------------------------------
/docs/Settings/Archive date time format.md:
--------------------------------------------------------------------------------
1 | 
2 | This will set the format of the [[Add date and time to archived cards|archive timestamp]]. Available formatting options can be found [here](https://momentjs.com/docs/#/displaying/format/)
3 | 
4 | ![[Screen Shot 2021-09-15 at 7.08.08 PM.png]]
5 | 
6 | ![[Screen Shot 2021-09-15 at 7.09.08 PM.png]]
7 | 


--------------------------------------------------------------------------------
/docs/Settings/Archive date time position.md:
--------------------------------------------------------------------------------
1 | 
2 | This toggle controls the position of the [[Add date and time to archived cards|archive timestamp]]. When enabled, the timestamp will be appended after the card title:
3 | 
4 | ![[Screen Shot appending-archive-datetime.png]]
5 | 


--------------------------------------------------------------------------------
/docs/Settings/Archive date time separator.md:
--------------------------------------------------------------------------------
 1 | 
 2 | This will be used to separate the [[Add date and time to archived cards|archive timestamp]] from a card's content.
 3 | 
 4 | Setting the separator:
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 7.06.15 PM.png]]
 7 | 
 8 | Resulting archived card:
 9 | 
10 | ![[Screen Shot 2021-09-15 at 7.06.48 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Board Header Buttons.md:
--------------------------------------------------------------------------------
 1 | 
 2 | These settings allow hiding buttons from a Kanban board's header.
 3 | 
 4 | Default:
 5 | 
 6 | ![[Screen Shot 2021-09-14 at 11.55.06 AM.png]]
 7 | 
 8 | With the "Add a list" button hidden:
 9 | 
10 | ![[Screen Shot 2021-09-14 at 11.56.01 AM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Date display format.md:
--------------------------------------------------------------------------------
 1 | 
 2 | The date display format is similar to the [[Date format]] except that it controls the format of the date shown at the bottom of a card. This date can be hidden using the [[Hide card display dates]] setting. Available formatting options can be found [here](https://momentjs.com/docs/#/displaying/format/)
 3 | 
 4 | Setting the date display format:
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 5.46.58 PM.png]]
 7 | 
 8 | Creating a card with a date in the current [[Date format]]:
 9 | 
10 | ![[Screen Shot 2021-09-15 at 5.48.37 PM.png]]
11 | 
12 | By default, the date is hidden from the card text (see: [[Hide dates in card titles]]) and displayed using the date display format below:
13 | 
14 | ![[Screen Shot 2021-09-15 at 5.48.16 PM.png]]
15 | 


--------------------------------------------------------------------------------
/docs/Settings/Date format.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Allows specifying the output of the [[Date trigger|calendar popup]]. Available formatting options can be found [here](https://momentjs.com/docs/#/displaying/format/)
 3 | 
 4 | `YYYY-MM-DD`:
 5 | 
 6 | ![[Screen Shot 2021-09-14 at 12.08.25 PM.png]]
 7 | 
 8 | `ddd, MMM Do, YYYY`:
 9 | 
10 | ![[Screen Shot 2021-09-14 at 12.09.20 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Date trigger.md:
--------------------------------------------------------------------------------
1 | 
2 | When creating or editing a card, this character—`@` by default—or sequence of characters will trigger the calendar popup.
3 | 
4 | ![[Screen Shot 2021-09-14 at 12.01.07 PM.png]]
5 | 


--------------------------------------------------------------------------------
/docs/Settings/Display card checkbox.md:
--------------------------------------------------------------------------------
 1 | 
 2 | This setting enables or disables displaying checkboxes on cards. `Command` or `CTRL` clicking on the checkbox will [[View a Kanban's archive|archive]] the card.
 3 | 
 4 | No checkbox (default):
 5 | 
 6 | ![[Screen Shot 2021-09-13 at 4.02.49 PM.png]]
 7 | 
 8 | With checkbox:
 9 | 
10 | ![[Screen Shot 2021-09-13 at 4.00.18 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Hide card display dates.md:
--------------------------------------------------------------------------------
 1 | 
 2 | This setting hides display dates (see: [[Date display format]]). This setting is designed to be used in conjunction with [[Hide dates in card titles]].
 3 | 
 4 | Off:
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 5.48.16 PM.png]]
 7 | 
 8 | On:
 9 | 
10 | ![[Screen Shot 2021-09-15 at 5.51.36 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Hide card display tags.md:
--------------------------------------------------------------------------------
 1 | 
 2 | This setting will display any tags within a card's content at the bottom of the card. It can be used in conjunction with [[Hide tags in card titles]] for improved organization and aesthetics.
 3 | 
 4 | Off:
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 6.04.57 PM.png]]
 7 | 
 8 | On:
 9 | 
10 | ![[Screen Shot 2021-09-15 at 6.05.21 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Hide dates in card titles.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Hide dates from the main card text. This setting is designed to be used in conjunction with [[Hide card display dates]]. It can also be used to show links to [[Link dates to daily notes|daily notes]] in the card's text.
 3 | 
 4 | Off:
 5 | 
 6 | ![[Screen Shot 2021-09-15 at 5.54.15 PM.png]]
 7 | 
 8 | On (default):
 9 | 
10 | ![[Screen Shot 2021-09-15 at 5.48.16 PM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Hide tags in card titles.md:
--------------------------------------------------------------------------------
 1 | 
 2 | By default, tags will display in a card's main text. This setting allows you to visually remove tags from this text. Tags still remain, but are not displayed. This setting is meant to be used in conjunction with the [[Hide card display tags]] setting.
 3 | 
 4 | Setting off:
 5 | 
 6 | ![[Screen Shot 2021-09-14 at 11.44.32 AM.png]]
 7 | 
 8 | Setting on:
 9 | 
10 | ![[Screen Shot 2021-09-14 at 11.49.10 AM.png]]
11 | 


--------------------------------------------------------------------------------
/docs/Settings/Lane width.md:
--------------------------------------------------------------------------------
1 | 
2 | This setting controls the width of a Kanban board's columns. By default, the columns are 272 pixels wide.
3 | 
4 | ![[Screen Shot 2021-09-13 at 3.46.53 PM.png]]
5 | 
6 | Changing this setting to 400 will result in:
7 | 
8 | ![[Screen Shot 2021-09-13 at 3.48.15 PM.png]]
9 | 


--------------------------------------------------------------------------------
/docs/Settings/Link dates to daily notes.md:
--------------------------------------------------------------------------------
1 | 
2 | When this setting is active, dates and [[Date display format|display dates]] will link to the corresponding daily note.
3 | 
4 | ![[Screen Shot 2021-09-15 at 6.53.47 PM.png]]
5 | 
6 | ![[Screen Shot 2021-09-15 at 6.54.29 PM.png]]
7 | 


--------------------------------------------------------------------------------
/docs/Settings/Linked page metadata.md:
--------------------------------------------------------------------------------
 1 | 
 2 | This setting allows displaying [frontmatter](https://help.obsidian.md/Advanced+topics/YAML+front+matter) and [Dataview](https://blacksmithgu.github.io/obsidian-dataview/data-annotation/) metadata of the first page linked within a card. Note, there are [[Frontmatter limitations & gotchas]].
 3 | 
 4 | For example, say you have this note in your vault:
 5 | 
 6 | ```markdown
 7 | ---
 8 | demo-field: This is a demo frontmatter field
 9 | ---
10 | 
11 | Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc eu posuere dolor. Proin ut tortor sagittis, auctor est non, varius nibh. Proin varius leo ac convallis dapibus.
12 | 
13 | inline-field:: This is a demo inline Dataview field that **contains markdown**
14 | 
15 | Nullam non efficitur ante. Donec convallis nibh ante, eu auctor felis aliquam id.
16 | ```
17 | 
18 | The metadata keys `demo-field` and `inline-field` can then be added under `Linked Page Metadata`
19 | 
20 | ![[Screen Shot 2021-09-16 at 10.09.02 AM.png]]
21 | 
22 | If the metadata field contains markdown, it must be specified by toggling `Field contains markdown`
23 | 
24 | ![[Screen Shot 2021-09-16 at 10.09.50 AM.png]]
25 | 
26 | ![[Screen Shot 2021-09-16 at 10.10.15 AM.png]]
27 | 
28 | The metadata will then be displayed below the card.
29 | 
30 | ![[Screen Shot 2021-09-16 at 10.10.47 AM.png]]
31 | 


--------------------------------------------------------------------------------
/docs/Settings/Local vs. global settings.md:
--------------------------------------------------------------------------------
 1 | 
 2 | The settings for the Kanban plugin can be set globally, as well as on a per-board basis. Global settings can be found in `Settings > Kanban`.
 3 | 
 4 | ![[Screen Shot 2021-09-16 at 1.04.58 PM.png]]
 5 | 
 6 | Global settings can be overridden on a per-board basis by modifying the board's settings, which can be accessed through the [[Board header buttons]] or the `More options menu`.
 7 | 
 8 | ![[Screen Shot 2021-09-16 at 1.06.02 PM.png]]
 9 | 
10 | ![[Screen Shot 2021-09-16 at 1.06.27 PM.png]]


--------------------------------------------------------------------------------
/docs/Settings/Maximum number of archived cards.md:
--------------------------------------------------------------------------------
1 | 
2 | By default, a Kanban board's [[View a Kanban's archive|archive]] will grow infinitely. Setting the maximum number of archived cards will cap the archive at the specified number. 
3 | 
4 | For example, if `Maximum number of archived cards` is set to `100`, the archive will never contain more than 100 cards. When the archive reaches its maximum, old cards will be deleted as new cards are added.


--------------------------------------------------------------------------------
/docs/Settings/New line trigger.md:
--------------------------------------------------------------------------------
1 | 
2 | By default, `enter` creates a new card, and `shift + enter` creates a new line within a card. This can be changed so that `enter` creates new lines and `shift + enter` creates new cards.


--------------------------------------------------------------------------------
/docs/Settings/Note folder.md:
--------------------------------------------------------------------------------
1 | 
2 | When [[Create notes from cards]], the `Note template` setting determines the folder in which new notes are created.


--------------------------------------------------------------------------------
/docs/Settings/Note template.md:
--------------------------------------------------------------------------------
 1 | 
 2 | When [[Create notes from cards]], new notes will be pre-populated with the specified note template.
 3 | 
 4 | Supported template formats:
 5 | 
 6 | - [Obsidian Templates](https://help.obsidian.md/Plugins/Templates)
 7 | - [Templater](https://silentvoid13.github.io/Templater/)
 8 | 
 9 | 
10 | ### Example
11 | 
12 | With the Obsidian core template plugin active (`Settings > Core plugins > Templates`) create a new note called `Demo Template` in your vault containing:
13 | 
14 | ```
15 | # {{title}}
16 | 
17 | This file was created on {{date}} {{time}}.
18 | ```
19 | 
20 | 
21 | Then select the template in your Kanban board's settings:
22 | 
23 | ![[Screen Shot 2021-09-13 at 3.32.18 PM.png]]
24 | 
25 | ![[Screen Shot 2021-09-13 at 3.35.03 PM.png]]
26 | 
27 | ![[Screen Shot 2021-09-13 at 3.35.17 PM.png]]


--------------------------------------------------------------------------------
/docs/Settings/Prepend append new cards.md:
--------------------------------------------------------------------------------
 1 | 
 2 | This setting changes where new cards are inserted into a list, and also where the `Add a card` button is placed. New cards are appended to the list by default.
 3 | 
 4 | 
 5 | ### Append
 6 | ![[Screen Shot 2021-09-13 at 12.22.08 PM.png]]
 7 | 
 8 | ### Prepend
 9 | ![[Screen Shot 2021-09-13 at 12.22.57 PM.png]]
10 | 
11 | ### Prepend (compact)
12 | ![[Screen Shot 2021-09-13 at 12.23.35 PM.png]]


--------------------------------------------------------------------------------
/docs/Settings/Show relative date.md:
--------------------------------------------------------------------------------
1 | 
2 | When this setting is active, cards will display the number of days between the current date and the date contained in a card. 
3 | 
4 | ![[Screen Shot 2021-09-15 at 6.59.29 PM.png]]


--------------------------------------------------------------------------------
/docs/Settings/Time format.md:
--------------------------------------------------------------------------------
 1 | 
 2 | Allows specifying the output of the [[Time trigger|time selection popup]]. Available formatting options can be found [here](https://momentjs.com/docs/#/displaying/format/)
 3 | 
 4 | `HH:mm`:
 5 | 
 6 | ![[Screen Shot 2021-09-14 at 12.12.29 PM.png]]
 7 | 
 8 | `h:mm a`:
 9 | 
10 | ![[Screen Shot 2021-09-14 at 12.13.07 PM.png]]


--------------------------------------------------------------------------------
/docs/Settings/Time trigger.md:
--------------------------------------------------------------------------------
1 | 
2 | When creating or editing a card, this character or sequence of characters—`@@` by default—will trigger the time selection popup.
3 | 
4 | ![[Screen Shot 2021-09-14 at 12.03.06 PM.png]]


--------------------------------------------------------------------------------
/esbuild.config.mjs:
--------------------------------------------------------------------------------
  1 | import builtins from 'builtin-modules';
  2 | import esbuild from 'esbuild';
  3 | import { lessLoader } from 'esbuild-plugin-less';
  4 | import fs from 'fs';
  5 | import MagicString from 'magic-string';
  6 | import path from 'path';
  7 | import process from 'process';
  8 | 
  9 | const toFunction = (functionOrValue) => {
 10 |   if (typeof functionOrValue === 'function') return functionOrValue;
 11 |   return () => functionOrValue;
 12 | };
 13 | 
 14 | const escape = (str) => str.replace(/[-[\]/{}()*+?.\\^$|]/g, '\\$&');
 15 | 
 16 | const longest = (a, b) => b.length - a.length;
 17 | 
 18 | const mapToFunctions = (options) => {
 19 |   const values = options.values ? Object.assign({}, options.values) : Object.assign({}, options);
 20 |   delete values.delimiters;
 21 |   delete values.include;
 22 |   delete values.exclude;
 23 | 
 24 |   return Object.keys(values).reduce((fns, key) => {
 25 |     const functions = Object.assign({}, fns);
 26 |     functions[key] = toFunction(values[key]);
 27 |     return functions;
 28 |   }, {});
 29 | };
 30 | 
 31 | const generateFilter = (options) => {
 32 |   let include = /.*/;
 33 |   let exclude = null;
 34 |   let hasValidInclude = false;
 35 | 
 36 |   if (options.include) {
 37 |     if (Object.prototype.toString.call(options.include) !== '[object RegExp]') {
 38 |       console.warn(
 39 |         `Options.include must be a RegExp object, but gets an '${typeof options.include}' type.`
 40 |       );
 41 |     } else {
 42 |       hasValidInclude = true;
 43 |       include = options.include;
 44 |     }
 45 |   }
 46 | 
 47 |   if (options.exclude) {
 48 |     if (Object.prototype.toString.call(options.exclude) !== '[object RegExp]') {
 49 |       console.warn(
 50 |         `Options.exclude must be a RegExp object, but gets an '${typeof options.exclude}' type.`
 51 |       );
 52 |     } else if (!hasValidInclude) {
 53 |       // Only if `options.include` not set, take `options.exclude`
 54 |       exclude = options.exclude;
 55 |     }
 56 |   }
 57 | 
 58 |   return { include, exclude };
 59 | };
 60 | 
 61 | const replaceCode = (code, id, pattern, functionValues) => {
 62 |   const magicString = new MagicString(code);
 63 |   let match = null;
 64 | 
 65 |   while ((match = pattern.exec(code))) {
 66 |     const start = match.index;
 67 |     if (code[start - 1] === '.') continue;
 68 |     const end = start + match[0].length;
 69 |     const replacement = String(functionValues[match[1]](id));
 70 |     magicString.overwrite(start, end, replacement);
 71 |   }
 72 |   return magicString.toString();
 73 | };
 74 | 
 75 | // todo: add preventAssignment option & support sourceMap
 76 | const replace = (options = {}) => {
 77 |   const { include, exclude } = generateFilter(options);
 78 |   const functionValues = mapToFunctions(options);
 79 |   const empty = Object.keys(functionValues).length === 0;
 80 |   const keys = Object.keys(functionValues).sort(longest).map(escape);
 81 |   const { delimiters } = options;
 82 |   const pattern = delimiters
 83 |     ? new RegExp(`${escape(delimiters[0])}(${keys.join('|')})${escape(delimiters[1])}`, 'g')
 84 |     : new RegExp(`\\b(${keys.join('|')})\\b`, 'g');
 85 |   return {
 86 |     name: 'replace',
 87 |     setup(build) {
 88 |       build.onLoad({ filter: include }, async (args) => {
 89 |         // if match exclude, skip
 90 |         if (exclude && args.path.match(exclude)) {
 91 |           return;
 92 |         }
 93 |         const source = await fs.promises.readFile(args.path, 'utf8');
 94 |         const contents = empty ? source : replaceCode(source, args.path, pattern, functionValues);
 95 |         return { contents, loader: 'default' };
 96 |       });
 97 |     },
 98 |   };
 99 | };
100 | 
101 | const isProd = process.argv[2] === 'production';
102 | const renamePlugin = {
103 |   name: 'rename-styles',
104 |   setup(build) {
105 |     build.onEnd(() => {
106 |       const { outfile } = build.initialOptions;
107 |       const outcss = outfile.replace(/\.js$/, '.css');
108 |       const fixcss = outfile.replace(/main\.js$/, 'styles.css');
109 |       if (fs.existsSync(outcss)) {
110 |         console.log('Renaming', outcss, 'to', fixcss);
111 |         fs.renameSync(outcss, fixcss);
112 |       }
113 |     });
114 |   },
115 | };
116 | 
117 | const NAME = 'node-modules-polyfills';
118 | const NAMESPACE = NAME;
119 | 
120 | function NodeModulesPolyfillPlugin(options = {}) {
121 |   const { namespace = NAMESPACE, name = NAME } = options;
122 |   if (namespace.endsWith('commonjs')) {
123 |     throw new Error(`namespace ${namespace} must not end with commonjs`);
124 |   }
125 |   // this namespace is needed to make ES modules expose their default export to require: require('assert') will give you import('assert').default
126 |   const commonjsNamespace = namespace + '-commonjs';
127 | 
128 |   return {
129 |     name,
130 |     setup: function setup({ onLoad, onResolve }) {
131 |       // TODO these polyfill module cannot import anything, is that ok?
132 |       async function loader(args) {
133 |         try {
134 |           const isCommonjs = args.namespace.endsWith('commonjs');
135 |           const resolved = args.path === 'buffer' ? path.resolve('./buffer-es6.mjs') : null;
136 |           const contents = (await fs.promises.readFile(resolved)).toString();
137 | 
138 |           let resolveDir = path.dirname(resolved);
139 | 
140 |           if (isCommonjs) {
141 |             return {
142 |               loader: 'js',
143 |               contents: commonJsTemplate({
144 |                 importPath: args.path,
145 |               }),
146 |               resolveDir,
147 |             };
148 |           }
149 | 
150 |           return {
151 |             loader: 'js',
152 |             contents,
153 |             resolveDir,
154 |           };
155 |         } catch (e) {
156 |           console.error('node-modules-polyfill', e);
157 |           return {
158 |             contents: `export {}`,
159 |             loader: 'js',
160 |           };
161 |         }
162 |       }
163 | 
164 |       onLoad({ filter: /.*/, namespace }, loader);
165 |       onLoad({ filter: /.*/, namespace: commonjsNamespace }, loader);
166 | 
167 |       const filter = /buffer/;
168 | 
169 |       async function resolver(args) {
170 |         const ignoreRequire = args.namespace === commonjsNamespace;
171 | 
172 |         if (args.path !== 'buffer') {
173 |           return;
174 |         }
175 | 
176 |         const isCommonjs = !ignoreRequire && args.kind === 'require-call';
177 | 
178 |         return {
179 |           namespace: isCommonjs ? commonjsNamespace : namespace,
180 |           path: args.path,
181 |         };
182 |       }
183 | 
184 |       onResolve({ filter }, resolver);
185 |     },
186 |   };
187 | }
188 | 
189 | function commonJsTemplate({ importPath }) {
190 |   return `
191 | const polyfill = require('${importPath}')
192 | if (polyfill && polyfill.default) {
193 |     module.exports = polyfill.default
194 |     for (let k in polyfill) {
195 |         module.exports[k] = polyfill[k]
196 |     }
197 | } else if (polyfill)  {
198 |     module.exports = polyfill
199 | }
200 | `;
201 | }
202 | 
203 | const context = await esbuild.context({
204 |   entryPoints: ['./src/main.ts', './src/styles.less'],
205 |   bundle: true,
206 |   define: {
207 |     global: 'window',
208 |   },
209 |   plugins: [
210 |     NodeModulesPolyfillPlugin(),
211 |     lessLoader(),
212 |     replace({
213 |       include: /node_modules\/.*/,
214 |       values: {
215 |         setTimeout: 'activeWindow.setTimeout',
216 |         clearTimeout: 'activeWindow.clearTimeout',
217 |         requestAnimationFrame: 'activeWindow.requestAnimationFrame',
218 |         cancelAnimationFrame: 'activeWindow.cancelAnimationFrame',
219 |       },
220 |     }),
221 |   ],
222 |   external: [
223 |     'obsidian',
224 |     'electron',
225 |     '@codemirror/autocomplete',
226 |     '@codemirror/closebrackets',
227 |     '@codemirror/collab',
228 |     '@codemirror/commands',
229 |     '@codemirror/comment',
230 |     '@codemirror/fold',
231 |     '@codemirror/gutter',
232 |     '@codemirror/highlight',
233 |     '@codemirror/history',
234 |     '@codemirror/language',
235 |     '@codemirror/lint',
236 |     '@codemirror/matchbrackets',
237 |     '@codemirror/panel',
238 |     '@codemirror/rangeset',
239 |     '@codemirror/rectangular-selection',
240 |     '@codemirror/search',
241 |     '@codemirror/state',
242 |     '@codemirror/stream-parser',
243 |     '@codemirror/text',
244 |     '@codemirror/tooltip',
245 |     '@codemirror/view',
246 |     'node:*',
247 |     ...builtins,
248 |   ],
249 |   format: 'cjs',
250 |   target: 'es2018',
251 |   logLevel: 'info',
252 |   sourcemap: isProd ? false : 'inline',
253 |   treeShaking: true,
254 |   outdir: './',
255 |   minify: isProd,
256 | });
257 | 
258 | if (isProd) {
259 |   await context.rebuild();
260 |   process.exit(0);
261 | } else {
262 |   await context.watch();
263 | }
264 | 


--------------------------------------------------------------------------------
/manifest.json:
--------------------------------------------------------------------------------
 1 | {
 2 | 	"id": "obsidian-kanban",
 3 | 	"name": "Kanban",
 4 | 	"version": "2.0.51",
 5 | 	"minAppVersion": "1.0.0",
 6 | 	"description": "Create markdown-backed Kanban boards in Obsidian.",
 7 | 	"author": "mgmeyers",
 8 | 	"authorUrl": "https://github.com/mgmeyers/obsidian-kanban",
 9 | 	"helpUrl": "https://publish.obsidian.md/kanban/Obsidian+Kanban+Plugin",
10 | 	"isDesktopOnly": false
11 | }
12 | 


--------------------------------------------------------------------------------
/package.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "name": "obsidian-kanban",
 3 |   "version": "2.0.51",
 4 |   "description": "This is a sample plugin for Obsidian (https://obsidian.md)",
 5 |   "main": "main.js",
 6 |   "scripts": {
 7 |     "typecheck": "tsc --noemit",
 8 |     "dev": "node esbuild.config.mjs",
 9 |     "build": "node esbuild.config.mjs production",
10 |     "lint": "eslint ./src/**/*.{ts,tsx}",
11 |     "lint:fix": "eslint ./src/**/*.{ts,tsx} --fix",
12 |     "prettier": "prettier --write \"./src/**/*.{ts,tsx}\"",
13 |     "clean": "yarn prettier && yarn lint:fix",
14 |     "rlnotes": "git log $(git describe --tags --abbrev=0)..HEAD --oneline > release-notes.md && git add release-notes.md",
15 |     "bump": "node version-bump.mjs && git add package.json manifest.json versions.json && yarn rlnotes",
16 |     "release": "git commit -m $npm_package_version && git tag $npm_package_version && git push && git push --tags"
17 |   },
18 |   "keywords": [],
19 |   "author": "",
20 |   "license": "MIT",
21 |   "devDependencies": {
22 |     "@codemirror/commands": "^6.0.0",
23 |     "@codemirror/state": "^6.0.0",
24 |     "@codemirror/view": "^6.0.0",
25 |     "@trivago/prettier-plugin-sort-imports": "^4.3.0",
26 |     "@types/box-intersect": "^1.0.0",
27 |     "@types/mark.js": "^8.11.5",
28 |     "@types/node": "^14.14.37",
29 |     "@types/raf-schd": "^4.0.1",
30 |     "@typescript-eslint/eslint-plugin": "^5.8.1",
31 |     "@typescript-eslint/parser": "^5.8.1",
32 |     "builtin-modules": "^3.3.0",
33 |     "esbuild": "^0.19.11",
34 |     "esbuild-plugin-less": "^1.3.1",
35 |     "eslint": "^8.56.0",
36 |     "eslint-plugin-react": "^7.33.2",
37 |     "magic-string": "^0.30.10",
38 |     "obsidian": "^1.5.7-1",
39 |     "obsidian-dataview": "^0.5.66",
40 |     "obsidian-plugin-cli": "^0.9.0",
41 |     "prettier": "^3.1.1",
42 |     "replace": "^1.2.2",
43 |     "tslib": "^2.6.2",
44 |     "typescript": "^5.3.3"
45 |   },
46 |   "dependencies": {
47 |     "@tanstack/match-sorter-utils": "^8.15.1",
48 |     "@tanstack/react-table": "^8.11.2",
49 |     "animated-scroll-to": "^2.2.0",
50 |     "box-intersect": "^1.0.2",
51 |     "choices.js": "9.0.1",
52 |     "classcat": "^5.0.3",
53 |     "colord": "^2.9.3",
54 |     "deepmerge": "^4.2.2",
55 |     "eventemitter3": "^5.0.1",
56 |     "fast-json-patch": "^3.1.0",
57 |     "file-selector": "^0.2.4",
58 |     "immutability-helper": "^3.1.1",
59 |     "immutable-json-patch": "^1.1.2",
60 |     "is-plain-object": "^5.0.0",
61 |     "mark.js": "^8.11.1",
62 |     "mdast": "^3.0.0",
63 |     "mdast-util-from-markdown": "^1.0.2",
64 |     "mdast-util-frontmatter": "^1.0.0",
65 |     "mdast-util-to-markdown": "^1.2.6",
66 |     "mdast-util-to-string": "^3.1.0",
67 |     "micromark-util-character": "^1.1.0",
68 |     "micromark-util-types": "^1.0.1",
69 |     "monkey-around": "^2.1.0",
70 |     "obsidian-daily-notes-interface": "^0.9.4",
71 |     "preact": "^10.8.2",
72 |     "react": "npm:@preact/compat",
73 |     "react-colorful": "^5.6.1",
74 |     "react-cool-onclickoutside": "^1.6.1",
75 |     "react-dom": "npm:@preact/compat",
76 |     "react-fast-compare": "^3.2.2",
77 |     "rrule": "^2.8.1",
78 |     "unist-util-visit": "^4.1.0"
79 |   },
80 |   "importSort": {
81 |     ".js, .ts, .tsx": {
82 |       "style": "module-alias",
83 |       "options": {
84 |         "alias": [
85 |           "src"
86 |         ]
87 |       }
88 |     }
89 |   }
90 | }
91 | 


--------------------------------------------------------------------------------
/preact-shim.js:
--------------------------------------------------------------------------------
1 | export { h, Fragment } from 'preact';
2 | 


--------------------------------------------------------------------------------
/prettier.config.cjs:
--------------------------------------------------------------------------------
 1 | /* eslint-disable no-undef */
 2 | module.exports = {
 3 |   arrowParens: 'always',
 4 |   bracketSpacing: true,
 5 |   endOfLine: 'lf',
 6 |   htmlWhitespaceSensitivity: 'css',
 7 |   bracketSameLine: false,
 8 |   jsxSingleQuote: false,
 9 |   printWidth: 100,
10 |   proseWrap: 'preserve',
11 |   quoteProps: 'as-needed',
12 |   semi: true,
13 |   singleQuote: true,
14 |   tabWidth: 2,
15 |   trailingComma: 'es5',
16 |   useTabs: false,
17 |   importOrder: ['^[./]'],
18 |   importOrderSeparation: true,
19 |   importOrderSortSpecifiers: true,
20 |   plugins: ['@trivago/prettier-plugin-sort-imports'],
21 | };
22 | 


--------------------------------------------------------------------------------
/release-notes.md:
--------------------------------------------------------------------------------
1 | 10e8f35 Fix #964; Slow/erratic edit behavior when main window isn't visible
2 | fffc03b Fix #972; Updating date file metadata doesn't update card
3 | fa58d49 Fix #971; Duplicate block IDs when copying link to card
4 | 


--------------------------------------------------------------------------------
/src/DragDropApp.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import update from 'immutability-helper';
  3 | import { JSX, createPortal, memo, useCallback, useMemo } from 'preact/compat';
  4 | 
  5 | import { KanbanView } from './KanbanView';
  6 | import { DraggableItem } from './components/Item/Item';
  7 | import { DraggableLane } from './components/Lane/Lane';
  8 | import { KanbanContext } from './components/context';
  9 | import { c, maybeCompleteForMove } from './components/helpers';
 10 | import { Board, DataTypes, Item, Lane } from './components/types';
 11 | import { DndContext } from './dnd/components/DndContext';
 12 | import { DragOverlay } from './dnd/components/DragOverlay';
 13 | import { Entity, Nestable } from './dnd/types';
 14 | import {
 15 |   getEntityFromPath,
 16 |   insertEntity,
 17 |   moveEntity,
 18 |   removeEntity,
 19 |   updateEntity,
 20 | } from './dnd/util/data';
 21 | import { getBoardModifiers } from './helpers/boardModifiers';
 22 | import KanbanPlugin from './main';
 23 | import { frontmatterKey } from './parsers/common';
 24 | import {
 25 |   getTaskStatusDone,
 26 |   getTaskStatusPreDone,
 27 |   toggleTask,
 28 | } from './parsers/helpers/inlineMetadata';
 29 | 
 30 | export function createApp(win: Window, plugin: KanbanPlugin) {
 31 |   return <DragDropApp win={win} plugin={plugin} />;
 32 | }
 33 | 
 34 | const View = memo(function View({ view }: { view: KanbanView }) {
 35 |   return createPortal(view.getPortal(), view.contentEl);
 36 | });
 37 | 
 38 | export function DragDropApp({ win, plugin }: { win: Window; plugin: KanbanPlugin }) {
 39 |   const views = plugin.useKanbanViews(win);
 40 |   const portals: JSX.Element[] = views.map((view) => <View key={view.id} view={view} />);
 41 | 
 42 |   const handleDrop = useCallback(
 43 |     (dragEntity: Entity, dropEntity: Entity) => {
 44 |       if (!dragEntity || !dropEntity) {
 45 |         return;
 46 |       }
 47 | 
 48 |       if (dragEntity.scopeId === 'htmldnd') {
 49 |         const data = dragEntity.getData();
 50 |         const stateManager = plugin.getStateManagerFromViewID(data.viewId, data.win);
 51 |         const dropPath = dropEntity.getPath();
 52 |         const destinationParent = getEntityFromPath(stateManager.state, dropPath.slice(0, -1));
 53 | 
 54 |         try {
 55 |           const items: Item[] = data.content.map((title: string) => {
 56 |             let item = stateManager.getNewItem(title, ' ');
 57 |             const isComplete = !!destinationParent?.data?.shouldMarkItemsComplete;
 58 | 
 59 |             if (isComplete) {
 60 |               item = update(item, { data: { checkChar: { $set: getTaskStatusPreDone() } } });
 61 |               const updates = toggleTask(item, stateManager.file);
 62 |               if (updates) {
 63 |                 const [itemStrings, checkChars, thisIndex] = updates;
 64 |                 const nextItem = itemStrings[thisIndex];
 65 |                 const checkChar = checkChars[thisIndex];
 66 |                 return stateManager.getNewItem(nextItem, checkChar);
 67 |               }
 68 |             }
 69 | 
 70 |             return update(item, {
 71 |               data: {
 72 |                 checked: {
 73 |                   $set: !!destinationParent?.data?.shouldMarkItemsComplete,
 74 |                 },
 75 |                 checkChar: {
 76 |                   $set: destinationParent?.data?.shouldMarkItemsComplete
 77 |                     ? getTaskStatusDone()
 78 |                     : ' ',
 79 |                 },
 80 |               },
 81 |             });
 82 |           });
 83 | 
 84 |           return stateManager.setState((board) => insertEntity(board, dropPath, items));
 85 |         } catch (e) {
 86 |           stateManager.setError(e);
 87 |           console.error(e);
 88 |         }
 89 | 
 90 |         return;
 91 |       }
 92 | 
 93 |       const dragPath = dragEntity.getPath();
 94 |       const dropPath = dropEntity.getPath();
 95 |       const dragEntityData = dragEntity.getData();
 96 |       const dropEntityData = dropEntity.getData();
 97 |       const [, sourceFile] = dragEntity.scopeId.split(':::');
 98 |       const [, destinationFile] = dropEntity.scopeId.split(':::');
 99 | 
100 |       const inDropArea =
101 |         dropEntityData.acceptsSort && !dropEntityData.acceptsSort.includes(dragEntityData.type);
102 | 
103 |       // Same board
104 |       if (sourceFile === destinationFile) {
105 |         const view = plugin.getKanbanView(dragEntity.scopeId, dragEntityData.win);
106 |         const stateManager = plugin.stateManagers.get(view.file);
107 | 
108 |         if (inDropArea) {
109 |           dropPath.push(0);
110 |         }
111 | 
112 |         return stateManager.setState((board) => {
113 |           const entity = getEntityFromPath(board, dragPath);
114 |           const newBoard: Board = moveEntity(
115 |             board,
116 |             dragPath,
117 |             dropPath,
118 |             (entity) => {
119 |               if (entity.type === DataTypes.Item) {
120 |                 const { next } = maybeCompleteForMove(
121 |                   stateManager,
122 |                   board,
123 |                   dragPath,
124 |                   stateManager,
125 |                   board,
126 |                   dropPath,
127 |                   entity
128 |                 );
129 |                 return next;
130 |               }
131 |               return entity;
132 |             },
133 |             (entity) => {
134 |               if (entity.type === DataTypes.Item) {
135 |                 const { replacement } = maybeCompleteForMove(
136 |                   stateManager,
137 |                   board,
138 |                   dragPath,
139 |                   stateManager,
140 |                   board,
141 |                   dropPath,
142 |                   entity
143 |                 );
144 |                 return replacement;
145 |               }
146 |             }
147 |           );
148 | 
149 |           if (entity.type === DataTypes.Lane) {
150 |             const from = dragPath.last();
151 |             let to = dropPath.last();
152 | 
153 |             if (from < to) to -= 1;
154 | 
155 |             const collapsedState = view.getViewState('list-collapse');
156 |             const op = (collapsedState: boolean[]) => {
157 |               const newState = [...collapsedState];
158 |               newState.splice(to, 0, newState.splice(from, 1)[0]);
159 |               return newState;
160 |             };
161 | 
162 |             view.setViewState('list-collapse', undefined, op);
163 | 
164 |             return update<Board>(newBoard, {
165 |               data: { settings: { 'list-collapse': { $set: op(collapsedState) } } },
166 |             });
167 |           }
168 | 
169 |           // Remove sorting in the destination lane
170 |           const destinationParentPath = dropPath.slice(0, -1);
171 |           const destinationParent = getEntityFromPath(board, destinationParentPath);
172 | 
173 |           if (destinationParent?.data?.sorted !== undefined) {
174 |             return updateEntity(newBoard, destinationParentPath, {
175 |               data: {
176 |                 $unset: ['sorted'],
177 |               },
178 |             });
179 |           }
180 | 
181 |           return newBoard;
182 |         });
183 |       }
184 | 
185 |       const sourceView = plugin.getKanbanView(dragEntity.scopeId, dragEntityData.win);
186 |       const sourceStateManager = plugin.stateManagers.get(sourceView.file);
187 |       const destinationView = plugin.getKanbanView(dropEntity.scopeId, dropEntityData.win);
188 |       const destinationStateManager = plugin.stateManagers.get(destinationView.file);
189 | 
190 |       sourceStateManager.setState((sourceBoard) => {
191 |         const entity = getEntityFromPath(sourceBoard, dragPath);
192 |         let replacementEntity: Nestable;
193 | 
194 |         destinationStateManager.setState((destinationBoard) => {
195 |           if (inDropArea) {
196 |             const parent = getEntityFromPath(destinationStateManager.state, dropPath);
197 |             const shouldAppend =
198 |               (destinationStateManager.getSetting('new-card-insertion-method') || 'append') ===
199 |               'append';
200 | 
201 |             if (shouldAppend) dropPath.push(parent.children.length);
202 |             else dropPath.push(0);
203 |           }
204 | 
205 |           const toInsert: Nestable[] = [];
206 | 
207 |           if (entity.type === DataTypes.Item) {
208 |             const { next, replacement } = maybeCompleteForMove(
209 |               sourceStateManager,
210 |               sourceBoard,
211 |               dragPath,
212 |               destinationStateManager,
213 |               destinationBoard,
214 |               dropPath,
215 |               entity
216 |             );
217 |             replacementEntity = replacement;
218 |             toInsert.push(next);
219 |           } else {
220 |             toInsert.push(entity);
221 |           }
222 | 
223 |           if (entity.type === DataTypes.Lane) {
224 |             const collapsedState = destinationView.getViewState('list-collapse');
225 |             const val = sourceView.getViewState('list-collapse')[dragPath.last()];
226 |             const op = (collapsedState: boolean[]) => {
227 |               const newState = [...collapsedState];
228 |               newState.splice(dropPath.last(), 0, val);
229 |               return newState;
230 |             };
231 | 
232 |             destinationView.setViewState('list-collapse', undefined, op);
233 | 
234 |             return update<Board>(insertEntity(destinationBoard, dropPath, toInsert), {
235 |               data: { settings: { 'list-collapse': { $set: op(collapsedState) } } },
236 |             });
237 |           } else {
238 |             return insertEntity(destinationBoard, dropPath, toInsert);
239 |           }
240 |         });
241 | 
242 |         if (entity.type === DataTypes.Lane) {
243 |           const collapsedState = sourceView.getViewState('list-collapse');
244 |           const op = (collapsedState: boolean[]) => {
245 |             const newState = [...collapsedState];
246 |             newState.splice(dragPath.last(), 1);
247 |             return newState;
248 |           };
249 |           sourceView.setViewState('list-collapse', undefined, op);
250 | 
251 |           return update<Board>(removeEntity(sourceBoard, dragPath), {
252 |             data: { settings: { 'list-collapse': { $set: op(collapsedState) } } },
253 |           });
254 |         } else {
255 |           return removeEntity(sourceBoard, dragPath, replacementEntity);
256 |         }
257 |       });
258 |     },
259 |     [views]
260 |   );
261 | 
262 |   if (portals.length)
263 |     return (
264 |       <DndContext win={win} onDrop={handleDrop}>
265 |         {...portals}
266 |         <DragOverlay>
267 |           {(entity, styles) => {
268 |             const [data, context] = useMemo(() => {
269 |               if (entity.scopeId === 'htmldnd') {
270 |                 return [null, null];
271 |               }
272 | 
273 |               const overlayData = entity.getData();
274 | 
275 |               const view = plugin.getKanbanView(entity.scopeId, overlayData.win);
276 |               const stateManager = plugin.stateManagers.get(view.file);
277 |               const data = getEntityFromPath(stateManager.state, entity.getPath());
278 |               const boardModifiers = getBoardModifiers(view, stateManager);
279 |               const filePath = view.file.path;
280 | 
281 |               return [
282 |                 data,
283 |                 {
284 |                   view,
285 |                   stateManager,
286 |                   boardModifiers,
287 |                   filePath,
288 |                 },
289 |               ];
290 |             }, [entity]);
291 | 
292 |             if (data?.type === DataTypes.Lane) {
293 |               const boardView =
294 |                 context?.view.viewSettings[frontmatterKey] ||
295 |                 context?.stateManager.getSetting(frontmatterKey);
296 |               const collapseState =
297 |                 context?.view.viewSettings['list-collapse'] ||
298 |                 context?.stateManager.getSetting('list-collapse');
299 |               const laneIndex = entity.getPath().last();
300 | 
301 |               return (
302 |                 <KanbanContext.Provider value={context}>
303 |                   <div
304 |                     className={classcat([
305 |                       c('drag-container'),
306 |                       {
307 |                         [c('horizontal')]: boardView !== 'list',
308 |                         [c('vertical')]: boardView === 'list',
309 |                       },
310 |                     ])}
311 |                     style={styles}
312 |                   >
313 |                     <DraggableLane
314 |                       lane={data as Lane}
315 |                       laneIndex={laneIndex}
316 |                       isStatic={true}
317 |                       isCollapsed={!!collapseState[laneIndex]}
318 |                       collapseDir={boardView === 'list' ? 'vertical' : 'horizontal'}
319 |                     />
320 |                   </div>
321 |                 </KanbanContext.Provider>
322 |               );
323 |             }
324 | 
325 |             if (data?.type === DataTypes.Item) {
326 |               return (
327 |                 <KanbanContext.Provider value={context}>
328 |                   <div className={c('drag-container')} style={styles}>
329 |                     <DraggableItem item={data as Item} itemIndex={0} isStatic={true} />
330 |                   </div>
331 |                 </KanbanContext.Provider>
332 |               );
333 |             }
334 | 
335 |             return <div />;
336 |           }}
337 |         </DragOverlay>
338 |       </DndContext>
339 |     );
340 | }
341 | 


--------------------------------------------------------------------------------
/src/KanbanView.tsx:
--------------------------------------------------------------------------------
  1 | import EventEmitter from 'eventemitter3';
  2 | import update from 'immutability-helper';
  3 | import {
  4 |   HoverParent,
  5 |   HoverPopover,
  6 |   Menu,
  7 |   Platform,
  8 |   TFile,
  9 |   TextFileView,
 10 |   ViewStateResult,
 11 |   WorkspaceLeaf,
 12 |   debounce,
 13 | } from 'obsidian';
 14 | 
 15 | import { KanbanFormat, KanbanSettings, KanbanViewSettings, SettingsModal } from './Settings';
 16 | import { Kanban } from './components/Kanban';
 17 | import { BasicMarkdownRenderer } from './components/MarkdownRenderer/MarkdownRenderer';
 18 | import { c } from './components/helpers';
 19 | import { Board } from './components/types';
 20 | import { getParentWindow } from './dnd/util/getWindow';
 21 | import { gotoNextDailyNote, gotoPrevDailyNote, hasFrontmatterKeyRaw } from './helpers';
 22 | import { bindMarkdownEvents } from './helpers/renderMarkdown';
 23 | import { PromiseQueue } from './helpers/util';
 24 | import { t } from './lang/helpers';
 25 | import KanbanPlugin from './main';
 26 | import { frontmatterKey } from './parsers/common';
 27 | 
 28 | export const kanbanViewType = 'kanban';
 29 | export const kanbanIcon = 'lucide-trello';
 30 | 
 31 | export class KanbanView extends TextFileView implements HoverParent {
 32 |   plugin: KanbanPlugin;
 33 |   hoverPopover: HoverPopover | null;
 34 |   emitter: EventEmitter;
 35 |   actionButtons: Record<string, HTMLElement> = {};
 36 | 
 37 |   previewCache: Map<string, BasicMarkdownRenderer>;
 38 |   previewQueue: PromiseQueue;
 39 | 
 40 |   activeEditor: any;
 41 |   viewSettings: KanbanViewSettings = {};
 42 | 
 43 |   get isPrimary(): boolean {
 44 |     return this.plugin.getStateManager(this.file)?.getAView() === this;
 45 |   }
 46 | 
 47 |   get id(): string {
 48 |     return `${(this.leaf as any).id}:::${this.file?.path}`;
 49 |   }
 50 | 
 51 |   get isShiftPressed(): boolean {
 52 |     return this.plugin.isShiftPressed;
 53 |   }
 54 | 
 55 |   constructor(leaf: WorkspaceLeaf, plugin: KanbanPlugin) {
 56 |     super(leaf);
 57 |     this.plugin = plugin;
 58 |     this.emitter = new EventEmitter();
 59 |     this.previewCache = new Map();
 60 | 
 61 |     this.previewQueue = new PromiseQueue(() => this.emitter.emit('queueEmpty'));
 62 | 
 63 |     this.emitter.on('hotkey', ({ commandId }) => {
 64 |       switch (commandId) {
 65 |         case 'daily-notes:goto-prev': {
 66 |           gotoPrevDailyNote(this.app, this.file);
 67 |           break;
 68 |         }
 69 |         case 'daily-notes:goto-next': {
 70 |           gotoNextDailyNote(this.app, this.file);
 71 |           break;
 72 |         }
 73 |       }
 74 |     });
 75 | 
 76 |     bindMarkdownEvents(this);
 77 |   }
 78 | 
 79 |   async prerender(board: Board) {
 80 |     board.children.forEach((lane) => {
 81 |       lane.children.forEach((item) => {
 82 |         if (this.previewCache.has(item.id)) return;
 83 | 
 84 |         this.previewQueue.add(async () => {
 85 |           const preview = this.addChild(new BasicMarkdownRenderer(this, item.data.title));
 86 |           this.previewCache.set(item.id, preview);
 87 |           await preview.renderCapability.promise;
 88 |         });
 89 |       });
 90 |     });
 91 | 
 92 |     if (this.previewQueue.isRunning) {
 93 |       await new Promise((res) => {
 94 |         this.emitter.once('queueEmpty', res);
 95 |       });
 96 |     }
 97 | 
 98 |     this.initHeaderButtons();
 99 |   }
100 | 
101 |   validatePreviewCache(board: Board) {
102 |     const seenKeys = new Set<string>();
103 |     board.children.forEach((lane) => {
104 |       seenKeys.add(lane.id);
105 |       lane.children.forEach((item) => {
106 |         seenKeys.add(item.id);
107 |       });
108 |     });
109 | 
110 |     for (const k of this.previewCache.keys()) {
111 |       if (!seenKeys.has(k)) {
112 |         this.removeChild(this.previewCache.get(k));
113 |         this.previewCache.delete(k);
114 |       }
115 |     }
116 |   }
117 | 
118 |   setView(view: KanbanFormat) {
119 |     this.setViewState(frontmatterKey, view);
120 |     this.app.fileManager.processFrontMatter(this.file, (frontmatter) => {
121 |       frontmatter[frontmatterKey] = view;
122 |     });
123 |   }
124 | 
125 |   setBoard(board: Board, shouldSave: boolean = true) {
126 |     const stateManager = this.plugin.stateManagers.get(this.file);
127 |     stateManager.setState(board, shouldSave);
128 |   }
129 | 
130 |   getBoard(): Board {
131 |     const stateManager = this.plugin.stateManagers.get(this.file);
132 |     return stateManager.state;
133 |   }
134 | 
135 |   getViewType() {
136 |     return kanbanViewType;
137 |   }
138 | 
139 |   getIcon() {
140 |     return kanbanIcon;
141 |   }
142 | 
143 |   getDisplayText() {
144 |     return this.file?.basename || 'Kanban';
145 |   }
146 | 
147 |   getWindow() {
148 |     return getParentWindow(this.containerEl) as Window & typeof globalThis;
149 |   }
150 | 
151 |   async loadFile(file: TFile) {
152 |     this.plugin.removeView(this);
153 |     // eslint-disable-next-line @typescript-eslint/ban-ts-comment
154 |     // @ts-ignore
155 |     return super.loadFile(file);
156 |   }
157 | 
158 |   async onLoadFile(file: TFile) {
159 |     try {
160 |       return await super.onLoadFile(file);
161 |     } catch (e) {
162 |       const stateManager = this.plugin.stateManagers.get(this.file);
163 |       stateManager?.setError(e);
164 |       throw e;
165 |     }
166 |   }
167 | 
168 |   onload() {
169 |     super.onload();
170 |     if (Platform.isMobile) {
171 |       this.containerEl.setCssProps({
172 |         '--mobile-navbar-height': (this.app as any).mobileNavbar.containerEl.clientHeight + 'px',
173 |       });
174 |     }
175 | 
176 |     this.register(
177 |       this.containerEl.onWindowMigrated(() => {
178 |         this.plugin.removeView(this);
179 |         this.plugin.addView(this, this.data, this.isPrimary);
180 |       })
181 |     );
182 |   }
183 | 
184 |   onunload(): void {
185 |     super.onunload();
186 | 
187 |     this.previewQueue.clear();
188 |     this.previewCache.clear();
189 |     this.emitter.emit('queueEmpty');
190 | 
191 |     // Remove draggables from render, as the DOM has already detached
192 |     this.plugin.removeView(this);
193 |     this.emitter.removeAllListeners();
194 |     this.activeEditor = null;
195 |     this.actionButtons = {};
196 |   }
197 | 
198 |   handleRename(newPath: string, oldPath: string) {
199 |     if (this.file.path === newPath) {
200 |       this.plugin.handleViewFileRename(this, oldPath);
201 |     }
202 |   }
203 | 
204 |   requestSaveToDisk(data: string) {
205 |     if (this.data !== data && this.isPrimary) {
206 |       this.data = data;
207 |       this.requestSave();
208 |     } else {
209 |       this.data = data;
210 |     }
211 |   }
212 | 
213 |   getViewData() {
214 |     // In theory, we could unparse the board here.  In practice, the board can be
215 |     // in an error state, so we return the last good data here.  (In addition,
216 |     // unparsing is slow, and getViewData() can be called more often than the
217 |     // data actually changes.)
218 |     return this.data;
219 |   }
220 | 
221 |   setViewData(data: string, clear?: boolean) {
222 |     if (!hasFrontmatterKeyRaw(data)) {
223 |       this.plugin.kanbanFileModes[(this.leaf as any).id || this.file.path] = 'markdown';
224 |       this.plugin.removeView(this);
225 |       this.plugin.setMarkdownView(this.leaf, false);
226 | 
227 |       return;
228 |     }
229 | 
230 |     if (clear) {
231 |       this.activeEditor = null;
232 |       this.previewQueue.clear();
233 |       this.previewCache.clear();
234 |       this.emitter.emit('queueEmpty');
235 |       Object.values(this.actionButtons).forEach((b) => b.remove());
236 |       this.actionButtons = {};
237 |     }
238 | 
239 |     this.plugin.addView(this, data, !clear && this.isPrimary);
240 |   }
241 | 
242 |   async setState(state: any, result: ViewStateResult): Promise<void> {
243 |     this.viewSettings = { ...state.kanbanViewState };
244 |     await super.setState(state, result);
245 |   }
246 | 
247 |   getState() {
248 |     const state = super.getState();
249 |     state.kanbanViewState = { ...this.viewSettings };
250 |     return state;
251 |   }
252 | 
253 |   setViewState<K extends keyof KanbanViewSettings>(
254 |     key: K,
255 |     val?: KanbanViewSettings[K],
256 |     globalUpdater?: (old: KanbanViewSettings[K]) => KanbanViewSettings[K]
257 |   ) {
258 |     if (globalUpdater) {
259 |       const stateManager = this.plugin.getStateManager(this.file);
260 |       stateManager.viewSet.forEach((view) => {
261 |         view.viewSettings[key] = globalUpdater(view.viewSettings[key]);
262 |       });
263 |     } else if (val) {
264 |       this.viewSettings[key] = val;
265 |     }
266 | 
267 |     this.app.workspace.requestSaveLayout();
268 |   }
269 | 
270 |   populateViewState(settings: KanbanSettings) {
271 |     this.viewSettings['kanban-plugin'] ??= settings['kanban-plugin'] || 'board';
272 |     this.viewSettings['list-collapse'] ??= settings['list-collapse'] || [];
273 |   }
274 | 
275 |   getViewState<K extends keyof KanbanViewSettings>(key: K) {
276 |     const stateManager = this.plugin.stateManagers.get(this.file);
277 |     const settingVal = stateManager.getSetting(key);
278 |     return this.viewSettings[key] ?? settingVal;
279 |   }
280 | 
281 |   useViewState<K extends keyof KanbanViewSettings>(key: K) {
282 |     const stateManager = this.plugin.stateManagers.get(this.file);
283 |     const settingVal = stateManager.useSetting(key);
284 |     return this.viewSettings[key] ?? settingVal;
285 |   }
286 | 
287 |   getPortal() {
288 |     const stateManager = this.plugin.stateManagers.get(this.file);
289 |     return <Kanban stateManager={stateManager} view={this} />;
290 |   }
291 | 
292 |   getBoardSettings() {
293 |     const stateManager = this.plugin.stateManagers.get(this.file);
294 |     const board = stateManager.state;
295 | 
296 |     new SettingsModal(
297 |       this,
298 |       {
299 |         onSettingsChange: (settings) => {
300 |           const updatedBoard = update(board, {
301 |             data: {
302 |               settings: {
303 |                 $set: settings,
304 |               },
305 |             },
306 |           });
307 | 
308 |           // Save to disk, compute text of new board
309 |           stateManager.setState(updatedBoard);
310 |         },
311 |       },
312 |       board.data.settings
313 |     ).open();
314 |   }
315 | 
316 |   onPaneMenu(menu: Menu, source: string, callSuper: boolean = true) {
317 |     if (source !== 'more-options') {
318 |       super.onPaneMenu(menu, source);
319 |       return;
320 |     }
321 |     // Add a menu item to force the board to markdown view
322 |     menu
323 |       .addItem((item) => {
324 |         item
325 |           .setTitle(t('Open as markdown'))
326 |           .setIcon('lucide-file-text')
327 |           .setSection('pane')
328 |           .onClick(() => {
329 |             this.plugin.kanbanFileModes[(this.leaf as any).id || this.file.path] = 'markdown';
330 |             this.plugin.setMarkdownView(this.leaf);
331 |           });
332 |       })
333 |       .addItem((item) => {
334 |         item
335 |           .setTitle(t('Open board settings'))
336 |           .setIcon('lucide-settings')
337 |           .setSection('pane')
338 |           .onClick(() => {
339 |             this.getBoardSettings();
340 |           });
341 |       })
342 |       .addItem((item) => {
343 |         item
344 |           .setTitle(t('Archive completed cards'))
345 |           .setIcon('lucide-archive')
346 |           .setSection('pane')
347 |           .onClick(() => {
348 |             const stateManager = this.plugin.stateManagers.get(this.file);
349 |             stateManager.archiveCompletedCards();
350 |           });
351 |       });
352 | 
353 |     if (callSuper) {
354 |       super.onPaneMenu(menu, source);
355 |     }
356 |   }
357 | 
358 |   initHeaderButtons = debounce(() => this._initHeaderButtons(), 10, true);
359 | 
360 |   _initHeaderButtons = async () => {
361 |     if (Platform.isPhone) return;
362 |     const stateManager = this.plugin.getStateManager(this.file);
363 | 
364 |     if (!stateManager) return;
365 | 
366 |     if (
367 |       stateManager.getSetting('show-board-settings') &&
368 |       !this.actionButtons['show-board-settings']
369 |     ) {
370 |       this.actionButtons['show-board-settings'] = this.addAction(
371 |         'lucide-settings',
372 |         t('Open board settings'),
373 |         () => {
374 |           this.getBoardSettings();
375 |         }
376 |       );
377 |     } else if (
378 |       !stateManager.getSetting('show-board-settings') &&
379 |       this.actionButtons['show-board-settings']
380 |     ) {
381 |       this.actionButtons['show-board-settings'].remove();
382 |       delete this.actionButtons['show-board-settings'];
383 |     }
384 | 
385 |     if (stateManager.getSetting('show-set-view') && !this.actionButtons['show-set-view']) {
386 |       this.actionButtons['show-set-view'] = this.addAction(
387 |         'lucide-view',
388 |         t('Board view'),
389 |         (evt) => {
390 |           const view = this.viewSettings[frontmatterKey] || stateManager.getSetting(frontmatterKey);
391 |           new Menu()
392 |             .addItem((item) =>
393 |               item
394 |                 .setTitle(t('View as board'))
395 |                 .setIcon('lucide-trello')
396 |                 .setChecked(view === 'basic' || view === 'board')
397 |                 .onClick(() => this.setView('board'))
398 |             )
399 |             .addItem((item) =>
400 |               item
401 |                 .setTitle(t('View as table'))
402 |                 .setIcon('lucide-table')
403 |                 .setChecked(view === 'table')
404 |                 .onClick(() => this.setView('table'))
405 |             )
406 |             .addItem((item) =>
407 |               item
408 |                 .setTitle(t('View as list'))
409 |                 .setIcon('lucide-server')
410 |                 .setChecked(view === 'list')
411 |                 .onClick(() => this.setView('list'))
412 |             )
413 |             .showAtMouseEvent(evt);
414 |         }
415 |       );
416 |     } else if (!stateManager.getSetting('show-set-view') && this.actionButtons['show-set-view']) {
417 |       this.actionButtons['show-set-view'].remove();
418 |       delete this.actionButtons['show-set-view'];
419 |     }
420 | 
421 |     if (stateManager.getSetting('show-search') && !this.actionButtons['show-search']) {
422 |       this.actionButtons['show-search'] = this.addAction('lucide-search', t('Search...'), () => {
423 |         this.emitter.emit('hotkey', { commandId: 'editor:open-search' });
424 |       });
425 |     } else if (!stateManager.getSetting('show-search') && this.actionButtons['show-search']) {
426 |       this.actionButtons['show-search'].remove();
427 |       delete this.actionButtons['show-search'];
428 |     }
429 | 
430 |     if (
431 |       stateManager.getSetting('show-view-as-markdown') &&
432 |       !this.actionButtons['show-view-as-markdown']
433 |     ) {
434 |       this.actionButtons['show-view-as-markdown'] = this.addAction(
435 |         'lucide-file-text',
436 |         t('Open as markdown'),
437 |         () => {
438 |           this.plugin.kanbanFileModes[(this.leaf as any).id || this.file.path] = 'markdown';
439 |           this.plugin.setMarkdownView(this.leaf);
440 |         }
441 |       );
442 |     } else if (
443 |       !stateManager.getSetting('show-view-as-markdown') &&
444 |       this.actionButtons['show-view-as-markdown']
445 |     ) {
446 |       this.actionButtons['show-view-as-markdown'].remove();
447 |       delete this.actionButtons['show-view-as-markdown'];
448 |     }
449 | 
450 |     if (stateManager.getSetting('show-archive-all') && !this.actionButtons['show-archive-all']) {
451 |       this.actionButtons['show-archive-all'] = this.addAction(
452 |         'lucide-archive',
453 |         t('Archive completed cards'),
454 |         () => {
455 |           const stateManager = this.plugin.stateManagers.get(this.file);
456 |           stateManager.archiveCompletedCards();
457 |         }
458 |       );
459 |     } else if (
460 |       !stateManager.getSetting('show-archive-all') &&
461 |       this.actionButtons['show-archive-all']
462 |     ) {
463 |       this.actionButtons['show-archive-all'].remove();
464 |       delete this.actionButtons['show-archive-all'];
465 |     }
466 | 
467 |     if (stateManager.getSetting('show-add-list') && !this.actionButtons['show-add-list']) {
468 |       const btn = this.addAction('lucide-plus-circle', t('Add a list'), () => {
469 |         this.emitter.emit('showLaneForm', undefined);
470 |       });
471 | 
472 |       btn.addClass(c('ignore-click-outside'));
473 | 
474 |       this.actionButtons['show-add-list'] = btn;
475 |     } else if (!stateManager.getSetting('show-add-list') && this.actionButtons['show-add-list']) {
476 |       this.actionButtons['show-add-list'].remove();
477 |       delete this.actionButtons['show-add-list'];
478 |     }
479 |   };
480 | 
481 |   clear() {
482 |     /*
483 |       Obsidian *only* calls this after unloading a file, before loading the next.
484 |       Specifically, from onUnloadFile, which calls save(true), and then optionally
485 |       calls clear, if and only if this.file is still non-empty.  That means that
486 |       in this function, this.file is still the *old* file, so we should not do
487 |       anything here that might try to use the file (including its path), so we
488 |       should avoid doing anything that refreshes the display.  (Since that could
489 |       use the file, and would also flash an empty pane during navigation, depending
490 |       on how long the next file load takes.)
491 | 
492 |       Given all that, it makes more sense to clean up our state from onLoadFile, as
493 |       following a clear there are only two possible states: a successful onLoadFile
494 |       updates our full state via setViewData(), or else it aborts with an error
495 |       first.  So as long as setViewData() and the error handler for onLoadFile()
496 |       fully reset the state (to a valid load state or a valid error state),
497 |       there's nothing to do in this method.  (We can't omit it, since it's
498 |       abstract.)
499 |     */
500 |   }
501 | }
502 | 


--------------------------------------------------------------------------------
/src/Settings.ts:
--------------------------------------------------------------------------------
   1 | import update, { Spec } from 'immutability-helper';
   2 | import {
   3 |   App,
   4 |   DropdownComponent,
   5 |   Modal,
   6 |   PluginSettingTab,
   7 |   Setting,
   8 |   ToggleComponent,
   9 | } from 'obsidian';
  10 | 
  11 | import { KanbanView } from './KanbanView';
  12 | import {
  13 |   c,
  14 |   generateInstanceId,
  15 |   getDefaultDateFormat,
  16 |   getDefaultTimeFormat,
  17 | } from './components/helpers';
  18 | import {
  19 |   DataKey,
  20 |   DateColor,
  21 |   DateColorSetting,
  22 |   DateColorSettingTemplate,
  23 |   MetadataSetting,
  24 |   MetadataSettingTemplate,
  25 |   TagColor,
  26 |   TagColorSetting,
  27 |   TagColorSettingTemplate,
  28 |   TagSort,
  29 |   TagSortSetting,
  30 |   TagSortSettingTemplate,
  31 | } from './components/types';
  32 | import { getParentWindow } from './dnd/util/getWindow';
  33 | import { t } from './lang/helpers';
  34 | import KanbanPlugin from './main';
  35 | import { frontmatterKey } from './parsers/common';
  36 | import {
  37 |   createSearchSelect,
  38 |   defaultDateTrigger,
  39 |   defaultMetadataPosition,
  40 |   defaultTimeTrigger,
  41 |   getListOptions,
  42 | } from './settingHelpers';
  43 | import { cleanUpDateSettings, renderDateSettings } from './settings/DateColorSettings';
  44 | import { cleanupMetadataSettings, renderMetadataSettings } from './settings/MetadataSettings';
  45 | import { cleanUpTagSettings, renderTagSettings } from './settings/TagColorSettings';
  46 | import { cleanUpTagSortSettings, renderTagSortSettings } from './settings/TagSortSettings';
  47 | 
  48 | const numberRegEx = /^\d+(?:\.\d+)?$/;
  49 | 
  50 | export type KanbanFormat = 'basic' | 'board' | 'table' | 'list';
  51 | 
  52 | export interface KanbanSettings {
  53 |   [frontmatterKey]?: KanbanFormat;
  54 |   'append-archive-date'?: boolean;
  55 |   'archive-date-format'?: string;
  56 |   'archive-date-separator'?: string;
  57 |   'archive-with-date'?: boolean;
  58 |   'date-colors'?: DateColor[];
  59 |   'date-display-format'?: string;
  60 |   'date-format'?: string;
  61 |   'date-picker-week-start'?: number;
  62 |   'date-time-display-format'?: string;
  63 |   'date-trigger'?: string;
  64 |   'full-list-lane-width'?: boolean;
  65 |   'hide-card-count'?: boolean;
  66 |   'inline-metadata-position'?: 'body' | 'footer' | 'metadata-table';
  67 |   'lane-width'?: number;
  68 |   'link-date-to-daily-note'?: boolean;
  69 |   'list-collapse'?: boolean[];
  70 |   'max-archive-size'?: number;
  71 |   'metadata-keys'?: DataKey[];
  72 |   'move-dates'?: boolean;
  73 |   'move-tags'?: boolean;
  74 |   'move-task-metadata'?: boolean;
  75 |   'new-card-insertion-method'?: 'prepend' | 'prepend-compact' | 'append';
  76 |   'new-line-trigger'?: 'enter' | 'shift-enter';
  77 |   'new-note-folder'?: string;
  78 |   'new-note-template'?: string;
  79 |   'show-add-list'?: boolean;
  80 |   'show-archive-all'?: boolean;
  81 |   'show-board-settings'?: boolean;
  82 |   'show-checkboxes'?: boolean;
  83 |   'show-relative-date'?: boolean;
  84 |   'show-search'?: boolean;
  85 |   'show-set-view'?: boolean;
  86 |   'show-view-as-markdown'?: boolean;
  87 |   'table-sizing'?: Record<string, number>;
  88 |   'tag-action'?: 'kanban' | 'obsidian';
  89 |   'tag-colors'?: TagColor[];
  90 |   'tag-sort'?: TagSort[];
  91 |   'time-format'?: string;
  92 |   'time-trigger'?: string;
  93 | }
  94 | 
  95 | export interface KanbanViewSettings {
  96 |   [frontmatterKey]?: KanbanFormat;
  97 |   'list-collapse'?: boolean[];
  98 | }
  99 | 
 100 | export const settingKeyLookup: Set<keyof KanbanSettings> = new Set([
 101 |   frontmatterKey,
 102 |   'append-archive-date',
 103 |   'archive-date-format',
 104 |   'archive-date-separator',
 105 |   'archive-with-date',
 106 |   'date-colors',
 107 |   'date-display-format',
 108 |   'date-format',
 109 |   'date-picker-week-start',
 110 |   'date-time-display-format',
 111 |   'date-trigger',
 112 |   'full-list-lane-width',
 113 |   'hide-card-count',
 114 |   'inline-metadata-position',
 115 |   'lane-width',
 116 |   'link-date-to-daily-note',
 117 |   'list-collapse',
 118 |   'max-archive-size',
 119 |   'metadata-keys',
 120 |   'move-dates',
 121 |   'move-tags',
 122 |   'move-task-metadata',
 123 |   'new-card-insertion-method',
 124 |   'new-line-trigger',
 125 |   'new-note-folder',
 126 |   'new-note-template',
 127 |   'show-add-list',
 128 |   'show-archive-all',
 129 |   'show-board-settings',
 130 |   'show-checkboxes',
 131 |   'show-relative-date',
 132 |   'show-search',
 133 |   'show-set-view',
 134 |   'show-view-as-markdown',
 135 |   'table-sizing',
 136 |   'tag-action',
 137 |   'tag-colors',
 138 |   'tag-sort',
 139 |   'time-format',
 140 |   'time-trigger',
 141 | ]);
 142 | 
 143 | export type SettingRetriever = <K extends keyof KanbanSettings>(
 144 |   key: K,
 145 |   supplied?: KanbanSettings
 146 | ) => KanbanSettings[K];
 147 | 
 148 | export interface SettingRetrievers {
 149 |   getGlobalSettings: () => KanbanSettings;
 150 |   getGlobalSetting: SettingRetriever;
 151 |   getSetting: SettingRetriever;
 152 | }
 153 | 
 154 | export interface SettingsManagerConfig {
 155 |   onSettingsChange: (newSettings: KanbanSettings) => void;
 156 | }
 157 | 
 158 | export class SettingsManager {
 159 |   win: Window;
 160 |   app: App;
 161 |   plugin: KanbanPlugin;
 162 |   config: SettingsManagerConfig;
 163 |   settings: KanbanSettings;
 164 |   cleanupFns: Array<() => void> = [];
 165 |   applyDebounceTimer: number = 0;
 166 | 
 167 |   constructor(plugin: KanbanPlugin, config: SettingsManagerConfig, settings: KanbanSettings) {
 168 |     this.app = plugin.app;
 169 |     this.plugin = plugin;
 170 |     this.config = config;
 171 |     this.settings = settings;
 172 |   }
 173 | 
 174 |   applySettingsUpdate(spec: Spec<KanbanSettings>) {
 175 |     this.win.clearTimeout(this.applyDebounceTimer);
 176 | 
 177 |     this.applyDebounceTimer = this.win.setTimeout(() => {
 178 |       this.settings = update(this.settings, spec);
 179 |       this.config.onSettingsChange(this.settings);
 180 |     }, 1000);
 181 |   }
 182 | 
 183 |   getSetting(key: keyof KanbanSettings, local: boolean) {
 184 |     if (local) {
 185 |       return [this.settings[key], this.plugin.settings[key]];
 186 |     }
 187 | 
 188 |     return [this.settings[key], null];
 189 |   }
 190 | 
 191 |   constructUI(contentEl: HTMLElement, heading: string, local: boolean) {
 192 |     this.win = contentEl.win;
 193 | 
 194 |     const { templateFiles, vaultFolders, templateWarning } = getListOptions(this.app);
 195 | 
 196 |     contentEl.createEl('h3', { text: heading });
 197 | 
 198 |     if (local) {
 199 |       contentEl.createEl('p', {
 200 |         text: t('These settings will take precedence over the default Kanban board settings.'),
 201 |       });
 202 |     } else {
 203 |       contentEl.createEl('p', {
 204 |         text: t(
 205 |           'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.'
 206 |         ),
 207 |       });
 208 |     }
 209 | 
 210 |     new Setting(contentEl)
 211 |       .setName(t('Display card checkbox'))
 212 |       .setDesc(t('When toggled, a checkbox will be displayed with each card'))
 213 |       .then((setting) => {
 214 |         let toggleComponent: ToggleComponent;
 215 | 
 216 |         setting
 217 |           .addToggle((toggle) => {
 218 |             toggleComponent = toggle;
 219 | 
 220 |             const [value, globalValue] = this.getSetting('show-checkboxes', local);
 221 | 
 222 |             if (value !== undefined) {
 223 |               toggle.setValue(value as boolean);
 224 |             } else if (globalValue !== undefined) {
 225 |               toggle.setValue(globalValue as boolean);
 226 |             }
 227 | 
 228 |             toggle.onChange((newValue) => {
 229 |               this.applySettingsUpdate({
 230 |                 'show-checkboxes': {
 231 |                   $set: newValue,
 232 |                 },
 233 |               });
 234 |             });
 235 |           })
 236 |           .addExtraButton((b) => {
 237 |             b.setIcon('lucide-rotate-ccw')
 238 |               .setTooltip(t('Reset to default'))
 239 |               .onClick(() => {
 240 |                 const [, globalValue] = this.getSetting('show-checkboxes', local);
 241 |                 toggleComponent.setValue(!!globalValue);
 242 | 
 243 |                 this.applySettingsUpdate({
 244 |                   $unset: ['show-checkboxes'],
 245 |                 });
 246 |               });
 247 |           });
 248 |       });
 249 | 
 250 |     new Setting(contentEl)
 251 |       .setName(t('New line trigger'))
 252 |       .setDesc(
 253 |         t(
 254 |           'Select whether Enter or Shift+Enter creates a new line. The opposite of what you choose will create and complete editing of cards and lists.'
 255 |         )
 256 |       )
 257 |       .addDropdown((dropdown) => {
 258 |         dropdown.addOption('shift-enter', t('Shift + Enter'));
 259 |         dropdown.addOption('enter', t('Enter'));
 260 | 
 261 |         const [value, globalValue] = this.getSetting('new-line-trigger', local);
 262 | 
 263 |         dropdown.setValue((value as string) || (globalValue as string) || 'shift-enter');
 264 |         dropdown.onChange((value) => {
 265 |           this.applySettingsUpdate({
 266 |             'new-line-trigger': {
 267 |               $set: value as 'enter' | 'shift-enter',
 268 |             },
 269 |           });
 270 |         });
 271 |       });
 272 | 
 273 |     new Setting(contentEl)
 274 |       .setName(t('Prepend / append new cards'))
 275 |       .setDesc(
 276 |         t('This setting controls whether new cards are added to the beginning or end of the list.')
 277 |       )
 278 |       .addDropdown((dropdown) => {
 279 |         dropdown.addOption('prepend', t('Prepend'));
 280 |         dropdown.addOption('prepend-compact', t('Prepend (compact)'));
 281 |         dropdown.addOption('append', t('Append'));
 282 | 
 283 |         const [value, globalValue] = this.getSetting('new-card-insertion-method', local);
 284 | 
 285 |         dropdown.setValue((value as string) || (globalValue as string) || 'append');
 286 |         dropdown.onChange((value) => {
 287 |           this.applySettingsUpdate({
 288 |             'new-card-insertion-method': {
 289 |               $set: value as 'prepend' | 'append',
 290 |             },
 291 |           });
 292 |         });
 293 |       });
 294 | 
 295 |     new Setting(contentEl)
 296 |       .setName(t('Hide card counts in list titles'))
 297 |       .setDesc(t('When toggled, card counts are hidden from the list title'))
 298 |       .then((setting) => {
 299 |         let toggleComponent: ToggleComponent;
 300 | 
 301 |         setting
 302 |           .addToggle((toggle) => {
 303 |             toggleComponent = toggle;
 304 | 
 305 |             const [value, globalValue] = this.getSetting('hide-card-count', local);
 306 | 
 307 |             if (value !== undefined) {
 308 |               toggle.setValue(value as boolean);
 309 |             } else if (globalValue !== undefined) {
 310 |               toggle.setValue(globalValue as boolean);
 311 |             }
 312 | 
 313 |             toggle.onChange((newValue) => {
 314 |               this.applySettingsUpdate({
 315 |                 'hide-card-count': {
 316 |                   $set: newValue,
 317 |                 },
 318 |               });
 319 |             });
 320 |           })
 321 |           .addExtraButton((b) => {
 322 |             b.setIcon('lucide-rotate-ccw')
 323 |               .setTooltip(t('Reset to default'))
 324 |               .onClick(() => {
 325 |                 const [, globalValue] = this.getSetting('hide-card-count', local);
 326 |                 toggleComponent.setValue(!!globalValue);
 327 | 
 328 |                 this.applySettingsUpdate({
 329 |                   $unset: ['hide-card-count'],
 330 |                 });
 331 |               });
 332 |           });
 333 |       });
 334 | 
 335 |     new Setting(contentEl)
 336 |       .setName(t('List width'))
 337 |       .setDesc(t('Enter a number to set the list width in pixels.'))
 338 |       .addText((text) => {
 339 |         const [value, globalValue] = this.getSetting('lane-width', local);
 340 | 
 341 |         text.inputEl.setAttr('type', 'number');
 342 |         text.inputEl.placeholder = `${globalValue ? globalValue : '272'} (default)`;
 343 |         text.inputEl.value = value ? value.toString() : '';
 344 | 
 345 |         text.onChange((val) => {
 346 |           if (val && numberRegEx.test(val)) {
 347 |             text.inputEl.removeClass('error');
 348 | 
 349 |             this.applySettingsUpdate({
 350 |               'lane-width': {
 351 |                 $set: parseInt(val),
 352 |               },
 353 |             });
 354 | 
 355 |             return;
 356 |           }
 357 | 
 358 |           if (val) {
 359 |             text.inputEl.addClass('error');
 360 |           }
 361 | 
 362 |           this.applySettingsUpdate({
 363 |             $unset: ['lane-width'],
 364 |           });
 365 |         });
 366 |       });
 367 | 
 368 |     new Setting(contentEl).setName(t('Expand lists to full width in list view')).then((setting) => {
 369 |       let toggleComponent: ToggleComponent;
 370 | 
 371 |       setting
 372 |         .addToggle((toggle) => {
 373 |           toggleComponent = toggle;
 374 | 
 375 |           const [value, globalValue] = this.getSetting('full-list-lane-width', local);
 376 | 
 377 |           if (value !== undefined) {
 378 |             toggle.setValue(value as boolean);
 379 |           } else if (globalValue !== undefined) {
 380 |             toggle.setValue(globalValue as boolean);
 381 |           }
 382 | 
 383 |           toggle.onChange((newValue) => {
 384 |             this.applySettingsUpdate({
 385 |               'full-list-lane-width': {
 386 |                 $set: newValue,
 387 |               },
 388 |             });
 389 |           });
 390 |         })
 391 |         .addExtraButton((b) => {
 392 |           b.setIcon('lucide-rotate-ccw')
 393 |             .setTooltip(t('Reset to default'))
 394 |             .onClick(() => {
 395 |               const [, globalValue] = this.getSetting('full-list-lane-width', local);
 396 |               toggleComponent.setValue(!!globalValue);
 397 | 
 398 |               this.applySettingsUpdate({
 399 |                 $unset: ['full-list-lane-width'],
 400 |               });
 401 |             });
 402 |         });
 403 |     });
 404 | 
 405 |     new Setting(contentEl)
 406 |       .setName(t('Maximum number of archived cards'))
 407 |       .setDesc(
 408 |         t(
 409 |           "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely."
 410 |         )
 411 |       )
 412 |       .addText((text) => {
 413 |         const [value, globalValue] = this.getSetting('max-archive-size', local);
 414 | 
 415 |         text.inputEl.setAttr('type', 'number');
 416 |         text.inputEl.placeholder = `${globalValue ? globalValue : '-1'} (default)`;
 417 |         text.inputEl.value = value ? value.toString() : '';
 418 | 
 419 |         text.onChange((val) => {
 420 |           if (val && numberRegEx.test(val)) {
 421 |             text.inputEl.removeClass('error');
 422 | 
 423 |             this.applySettingsUpdate({
 424 |               'max-archive-size': {
 425 |                 $set: parseInt(val),
 426 |               },
 427 |             });
 428 | 
 429 |             return;
 430 |           }
 431 | 
 432 |           if (val) {
 433 |             text.inputEl.addClass('error');
 434 |           }
 435 | 
 436 |           this.applySettingsUpdate({
 437 |             $unset: ['max-archive-size'],
 438 |           });
 439 |         });
 440 |       });
 441 | 
 442 |     new Setting(contentEl)
 443 |       .setName(t('Note template'))
 444 |       .setDesc(t('This template will be used when creating new notes from Kanban cards.'))
 445 |       .then(
 446 |         createSearchSelect({
 447 |           choices: templateFiles,
 448 |           key: 'new-note-template',
 449 |           warningText: templateWarning,
 450 |           local,
 451 |           placeHolderStr: t('No template'),
 452 |           manager: this,
 453 |         })
 454 |       );
 455 | 
 456 |     new Setting(contentEl)
 457 |       .setName(t('Note folder'))
 458 |       .setDesc(
 459 |         t(
 460 |           'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.'
 461 |         )
 462 |       )
 463 |       .then(
 464 |         createSearchSelect({
 465 |           choices: vaultFolders,
 466 |           key: 'new-note-folder',
 467 |           local,
 468 |           placeHolderStr: t('Default folder'),
 469 |           manager: this,
 470 |         })
 471 |       );
 472 | 
 473 |     contentEl.createEl('h4', { text: t('Tags') });
 474 | 
 475 |     new Setting(contentEl)
 476 |       .setName(t('Move tags to card footer'))
 477 |       .setDesc(
 478 |         t("When toggled, tags will be displayed in the card's footer instead of the card's body.")
 479 |       )
 480 |       .then((setting) => {
 481 |         let toggleComponent: ToggleComponent;
 482 | 
 483 |         setting
 484 |           .addToggle((toggle) => {
 485 |             toggleComponent = toggle;
 486 | 
 487 |             const [value, globalValue] = this.getSetting('move-tags', local);
 488 | 
 489 |             if (value !== undefined) {
 490 |               toggle.setValue(value as boolean);
 491 |             } else if (globalValue !== undefined) {
 492 |               toggle.setValue(globalValue as boolean);
 493 |             }
 494 | 
 495 |             toggle.onChange((newValue) => {
 496 |               this.applySettingsUpdate({
 497 |                 'move-tags': {
 498 |                   $set: newValue,
 499 |                 },
 500 |               });
 501 |             });
 502 |           })
 503 |           .addExtraButton((b) => {
 504 |             b.setIcon('lucide-rotate-ccw')
 505 |               .setTooltip(t('Reset to default'))
 506 |               .onClick(() => {
 507 |                 const [, globalValue] = this.getSetting('move-tags', local);
 508 |                 toggleComponent.setValue(!!globalValue);
 509 | 
 510 |                 this.applySettingsUpdate({
 511 |                   $unset: ['move-tags'],
 512 |                 });
 513 |               });
 514 |           });
 515 |       });
 516 | 
 517 |     new Setting(contentEl)
 518 |       .setName(t('Tag click action'))
 519 |       .setDesc(
 520 |         t(
 521 |           'This setting controls whether clicking the tags displayed below the card title opens the Obsidian search or the Kanban board search.'
 522 |         )
 523 |       )
 524 |       .addDropdown((dropdown) => {
 525 |         dropdown.addOption('kanban', t('Search Kanban Board'));
 526 |         dropdown.addOption('obsidian', t('Search Obsidian Vault'));
 527 | 
 528 |         const [value, globalValue] = this.getSetting('tag-action', local);
 529 | 
 530 |         dropdown.setValue((value as string) || (globalValue as string) || 'obsidian');
 531 |         dropdown.onChange((value) => {
 532 |           this.applySettingsUpdate({
 533 |             'tag-action': {
 534 |               $set: value as 'kanban' | 'obsidian',
 535 |             },
 536 |           });
 537 |         });
 538 |       });
 539 | 
 540 |     new Setting(contentEl).then((setting) => {
 541 |       const [value, globalValue] = this.getSetting('tag-sort', local);
 542 | 
 543 |       const keys: TagSortSetting[] = ((value || globalValue || []) as TagSort[]).map((k) => {
 544 |         return {
 545 |           ...TagSortSettingTemplate,
 546 |           id: generateInstanceId(),
 547 |           data: k,
 548 |         };
 549 |       });
 550 | 
 551 |       renderTagSortSettings(setting.settingEl, contentEl, keys, (keys: TagSortSetting[]) =>
 552 |         this.applySettingsUpdate({
 553 |           'tag-sort': {
 554 |             $set: keys.map((k) => k.data),
 555 |           },
 556 |         })
 557 |       );
 558 | 
 559 |       this.cleanupFns.push(() => {
 560 |         if (setting.settingEl) {
 561 |           cleanUpTagSortSettings(setting.settingEl);
 562 |         }
 563 |       });
 564 |     });
 565 | 
 566 |     new Setting(contentEl).then((setting) => {
 567 |       const [value] = this.getSetting('tag-colors', local);
 568 | 
 569 |       const keys: TagColorSetting[] = ((value || []) as TagColor[]).map((k) => {
 570 |         return {
 571 |           ...TagColorSettingTemplate,
 572 |           id: generateInstanceId(),
 573 |           data: k,
 574 |         };
 575 |       });
 576 | 
 577 |       renderTagSettings(setting.settingEl, keys, (keys: TagColorSetting[]) =>
 578 |         this.applySettingsUpdate({
 579 |           'tag-colors': {
 580 |             $set: keys.map((k) => k.data),
 581 |           },
 582 |         })
 583 |       );
 584 | 
 585 |       this.cleanupFns.push(() => {
 586 |         if (setting.settingEl) {
 587 |           cleanUpTagSettings(setting.settingEl);
 588 |         }
 589 |       });
 590 |     });
 591 | 
 592 |     contentEl.createEl('h4', { text: t('Date & Time') });
 593 | 
 594 |     new Setting(contentEl)
 595 |       .setName(t('Move dates to card footer'))
 596 |       .setDesc(
 597 |         t("When toggled, dates will be displayed in the card's footer instead of the card's body.")
 598 |       )
 599 |       .then((setting) => {
 600 |         let toggleComponent: ToggleComponent;
 601 | 
 602 |         setting
 603 |           .addToggle((toggle) => {
 604 |             toggleComponent = toggle;
 605 | 
 606 |             const [value, globalValue] = this.getSetting('move-dates', local);
 607 | 
 608 |             if (value !== undefined) {
 609 |               toggle.setValue(value as boolean);
 610 |             } else if (globalValue !== undefined) {
 611 |               toggle.setValue(globalValue as boolean);
 612 |             }
 613 | 
 614 |             toggle.onChange((newValue) => {
 615 |               this.applySettingsUpdate({
 616 |                 'move-dates': {
 617 |                   $set: newValue,
 618 |                 },
 619 |               });
 620 |             });
 621 |           })
 622 |           .addExtraButton((b) => {
 623 |             b.setIcon('lucide-rotate-ccw')
 624 |               .setTooltip(t('Reset to default'))
 625 |               .onClick(() => {
 626 |                 const [, globalValue] = this.getSetting('move-dates', local);
 627 |                 toggleComponent.setValue((globalValue as boolean) ?? true);
 628 | 
 629 |                 this.applySettingsUpdate({
 630 |                   $unset: ['move-dates'],
 631 |                 });
 632 |               });
 633 |           });
 634 |       });
 635 | 
 636 |     new Setting(contentEl)
 637 |       .setName(t('Date trigger'))
 638 |       .setDesc(t('When this is typed, it will trigger the date selector'))
 639 |       .addText((text) => {
 640 |         const [value, globalValue] = this.getSetting('date-trigger', local);
 641 | 
 642 |         if (value || globalValue) {
 643 |           text.setValue((value || globalValue) as string);
 644 |         }
 645 | 
 646 |         text.setPlaceholder((globalValue as string) || defaultDateTrigger);
 647 | 
 648 |         text.onChange((newValue) => {
 649 |           if (newValue) {
 650 |             this.applySettingsUpdate({
 651 |               'date-trigger': {
 652 |                 $set: newValue,
 653 |               },
 654 |             });
 655 |           } else {
 656 |             this.applySettingsUpdate({
 657 |               $unset: ['date-trigger'],
 658 |             });
 659 |           }
 660 |         });
 661 |       });
 662 | 
 663 |     new Setting(contentEl)
 664 |       .setName(t('Time trigger'))
 665 |       .setDesc(t('When this is typed, it will trigger the time selector'))
 666 |       .addText((text) => {
 667 |         const [value, globalValue] = this.getSetting('time-trigger', local);
 668 | 
 669 |         if (value || globalValue) {
 670 |           text.setValue((value || globalValue) as string);
 671 |         }
 672 | 
 673 |         text.setPlaceholder((globalValue as string) || defaultTimeTrigger);
 674 | 
 675 |         text.onChange((newValue) => {
 676 |           if (newValue) {
 677 |             this.applySettingsUpdate({
 678 |               'time-trigger': {
 679 |                 $set: newValue,
 680 |               },
 681 |             });
 682 |           } else {
 683 |             this.applySettingsUpdate({
 684 |               $unset: ['time-trigger'],
 685 |             });
 686 |           }
 687 |         });
 688 |       });
 689 | 
 690 |     new Setting(contentEl).setName(t('Date format')).then((setting) => {
 691 |       setting.addMomentFormat((mf) => {
 692 |         setting.descEl.appendChild(
 693 |           createFragment((frag) => {
 694 |             frag.appendText(t('This format will be used when saving dates in markdown.'));
 695 |             frag.createEl('br');
 696 |             frag.appendText(t('For more syntax, refer to') + ' ');
 697 |             frag.createEl(
 698 |               'a',
 699 |               {
 700 |                 text: t('format reference'),
 701 |                 href: 'https://momentjs.com/docs/#/displaying/format/',
 702 |               },
 703 |               (a) => {
 704 |                 a.setAttr('target', '_blank');
 705 |               }
 706 |             );
 707 |             frag.createEl('br');
 708 |             frag.appendText(t('Your current syntax looks like this') + ': ');
 709 |             mf.setSampleEl(frag.createEl('b', { cls: 'u-pop' }));
 710 |             frag.createEl('br');
 711 |           })
 712 |         );
 713 | 
 714 |         const [value, globalValue] = this.getSetting('date-format', local);
 715 |         const defaultFormat = getDefaultDateFormat(this.app);
 716 | 
 717 |         mf.setPlaceholder(defaultFormat);
 718 |         mf.setDefaultFormat(defaultFormat);
 719 | 
 720 |         if (value || globalValue) {
 721 |           mf.setValue((value || globalValue) as string);
 722 |         }
 723 | 
 724 |         mf.onChange((newValue) => {
 725 |           if (newValue) {
 726 |             this.applySettingsUpdate({
 727 |               'date-format': {
 728 |                 $set: newValue,
 729 |               },
 730 |             });
 731 |           } else {
 732 |             this.applySettingsUpdate({
 733 |               $unset: ['date-format'],
 734 |             });
 735 |           }
 736 |         });
 737 |       });
 738 |     });
 739 | 
 740 |     new Setting(contentEl).setName(t('Time format')).then((setting) => {
 741 |       setting.addMomentFormat((mf) => {
 742 |         setting.descEl.appendChild(
 743 |           createFragment((frag) => {
 744 |             frag.appendText(t('For more syntax, refer to') + ' ');
 745 |             frag.createEl(
 746 |               'a',
 747 |               {
 748 |                 text: t('format reference'),
 749 |                 href: 'https://momentjs.com/docs/#/displaying/format/',
 750 |               },
 751 |               (a) => {
 752 |                 a.setAttr('target', '_blank');
 753 |               }
 754 |             );
 755 |             frag.createEl('br');
 756 |             frag.appendText(t('Your current syntax looks like this') + ': ');
 757 |             mf.setSampleEl(frag.createEl('b', { cls: 'u-pop' }));
 758 |             frag.createEl('br');
 759 |           })
 760 |         );
 761 | 
 762 |         const [value, globalValue] = this.getSetting('time-format', local);
 763 |         const defaultFormat = getDefaultTimeFormat(this.app);
 764 | 
 765 |         mf.setPlaceholder(defaultFormat);
 766 |         mf.setDefaultFormat(defaultFormat);
 767 | 
 768 |         if (value || globalValue) {
 769 |           mf.setValue((value || globalValue) as string);
 770 |         }
 771 | 
 772 |         mf.onChange((newValue) => {
 773 |           if (newValue) {
 774 |             this.applySettingsUpdate({
 775 |               'time-format': {
 776 |                 $set: newValue,
 777 |               },
 778 |             });
 779 |           } else {
 780 |             this.applySettingsUpdate({
 781 |               $unset: ['time-format'],
 782 |             });
 783 |           }
 784 |         });
 785 |       });
 786 |     });
 787 | 
 788 |     new Setting(contentEl).setName(t('Date display format')).then((setting) => {
 789 |       setting.addMomentFormat((mf) => {
 790 |         setting.descEl.appendChild(
 791 |           createFragment((frag) => {
 792 |             frag.appendText(t('This format will be used when displaying dates in Kanban cards.'));
 793 |             frag.createEl('br');
 794 |             frag.appendText(t('For more syntax, refer to') + ' ');
 795 |             frag.createEl(
 796 |               'a',
 797 |               {
 798 |                 text: t('format reference'),
 799 |                 href: 'https://momentjs.com/docs/#/displaying/format/',
 800 |               },
 801 |               (a) => {
 802 |                 a.setAttr('target', '_blank');
 803 |               }
 804 |             );
 805 |             frag.createEl('br');
 806 |             frag.appendText(t('Your current syntax looks like this') + ': ');
 807 |             mf.setSampleEl(frag.createEl('b', { cls: 'u-pop' }));
 808 |             frag.createEl('br');
 809 |           })
 810 |         );
 811 | 
 812 |         const [value, globalValue] = this.getSetting('date-display-format', local);
 813 |         const defaultFormat = getDefaultDateFormat(this.app);
 814 | 
 815 |         mf.setPlaceholder(defaultFormat);
 816 |         mf.setDefaultFormat(defaultFormat);
 817 | 
 818 |         if (value || globalValue) {
 819 |           mf.setValue((value || globalValue) as string);
 820 |         }
 821 | 
 822 |         mf.onChange((newValue) => {
 823 |           if (newValue) {
 824 |             this.applySettingsUpdate({
 825 |               'date-display-format': {
 826 |                 $set: newValue,
 827 |               },
 828 |             });
 829 |           } else {
 830 |             this.applySettingsUpdate({
 831 |               $unset: ['date-display-format'],
 832 |             });
 833 |           }
 834 |         });
 835 |       });
 836 |     });
 837 | 
 838 |     new Setting(contentEl)
 839 |       .setName(t('Show relative date'))
 840 |       .setDesc(
 841 |         t(
 842 |           "When toggled, cards will display the distance between today and the card's date. eg. 'In 3 days', 'A month ago'. Relative dates will not be shown for dates from the Tasks and Dataview plugins."
 843 |         )
 844 |       )
 845 |       .then((setting) => {
 846 |         let toggleComponent: ToggleComponent;
 847 | 
 848 |         setting
 849 |           .addToggle((toggle) => {
 850 |             toggleComponent = toggle;
 851 | 
 852 |             const [value, globalValue] = this.getSetting('show-relative-date', local);
 853 | 
 854 |             if (value !== undefined) {
 855 |               toggle.setValue(value as boolean);
 856 |             } else if (globalValue !== undefined) {
 857 |               toggle.setValue(globalValue as boolean);
 858 |             }
 859 | 
 860 |             toggle.onChange((newValue) => {
 861 |               this.applySettingsUpdate({
 862 |                 'show-relative-date': {
 863 |                   $set: newValue,
 864 |                 },
 865 |               });
 866 |             });
 867 |           })
 868 |           .addExtraButton((b) => {
 869 |             b.setIcon('lucide-rotate-ccw')
 870 |               .setTooltip(t('Reset to default'))
 871 |               .onClick(() => {
 872 |                 const [, globalValue] = this.getSetting('show-relative-date', local);
 873 |                 toggleComponent.setValue(!!globalValue);
 874 | 
 875 |                 this.applySettingsUpdate({
 876 |                   $unset: ['show-relative-date'],
 877 |                 });
 878 |               });
 879 |           });
 880 |       });
 881 | 
 882 |     new Setting(contentEl)
 883 |       .setName(t('Link dates to daily notes'))
 884 |       .setDesc(t('When toggled, dates will link to daily notes. Eg. [[2021-04-26]]'))
 885 |       .then((setting) => {
 886 |         let toggleComponent: ToggleComponent;
 887 | 
 888 |         setting
 889 |           .addToggle((toggle) => {
 890 |             toggleComponent = toggle;
 891 | 
 892 |             const [value, globalValue] = this.getSetting('link-date-to-daily-note', local);
 893 | 
 894 |             if (value !== undefined) {
 895 |               toggle.setValue(value as boolean);
 896 |             } else if (globalValue !== undefined) {
 897 |               toggle.setValue(globalValue as boolean);
 898 |             }
 899 | 
 900 |             toggle.onChange((newValue) => {
 901 |               this.applySettingsUpdate({
 902 |                 'link-date-to-daily-note': {
 903 |                   $set: newValue,
 904 |                 },
 905 |               });
 906 |             });
 907 |           })
 908 |           .addExtraButton((b) => {
 909 |             b.setIcon('lucide-rotate-ccw')
 910 |               .setTooltip(t('Reset to default'))
 911 |               .onClick(() => {
 912 |                 const [, globalValue] = this.getSetting('link-date-to-daily-note', local);
 913 |                 toggleComponent.setValue(!!globalValue);
 914 | 
 915 |                 this.applySettingsUpdate({
 916 |                   $unset: ['link-date-to-daily-note'],
 917 |                 });
 918 |               });
 919 |           });
 920 |       });
 921 | 
 922 |     new Setting(contentEl).then((setting) => {
 923 |       const [value] = this.getSetting('date-colors', local);
 924 | 
 925 |       const keys: DateColorSetting[] = ((value || []) as DateColor[]).map((k) => {
 926 |         return {
 927 |           ...DateColorSettingTemplate,
 928 |           id: generateInstanceId(),
 929 |           data: k,
 930 |         };
 931 |       });
 932 | 
 933 |       renderDateSettings(
 934 |         setting.settingEl,
 935 |         keys,
 936 |         (keys: DateColorSetting[]) =>
 937 |           this.applySettingsUpdate({
 938 |             'date-colors': {
 939 |               $set: keys.map((k) => k.data),
 940 |             },
 941 |           }),
 942 |         () => {
 943 |           const [value, globalValue] = this.getSetting('date-display-format', local);
 944 |           const defaultFormat = getDefaultDateFormat(this.app);
 945 |           return value || globalValue || defaultFormat;
 946 |         },
 947 |         () => {
 948 |           const [value, globalValue] = this.getSetting('time-format', local);
 949 |           const defaultFormat = getDefaultTimeFormat(this.app);
 950 |           return value || globalValue || defaultFormat;
 951 |         }
 952 |       );
 953 | 
 954 |       this.cleanupFns.push(() => {
 955 |         if (setting.settingEl) {
 956 |           cleanUpDateSettings(setting.settingEl);
 957 |         }
 958 |       });
 959 |     });
 960 | 
 961 |     new Setting(contentEl)
 962 |       .setName(t('Add date and time to archived cards'))
 963 |       .setDesc(
 964 |         t(
 965 |           'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title'
 966 |         )
 967 |       )
 968 |       .then((setting) => {
 969 |         let toggleComponent: ToggleComponent;
 970 | 
 971 |         setting
 972 |           .addToggle((toggle) => {
 973 |             toggleComponent = toggle;
 974 | 
 975 |             const [value, globalValue] = this.getSetting('archive-with-date', local);
 976 | 
 977 |             if (value !== undefined) {
 978 |               toggle.setValue(value as boolean);
 979 |             } else if (globalValue !== undefined) {
 980 |               toggle.setValue(globalValue as boolean);
 981 |             }
 982 | 
 983 |             toggle.onChange((newValue) => {
 984 |               this.applySettingsUpdate({
 985 |                 'archive-with-date': {
 986 |                   $set: newValue,
 987 |                 },
 988 |               });
 989 |             });
 990 |           })
 991 |           .addExtraButton((b) => {
 992 |             b.setIcon('lucide-rotate-ccw')
 993 |               .setTooltip(t('Reset to default'))
 994 |               .onClick(() => {
 995 |                 const [, globalValue] = this.getSetting('archive-with-date', local);
 996 |                 toggleComponent.setValue(!!globalValue);
 997 | 
 998 |                 this.applySettingsUpdate({
 999 |                   $unset: ['archive-with-date'],
1000 |                 });
1001 |               });
1002 |           });
1003 |       });
1004 | 
1005 |     new Setting(contentEl)
1006 |       .setName(t('Add archive date/time after card title'))
1007 |       .setDesc(
1008 |         t(
1009 |           'When toggled, the archived date/time will be added after the card title, e.g.- [ ] My card title 2021-05-14 10:00am. By default, it is inserted before the title.'
1010 |         )
1011 |       )
1012 |       .then((setting) => {
1013 |         let toggleComponent: ToggleComponent;
1014 | 
1015 |         setting
1016 |           .addToggle((toggle) => {
1017 |             toggleComponent = toggle;
1018 | 
1019 |             const [value, globalValue] = this.getSetting('append-archive-date', local);
1020 | 
1021 |             if (value !== undefined) {
1022 |               toggle.setValue(value as boolean);
1023 |             } else if (globalValue !== undefined) {
1024 |               toggle.setValue(globalValue as boolean);
1025 |             }
1026 | 
1027 |             toggle.onChange((newValue) => {
1028 |               this.applySettingsUpdate({
1029 |                 'append-archive-date': {
1030 |                   $set: newValue,
1031 |                 },
1032 |               });
1033 |             });
1034 |           })
1035 |           .addExtraButton((b) => {
1036 |             b.setIcon('lucide-rotate-ccw')
1037 |               .setTooltip(t('Reset to default'))
1038 |               .onClick(() => {
1039 |                 const [, globalValue] = this.getSetting('append-archive-date', local);
1040 |                 toggleComponent.setValue(!!globalValue);
1041 | 
1042 |                 this.applySettingsUpdate({
1043 |                   $unset: ['append-archive-date'],
1044 |                 });
1045 |               });
1046 |           });
1047 |       });
1048 | 
1049 |     new Setting(contentEl)
1050 |       .setName(t('Archive date/time separator'))
1051 |       .setDesc(t('This will be used to separate the archived date/time from the title'))
1052 |       .addText((text) => {
1053 |         const [value, globalValue] = this.getSetting('archive-date-separator', local);
1054 | 
1055 |         text.inputEl.placeholder = globalValue ? `${globalValue} (default)` : '';
1056 |         text.inputEl.value = value ? (value as string) : '';
1057 | 
1058 |         text.onChange((val) => {
1059 |           if (val) {
1060 |             this.applySettingsUpdate({
1061 |               'archive-date-separator': {
1062 |                 $set: val,
1063 |               },
1064 |             });
1065 | 
1066 |             return;
1067 |           }
1068 | 
1069 |           this.applySettingsUpdate({
1070 |             $unset: ['archive-date-separator'],
1071 |           });
1072 |         });
1073 |       });
1074 | 
1075 |     new Setting(contentEl).setName(t('Archive date/time format')).then((setting) => {
1076 |       setting.addMomentFormat((mf) => {
1077 |         setting.descEl.appendChild(
1078 |           createFragment((frag) => {
1079 |             frag.appendText(t('For more syntax, refer to') + ' ');
1080 |             frag.createEl(
1081 |               'a',
1082 |               {
1083 |                 text: t('format reference'),
1084 |                 href: 'https://momentjs.com/docs/#/displaying/format/',
1085 |               },
1086 |               (a) => {
1087 |                 a.setAttr('target', '_blank');
1088 |               }
1089 |             );
1090 |             frag.createEl('br');
1091 |             frag.appendText(t('Your current syntax looks like this') + ': ');
1092 |             mf.setSampleEl(frag.createEl('b', { cls: 'u-pop' }));
1093 |             frag.createEl('br');
1094 |           })
1095 |         );
1096 | 
1097 |         const [value, globalValue] = this.getSetting('archive-date-format', local);
1098 | 
1099 |         const [dateFmt, globalDateFmt] = this.getSetting('date-format', local);
1100 |         const defaultDateFmt = dateFmt || globalDateFmt || getDefaultDateFormat(this.app);
1101 |         const [timeFmt, globalTimeFmt] = this.getSetting('time-format', local);
1102 |         const defaultTimeFmt = timeFmt || globalTimeFmt || getDefaultTimeFormat(this.app);
1103 | 
1104 |         const defaultFormat = `${defaultDateFmt} ${defaultTimeFmt}`;
1105 | 
1106 |         mf.setPlaceholder(defaultFormat);
1107 |         mf.setDefaultFormat(defaultFormat);
1108 | 
1109 |         if (value || globalValue) {
1110 |           mf.setValue((value || globalValue) as string);
1111 |         }
1112 | 
1113 |         mf.onChange((newValue) => {
1114 |           if (newValue) {
1115 |             this.applySettingsUpdate({
1116 |               'archive-date-format': {
1117 |                 $set: newValue,
1118 |               },
1119 |             });
1120 |           } else {
1121 |             this.applySettingsUpdate({
1122 |               $unset: ['archive-date-format'],
1123 |             });
1124 |           }
1125 |         });
1126 |       });
1127 |     });
1128 | 
1129 |     new Setting(contentEl)
1130 |       .setName(t('Calendar: first day of week'))
1131 |       .setDesc(t('Override which day is used as the start of the week'))
1132 |       .addDropdown((dropdown) => {
1133 |         dropdown.addOption('', t('default'));
1134 |         dropdown.addOption('0', t('Sunday'));
1135 |         dropdown.addOption('1', t('Monday'));
1136 |         dropdown.addOption('2', t('Tuesday'));
1137 |         dropdown.addOption('3', t('Wednesday'));
1138 |         dropdown.addOption('4', t('Thursday'));
1139 |         dropdown.addOption('5', t('Friday'));
1140 |         dropdown.addOption('6', t('Saturday'));
1141 | 
1142 |         const [value, globalValue] = this.getSetting('date-picker-week-start', local);
1143 | 
1144 |         dropdown.setValue(value?.toString() || globalValue?.toString() || '');
1145 |         dropdown.onChange((value) => {
1146 |           if (value) {
1147 |             this.applySettingsUpdate({
1148 |               'date-picker-week-start': {
1149 |                 $set: Number(value),
1150 |               },
1151 |             });
1152 |           } else {
1153 |             this.applySettingsUpdate({
1154 |               $unset: ['date-picker-week-start'],
1155 |             });
1156 |           }
1157 |         });
1158 |       });
1159 | 
1160 |     contentEl.createEl('br');
1161 |     contentEl.createEl('h4', { text: t('Inline Metadata') });
1162 | 
1163 |     new Setting(contentEl)
1164 |       .setName(t('Inline metadata position'))
1165 |       .setDesc(
1166 |         t('Controls where the inline metadata (from the Dataview plugin) will be displayed.')
1167 |       )
1168 |       .then((s) => {
1169 |         let input: DropdownComponent;
1170 | 
1171 |         s.addDropdown((dropdown) => {
1172 |           input = dropdown;
1173 | 
1174 |           dropdown.addOption('body', t('Card body'));
1175 |           dropdown.addOption('footer', t('Card footer'));
1176 |           dropdown.addOption('metadata-table', t('Merge with linked page metadata'));
1177 | 
1178 |           const [value, globalValue] = this.getSetting('inline-metadata-position', local);
1179 | 
1180 |           dropdown.setValue(
1181 |             value?.toString() || globalValue?.toString() || defaultMetadataPosition
1182 |           );
1183 |           dropdown.onChange((value: 'body' | 'footer' | 'metadata-table') => {
1184 |             if (value) {
1185 |               this.applySettingsUpdate({
1186 |                 'inline-metadata-position': {
1187 |                   $set: value,
1188 |                 },
1189 |               });
1190 |             } else {
1191 |               this.applySettingsUpdate({
1192 |                 $unset: ['inline-metadata-position'],
1193 |               });
1194 |             }
1195 |           });
1196 |         }).addExtraButton((b) => {
1197 |           b.setIcon('lucide-rotate-ccw')
1198 |             .setTooltip(t('Reset to default'))
1199 |             .onClick(() => {
1200 |               const [, globalValue] = this.getSetting('inline-metadata-position', local);
1201 |               input.setValue((globalValue as string) || defaultMetadataPosition);
1202 | 
1203 |               this.applySettingsUpdate({
1204 |                 $unset: ['inline-metadata-position'],
1205 |               });
1206 |             });
1207 |         });
1208 |       });
1209 | 
1210 |     new Setting(contentEl)
1211 |       .setName(t('Move task data to card footer'))
1212 |       .setDesc(
1213 |         t(
1214 |           "When toggled, task data (from the Tasks plugin) will be displayed in the card's footer instead of the card's body."
1215 |         )
1216 |       )
1217 |       .then((setting) => {
1218 |         let toggleComponent: ToggleComponent;
1219 | 
1220 |         setting
1221 |           .addToggle((toggle) => {
1222 |             toggleComponent = toggle;
1223 | 
1224 |             const [value, globalValue] = this.getSetting('move-task-metadata', local);
1225 | 
1226 |             if (value !== undefined) {
1227 |               toggle.setValue(value as boolean);
1228 |             } else if (globalValue !== undefined) {
1229 |               toggle.setValue(globalValue as boolean);
1230 |             }
1231 | 
1232 |             toggle.onChange((newValue) => {
1233 |               this.applySettingsUpdate({
1234 |                 'move-task-metadata': {
1235 |                   $set: newValue,
1236 |                 },
1237 |               });
1238 |             });
1239 |           })
1240 |           .addExtraButton((b) => {
1241 |             b.setIcon('lucide-rotate-ccw')
1242 |               .setTooltip(t('Reset to default'))
1243 |               .onClick(() => {
1244 |                 const [, globalValue] = this.getSetting('move-task-metadata', local);
1245 |                 toggleComponent.setValue((globalValue as boolean) ?? true);
1246 | 
1247 |                 this.applySettingsUpdate({
1248 |                   $unset: ['move-task-metadata'],
1249 |                 });
1250 |               });
1251 |           });
1252 |       });
1253 | 
1254 |     contentEl.createEl('br');
1255 |     contentEl.createEl('h4', { text: t('Linked Page Metadata') });
1256 |     contentEl.createEl('p', {
1257 |       cls: c('metadata-setting-desc'),
1258 |       text: t(
1259 |         'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.'
1260 |       ),
1261 |     });
1262 | 
1263 |     new Setting(contentEl).then((setting) => {
1264 |       setting.settingEl.addClass(c('draggable-setting-container'));
1265 | 
1266 |       const [value] = this.getSetting('metadata-keys', local);
1267 | 
1268 |       const keys: MetadataSetting[] = ((value as DataKey[]) || ([] as DataKey[])).map((k) => {
1269 |         return {
1270 |           ...MetadataSettingTemplate,
1271 |           id: generateInstanceId(),
1272 |           data: k,
1273 |           win: getParentWindow(contentEl),
1274 |         };
1275 |       });
1276 | 
1277 |       renderMetadataSettings(setting.settingEl, contentEl, keys, (keys: MetadataSetting[]) =>
1278 |         this.applySettingsUpdate({
1279 |           'metadata-keys': {
1280 |             $set: keys.map((k) => k.data),
1281 |           },
1282 |         })
1283 |       );
1284 | 
1285 |       this.cleanupFns.push(() => {
1286 |         if (setting.settingEl) {
1287 |           cleanupMetadataSettings(setting.settingEl);
1288 |         }
1289 |       });
1290 |     });
1291 | 
1292 |     contentEl.createEl('h4', { text: t('Board Header Buttons') });
1293 | 
1294 |     new Setting(contentEl).setName(t('Add a list')).then((setting) => {
1295 |       let toggleComponent: ToggleComponent;
1296 | 
1297 |       setting
1298 |         .addToggle((toggle) => {
1299 |           toggleComponent = toggle;
1300 | 
1301 |           const [value, globalValue] = this.getSetting('show-add-list', local);
1302 | 
1303 |           if (value !== undefined && value !== null) {
1304 |             toggle.setValue(value as boolean);
1305 |           } else if (globalValue !== undefined && globalValue !== null) {
1306 |             toggle.setValue(globalValue as boolean);
1307 |           } else {
1308 |             // default
1309 |             toggle.setValue(true);
1310 |           }
1311 | 
1312 |           toggle.onChange((newValue) => {
1313 |             this.applySettingsUpdate({
1314 |               'show-add-list': {
1315 |                 $set: newValue,
1316 |               },
1317 |             });
1318 |           });
1319 |         })
1320 |         .addExtraButton((b) => {
1321 |           b.setIcon('lucide-rotate-ccw')
1322 |             .setTooltip(t('Reset to default'))
1323 |             .onClick(() => {
1324 |               const [, globalValue] = this.getSetting('show-add-list', local);
1325 |               toggleComponent.setValue(!!globalValue);
1326 | 
1327 |               this.applySettingsUpdate({
1328 |                 $unset: ['show-add-list'],
1329 |               });
1330 |             });
1331 |         });
1332 |     });
1333 | 
1334 |     new Setting(contentEl).setName(t('Archive completed cards')).then((setting) => {
1335 |       let toggleComponent: ToggleComponent;
1336 | 
1337 |       setting
1338 |         .addToggle((toggle) => {
1339 |           toggleComponent = toggle;
1340 | 
1341 |           const [value, globalValue] = this.getSetting('show-archive-all', local);
1342 | 
1343 |           if (value !== undefined && value !== null) {
1344 |             toggle.setValue(value as boolean);
1345 |           } else if (globalValue !== undefined && globalValue !== null) {
1346 |             toggle.setValue(globalValue as boolean);
1347 |           } else {
1348 |             // default
1349 |             toggle.setValue(true);
1350 |           }
1351 | 
1352 |           toggle.onChange((newValue) => {
1353 |             this.applySettingsUpdate({
1354 |               'show-archive-all': {
1355 |                 $set: newValue,
1356 |               },
1357 |             });
1358 |           });
1359 |         })
1360 |         .addExtraButton((b) => {
1361 |           b.setIcon('lucide-rotate-ccw')
1362 |             .setTooltip(t('Reset to default'))
1363 |             .onClick(() => {
1364 |               const [, globalValue] = this.getSetting('show-archive-all', local);
1365 |               toggleComponent.setValue(!!globalValue);
1366 | 
1367 |               this.applySettingsUpdate({
1368 |                 $unset: ['show-archive-all'],
1369 |               });
1370 |             });
1371 |         });
1372 |     });
1373 | 
1374 |     new Setting(contentEl).setName(t('Open as markdown')).then((setting) => {
1375 |       let toggleComponent: ToggleComponent;
1376 | 
1377 |       setting
1378 |         .addToggle((toggle) => {
1379 |           toggleComponent = toggle;
1380 | 
1381 |           const [value, globalValue] = this.getSetting('show-view-as-markdown', local);
1382 | 
1383 |           if (value !== undefined && value !== null) {
1384 |             toggle.setValue(value as boolean);
1385 |           } else if (globalValue !== undefined && globalValue !== null) {
1386 |             toggle.setValue(globalValue as boolean);
1387 |           } else {
1388 |             // default
1389 |             toggle.setValue(true);
1390 |           }
1391 | 
1392 |           toggle.onChange((newValue) => {
1393 |             this.applySettingsUpdate({
1394 |               'show-view-as-markdown': {
1395 |                 $set: newValue,
1396 |               },
1397 |             });
1398 |           });
1399 |         })
1400 |         .addExtraButton((b) => {
1401 |           b.setIcon('lucide-rotate-ccw')
1402 |             .setTooltip(t('Reset to default'))
1403 |             .onClick(() => {
1404 |               const [, globalValue] = this.getSetting('show-view-as-markdown', local);
1405 |               toggleComponent.setValue(!!globalValue);
1406 | 
1407 |               this.applySettingsUpdate({
1408 |                 $unset: ['show-view-as-markdown'],
1409 |               });
1410 |             });
1411 |         });
1412 |     });
1413 | 
1414 |     new Setting(contentEl).setName(t('Open board settings')).then((setting) => {
1415 |       let toggleComponent: ToggleComponent;
1416 | 
1417 |       setting
1418 |         .addToggle((toggle) => {
1419 |           toggleComponent = toggle;
1420 | 
1421 |           const [value, globalValue] = this.getSetting('show-board-settings', local);
1422 | 
1423 |           if (value !== undefined && value !== null) {
1424 |             toggle.setValue(value as boolean);
1425 |           } else if (globalValue !== undefined && globalValue !== null) {
1426 |             toggle.setValue(globalValue as boolean);
1427 |           } else {
1428 |             // default
1429 |             toggle.setValue(true);
1430 |           }
1431 | 
1432 |           toggle.onChange((newValue) => {
1433 |             this.applySettingsUpdate({
1434 |               'show-board-settings': {
1435 |                 $set: newValue,
1436 |               },
1437 |             });
1438 |           });
1439 |         })
1440 |         .addExtraButton((b) => {
1441 |           b.setIcon('lucide-rotate-ccw')
1442 |             .setTooltip(t('Reset to default'))
1443 |             .onClick(() => {
1444 |               const [, globalValue] = this.getSetting('show-board-settings', local);
1445 |               toggleComponent.setValue(!!globalValue);
1446 | 
1447 |               this.applySettingsUpdate({
1448 |                 $unset: ['show-board-settings'],
1449 |               });
1450 |             });
1451 |         });
1452 |     });
1453 | 
1454 |     new Setting(contentEl).setName(t('Search...')).then((setting) => {
1455 |       let toggleComponent: ToggleComponent;
1456 | 
1457 |       setting
1458 |         .addToggle((toggle) => {
1459 |           toggleComponent = toggle;
1460 | 
1461 |           const [value, globalValue] = this.getSetting('show-search', local);
1462 | 
1463 |           if (value !== undefined && value !== null) {
1464 |             toggle.setValue(value as boolean);
1465 |           } else if (globalValue !== undefined && globalValue !== null) {
1466 |             toggle.setValue(globalValue as boolean);
1467 |           } else {
1468 |             // default
1469 |             toggle.setValue(true);
1470 |           }
1471 | 
1472 |           toggle.onChange((newValue) => {
1473 |             this.applySettingsUpdate({
1474 |               'show-search': {
1475 |                 $set: newValue,
1476 |               },
1477 |             });
1478 |           });
1479 |         })
1480 |         .addExtraButton((b) => {
1481 |           b.setIcon('lucide-rotate-ccw')
1482 |             .setTooltip(t('Reset to default'))
1483 |             .onClick(() => {
1484 |               const [, globalValue] = this.getSetting('show-search', local);
1485 |               toggleComponent.setValue(!!globalValue);
1486 | 
1487 |               this.applySettingsUpdate({
1488 |                 $unset: ['show-search'],
1489 |               });
1490 |             });
1491 |         });
1492 |     });
1493 | 
1494 |     new Setting(contentEl).setName(t('Board view')).then((setting) => {
1495 |       let toggleComponent: ToggleComponent;
1496 | 
1497 |       setting
1498 |         .addToggle((toggle) => {
1499 |           toggleComponent = toggle;
1500 | 
1501 |           const [value, globalValue] = this.getSetting('show-set-view', local);
1502 | 
1503 |           if (value !== undefined && value !== null) {
1504 |             toggle.setValue(value as boolean);
1505 |           } else if (globalValue !== undefined && globalValue !== null) {
1506 |             toggle.setValue(globalValue as boolean);
1507 |           } else {
1508 |             // default
1509 |             toggle.setValue(true);
1510 |           }
1511 | 
1512 |           toggle.onChange((newValue) => {
1513 |             this.applySettingsUpdate({
1514 |               'show-set-view': {
1515 |                 $set: newValue,
1516 |               },
1517 |             });
1518 |           });
1519 |         })
1520 |         .addExtraButton((b) => {
1521 |           b.setIcon('lucide-rotate-ccw')
1522 |             .setTooltip(t('Reset to default'))
1523 |             .onClick(() => {
1524 |               const [, globalValue] = this.getSetting('show-set-view', local);
1525 |               toggleComponent.setValue(!!globalValue);
1526 | 
1527 |               this.applySettingsUpdate({
1528 |                 $unset: ['show-set-view'],
1529 |               });
1530 |             });
1531 |         });
1532 |     });
1533 |   }
1534 | 
1535 |   cleanUp() {
1536 |     this.win = null;
1537 |     this.cleanupFns.forEach((fn) => fn());
1538 |     this.cleanupFns = [];
1539 |   }
1540 | }
1541 | 
1542 | export class SettingsModal extends Modal {
1543 |   view: KanbanView;
1544 |   settingsManager: SettingsManager;
1545 | 
1546 |   constructor(view: KanbanView, config: SettingsManagerConfig, settings: KanbanSettings) {
1547 |     super(view.app);
1548 | 
1549 |     this.view = view;
1550 |     this.settingsManager = new SettingsManager(view.plugin, config, settings);
1551 |   }
1552 | 
1553 |   onOpen() {
1554 |     const { contentEl, modalEl } = this;
1555 | 
1556 |     modalEl.addClass(c('board-settings-modal'));
1557 | 
1558 |     this.settingsManager.constructUI(contentEl, this.view.file.basename, true);
1559 |   }
1560 | 
1561 |   onClose() {
1562 |     const { contentEl } = this;
1563 | 
1564 |     this.settingsManager.cleanUp();
1565 |     contentEl.empty();
1566 |   }
1567 | }
1568 | 
1569 | export class KanbanSettingsTab extends PluginSettingTab {
1570 |   plugin: KanbanPlugin;
1571 |   settingsManager: SettingsManager;
1572 | 
1573 |   constructor(plugin: KanbanPlugin, config: SettingsManagerConfig) {
1574 |     super(plugin.app, plugin);
1575 |     this.plugin = plugin;
1576 |     this.settingsManager = new SettingsManager(plugin, config, plugin.settings);
1577 |   }
1578 | 
1579 |   display() {
1580 |     const { containerEl } = this;
1581 | 
1582 |     containerEl.empty();
1583 |     containerEl.addClass(c('board-settings-modal'));
1584 | 
1585 |     this.settingsManager.constructUI(containerEl, t('Kanban Plugin'), false);
1586 |   }
1587 | }
1588 | 


--------------------------------------------------------------------------------
/src/StateManager.ts:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { App, TFile, moment } from 'obsidian';
  3 | import { useEffect, useState } from 'preact/compat';
  4 | 
  5 | import { KanbanView } from './KanbanView';
  6 | import { KanbanSettings, SettingRetrievers } from './Settings';
  7 | import { getDefaultDateFormat, getDefaultTimeFormat } from './components/helpers';
  8 | import { Board, BoardTemplate, Item } from './components/types';
  9 | import { ListFormat } from './parsers/List';
 10 | import { BaseFormat, frontmatterKey, shouldRefreshBoard } from './parsers/common';
 11 | import { getTaskStatusDone } from './parsers/helpers/inlineMetadata';
 12 | import { defaultDateTrigger, defaultMetadataPosition, defaultTimeTrigger } from './settingHelpers';
 13 | 
 14 | export class StateManager {
 15 |   onEmpty: () => void;
 16 |   getGlobalSettings: () => KanbanSettings;
 17 | 
 18 |   stateReceivers: Array<(state: Board) => void> = [];
 19 |   settingsNotifiers: Map<keyof KanbanSettings, Array<() => void>> = new Map();
 20 | 
 21 |   viewSet: Set<KanbanView> = new Set();
 22 |   compiledSettings: KanbanSettings = {};
 23 | 
 24 |   app: App;
 25 |   state: Board;
 26 |   file: TFile;
 27 | 
 28 |   parser: BaseFormat;
 29 | 
 30 |   constructor(
 31 |     app: App,
 32 |     initialView: KanbanView,
 33 |     initialData: string,
 34 |     onEmpty: () => void,
 35 |     getGlobalSettings: () => KanbanSettings
 36 |   ) {
 37 |     this.app = app;
 38 |     this.file = initialView.file;
 39 |     this.onEmpty = onEmpty;
 40 |     this.getGlobalSettings = getGlobalSettings;
 41 |     this.parser = new ListFormat(this);
 42 | 
 43 |     this.registerView(initialView, initialData, true);
 44 |   }
 45 | 
 46 |   getAView(): KanbanView {
 47 |     return this.viewSet.values().next().value;
 48 |   }
 49 | 
 50 |   hasError(): boolean {
 51 |     return !!this.state?.data?.errors?.length;
 52 |   }
 53 | 
 54 |   async registerView(view: KanbanView, data: string, shouldParseData: boolean) {
 55 |     if (!this.viewSet.has(view)) {
 56 |       this.viewSet.add(view);
 57 |     }
 58 | 
 59 |     // This helps delay blocking the UI until the the loading indicator is displayed
 60 |     await new Promise((res) => activeWindow.setTimeout(res, 10));
 61 | 
 62 |     if (shouldParseData) {
 63 |       await this.newBoard(view, data);
 64 |     } else {
 65 |       await view.prerender(this.state);
 66 |     }
 67 | 
 68 |     view.populateViewState(this.state.data.settings);
 69 |   }
 70 | 
 71 |   unregisterView(view: KanbanView) {
 72 |     if (this.viewSet.has(view)) {
 73 |       this.viewSet.delete(view);
 74 | 
 75 |       if (this.viewSet.size === 0) {
 76 |         this.onEmpty();
 77 |       }
 78 |     }
 79 |   }
 80 | 
 81 |   buildSettingRetrievers(): SettingRetrievers {
 82 |     return {
 83 |       getGlobalSettings: this.getGlobalSettings,
 84 |       getGlobalSetting: this.getGlobalSetting,
 85 |       getSetting: this.getSetting,
 86 |     };
 87 |   }
 88 | 
 89 |   async newBoard(view: KanbanView, md: string) {
 90 |     try {
 91 |       const board = this.getParsedBoard(md);
 92 |       await view.prerender(board);
 93 |       this.setState(board, false);
 94 |     } catch (e) {
 95 |       this.setError(e);
 96 |     }
 97 |   }
 98 | 
 99 |   saveToDisk() {
100 |     if (this.state.data.errors.length > 0) {
101 |       return;
102 |     }
103 | 
104 |     const view = this.getAView();
105 | 
106 |     if (view) {
107 |       const fileStr = this.parser.boardToMd(this.state);
108 |       view.requestSaveToDisk(fileStr);
109 | 
110 |       this.viewSet.forEach((view) => {
111 |         view.data = fileStr;
112 |       });
113 |     }
114 |   }
115 | 
116 |   softRefresh() {
117 |     this.stateReceivers.forEach((receiver) => receiver({ ...this.state }));
118 |   }
119 | 
120 |   forceRefresh() {
121 |     if (this.state) {
122 |       try {
123 |         this.compileSettings();
124 |         this.state = this.parser.reparseBoard();
125 | 
126 |         this.stateReceivers.forEach((receiver) => receiver(this.state));
127 |         this.settingsNotifiers.forEach((notifiers) => {
128 |           notifiers.forEach((fn) => fn());
129 |         });
130 |         this.viewSet.forEach((view) => view.initHeaderButtons());
131 |       } catch (e) {
132 |         console.error(e);
133 |         this.setError(e);
134 |       }
135 |     }
136 |   }
137 | 
138 |   setState(state: Board | ((board: Board) => Board), shouldSave: boolean = true) {
139 |     try {
140 |       const oldSettings = this.state?.data.settings;
141 |       const newState = typeof state === 'function' ? state(this.state) : state;
142 |       const newSettings = newState?.data.settings;
143 | 
144 |       if (oldSettings && newSettings && shouldRefreshBoard(oldSettings, newSettings)) {
145 |         this.state = update(this.state, {
146 |           data: {
147 |             settings: {
148 |               $set: newSettings,
149 |             },
150 |           },
151 |         });
152 |         this.compileSettings();
153 |         this.state = this.parser.reparseBoard();
154 |       } else {
155 |         this.state = newState;
156 |         this.compileSettings();
157 |       }
158 | 
159 |       this.viewSet.forEach((view) => {
160 |         view.initHeaderButtons();
161 |         view.validatePreviewCache(newState);
162 |       });
163 | 
164 |       if (shouldSave) {
165 |         this.saveToDisk();
166 |       }
167 | 
168 |       this.stateReceivers.forEach((receiver) => receiver(this.state));
169 | 
170 |       if (oldSettings !== newSettings && newSettings) {
171 |         this.settingsNotifiers.forEach((notifiers, key) => {
172 |           if ((!oldSettings && newSettings) || oldSettings[key] !== newSettings[key]) {
173 |             notifiers.forEach((fn) => fn());
174 |           }
175 |         });
176 |       }
177 |     } catch (e) {
178 |       console.error(e);
179 |       this.setError(e);
180 |     }
181 |   }
182 | 
183 |   useState(): Board {
184 |     const [state, setState] = useState(this.state);
185 | 
186 |     useEffect(() => {
187 |       this.stateReceivers.push((state) => setState(state));
188 |       setState(this.state);
189 |       return () => {
190 |         this.stateReceivers.remove(setState);
191 |       };
192 |     }, []);
193 | 
194 |     return state;
195 |   }
196 | 
197 |   useSetting<K extends keyof KanbanSettings>(key: K): KanbanSettings[K] {
198 |     const [state, setState] = useState<KanbanSettings[K]>(this.getSetting(key));
199 | 
200 |     useEffect(() => {
201 |       const receiver = () => setState(this.getSetting(key));
202 | 
203 |       if (this.settingsNotifiers.has(key)) {
204 |         this.settingsNotifiers.get(key).push(receiver);
205 |       } else {
206 |         this.settingsNotifiers.set(key, [receiver]);
207 |       }
208 | 
209 |       return () => {
210 |         this.settingsNotifiers.get(key).remove(receiver);
211 |       };
212 |     }, []);
213 | 
214 |     return state;
215 |   }
216 | 
217 |   compileSettings(suppliedSettings?: KanbanSettings) {
218 |     const globalKeys = this.getGlobalSetting('metadata-keys') || [];
219 |     const localKeys = this.getSettingRaw('metadata-keys', suppliedSettings) || [];
220 |     const metadataKeys = Array.from(new Set([...globalKeys, ...localKeys]));
221 | 
222 |     const dateFormat =
223 |       this.getSettingRaw('date-format', suppliedSettings) || getDefaultDateFormat(this.app);
224 |     const dateDisplayFormat =
225 |       this.getSettingRaw('date-display-format', suppliedSettings) || dateFormat;
226 | 
227 |     const timeFormat =
228 |       this.getSettingRaw('time-format', suppliedSettings) || getDefaultTimeFormat(this.app);
229 | 
230 |     const archiveDateFormat =
231 |       this.getSettingRaw('archive-date-format', suppliedSettings) || `${dateFormat} ${timeFormat}`;
232 | 
233 |     this.compiledSettings = {
234 |       [frontmatterKey]: this.getSettingRaw(frontmatterKey, suppliedSettings) || 'board',
235 |       'date-format': dateFormat,
236 |       'date-display-format': dateDisplayFormat,
237 |       'date-time-display-format': dateDisplayFormat + ' ' + timeFormat,
238 |       'date-trigger': this.getSettingRaw('date-trigger', suppliedSettings) || defaultDateTrigger,
239 |       'inline-metadata-position':
240 |         this.getSettingRaw('inline-metadata-position', suppliedSettings) || defaultMetadataPosition,
241 |       'time-format': timeFormat,
242 |       'time-trigger': this.getSettingRaw('time-trigger', suppliedSettings) || defaultTimeTrigger,
243 |       'link-date-to-daily-note': this.getSettingRaw('link-date-to-daily-note', suppliedSettings),
244 |       'move-dates': this.getSettingRaw('move-dates', suppliedSettings),
245 |       'move-tags': this.getSettingRaw('move-tags', suppliedSettings),
246 |       'move-task-metadata': this.getSettingRaw('move-task-metadata', suppliedSettings),
247 |       'metadata-keys': metadataKeys,
248 |       'archive-date-separator': this.getSettingRaw('archive-date-separator') || '',
249 |       'archive-date-format': archiveDateFormat,
250 |       'show-add-list': this.getSettingRaw('show-add-list', suppliedSettings) ?? true,
251 |       'show-archive-all': this.getSettingRaw('show-archive-all', suppliedSettings) ?? true,
252 |       'show-view-as-markdown':
253 |         this.getSettingRaw('show-view-as-markdown', suppliedSettings) ?? true,
254 |       'show-board-settings': this.getSettingRaw('show-board-settings', suppliedSettings) ?? true,
255 |       'show-search': this.getSettingRaw('show-search', suppliedSettings) ?? true,
256 |       'show-set-view': this.getSettingRaw('show-set-view', suppliedSettings) ?? true,
257 |       'tag-colors': this.getSettingRaw('tag-colors', suppliedSettings) ?? [],
258 |       'tag-sort': this.getSettingRaw('tag-sort', suppliedSettings) ?? [],
259 |       'date-colors': this.getSettingRaw('date-colors', suppliedSettings) ?? [],
260 |       'tag-action': this.getSettingRaw('tag-action', suppliedSettings) ?? 'obsidian',
261 |     };
262 |   }
263 | 
264 |   getSetting = <K extends keyof KanbanSettings>(
265 |     key: K,
266 |     suppliedLocalSettings?: KanbanSettings
267 |   ): KanbanSettings[K] => {
268 |     if (suppliedLocalSettings?.[key] !== undefined) {
269 |       return suppliedLocalSettings[key];
270 |     }
271 | 
272 |     if (this.compiledSettings?.[key] !== undefined) {
273 |       return this.compiledSettings[key];
274 |     }
275 | 
276 |     return this.getSettingRaw(key);
277 |   };
278 | 
279 |   getSettingRaw = <K extends keyof KanbanSettings>(
280 |     key: K,
281 |     suppliedLocalSettings?: KanbanSettings
282 |   ): KanbanSettings[K] => {
283 |     if (suppliedLocalSettings?.[key] !== undefined) {
284 |       return suppliedLocalSettings[key];
285 |     }
286 | 
287 |     if (this.state?.data?.settings?.[key] !== undefined) {
288 |       return this.state.data.settings[key];
289 |     }
290 | 
291 |     return this.getGlobalSetting(key);
292 |   };
293 | 
294 |   getGlobalSetting = <K extends keyof KanbanSettings>(key: K): KanbanSettings[K] => {
295 |     const globalSettings = this.getGlobalSettings();
296 | 
297 |     if (globalSettings?.[key] !== undefined) {
298 |       return globalSettings[key];
299 |     }
300 | 
301 |     return null;
302 |   };
303 | 
304 |   getParsedBoard(data: string) {
305 |     const trimmedContent = data.trim();
306 | 
307 |     let board: Board = {
308 |       ...BoardTemplate,
309 |       id: this.file.path,
310 |       children: [],
311 |       data: {
312 |         archive: [],
313 |         settings: { [frontmatterKey]: 'board' },
314 |         frontmatter: {},
315 |         isSearching: false,
316 |         errors: [],
317 |       },
318 |     };
319 | 
320 |     try {
321 |       if (trimmedContent) {
322 |         board = this.parser.mdToBoard(trimmedContent);
323 |       }
324 |     } catch (e) {
325 |       console.error(e);
326 | 
327 |       board = update(board, {
328 |         data: {
329 |           errors: {
330 |             $push: [{ description: e.toString(), stack: e.stack }],
331 |           },
332 |         },
333 |       });
334 |     }
335 | 
336 |     return board;
337 |   }
338 | 
339 |   setError(e: Error) {
340 |     this.setState(
341 |       update(this.state, {
342 |         data: {
343 |           errors: {
344 |             $push: [{ description: e.toString(), stack: e.stack }],
345 |           },
346 |         },
347 |       }),
348 |       false
349 |     );
350 |   }
351 | 
352 |   onFileMetadataChange() {
353 |     this.reparseBoardFromMd();
354 |   }
355 | 
356 |   async reparseBoardFromMd() {
357 |     try {
358 |       this.setState(this.getParsedBoard(this.getAView().data), false);
359 |     } catch (e) {
360 |       console.error(e);
361 |       this.setError(e);
362 |     }
363 |   }
364 | 
365 |   async archiveCompletedCards() {
366 |     const board = this.state;
367 | 
368 |     const archived: Item[] = [];
369 |     const shouldAppendArchiveDate = !!this.getSetting('archive-with-date');
370 |     const archiveDateSeparator = this.getSetting('archive-date-separator');
371 |     const archiveDateFormat = this.getSetting('archive-date-format');
372 |     const archiveDateAfterTitle = this.getSetting('append-archive-date');
373 | 
374 |     const appendArchiveDate = (item: Item) => {
375 |       const newTitle = [moment().format(archiveDateFormat)];
376 | 
377 |       if (archiveDateSeparator) newTitle.push(archiveDateSeparator);
378 | 
379 |       newTitle.push(item.data.titleRaw);
380 | 
381 |       if (archiveDateAfterTitle) newTitle.reverse();
382 | 
383 |       const titleRaw = newTitle.join(' ');
384 | 
385 |       return this.parser.updateItemContent(item, titleRaw);
386 |     };
387 | 
388 |     const lanes = board.children.map((lane) => {
389 |       return update(lane, {
390 |         children: {
391 |           $set: lane.children.filter((item) => {
392 |             const isComplete = item.data.checked && item.data.checkChar === getTaskStatusDone();
393 |             if (lane.data.shouldMarkItemsComplete || isComplete) {
394 |               archived.push(item);
395 |             }
396 | 
397 |             return !isComplete && !lane.data.shouldMarkItemsComplete;
398 |           }),
399 |         },
400 |       });
401 |     });
402 | 
403 |     try {
404 |       this.setState(
405 |         update(board, {
406 |           children: {
407 |             $set: lanes,
408 |           },
409 |           data: {
410 |             archive: {
411 |               $push: shouldAppendArchiveDate
412 |                 ? await Promise.all(archived.map((item) => appendArchiveDate(item)))
413 |                 : archived,
414 |             },
415 |           },
416 |         })
417 |       );
418 |     } catch (e) {
419 |       this.setError(e);
420 |     }
421 |   }
422 | 
423 |   getNewItem(content: string, checkChar: string, forceEdit?: boolean) {
424 |     return this.parser.newItem(content, checkChar, forceEdit);
425 |   }
426 | 
427 |   updateItemContent(item: Item, content: string) {
428 |     return this.parser.updateItemContent(item, content);
429 |   }
430 | }
431 | 


--------------------------------------------------------------------------------
/src/components/Editor/MarkdownEditor.tsx:
--------------------------------------------------------------------------------
  1 | import { insertBlankLine } from '@codemirror/commands';
  2 | import { EditorSelection, Extension, Prec } from '@codemirror/state';
  3 | import { EditorView, ViewUpdate, keymap, placeholder as placeholderExt } from '@codemirror/view';
  4 | import classcat from 'classcat';
  5 | import { EditorPosition, Editor as ObsidianEditor, Platform } from 'obsidian';
  6 | import { MutableRefObject, useContext, useEffect, useRef } from 'preact/compat';
  7 | import { KanbanView } from 'src/KanbanView';
  8 | import { StateManager } from 'src/StateManager';
  9 | import { t } from 'src/lang/helpers';
 10 | 
 11 | import { KanbanContext } from '../context';
 12 | import { c, noop } from '../helpers';
 13 | import { EditState, isEditing } from '../types';
 14 | import { datePlugins, stateManagerField } from './dateWidget';
 15 | import { matchDateTrigger, matchTimeTrigger } from './suggest';
 16 | 
 17 | interface MarkdownEditorProps {
 18 |   editorRef?: MutableRefObject<EditorView>;
 19 |   editState?: EditState;
 20 |   onEnter: (cm: EditorView, mod: boolean, shift: boolean) => boolean;
 21 |   onEscape: (cm: EditorView) => void;
 22 |   onSubmit: (cm: EditorView) => void;
 23 |   onPaste?: (e: ClipboardEvent, cm: EditorView) => void;
 24 |   onChange?: (update: ViewUpdate) => void;
 25 |   value?: string;
 26 |   className: string;
 27 |   placeholder?: string;
 28 | }
 29 | 
 30 | export function allowNewLine(stateManager: StateManager, mod: boolean, shift: boolean) {
 31 |   if (Platform.isMobile) return !(mod || shift);
 32 |   return stateManager.getSetting('new-line-trigger') === 'enter' ? !(mod || shift) : mod || shift;
 33 | }
 34 | 
 35 | function getEditorAppProxy(view: KanbanView) {
 36 |   return new Proxy(view.app, {
 37 |     get(target, prop, reveiver) {
 38 |       if (prop === 'vault') {
 39 |         return new Proxy(view.app.vault, {
 40 |           get(target, prop, reveiver) {
 41 |             if (prop === 'config') {
 42 |               return new Proxy((view.app.vault as any).config, {
 43 |                 get(target, prop, reveiver) {
 44 |                   if (['showLineNumber', 'foldHeading', 'foldIndent'].includes(prop as string)) {
 45 |                     return false;
 46 |                   }
 47 |                   return Reflect.get(target, prop, reveiver);
 48 |                 },
 49 |               });
 50 |             }
 51 |             return Reflect.get(target, prop, reveiver);
 52 |           },
 53 |         });
 54 |       }
 55 |       return Reflect.get(target, prop, reveiver);
 56 |     },
 57 |   });
 58 | }
 59 | 
 60 | function getMarkdownController(
 61 |   view: KanbanView,
 62 |   getEditor: () => ObsidianEditor
 63 | ): Record<any, any> {
 64 |   return {
 65 |     app: view.app,
 66 |     showSearch: noop,
 67 |     toggleMode: noop,
 68 |     onMarkdownScroll: noop,
 69 |     getMode: () => 'source',
 70 |     scroll: 0,
 71 |     editMode: null,
 72 |     get editor() {
 73 |       return getEditor();
 74 |     },
 75 |     get file() {
 76 |       return view.file;
 77 |     },
 78 |     get path() {
 79 |       return view.file.path;
 80 |     },
 81 |   };
 82 | }
 83 | 
 84 | function setInsertMode(cm: EditorView) {
 85 |   const vim = getVimPlugin(cm);
 86 |   if (vim) {
 87 |     (window as any).CodeMirrorAdapter?.Vim?.enterInsertMode(vim);
 88 |   }
 89 | }
 90 | 
 91 | function getVimPlugin(cm: EditorView): string {
 92 |   return (cm as any)?.plugins?.find((p: any) => {
 93 |     if (!p?.value) return false;
 94 |     return 'useNextTextInput' in p.value && 'waitForCopy' in p.value;
 95 |   })?.value?.cm;
 96 | }
 97 | 
 98 | export function MarkdownEditor({
 99 |   editorRef,
100 |   onEnter,
101 |   onEscape,
102 |   onChange,
103 |   onPaste,
104 |   className,
105 |   onSubmit,
106 |   editState,
107 |   value,
108 |   placeholder,
109 | }: MarkdownEditorProps) {
110 |   const { view, stateManager } = useContext(KanbanContext);
111 |   const elRef = useRef<HTMLDivElement>();
112 |   const internalRef = useRef<EditorView>();
113 | 
114 |   useEffect(() => {
115 |     class Editor extends view.plugin.MarkdownEditor {
116 |       isKanbanEditor = true;
117 | 
118 |       showTasksPluginAutoSuggest(
119 |         cursor: EditorPosition,
120 |         editor: ObsidianEditor,
121 |         lineHasGlobalFilter: boolean
122 |       ) {
123 |         if (matchTimeTrigger(stateManager.getSetting('time-trigger'), editor, cursor)) return false;
124 |         if (matchDateTrigger(stateManager.getSetting('date-trigger'), editor, cursor)) return false;
125 |         if (lineHasGlobalFilter && cursor.line === 0) return true;
126 |         return undefined;
127 |       }
128 | 
129 |       updateBottomPadding() {}
130 |       onUpdate(update: ViewUpdate, changed: boolean) {
131 |         super.onUpdate(update, changed);
132 |         onChange && onChange(update);
133 |       }
134 |       buildLocalExtensions(): Extension[] {
135 |         const extensions = super.buildLocalExtensions();
136 | 
137 |         extensions.push(stateManagerField.init(() => stateManager));
138 |         extensions.push(datePlugins);
139 |         extensions.push(
140 |           Prec.highest(
141 |             EditorView.domEventHandlers({
142 |               focus: (evt) => {
143 |                 view.activeEditor = this.owner;
144 |                 if (Platform.isMobile) {
145 |                   view.contentEl.addClass('is-mobile-editing');
146 |                 }
147 | 
148 |                 evt.win.setTimeout(() => {
149 |                   this.app.workspace.activeEditor = this.owner;
150 |                   if (Platform.isMobile) {
151 |                     this.app.mobileToolbar.update();
152 |                   }
153 |                 });
154 |                 return true;
155 |               },
156 |               blur: () => {
157 |                 if (Platform.isMobile) {
158 |                   view.contentEl.removeClass('is-mobile-editing');
159 |                   this.app.mobileToolbar.update();
160 |                 }
161 |                 return true;
162 |               },
163 |             })
164 |           )
165 |         );
166 | 
167 |         if (placeholder) extensions.push(placeholderExt(placeholder));
168 |         if (onPaste) {
169 |           extensions.push(
170 |             Prec.high(
171 |               EditorView.domEventHandlers({
172 |                 paste: onPaste,
173 |               })
174 |             )
175 |           );
176 |         }
177 | 
178 |         const makeEnterHandler = (mod: boolean, shift: boolean) => (cm: EditorView) => {
179 |           const didRun = onEnter(cm, mod, shift);
180 |           if (didRun) return true;
181 |           if (this.app.vault.getConfig('smartIndentList')) {
182 |             this.editor.newlineAndIndentContinueMarkdownList();
183 |           } else {
184 |             insertBlankLine(cm as any);
185 |           }
186 |           return true;
187 |         };
188 | 
189 |         extensions.push(
190 |           Prec.highest(
191 |             keymap.of([
192 |               {
193 |                 key: 'Enter',
194 |                 run: makeEnterHandler(false, false),
195 |                 shift: makeEnterHandler(false, true),
196 |                 preventDefault: true,
197 |               },
198 |               {
199 |                 key: 'Mod-Enter',
200 |                 run: makeEnterHandler(true, false),
201 |                 shift: makeEnterHandler(true, true),
202 |                 preventDefault: true,
203 |               },
204 |               {
205 |                 key: 'Escape',
206 |                 run: (cm) => {
207 |                   onEscape(cm);
208 |                   return false;
209 |                 },
210 |                 preventDefault: true,
211 |               },
212 |             ])
213 |           )
214 |         );
215 | 
216 |         return extensions;
217 |       }
218 |     }
219 | 
220 |     const controller = getMarkdownController(view, () => editor.editor);
221 |     const app = getEditorAppProxy(view);
222 |     const editor = view.plugin.addChild(new (Editor as any)(app, elRef.current, controller));
223 |     const cm: EditorView = editor.cm;
224 | 
225 |     internalRef.current = cm;
226 |     if (editorRef) editorRef.current = cm;
227 | 
228 |     controller.editMode = editor;
229 |     editor.set(value || '');
230 |     if (isEditing(editState)) {
231 |       cm.dispatch({
232 |         userEvent: 'select.pointer',
233 |         selection: EditorSelection.single(cm.posAtCoords(editState, false)),
234 |       });
235 | 
236 |       cm.dom.win.setTimeout(() => {
237 |         setInsertMode(cm);
238 |       });
239 |     }
240 | 
241 |     const onShow = () => {
242 |       elRef.current.scrollIntoView({ block: 'end' });
243 |     };
244 | 
245 |     if (Platform.isMobile) {
246 |       cm.dom.win.addEventListener('keyboardDidShow', onShow);
247 |     }
248 | 
249 |     return () => {
250 |       if (Platform.isMobile) {
251 |         cm.dom.win.removeEventListener('keyboardDidShow', onShow);
252 | 
253 |         if (view.activeEditor === controller) {
254 |           view.activeEditor = null;
255 |         }
256 | 
257 |         if (app.workspace.activeEditor === controller) {
258 |           app.workspace.activeEditor = null;
259 |           (app as any).mobileToolbar.update();
260 |           view.contentEl.removeClass('is-mobile-editing');
261 |         }
262 |       }
263 |       view.plugin.removeChild(editor);
264 |       internalRef.current = null;
265 |       if (editorRef) editorRef.current = null;
266 |     };
267 |   }, []);
268 | 
269 |   const cls = ['cm-table-widget'];
270 |   if (className) cls.push(className);
271 | 
272 |   return (
273 |     <>
274 |       <div className={classcat(cls)} ref={elRef}></div>
275 |       {Platform.isMobile && (
276 |         <button
277 |           onClick={() => onSubmit(internalRef.current)}
278 |           className={classcat([c('item-submit-button'), 'mod-cta'])}
279 |         >
280 |           {t('Submit')}
281 |         </button>
282 |       )}
283 |     </>
284 |   );
285 | }
286 | 


--------------------------------------------------------------------------------
/src/components/Editor/datePickerLocale.ts:
--------------------------------------------------------------------------------
 1 | import { moment } from 'obsidian';
 2 | import { StateManager } from 'src/StateManager';
 3 | 
 4 | import l10n from './flatpickr/l10n';
 5 | import { CustomLocale } from './flatpickr/types/locale';
 6 | 
 7 | const localeMap: { [k: string]: CustomLocale } = {
 8 |   ar: l10n.ar,
 9 |   cs: l10n.cs,
10 |   da: l10n.da,
11 |   de: l10n.de,
12 |   en: l10n.en,
13 |   'en-gb': l10n.en,
14 |   es: l10n.es,
15 |   fr: l10n.fr,
16 |   hi: l10n.hi,
17 |   id: l10n.id,
18 |   it: l10n.it,
19 |   ja: l10n.ja,
20 |   ko: l10n.ko,
21 |   nl: l10n.nl,
22 |   nn: l10n.no,
23 |   pl: l10n.pl,
24 |   pt: l10n.pt,
25 |   'pt-br': l10n.pt,
26 |   ro: l10n.ro,
27 |   ru: l10n.ru,
28 |   tr: l10n.tr,
29 |   'zh-cn': l10n.zh,
30 |   'zh-tw': l10n.zh_tw,
31 | };
32 | 
33 | const locale = localeMap[moment.locale()];
34 | 
35 | export function getDefaultLocale(stateManager?: StateManager) {
36 |   const firstDayOfWeek = stateManager?.getSetting('date-picker-week-start');
37 |   const curLocale = locale || localeMap.en;
38 | 
39 |   if (firstDayOfWeek) {
40 |     return {
41 |       ...curLocale,
42 |       firstDayOfWeek,
43 |     };
44 |   }
45 | 
46 |   return curLocale;
47 | }
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/dateWidget.ts:
--------------------------------------------------------------------------------
  1 | import { Extension, StateField } from '@codemirror/state';
  2 | import {
  3 |   Decoration,
  4 |   DecorationSet,
  5 |   EditorView,
  6 |   MatchDecorator,
  7 |   PluginSpec,
  8 |   ViewPlugin,
  9 |   ViewUpdate,
 10 |   WidgetType,
 11 | } from '@codemirror/view';
 12 | import { moment } from 'obsidian';
 13 | 
 14 | import { StateManager } from '../../StateManager';
 15 | import { escapeRegExpStr } from '../helpers';
 16 | 
 17 | export const stateManagerField = StateField.define<StateManager | null>({
 18 |   create() {
 19 |     return null;
 20 |   },
 21 |   update(state) {
 22 |     return state;
 23 |   },
 24 | });
 25 | 
 26 | class DateTimeWidget extends WidgetType {
 27 |   date: moment.Moment;
 28 |   stateManager: StateManager;
 29 |   type: string;
 30 | 
 31 |   constructor(stateManager: StateManager, date: moment.Moment, type: 'date' | 'time') {
 32 |     super();
 33 |     this.stateManager = stateManager;
 34 |     this.type = type;
 35 |     this.date = date;
 36 |   }
 37 | 
 38 |   eq(widget: this): boolean {
 39 |     return this.date.isSame(widget.date);
 40 |   }
 41 | 
 42 |   toDOM() {
 43 |     return createSpan(
 44 |       {
 45 |         cls: `cm-kanban-${this.type}-wrapper`,
 46 |       },
 47 |       (span) => {
 48 |         span.createSpan({
 49 |           cls: `cm-kanban-${this.type}`,
 50 |           text: this.date.format(
 51 |             this.stateManager.getSetting(
 52 |               this.type === 'time' ? 'time-format' : 'date-display-format'
 53 |             )
 54 |           ),
 55 |         });
 56 |       }
 57 |     );
 58 |   }
 59 | 
 60 |   ignoreEvent(): boolean {
 61 |     return false;
 62 |   }
 63 | }
 64 | 
 65 | function decorate(type: 'date' | 'time') {
 66 |   return (
 67 |     add: (from: number, to: number, decoration: Decoration) => void,
 68 |     from: number,
 69 |     to: number,
 70 |     match: RegExpExecArray,
 71 |     view: EditorView
 72 |   ) => {
 73 |     const stateManager = view.state.field(stateManagerField);
 74 |     if (!stateManager) return;
 75 | 
 76 |     const dateStr = match[1];
 77 |     const parsed = moment(
 78 |       dateStr,
 79 |       stateManager.getSetting(type === 'date' ? 'date-format' : 'time-format')
 80 |     );
 81 | 
 82 |     if (!parsed.isValid()) return;
 83 | 
 84 |     add(
 85 |       from,
 86 |       to,
 87 |       Decoration.replace({
 88 |         widget: new DateTimeWidget(stateManager, parsed, type),
 89 |       })
 90 |     );
 91 |   };
 92 | }
 93 | 
 94 | class DateDecorator {
 95 |   decos: DecorationSet;
 96 |   decorator: MatchDecorator;
 97 |   type: string;
 98 |   constructor(view: EditorView, regexp: RegExp, type: 'date' | 'time') {
 99 |     this.decorator = new MatchDecorator({
100 |       regexp,
101 |       decorate: decorate(type),
102 |     });
103 |     this.decos = this.decorator.createDeco(view);
104 |   }
105 |   update(update: ViewUpdate) {
106 |     if (update.docChanged) {
107 |       this.decos = this.decorator.createDeco(update.view);
108 |     }
109 |   }
110 | }
111 | 
112 | const config: PluginSpec<DateDecorator> = {
113 |   decorations: (v) => v.decos,
114 |   provide: (p) =>
115 |     EditorView.atomicRanges.of((view) => {
116 |       return view.plugin(p)?.decos || Decoration.none;
117 |     }),
118 | };
119 | 
120 | function create(type: 'date' | 'time', reStr: string) {
121 |   return ViewPlugin.define((view) => {
122 |     const stateManager = view.state.field(stateManagerField);
123 |     const dateTrigger = stateManager.getSetting(type === 'date' ? 'date-trigger' : 'time-trigger');
124 |     return new DateDecorator(
125 |       view,
126 |       new RegExp(`${escapeRegExpStr(dateTrigger)}${reStr}`, 'g'),
127 |       type
128 |     );
129 |   }, config);
130 | }
131 | 
132 | export const datePlugins: Extension[] = [
133 |   create('time', '{([^}]+)}'),
134 |   create('date', '{([^}]+)}'),
135 |   create('date', '\\[\\[([^\\]]+)\\]\\]'),
136 |   create('date', '\\[([^\\]]+)\\]\\([^)]+\\)'),
137 | ];
138 | 


--------------------------------------------------------------------------------
/src/components/Editor/datepicker.ts:
--------------------------------------------------------------------------------
 1 | import { EditorSuggestContext, moment } from 'obsidian';
 2 | import { StateManager } from 'src/StateManager';
 3 | import { buildLinkToDailyNote } from 'src/helpers';
 4 | 
 5 | import { getDefaultLocale } from './datePickerLocale';
 6 | import flatpickr from './flatpickr';
 7 | import { Instance } from './flatpickr/types/instance';
 8 | 
 9 | export function applyDate(ctx: EditorSuggestContext, stateManager: StateManager, date: Date) {
10 |   const dateFormat = stateManager.getSetting('date-format');
11 |   const dateTrigger = stateManager.getSetting('date-trigger');
12 |   const shouldLinkDates = stateManager.getSetting('link-date-to-daily-note');
13 | 
14 |   const formattedDate = moment(date).format(dateFormat);
15 |   const wrappedDate = shouldLinkDates
16 |     ? buildLinkToDailyNote(stateManager.app, formattedDate)
17 |     : `{${formattedDate}} `;
18 | 
19 |   const start = { line: ctx.start.line, ch: ctx.start.ch + dateTrigger.length };
20 | 
21 |   ctx.editor.replaceRange(wrappedDate, start, ctx.end);
22 |   ctx.editor.setCursor({
23 |     line: start.line,
24 |     ch: start.ch + wrappedDate.length,
25 |   });
26 |   ctx.editor.focus();
27 | }
28 | 
29 | export function constructDatePicker(
30 |   ctx: EditorSuggestContext,
31 |   stateManager: StateManager,
32 |   div: HTMLElement,
33 |   cb: (picker: Instance) => void
34 | ) {
35 |   div.createEl('input', { type: 'text' }, (input) => {
36 |     div.win.setTimeout(() =>
37 |       cb(
38 |         flatpickr(input, {
39 |           win: input.win,
40 |           now: new Date(),
41 |           inline: true,
42 |           locale: getDefaultLocale(stateManager),
43 |           onChange: (dates) => applyDate(ctx, stateManager, dates[0]),
44 |         })
45 |       )
46 |     );
47 |   });
48 | }
49 | 
50 | export function toPreviousMonth(date: moment.Moment) {
51 |   const initialMonth = date.month();
52 |   const first = date.clone().startOf('month').weekday(0);
53 |   const diff = date.diff(first, 'week');
54 | 
55 |   date.subtract(1, 'month').startOf('month').weekday(6).add(diff, 'week');
56 | 
57 |   let nextMonth = date.month();
58 | 
59 |   while (initialMonth === nextMonth) {
60 |     date.subtract(1, 'week');
61 |     nextMonth = date.month();
62 |   }
63 | 
64 |   return date;
65 | }
66 | 
67 | export function toNextMonth(date: moment.Moment) {
68 |   const initialMonth = date.month();
69 |   const first = date.clone().startOf('month').weekday(6);
70 |   const diff = date.diff(first, 'week');
71 | 
72 |   date.add(1, 'month').startOf('month').weekday(0).add(diff, 'week');
73 | 
74 |   let nextMonth = date.month();
75 | 
76 |   while (initialMonth === nextMonth) {
77 |     date.add(1, 'week');
78 |     nextMonth = date.month();
79 |   }
80 | 
81 |   return date;
82 | }
83 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/flatpickr.min.css:
--------------------------------------------------------------------------------
 1 | .flatpickr-calendar{background:transparent;opacity:0;display:none;text-align:center;visibility:hidden;padding:0;-webkit-animation:none;animation:none;direction:ltr;border:0;font-size:14px;line-height:24px;border-radius:5px;position:absolute;width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;-ms-touch-action:manipulation;touch-action:manipulation;background:#fff;-webkit-box-shadow:1px 0 0 #e6e6e6,-1px 0 0 #e6e6e6,0 1px 0 #e6e6e6,0 -1px 0 #e6e6e6,0 3px 13px rgba(0,0,0,0.08);box-shadow:1px 0 0 #e6e6e6,-1px 0 0 #e6e6e6,0 1px 0 #e6e6e6,0 -1px 0 #e6e6e6,0 3px 13px rgba(0,0,0,0.08)}.flatpickr-calendar.open,.flatpickr-calendar.inline{opacity:1;max-height:640px;visibility:visible}.flatpickr-calendar.open{display:inline-block;z-index:99999}.flatpickr-calendar.animate.open{-webkit-animation:fpFadeInDown 300ms cubic-bezier(.23,1,.32,1);animation:fpFadeInDown 300ms cubic-bezier(.23,1,.32,1)}.flatpickr-calendar.inline{display:block;position:relative;top:2px}.flatpickr-calendar.static{position:absolute;top:calc(100% + 2px)}.flatpickr-calendar.static.open{z-index:999;display:block}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+1) .flatpickr-day.inRange:nth-child(7n+7){-webkit-box-shadow:none !important;box-shadow:none !important}.flatpickr-calendar.multiMonth .flatpickr-days .dayContainer:nth-child(n+2) .flatpickr-day.inRange:nth-child(7n+1){-webkit-box-shadow:-2px 0 0 #e6e6e6,5px 0 0 #e6e6e6;box-shadow:-2px 0 0 #e6e6e6,5px 0 0 #e6e6e6}.flatpickr-calendar .hasWeeks .dayContainer,.flatpickr-calendar .hasTime .dayContainer{border-bottom:0;border-bottom-right-radius:0;border-bottom-left-radius:0}.flatpickr-calendar .hasWeeks .dayContainer{border-left:0}.flatpickr-calendar.hasTime .flatpickr-time{height:40px;border-top:1px solid #e6e6e6}.flatpickr-calendar.noCalendar.hasTime .flatpickr-time{height:auto}.flatpickr-calendar:before,.flatpickr-calendar:after{position:absolute;display:block;pointer-events:none;border:solid transparent;content:'';height:0;width:0;left:22px}.flatpickr-calendar.rightMost:before,.flatpickr-calendar.arrowRight:before,.flatpickr-calendar.rightMost:after,.flatpickr-calendar.arrowRight:after{left:auto;right:22px}.flatpickr-calendar.arrowCenter:before,.flatpickr-calendar.arrowCenter:after{left:50%;right:50%}.flatpickr-calendar:before{border-width:5px;margin:0 -5px}.flatpickr-calendar:after{border-width:4px;margin:0 -4px}.flatpickr-calendar.arrowTop:before,.flatpickr-calendar.arrowTop:after{bottom:100%}.flatpickr-calendar.arrowTop:before{border-bottom-color:#e6e6e6}.flatpickr-calendar.arrowTop:after{border-bottom-color:#fff}.flatpickr-calendar.arrowBottom:before,.flatpickr-calendar.arrowBottom:after{top:100%}.flatpickr-calendar.arrowBottom:before{border-top-color:#e6e6e6}.flatpickr-calendar.arrowBottom:after{border-top-color:#fff}.flatpickr-calendar:focus{outline:0}.flatpickr-wrapper{position:relative;display:inline-block}.flatpickr-months{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}.flatpickr-months .flatpickr-month{background:transparent;color:rgba(0,0,0,0.9);fill:rgba(0,0,0,0.9);height:34px;line-height:1;text-align:center;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}.flatpickr-months .flatpickr-prev-month,.flatpickr-months .flatpickr-next-month{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;text-decoration:none;cursor:pointer;position:absolute;top:0;height:34px;padding:10px;z-index:3;color:rgba(0,0,0,0.9);fill:rgba(0,0,0,0.9)}.flatpickr-months .flatpickr-prev-month.flatpickr-disabled,.flatpickr-months .flatpickr-next-month.flatpickr-disabled{display:none}.flatpickr-months .flatpickr-prev-month i,.flatpickr-months .flatpickr-next-month i{position:relative}.flatpickr-months .flatpickr-prev-month.flatpickr-prev-month,.flatpickr-months .flatpickr-next-month.flatpickr-prev-month{/*
 2 |       /*rtl:begin:ignore*/left:0/*
 3 |       /*rtl:end:ignore*/}/*
 4 |       /*rtl:begin:ignore*/
 5 | /*
 6 |       /*rtl:end:ignore*/
 7 | .flatpickr-months .flatpickr-prev-month.flatpickr-next-month,.flatpickr-months .flatpickr-next-month.flatpickr-next-month{/*
 8 |       /*rtl:begin:ignore*/right:0/*
 9 |       /*rtl:end:ignore*/}/*
10 |       /*rtl:begin:ignore*/
11 | /*
12 |       /*rtl:end:ignore*/
13 | .flatpickr-months .flatpickr-prev-month:hover,.flatpickr-months .flatpickr-next-month:hover{color:#959ea9}.flatpickr-months .flatpickr-prev-month:hover svg,.flatpickr-months .flatpickr-next-month:hover svg{fill:#f64747}.flatpickr-months .flatpickr-prev-month svg,.flatpickr-months .flatpickr-next-month svg{width:14px;height:14px}.flatpickr-months .flatpickr-prev-month svg path,.flatpickr-months .flatpickr-next-month svg path{-webkit-transition:fill .1s;transition:fill .1s;fill:inherit}.numInputWrapper{position:relative;height:auto}.numInputWrapper input,.numInputWrapper span{display:inline-block}.numInputWrapper input{width:100%}.numInputWrapper input::-ms-clear{display:none}.numInputWrapper input::-webkit-outer-spin-button,.numInputWrapper input::-webkit-inner-spin-button{margin:0;-webkit-appearance:none}.numInputWrapper span{position:absolute;right:0;width:14px;padding:0 4px 0 2px;height:50%;line-height:50%;opacity:0;cursor:pointer;border:1px solid rgba(57,57,57,0.15);-webkit-box-sizing:border-box;box-sizing:border-box}.numInputWrapper span:hover{background:rgba(0,0,0,0.1)}.numInputWrapper span:active{background:rgba(0,0,0,0.2)}.numInputWrapper span:after{display:block;content:"";position:absolute}.numInputWrapper span.arrowUp{top:0;border-bottom:0}.numInputWrapper span.arrowUp:after{border-left:4px solid transparent;border-right:4px solid transparent;border-bottom:4px solid rgba(57,57,57,0.6);top:26%}.numInputWrapper span.arrowDown{top:50%}.numInputWrapper span.arrowDown:after{border-left:4px solid transparent;border-right:4px solid transparent;border-top:4px solid rgba(57,57,57,0.6);top:40%}.numInputWrapper span svg{width:inherit;height:auto}.numInputWrapper span svg path{fill:rgba(0,0,0,0.5)}.numInputWrapper:hover{background:rgba(0,0,0,0.05)}.numInputWrapper:hover span{opacity:1}.flatpickr-current-month{font-size:135%;line-height:inherit;font-weight:300;color:inherit;position:absolute;width:75%;left:12.5%;padding:7.48px 0 0 0;line-height:1;height:34px;display:inline-block;text-align:center;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.flatpickr-current-month span.cur-month{font-family:inherit;font-weight:700;color:inherit;display:inline-block;margin-left:.5ch;padding:0}.flatpickr-current-month span.cur-month:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .numInputWrapper{width:6ch;width:7ch\0;display:inline-block}.flatpickr-current-month .numInputWrapper span.arrowUp:after{border-bottom-color:rgba(0,0,0,0.9)}.flatpickr-current-month .numInputWrapper span.arrowDown:after{border-top-color:rgba(0,0,0,0.9)}.flatpickr-current-month input.cur-year{background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;color:inherit;cursor:text;padding:0 0 0 .5ch;margin:0;display:inline-block;font-size:inherit;font-family:inherit;font-weight:300;line-height:inherit;height:auto;border:0;border-radius:0;vertical-align:initial;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-current-month input.cur-year:focus{outline:0}.flatpickr-current-month input.cur-year[disabled],.flatpickr-current-month input.cur-year[disabled]:hover{font-size:100%;color:rgba(0,0,0,0.5);background:transparent;pointer-events:none}.flatpickr-current-month .flatpickr-monthDropdown-months{appearance:menulist;background:transparent;border:none;border-radius:0;box-sizing:border-box;color:inherit;cursor:pointer;font-size:inherit;font-family:inherit;font-weight:300;height:auto;line-height:inherit;margin:-1px 0 0 0;outline:none;padding:0 0 0 .5ch;position:relative;vertical-align:initial;-webkit-box-sizing:border-box;-webkit-appearance:menulist;-moz-appearance:menulist;width:auto}.flatpickr-current-month .flatpickr-monthDropdown-months:focus,.flatpickr-current-month .flatpickr-monthDropdown-months:active{outline:none}.flatpickr-current-month .flatpickr-monthDropdown-months:hover{background:rgba(0,0,0,0.05)}.flatpickr-current-month .flatpickr-monthDropdown-months .flatpickr-monthDropdown-month{background-color:transparent;outline:none;padding:0}.flatpickr-weekdays{background:transparent;text-align:center;overflow:hidden;width:100%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;height:28px}.flatpickr-weekdays .flatpickr-weekdaycontainer{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1}span.flatpickr-weekday{cursor:default;font-size:90%;background:transparent;color:rgba(0,0,0,0.54);line-height:1;margin:0;text-align:center;display:block;-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;font-weight:bolder}.dayContainer,.flatpickr-weeks{padding:1px 0 0 0}.flatpickr-days{position:relative;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:start;-webkit-align-items:flex-start;-ms-flex-align:start;align-items:flex-start;width:307.875px}.flatpickr-days:focus{outline:0}.dayContainer{padding:0;outline:0;text-align:left;width:307.875px;min-width:307.875px;max-width:307.875px;-webkit-box-sizing:border-box;box-sizing:border-box;display:inline-block;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-wrap:wrap;-ms-flex-pack:justify;-webkit-justify-content:space-around;justify-content:space-around;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0);opacity:1}.dayContainer + .dayContainer{-webkit-box-shadow:-1px 0 0 #e6e6e6;box-shadow:-1px 0 0 #e6e6e6}.flatpickr-day{background:none;border:1px solid transparent;border-radius:150px;-webkit-box-sizing:border-box;box-sizing:border-box;color:#393939;cursor:pointer;font-weight:400;width:14.2857143%;-webkit-flex-basis:14.2857143%;-ms-flex-preferred-size:14.2857143%;flex-basis:14.2857143%;max-width:39px;height:39px;line-height:39px;margin:0;display:inline-block;position:relative;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;text-align:center}.flatpickr-day.inRange,.flatpickr-day.prevMonthDay.inRange,.flatpickr-day.nextMonthDay.inRange,.flatpickr-day.today.inRange,.flatpickr-day.prevMonthDay.today.inRange,.flatpickr-day.nextMonthDay.today.inRange,.flatpickr-day:hover,.flatpickr-day.prevMonthDay:hover,.flatpickr-day.nextMonthDay:hover,.flatpickr-day:focus,.flatpickr-day.prevMonthDay:focus,.flatpickr-day.nextMonthDay:focus{cursor:pointer;outline:0;background:#e6e6e6;border-color:#e6e6e6}.flatpickr-day.today{border-color:#959ea9}.flatpickr-day.today:hover,.flatpickr-day.today:focus{border-color:#959ea9;background:#959ea9;color:#fff}.flatpickr-day.selected,.flatpickr-day.startRange,.flatpickr-day.endRange,.flatpickr-day.selected.inRange,.flatpickr-day.startRange.inRange,.flatpickr-day.endRange.inRange,.flatpickr-day.selected:focus,.flatpickr-day.startRange:focus,.flatpickr-day.endRange:focus,.flatpickr-day.selected:hover,.flatpickr-day.startRange:hover,.flatpickr-day.endRange:hover,.flatpickr-day.selected.prevMonthDay,.flatpickr-day.startRange.prevMonthDay,.flatpickr-day.endRange.prevMonthDay,.flatpickr-day.selected.nextMonthDay,.flatpickr-day.startRange.nextMonthDay,.flatpickr-day.endRange.nextMonthDay{background:#569ff7;-webkit-box-shadow:none;box-shadow:none;color:#fff;border-color:#569ff7}.flatpickr-day.selected.startRange,.flatpickr-day.startRange.startRange,.flatpickr-day.endRange.startRange{border-radius:50px 0 0 50px}.flatpickr-day.selected.endRange,.flatpickr-day.startRange.endRange,.flatpickr-day.endRange.endRange{border-radius:0 50px 50px 0}.flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n+1)),.flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n+1)),.flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n+1)){-webkit-box-shadow:-10px 0 0 #569ff7;box-shadow:-10px 0 0 #569ff7}.flatpickr-day.selected.startRange.endRange,.flatpickr-day.startRange.startRange.endRange,.flatpickr-day.endRange.startRange.endRange{border-radius:50px}.flatpickr-day.inRange{border-radius:0;-webkit-box-shadow:-5px 0 0 #e6e6e6,5px 0 0 #e6e6e6;box-shadow:-5px 0 0 #e6e6e6,5px 0 0 #e6e6e6}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover,.flatpickr-day.prevMonthDay,.flatpickr-day.nextMonthDay,.flatpickr-day.notAllowed,.flatpickr-day.notAllowed.prevMonthDay,.flatpickr-day.notAllowed.nextMonthDay{color:rgba(57,57,57,0.3);background:transparent;border-color:transparent;cursor:default}.flatpickr-day.flatpickr-disabled,.flatpickr-day.flatpickr-disabled:hover{cursor:not-allowed;color:rgba(57,57,57,0.1)}.flatpickr-day.week.selected{border-radius:0;-webkit-box-shadow:-5px 0 0 #569ff7,5px 0 0 #569ff7;box-shadow:-5px 0 0 #569ff7,5px 0 0 #569ff7}.flatpickr-day.hidden{visibility:hidden}.rangeMode .flatpickr-day{margin-top:1px}.flatpickr-weekwrapper{float:left}.flatpickr-weekwrapper .flatpickr-weeks{padding:0 12px;-webkit-box-shadow:1px 0 0 #e6e6e6;box-shadow:1px 0 0 #e6e6e6}.flatpickr-weekwrapper .flatpickr-weekday{float:none;width:100%;line-height:28px}.flatpickr-weekwrapper span.flatpickr-day,.flatpickr-weekwrapper span.flatpickr-day:hover{display:block;width:100%;max-width:none;color:rgba(57,57,57,0.3);background:transparent;cursor:default;border:none}.flatpickr-innerContainer{display:block;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden}.flatpickr-rContainer{display:inline-block;padding:0;-webkit-box-sizing:border-box;box-sizing:border-box}.flatpickr-time{text-align:center;outline:0;display:block;height:0;line-height:40px;max-height:40px;-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex}.flatpickr-time:after{content:"";display:table;clear:both}.flatpickr-time .numInputWrapper{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;width:40%;height:40px;float:left}.flatpickr-time .numInputWrapper span.arrowUp:after{border-bottom-color:#393939}.flatpickr-time .numInputWrapper span.arrowDown:after{border-top-color:#393939}.flatpickr-time.hasSeconds .numInputWrapper{width:26%}.flatpickr-time.time24hr .numInputWrapper{width:49%}.flatpickr-time input{background:transparent;-webkit-box-shadow:none;box-shadow:none;border:0;border-radius:0;text-align:center;margin:0;padding:0;height:inherit;line-height:inherit;color:#393939;font-size:14px;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.flatpickr-time input.flatpickr-hour{font-weight:bold}.flatpickr-time input.flatpickr-minute,.flatpickr-time input.flatpickr-second{font-weight:400}.flatpickr-time input:focus{outline:0;border:0}.flatpickr-time .flatpickr-time-separator,.flatpickr-time .flatpickr-am-pm{height:inherit;float:left;line-height:inherit;color:#393939;font-weight:bold;width:2%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center}.flatpickr-time .flatpickr-am-pm{outline:0;width:18%;cursor:pointer;text-align:center;font-weight:400}.flatpickr-time input:hover,.flatpickr-time .flatpickr-am-pm:hover,.flatpickr-time input:focus,.flatpickr-time .flatpickr-am-pm:focus{background:#eee}.flatpickr-input[readonly]{cursor:pointer}@-webkit-keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0,-20px,0);transform:translate3d(0,-20px,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes fpFadeInDown{from{opacity:0;-webkit-transform:translate3d(0,-20px,0);transform:translate3d(0,-20px,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/index.ts:
--------------------------------------------------------------------------------
   1 | import English from './l10n/default';
   2 | import { FPDate, FPHTMLCollection, FPHTMLElement, FPNodeList } from './types/globals';
   3 | 
   4 | /* eslint-disable @typescript-eslint/no-non-null-assertion */
   5 | 
   6 | /* eslint-disable no-empty */
   7 | 
   8 | /* eslint-disable @typescript-eslint/ban-types */
   9 | import { DayElement, FlatpickrFn, Instance } from './types/instance';
  10 | import { CustomLocale, Locale, key as LocaleKey } from './types/locale';
  11 | import {
  12 |   DateLimit,
  13 |   DateOption,
  14 |   DateRangeLimit,
  15 |   HOOKS,
  16 |   Hook,
  17 |   HookKey,
  18 |   Options,
  19 |   ParsedOptions,
  20 |   defaults as defaultOptions,
  21 | } from './types/options';
  22 | import { IncrementEvent, arrayify, debounce, int, pad } from './utils';
  23 | import {
  24 |   calculateSecondsSinceMidnight,
  25 |   compareDates,
  26 |   createDateFormatter,
  27 |   createDateParser,
  28 |   duration,
  29 |   getDefaultHours,
  30 |   isBetween,
  31 |   parseSeconds,
  32 | } from './utils/dates';
  33 | import {
  34 |   clearNode,
  35 |   createElement,
  36 |   createNumberInput,
  37 |   findParent,
  38 |   getEventTarget,
  39 |   toggleClass,
  40 | } from './utils/dom';
  41 | import { monthToStr, tokenRegex } from './utils/formatting';
  42 | 
  43 | const DEBOUNCED_CHANGE_MS = 300;
  44 | 
  45 | function FlatpickrInstance(element: HTMLElement, instanceConfig?: Options): Instance {
  46 |   const win = element.win || window;
  47 |   const self = {
  48 |     config: {
  49 |       ...defaultOptions,
  50 |       ...flatpickr.defaultConfig,
  51 |     } as ParsedOptions,
  52 |     l10n: English,
  53 |   } as Instance;
  54 |   self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
  55 | 
  56 |   self._handlers = [];
  57 |   self.pluginElements = [];
  58 |   self.loadedPlugins = [];
  59 |   self._bind = bind;
  60 |   self._setHoursFromDate = setHoursFromDate;
  61 |   self._positionCalendar = positionCalendar;
  62 | 
  63 |   self.changeMonth = changeMonth;
  64 |   self.changeYear = changeYear;
  65 |   self.clear = clear;
  66 |   self.close = close;
  67 |   self.onMouseOver = onMouseOver;
  68 | 
  69 |   self._createElement = createElement;
  70 |   self.createDay = createDay;
  71 |   self.destroy = destroy;
  72 |   self.isEnabled = isEnabled;
  73 |   self.jumpToDate = jumpToDate;
  74 |   self.updateValue = updateValue;
  75 |   self.open = open;
  76 |   self.redraw = redraw;
  77 |   self.set = set;
  78 |   self.setDate = setDate;
  79 |   self.toggle = toggle;
  80 | 
  81 |   function setupHelperFunctions() {
  82 |     self.utils = {
  83 |       getDaysInMonth(month = self.currentMonth, yr = self.currentYear) {
  84 |         if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0)) return 29;
  85 | 
  86 |         return self.l10n.daysInMonth[month];
  87 |       },
  88 |     };
  89 |   }
  90 | 
  91 |   function init() {
  92 |     self.element = self.input = element as HTMLInputElement;
  93 |     self.isOpen = false;
  94 | 
  95 |     parseConfig();
  96 |     setupLocale();
  97 |     setupInputs();
  98 |     setupDates();
  99 |     setupHelperFunctions();
 100 | 
 101 |     if (!self.isMobile) build();
 102 | 
 103 |     bindEvents();
 104 | 
 105 |     if (self.selectedDates.length || self.config.noCalendar) {
 106 |       if (self.config.enableTime) {
 107 |         setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
 108 |       }
 109 |       updateValue(false);
 110 |     }
 111 | 
 112 |     setCalendarWidth();
 113 | 
 114 |     const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
 115 | 
 116 |     /* TODO: investigate this further
 117 | 
 118 |       Currently, there is weird positioning behavior in safari causing pages
 119 |       to scroll up. https://github.com/chmln/flatpickr/issues/563
 120 | 
 121 |       However, most browsers are not Safari and positioning is expensive when used
 122 |       in scale. https://github.com/chmln/flatpickr/issues/1096
 123 |     */
 124 |     if (!self.isMobile && isSafari) {
 125 |       positionCalendar();
 126 |     }
 127 | 
 128 |     triggerEvent('onReady');
 129 |   }
 130 | 
 131 |   function getClosestActiveElement() {
 132 |     return (
 133 |       (self.calendarContainer?.getRootNode() as unknown as DocumentOrShadowRoot).activeElement ||
 134 |       self.element.doc.activeElement
 135 |     );
 136 |   }
 137 | 
 138 |   // eslint-disable-next-line @typescript-eslint/ban-types
 139 |   function bindToInstance<F extends Function>(fn: F): F {
 140 |     return fn.bind(self);
 141 |   }
 142 | 
 143 |   function setCalendarWidth() {
 144 |     const config = self.config;
 145 | 
 146 |     if (config.weekNumbers === false && config.showMonths === 1) {
 147 |       return;
 148 |     } else if (config.noCalendar !== true) {
 149 |       win.requestAnimationFrame(function () {
 150 |         if (self.calendarContainer !== undefined) {
 151 |           self.calendarContainer.style.visibility = 'hidden';
 152 |           self.calendarContainer.style.display = 'block';
 153 |         }
 154 |         if (self.daysContainer !== undefined) {
 155 |           const daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
 156 | 
 157 |           self.daysContainer.style.width = daysWidth + 'px';
 158 | 
 159 |           self.calendarContainer.style.width =
 160 |             daysWidth + (self.weekWrapper !== undefined ? self.weekWrapper.offsetWidth : 0) + 'px';
 161 | 
 162 |           self.calendarContainer.style.removeProperty('visibility');
 163 |           self.calendarContainer.style.removeProperty('display');
 164 |         }
 165 |       });
 166 |     }
 167 |   }
 168 | 
 169 |   /**
 170 |    * The handler for all events targeting the time inputs
 171 |    */
 172 |   function updateTime(e?: MouseEvent | IncrementEvent | KeyboardEvent | FocusEvent) {
 173 |     if (self.selectedDates.length === 0) {
 174 |       const defaultDate =
 175 |         self.config.minDate === undefined || compareDates(new Date(), self.config.minDate) >= 0
 176 |           ? new Date()
 177 |           : new Date(self.config.minDate.getTime());
 178 | 
 179 |       const defaults = getDefaultHours(self.config);
 180 |       defaultDate.setHours(
 181 |         defaults.hours,
 182 |         defaults.minutes,
 183 |         defaults.seconds,
 184 |         defaultDate.getMilliseconds()
 185 |       );
 186 | 
 187 |       self.selectedDates = [defaultDate];
 188 |       self.latestSelectedDateObj = defaultDate;
 189 |     }
 190 |     if (e !== undefined && e.type !== 'blur') {
 191 |       timeWrapper(e);
 192 |     }
 193 | 
 194 |     const prevValue = self._input.value;
 195 | 
 196 |     setHoursFromInputs();
 197 |     updateValue();
 198 | 
 199 |     if (self._input.value !== prevValue) {
 200 |       self._debouncedChange();
 201 |     }
 202 |   }
 203 | 
 204 |   function ampm2military(hour: number, amPM: string) {
 205 |     return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
 206 |   }
 207 | 
 208 |   function military2ampm(hour: number) {
 209 |     switch (hour % 24) {
 210 |       case 0:
 211 |       case 12:
 212 |         return 12;
 213 | 
 214 |       default:
 215 |         return hour % 12;
 216 |     }
 217 |   }
 218 | 
 219 |   /**
 220 |    * Syncs the selected date object time with user's time input
 221 |    */
 222 |   function setHoursFromInputs() {
 223 |     if (self.hourElement === undefined || self.minuteElement === undefined) return;
 224 | 
 225 |     let hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24,
 226 |       minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60,
 227 |       seconds =
 228 |         self.secondElement !== undefined ? (parseInt(self.secondElement.value, 10) || 0) % 60 : 0;
 229 | 
 230 |     if (self.amPM !== undefined) {
 231 |       hours = ampm2military(hours, self.amPM.textContent as string);
 232 |     }
 233 | 
 234 |     const limitMinHours =
 235 |       self.config.minTime !== undefined ||
 236 |       (self.config.minDate &&
 237 |         self.minDateHasTime &&
 238 |         self.latestSelectedDateObj &&
 239 |         compareDates(self.latestSelectedDateObj, self.config.minDate, true) === 0);
 240 | 
 241 |     const limitMaxHours =
 242 |       self.config.maxTime !== undefined ||
 243 |       (self.config.maxDate &&
 244 |         self.maxDateHasTime &&
 245 |         self.latestSelectedDateObj &&
 246 |         compareDates(self.latestSelectedDateObj, self.config.maxDate, true) === 0);
 247 | 
 248 |     if (
 249 |       self.config.maxTime !== undefined &&
 250 |       self.config.minTime !== undefined &&
 251 |       self.config.minTime > self.config.maxTime
 252 |     ) {
 253 |       const minBound = calculateSecondsSinceMidnight(
 254 |         self.config.minTime.getHours(),
 255 |         self.config.minTime.getMinutes(),
 256 |         self.config.minTime.getSeconds()
 257 |       );
 258 |       const maxBound = calculateSecondsSinceMidnight(
 259 |         self.config.maxTime.getHours(),
 260 |         self.config.maxTime.getMinutes(),
 261 |         self.config.maxTime.getSeconds()
 262 |       );
 263 |       const currentTime = calculateSecondsSinceMidnight(hours, minutes, seconds);
 264 | 
 265 |       if (currentTime > maxBound && currentTime < minBound) {
 266 |         const result = parseSeconds(minBound);
 267 |         hours = result[0];
 268 |         minutes = result[1];
 269 |         seconds = result[2];
 270 |       }
 271 |     } else {
 272 |       if (limitMaxHours) {
 273 |         const maxTime =
 274 |           self.config.maxTime !== undefined ? self.config.maxTime : (self.config.maxDate as Date);
 275 |         hours = Math.min(hours, maxTime.getHours());
 276 |         if (hours === maxTime.getHours()) minutes = Math.min(minutes, maxTime.getMinutes());
 277 | 
 278 |         if (minutes === maxTime.getMinutes()) seconds = Math.min(seconds, maxTime.getSeconds());
 279 |       }
 280 | 
 281 |       if (limitMinHours) {
 282 |         const minTime =
 283 |           self.config.minTime !== undefined ? self.config.minTime : self.config.minDate!;
 284 | 
 285 |         hours = Math.max(hours, minTime.getHours());
 286 |         if (hours === minTime.getHours() && minutes < minTime.getMinutes())
 287 |           minutes = minTime.getMinutes();
 288 | 
 289 |         if (minutes === minTime.getMinutes()) seconds = Math.max(seconds, minTime.getSeconds());
 290 |       }
 291 |     }
 292 | 
 293 |     setHours(hours, minutes, seconds);
 294 |   }
 295 | 
 296 |   /**
 297 |    * Syncs time input values with a date
 298 |    */
 299 |   function setHoursFromDate(dateObj?: Date) {
 300 |     const date = dateObj || self.latestSelectedDateObj;
 301 | 
 302 |     if (date && date.getHours) {
 303 |       setHours(date.getHours(), date.getMinutes(), date.getSeconds());
 304 |     }
 305 |   }
 306 | 
 307 |   /**
 308 |    * Sets the hours, minutes, and optionally seconds
 309 |    * of the latest selected date object and the
 310 |    * corresponding time inputs
 311 |    * @param {Number} hours the hour. whether its military
 312 |    *                 or am-pm gets inferred from config
 313 |    * @param {Number} minutes the minutes
 314 |    * @param {Number} seconds the seconds (optional)
 315 |    */
 316 |   function setHours(hours: number, minutes: number, seconds: number) {
 317 |     if (self.latestSelectedDateObj !== undefined) {
 318 |       self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
 319 |     }
 320 | 
 321 |     if (!self.hourElement || !self.minuteElement || self.isMobile) return;
 322 | 
 323 |     self.hourElement.value = pad(
 324 |       !self.config.time_24hr ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0) : hours
 325 |     );
 326 | 
 327 |     self.minuteElement.value = pad(minutes);
 328 | 
 329 |     if (self.amPM !== undefined) self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
 330 | 
 331 |     if (self.secondElement !== undefined) self.secondElement.value = pad(seconds);
 332 |   }
 333 | 
 334 |   /**
 335 |    * Handles the year input and incrementing events
 336 |    * @param {Event} event the keyup or increment event
 337 |    */
 338 |   function onYearInput(event: KeyboardEvent & IncrementEvent) {
 339 |     const eventTarget = getEventTarget(event) as HTMLInputElement;
 340 |     const year = parseInt(eventTarget.value) + (event.delta || 0);
 341 | 
 342 |     if (year / 1000 > 1 || (event.key === 'Enter' && !/[^\d]/.test(year.toString()))) {
 343 |       changeYear(year);
 344 |     }
 345 |   }
 346 | 
 347 |   /**
 348 |    * Essentially addEventListener + tracking
 349 |    * @param {Element} element the element to addEventListener to
 350 |    * @param {String} event the event name
 351 |    * @param {Function} handler the event handler
 352 |    */
 353 |   function bind<E extends Element | Window | Document>(
 354 |     element: E | E[],
 355 |     event: string | string[],
 356 |     handler: (e?: any) => void,
 357 |     options?: { capture?: boolean; once?: boolean; passive?: boolean }
 358 |   ): void {
 359 |     if (Array.isArray(event)) return event.forEach((ev) => bind(element, ev, handler, options));
 360 | 
 361 |     if (Array.isArray(element)) return element.forEach((el) => bind(el, event, handler, options));
 362 | 
 363 |     element.addEventListener(event, handler, options);
 364 |     self._handlers.push({
 365 |       remove: () => element.removeEventListener(event, handler, options),
 366 |     });
 367 |   }
 368 | 
 369 |   function triggerChange() {
 370 |     triggerEvent('onChange');
 371 |   }
 372 | 
 373 |   /**
 374 |    * Adds all the necessary event listeners
 375 |    */
 376 |   function bindEvents(): void {
 377 |     if (self.config.wrap) {
 378 |       ['open', 'close', 'toggle', 'clear'].forEach((evt) => {
 379 |         Array.prototype.forEach.call(
 380 |           self.element.querySelectorAll(`[data-${evt}]`),
 381 |           (el: HTMLElement) => bind(el, 'click', self[evt as 'open' | 'close' | 'toggle' | 'clear'])
 382 |         );
 383 |       });
 384 |     }
 385 | 
 386 |     if (self.isMobile) {
 387 |       setupMobile();
 388 |       return;
 389 |     }
 390 | 
 391 |     const debouncedResize = debounce(onResize, 50, win);
 392 |     self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS, win);
 393 | 
 394 |     if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
 395 |       bind(self.daysContainer, 'mouseover', (e: MouseEvent) => {
 396 |         if (self.config.mode === 'range') onMouseOver(getEventTarget(e) as DayElement);
 397 |       });
 398 | 
 399 |     bind(self._input, 'keydown', onKeyDown);
 400 |     if (self.calendarContainer !== undefined) {
 401 |       bind(self.calendarContainer, 'keydown', onKeyDown);
 402 |     }
 403 | 
 404 |     if (!self.config.inline && !self.config.static) bind(win, 'resize', debouncedResize);
 405 | 
 406 |     if (win.ontouchstart !== undefined) bind(win.document, 'touchstart', documentClick);
 407 |     else bind(win.document, 'mousedown', documentClick);
 408 |     bind(win.document, 'focus', documentClick, { capture: true });
 409 | 
 410 |     if (self.config.clickOpens === true) {
 411 |       bind(self._input, 'focus', self.open);
 412 |       bind(self._input, 'click', self.open);
 413 |     }
 414 | 
 415 |     if (self.daysContainer !== undefined) {
 416 |       bind(self.monthNav, 'click', onMonthNavClick);
 417 | 
 418 |       bind(self.monthNav, ['keyup', 'increment'], onYearInput);
 419 |       bind(self.daysContainer, 'click', selectDate);
 420 |     }
 421 | 
 422 |     if (
 423 |       self.timeContainer !== undefined &&
 424 |       self.minuteElement !== undefined &&
 425 |       self.hourElement !== undefined
 426 |     ) {
 427 |       const selText = (e: FocusEvent) => (getEventTarget(e) as HTMLInputElement).select();
 428 |       bind(self.timeContainer, ['increment'], updateTime);
 429 |       bind(self.timeContainer, 'blur', updateTime, { capture: true });
 430 |       bind(self.timeContainer, 'click', timeIncrement);
 431 | 
 432 |       bind([self.hourElement, self.minuteElement], ['focus', 'click'], selText);
 433 | 
 434 |       if (self.secondElement !== undefined)
 435 |         bind(self.secondElement, 'focus', () => self.secondElement && self.secondElement.select());
 436 | 
 437 |       if (self.amPM !== undefined) {
 438 |         bind(self.amPM, 'click', (e) => {
 439 |           updateTime(e);
 440 |         });
 441 |       }
 442 |     }
 443 | 
 444 |     if (self.config.allowInput) {
 445 |       bind(self._input, 'blur', onBlur);
 446 |     }
 447 |   }
 448 | 
 449 |   /**
 450 |    * Set the calendar view to a particular date.
 451 |    * @param {Date} jumpDate the date to set the view to
 452 |    * @param {boolean} triggerChange if change events should be triggered
 453 |    */
 454 |   function jumpToDate(jumpDate?: DateOption, triggerChange?: boolean) {
 455 |     const jumpTo =
 456 |       jumpDate !== undefined
 457 |         ? self.parseDate(jumpDate)
 458 |         : self.latestSelectedDateObj ||
 459 |           (self.config.minDate && self.config.minDate > self.now
 460 |             ? self.config.minDate
 461 |             : self.config.maxDate && self.config.maxDate < self.now
 462 |               ? self.config.maxDate
 463 |               : self.now);
 464 | 
 465 |     const oldYear = self.currentYear;
 466 |     const oldMonth = self.currentMonth;
 467 | 
 468 |     try {
 469 |       if (jumpTo !== undefined) {
 470 |         self.currentYear = jumpTo.getFullYear();
 471 |         self.currentMonth = jumpTo.getMonth();
 472 |       }
 473 |     } catch (e: any) {
 474 |       /* istanbul ignore next */
 475 |       e.message = 'Invalid date supplied: ' + jumpTo;
 476 |       self.config.errorHandler(e);
 477 |     }
 478 | 
 479 |     if (triggerChange && self.currentYear !== oldYear) {
 480 |       triggerEvent('onYearChange');
 481 |       buildMonthSwitch();
 482 |     }
 483 | 
 484 |     if (triggerChange && (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
 485 |       triggerEvent('onMonthChange');
 486 |     }
 487 | 
 488 |     self.redraw();
 489 |   }
 490 | 
 491 |   /**
 492 |    * The up/down arrow handler for time inputs
 493 |    * @param {Event} e the click event
 494 |    */
 495 |   function timeIncrement(e: KeyboardEvent | MouseEvent) {
 496 |     const eventTarget = getEventTarget(e) as Element;
 497 |     if (~eventTarget.className.indexOf('arrow'))
 498 |       incrementNumInput(e, eventTarget.classList.contains('arrowUp') ? 1 : -1);
 499 |   }
 500 | 
 501 |   /**
 502 |    * Increments/decrements the value of input associ-
 503 |    * ated with the up/down arrow by dispatching an
 504 |    * "increment" event on the input.
 505 |    *
 506 |    * @param {Event} e the click event
 507 |    * @param {Number} delta the diff (usually 1 or -1)
 508 |    * @param {Element} inputElem the input element
 509 |    */
 510 |   function incrementNumInput(
 511 |     e: KeyboardEvent | MouseEvent | undefined,
 512 |     delta: number,
 513 |     inputElem?: HTMLInputElement
 514 |   ) {
 515 |     const target = e && (getEventTarget(e) as Element);
 516 |     const input = inputElem || (target && target.parentNode && target.parentNode.firstChild);
 517 |     const event = createEvent('increment') as IncrementEvent;
 518 |     event.delta = delta;
 519 |     input && input.dispatchEvent(event);
 520 |   }
 521 | 
 522 |   function build() {
 523 |     const fragment = win.document.createDocumentFragment();
 524 |     self.calendarContainer = createElement<HTMLDivElement>(
 525 |       win.document,
 526 |       'div',
 527 |       'flatpickr-calendar'
 528 |     );
 529 |     self.calendarContainer.tabIndex = -1;
 530 | 
 531 |     if (!self.config.noCalendar) {
 532 |       fragment.appendChild(buildMonthNav());
 533 |       self.innerContainer = createElement<HTMLDivElement>(
 534 |         win.document,
 535 |         'div',
 536 |         'flatpickr-innerContainer'
 537 |       );
 538 | 
 539 |       if (self.config.weekNumbers) {
 540 |         const { weekWrapper, weekNumbers } = buildWeeks();
 541 |         self.innerContainer.appendChild(weekWrapper);
 542 |         self.weekNumbers = weekNumbers;
 543 |         self.weekWrapper = weekWrapper;
 544 |       }
 545 | 
 546 |       self.rContainer = createElement<HTMLDivElement>(win.document, 'div', 'flatpickr-rContainer');
 547 |       self.rContainer.appendChild(buildWeekdays());
 548 | 
 549 |       if (!self.daysContainer) {
 550 |         self.daysContainer = createElement<HTMLDivElement>(win.document, 'div', 'flatpickr-days');
 551 |         self.daysContainer.tabIndex = -1;
 552 |       }
 553 | 
 554 |       buildDays();
 555 | 
 556 |       self.rContainer.appendChild(self.daysContainer);
 557 |       self.innerContainer.appendChild(self.rContainer);
 558 |       fragment.appendChild(self.innerContainer);
 559 |     }
 560 | 
 561 |     if (self.config.enableTime) {
 562 |       fragment.appendChild(buildTime());
 563 |     }
 564 | 
 565 |     toggleClass(self.calendarContainer, 'rangeMode', self.config.mode === 'range');
 566 | 
 567 |     toggleClass(self.calendarContainer, 'animate', self.config.animate === true);
 568 | 
 569 |     toggleClass(self.calendarContainer, 'multiMonth', self.config.showMonths > 1);
 570 | 
 571 |     self.calendarContainer.appendChild(fragment);
 572 | 
 573 |     const customAppend =
 574 |       self.config.appendTo !== undefined && self.config.appendTo.nodeType !== undefined;
 575 | 
 576 |     if (self.config.inline || self.config.static) {
 577 |       self.calendarContainer.classList.add(self.config.inline ? 'inline' : 'static');
 578 | 
 579 |       if (self.config.inline) {
 580 |         if (!customAppend && self.element.parentNode)
 581 |           self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
 582 |         else if (self.config.appendTo !== undefined)
 583 |           self.config.appendTo.appendChild(self.calendarContainer);
 584 |       }
 585 | 
 586 |       if (self.config.static) {
 587 |         const wrapper = createElement(win.document, 'div', 'flatpickr-wrapper');
 588 |         if (self.element.parentNode) self.element.parentNode.insertBefore(wrapper, self.element);
 589 |         wrapper.appendChild(self.element);
 590 | 
 591 |         if (self.altInput) wrapper.appendChild(self.altInput);
 592 | 
 593 |         wrapper.appendChild(self.calendarContainer);
 594 |       }
 595 |     }
 596 | 
 597 |     if (!self.config.static && !self.config.inline)
 598 |       (self.config.appendTo !== undefined ? self.config.appendTo : win.document.body).appendChild(
 599 |         self.calendarContainer
 600 |       );
 601 |   }
 602 | 
 603 |   function createDay(className: string, date: Date, _dayNumber: number, i: number) {
 604 |     const dateIsEnabled = isEnabled(date, true),
 605 |       dayElement = createElement<DayElement>(
 606 |         win.document,
 607 |         'span',
 608 |         className,
 609 |         date.getDate().toString()
 610 |       );
 611 | 
 612 |     dayElement.dateObj = date;
 613 |     dayElement.$i = i;
 614 |     dayElement.setAttribute('aria-label', self.formatDate(date, self.config.ariaDateFormat));
 615 | 
 616 |     if (className.indexOf('hidden') === -1 && compareDates(date, self.now) === 0) {
 617 |       self.todayDateElem = dayElement;
 618 |       dayElement.classList.add('today');
 619 |       dayElement.setAttribute('aria-current', 'date');
 620 |     }
 621 | 
 622 |     if (dateIsEnabled) {
 623 |       dayElement.tabIndex = -1;
 624 |       if (isDateSelected(date)) {
 625 |         dayElement.classList.add('selected');
 626 |         self.selectedDateElem = dayElement;
 627 | 
 628 |         if (self.config.mode === 'range') {
 629 |           toggleClass(
 630 |             dayElement,
 631 |             'startRange',
 632 |             self.selectedDates[0] && compareDates(date, self.selectedDates[0], true) === 0
 633 |           );
 634 | 
 635 |           toggleClass(
 636 |             dayElement,
 637 |             'endRange',
 638 |             self.selectedDates[1] && compareDates(date, self.selectedDates[1], true) === 0
 639 |           );
 640 | 
 641 |           if (className === 'nextMonthDay') dayElement.classList.add('inRange');
 642 |         }
 643 |       }
 644 |     } else {
 645 |       dayElement.classList.add('flatpickr-disabled');
 646 |     }
 647 | 
 648 |     if (self.config.mode === 'range') {
 649 |       if (isDateInRange(date) && !isDateSelected(date)) dayElement.classList.add('inRange');
 650 |     }
 651 | 
 652 |     if (
 653 |       self.weekNumbers &&
 654 |       self.config.showMonths === 1 &&
 655 |       className !== 'prevMonthDay' &&
 656 |       i % 7 === 6
 657 |     ) {
 658 |       self.weekNumbers.insertAdjacentHTML(
 659 |         'beforeend',
 660 |         "<span class='flatpickr-day'>" + self.config.getWeek(date) + '</span>'
 661 |       );
 662 |     }
 663 | 
 664 |     triggerEvent('onDayCreate', dayElement);
 665 | 
 666 |     return dayElement;
 667 |   }
 668 | 
 669 |   function focusOnDayElem(targetNode: DayElement) {
 670 |     targetNode.focus();
 671 |     if (self.config.mode === 'range') onMouseOver(targetNode);
 672 |   }
 673 | 
 674 |   function getFirstAvailableDay(delta: number) {
 675 |     const startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
 676 |     const endMonth = delta > 0 ? self.config.showMonths : -1;
 677 | 
 678 |     for (let m = startMonth; m != endMonth; m += delta) {
 679 |       const month = (self.daysContainer as HTMLDivElement).children[m];
 680 |       const startIndex = delta > 0 ? 0 : month.children.length - 1;
 681 |       const endIndex = delta > 0 ? month.children.length : -1;
 682 | 
 683 |       for (let i = startIndex; i != endIndex; i += delta) {
 684 |         const c = month.children[i] as DayElement;
 685 |         if (c.className.indexOf('hidden') === -1 && isEnabled(c.dateObj)) return c;
 686 |       }
 687 |     }
 688 |     return undefined;
 689 |   }
 690 | 
 691 |   function getNextAvailableDay(current: DayElement, delta: number) {
 692 |     const givenMonth =
 693 |       current.className.indexOf('Month') === -1 ? current.dateObj.getMonth() : self.currentMonth;
 694 |     const endMonth = delta > 0 ? self.config.showMonths : -1;
 695 |     const loopDelta = delta > 0 ? 1 : -1;
 696 | 
 697 |     for (let m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
 698 |       const month = (self.daysContainer as HTMLDivElement).children[m];
 699 |       const startIndex =
 700 |         givenMonth - self.currentMonth === m
 701 |           ? current.$i + delta
 702 |           : delta < 0
 703 |             ? month.children.length - 1
 704 |             : 0;
 705 |       const numMonthDays = month.children.length;
 706 | 
 707 |       for (
 708 |         let i = startIndex;
 709 |         i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1);
 710 |         i += loopDelta
 711 |       ) {
 712 |         const c = month.children[i] as DayElement;
 713 |         if (
 714 |           c.className.indexOf('hidden') === -1 &&
 715 |           isEnabled(c.dateObj) &&
 716 |           Math.abs(current.$i - i) >= Math.abs(delta)
 717 |         )
 718 |           return focusOnDayElem(c);
 719 |       }
 720 |     }
 721 | 
 722 |     self.changeMonth(loopDelta);
 723 |     focusOnDay(getFirstAvailableDay(loopDelta), 0);
 724 |     return undefined;
 725 |   }
 726 | 
 727 |   function focusOnDay(current: DayElement | undefined, offset: number) {
 728 |     const activeElement = getClosestActiveElement();
 729 | 
 730 |     const dayFocused = isInView(activeElement || self.element.doc.body);
 731 |     const startElem =
 732 |       current !== undefined
 733 |         ? current
 734 |         : dayFocused
 735 |           ? (activeElement as DayElement)
 736 |           : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
 737 |             ? self.selectedDateElem
 738 |             : self.todayDateElem !== undefined && isInView(self.todayDateElem)
 739 |               ? self.todayDateElem
 740 |               : getFirstAvailableDay(offset > 0 ? 1 : -1);
 741 | 
 742 |     if (startElem === undefined) {
 743 |       self._input.focus();
 744 |     } else if (!dayFocused) {
 745 |       focusOnDayElem(startElem);
 746 |     } else {
 747 |       getNextAvailableDay(startElem, offset);
 748 |     }
 749 |   }
 750 | 
 751 |   function buildMonthDays(year: number, month: number) {
 752 |     const firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
 753 | 
 754 |     const prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
 755 | 
 756 |     const daysInMonth = self.utils.getDaysInMonth(month, year),
 757 |       days = win.document.createDocumentFragment(),
 758 |       isMultiMonth = self.config.showMonths > 1,
 759 |       prevMonthDayClass = isMultiMonth ? 'prevMonthDay hidden' : 'prevMonthDay',
 760 |       nextMonthDayClass = isMultiMonth ? 'nextMonthDay hidden' : 'nextMonthDay';
 761 | 
 762 |     let dayNumber = prevMonthDays + 1 - firstOfMonth,
 763 |       dayIndex = 0;
 764 | 
 765 |     // prepend days from the ending of previous month
 766 |     for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
 767 |       days.appendChild(
 768 |         createDay(
 769 |           `flatpickr-day ${prevMonthDayClass}`,
 770 |           new Date(year, month - 1, dayNumber),
 771 |           dayNumber,
 772 |           dayIndex
 773 |         )
 774 |       );
 775 |     }
 776 | 
 777 |     // Start at 1 since there is no 0th day
 778 |     for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
 779 |       days.appendChild(
 780 |         createDay('flatpickr-day', new Date(year, month, dayNumber), dayNumber, dayIndex)
 781 |       );
 782 |     }
 783 | 
 784 |     // append days from the next month
 785 |     for (
 786 |       let dayNum = daysInMonth + 1;
 787 |       dayNum <= 42 - firstOfMonth && (self.config.showMonths === 1 || dayIndex % 7 !== 0);
 788 |       dayNum++, dayIndex++
 789 |     ) {
 790 |       days.appendChild(
 791 |         createDay(
 792 |           `flatpickr-day ${nextMonthDayClass}`,
 793 |           new Date(year, month + 1, dayNum % daysInMonth),
 794 |           dayNum,
 795 |           dayIndex
 796 |         )
 797 |       );
 798 |     }
 799 | 
 800 |     //updateNavigationCurrentMonth();
 801 | 
 802 |     const dayContainer = createElement<HTMLDivElement>(win.document, 'div', 'dayContainer');
 803 |     dayContainer.appendChild(days);
 804 | 
 805 |     return dayContainer;
 806 |   }
 807 | 
 808 |   function buildDays() {
 809 |     if (self.daysContainer === undefined) {
 810 |       return;
 811 |     }
 812 | 
 813 |     clearNode(self.daysContainer);
 814 | 
 815 |     // TODO: week numbers for each month
 816 |     if (self.weekNumbers) clearNode(self.weekNumbers);
 817 | 
 818 |     const frag = self.element.doc.createDocumentFragment();
 819 | 
 820 |     for (let i = 0; i < self.config.showMonths; i++) {
 821 |       const d = new Date(self.currentYear, self.currentMonth, 1);
 822 |       d.setMonth(self.currentMonth + i);
 823 | 
 824 |       frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
 825 |     }
 826 | 
 827 |     self.daysContainer.appendChild(frag);
 828 | 
 829 |     self.days = self.daysContainer.firstChild as HTMLDivElement;
 830 |     if (self.config.mode === 'range' && self.selectedDates.length === 1) {
 831 |       onMouseOver();
 832 |     }
 833 |   }
 834 | 
 835 |   function buildMonthSwitch() {
 836 |     if (self.config.showMonths > 1 || self.config.monthSelectorType !== 'dropdown') return;
 837 | 
 838 |     const shouldBuildMonth = function (month: number): boolean {
 839 |       if (
 840 |         self.config.minDate !== undefined &&
 841 |         self.currentYear === self.config.minDate.getFullYear() &&
 842 |         month < self.config.minDate.getMonth()
 843 |       ) {
 844 |         return false;
 845 |       }
 846 | 
 847 |       return !(
 848 |         self.config.maxDate !== undefined &&
 849 |         self.currentYear === self.config.maxDate.getFullYear() &&
 850 |         month > self.config.maxDate.getMonth()
 851 |       );
 852 |     };
 853 | 
 854 |     self.monthsDropdownContainer.tabIndex = -1;
 855 | 
 856 |     self.monthsDropdownContainer.innerHTML = '';
 857 | 
 858 |     for (let i = 0; i < 12; i++) {
 859 |       if (!shouldBuildMonth(i)) continue;
 860 | 
 861 |       const month = createElement<HTMLOptionElement>(
 862 |         win.document,
 863 |         'option',
 864 |         'flatpickr-monthDropdown-month'
 865 |       );
 866 | 
 867 |       month.value = new Date(self.currentYear, i).getMonth().toString();
 868 |       month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
 869 |       month.tabIndex = -1;
 870 | 
 871 |       if (self.currentMonth === i) {
 872 |         month.selected = true;
 873 |       }
 874 | 
 875 |       self.monthsDropdownContainer.appendChild(month);
 876 |     }
 877 |   }
 878 | 
 879 |   function buildMonth() {
 880 |     const container = createElement(win.document, 'div', 'flatpickr-month');
 881 |     const monthNavFragment = win.document.createDocumentFragment();
 882 | 
 883 |     let monthElement;
 884 | 
 885 |     if (self.config.showMonths > 1 || self.config.monthSelectorType === 'static') {
 886 |       monthElement = createElement<HTMLSpanElement>(win.document, 'span', 'cur-month');
 887 |     } else {
 888 |       self.monthsDropdownContainer = createElement<HTMLSelectElement>(
 889 |         win.document,
 890 |         'select',
 891 |         'flatpickr-monthDropdown-months'
 892 |       );
 893 | 
 894 |       self.monthsDropdownContainer.setAttribute('aria-label', self.l10n.monthAriaLabel);
 895 | 
 896 |       bind(self.monthsDropdownContainer, 'change', (e: Event) => {
 897 |         const target = getEventTarget(e) as HTMLSelectElement;
 898 |         const selectedMonth = parseInt(target.value, 10);
 899 | 
 900 |         self.changeMonth(selectedMonth - self.currentMonth);
 901 | 
 902 |         triggerEvent('onMonthChange');
 903 |       });
 904 | 
 905 |       buildMonthSwitch();
 906 | 
 907 |       monthElement = self.monthsDropdownContainer;
 908 |     }
 909 | 
 910 |     const yearInput = createNumberInput(win.document, 'cur-year', {
 911 |       tabindex: '-1',
 912 |     });
 913 | 
 914 |     const yearElement = yearInput.getElementsByTagName('input')[0] as HTMLInputElement;
 915 |     yearElement.setAttribute('aria-label', self.l10n.yearAriaLabel);
 916 | 
 917 |     if (self.config.minDate) {
 918 |       yearElement.setAttribute('min', self.config.minDate.getFullYear().toString());
 919 |     }
 920 | 
 921 |     if (self.config.maxDate) {
 922 |       yearElement.setAttribute('max', self.config.maxDate.getFullYear().toString());
 923 | 
 924 |       yearElement.disabled =
 925 |         !!self.config.minDate &&
 926 |         self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
 927 |     }
 928 | 
 929 |     const currentMonth = createElement<HTMLDivElement>(
 930 |       win.document,
 931 |       'div',
 932 |       'flatpickr-current-month'
 933 |     );
 934 |     currentMonth.appendChild(monthElement);
 935 |     currentMonth.appendChild(yearInput);
 936 | 
 937 |     monthNavFragment.appendChild(currentMonth);
 938 |     container.appendChild(monthNavFragment);
 939 | 
 940 |     return {
 941 |       container,
 942 |       yearElement,
 943 |       monthElement,
 944 |     };
 945 |   }
 946 | 
 947 |   function buildMonths() {
 948 |     clearNode(self.monthNav);
 949 |     self.monthNav.appendChild(self.prevMonthNav);
 950 | 
 951 |     if (self.config.showMonths) {
 952 |       self.yearElements = [];
 953 |       self.monthElements = [];
 954 |     }
 955 | 
 956 |     for (let m = self.config.showMonths; m--; ) {
 957 |       const month = buildMonth();
 958 |       self.yearElements.push(month.yearElement);
 959 |       self.monthElements.push(month.monthElement);
 960 |       self.monthNav.appendChild(month.container);
 961 |     }
 962 | 
 963 |     self.monthNav.appendChild(self.nextMonthNav);
 964 |   }
 965 | 
 966 |   function buildMonthNav() {
 967 |     self.monthNav = createElement<HTMLDivElement>(win.document, 'div', 'flatpickr-months');
 968 |     self.yearElements = [];
 969 |     self.monthElements = [];
 970 | 
 971 |     self.prevMonthNav = createElement<HTMLSpanElement>(
 972 |       win.document,
 973 |       'span',
 974 |       'flatpickr-prev-month'
 975 |     );
 976 |     self.prevMonthNav.innerHTML = self.config.prevArrow;
 977 | 
 978 |     self.nextMonthNav = createElement(win.document, 'span', 'flatpickr-next-month');
 979 |     self.nextMonthNav.innerHTML = self.config.nextArrow;
 980 | 
 981 |     buildMonths();
 982 | 
 983 |     Object.defineProperty(self, '_hidePrevMonthArrow', {
 984 |       get: () => self.__hidePrevMonthArrow,
 985 |       set(bool: boolean) {
 986 |         if (self.__hidePrevMonthArrow !== bool) {
 987 |           toggleClass(self.prevMonthNav, 'flatpickr-disabled', bool);
 988 |           self.__hidePrevMonthArrow = bool;
 989 |         }
 990 |       },
 991 |     });
 992 | 
 993 |     Object.defineProperty(self, '_hideNextMonthArrow', {
 994 |       get: () => self.__hideNextMonthArrow,
 995 |       set(bool: boolean) {
 996 |         if (self.__hideNextMonthArrow !== bool) {
 997 |           toggleClass(self.nextMonthNav, 'flatpickr-disabled', bool);
 998 |           self.__hideNextMonthArrow = bool;
 999 |         }
1000 |       },
1001 |     });
1002 | 
1003 |     self.currentYearElement = self.yearElements[0];
1004 | 
1005 |     updateNavigationCurrentMonth();
1006 | 
1007 |     return self.monthNav;
1008 |   }
1009 | 
1010 |   function buildTime() {
1011 |     self.calendarContainer.classList.add('hasTime');
1012 |     if (self.config.noCalendar) self.calendarContainer.classList.add('noCalendar');
1013 | 
1014 |     const defaults = getDefaultHours(self.config);
1015 | 
1016 |     self.timeContainer = createElement<HTMLDivElement>(win.document, 'div', 'flatpickr-time');
1017 |     self.timeContainer.tabIndex = -1;
1018 |     const separator = createElement(win.document, 'span', 'flatpickr-time-separator', ':');
1019 | 
1020 |     const hourInput = createNumberInput(win.document, 'flatpickr-hour', {
1021 |       'aria-label': self.l10n.hourAriaLabel,
1022 |     });
1023 |     self.hourElement = hourInput.getElementsByTagName('input')[0] as HTMLInputElement;
1024 | 
1025 |     const minuteInput = createNumberInput(win.document, 'flatpickr-minute', {
1026 |       'aria-label': self.l10n.minuteAriaLabel,
1027 |     });
1028 | 
1029 |     self.minuteElement = minuteInput.getElementsByTagName('input')[0] as HTMLInputElement;
1030 | 
1031 |     self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
1032 | 
1033 |     self.hourElement.value = pad(
1034 |       self.latestSelectedDateObj
1035 |         ? self.latestSelectedDateObj.getHours()
1036 |         : self.config.time_24hr
1037 |           ? defaults.hours
1038 |           : military2ampm(defaults.hours)
1039 |     );
1040 | 
1041 |     self.minuteElement.value = pad(
1042 |       self.latestSelectedDateObj ? self.latestSelectedDateObj.getMinutes() : defaults.minutes
1043 |     );
1044 | 
1045 |     self.hourElement.setAttribute('step', self.config.hourIncrement.toString());
1046 |     self.minuteElement.setAttribute('step', self.config.minuteIncrement.toString());
1047 | 
1048 |     self.hourElement.setAttribute('min', self.config.time_24hr ? '0' : '1');
1049 |     self.hourElement.setAttribute('max', self.config.time_24hr ? '23' : '12');
1050 |     self.hourElement.setAttribute('maxlength', '2');
1051 | 
1052 |     self.minuteElement.setAttribute('min', '0');
1053 |     self.minuteElement.setAttribute('max', '59');
1054 |     self.minuteElement.setAttribute('maxlength', '2');
1055 | 
1056 |     self.timeContainer.appendChild(hourInput);
1057 |     self.timeContainer.appendChild(separator);
1058 |     self.timeContainer.appendChild(minuteInput);
1059 | 
1060 |     if (self.config.time_24hr) self.timeContainer.classList.add('time24hr');
1061 | 
1062 |     if (self.config.enableSeconds) {
1063 |       self.timeContainer.classList.add('hasSeconds');
1064 | 
1065 |       const secondInput = createNumberInput(win.document, 'flatpickr-second');
1066 |       self.secondElement = secondInput.getElementsByTagName('input')[0] as HTMLInputElement;
1067 | 
1068 |       self.secondElement.value = pad(
1069 |         self.latestSelectedDateObj ? self.latestSelectedDateObj.getSeconds() : defaults.seconds
1070 |       );
1071 | 
1072 |       self.secondElement.setAttribute('step', self.minuteElement.getAttribute('step') as string);
1073 |       self.secondElement.setAttribute('min', '0');
1074 |       self.secondElement.setAttribute('max', '59');
1075 |       self.secondElement.setAttribute('maxlength', '2');
1076 | 
1077 |       self.timeContainer.appendChild(
1078 |         createElement(win.document, 'span', 'flatpickr-time-separator', ':')
1079 |       );
1080 |       self.timeContainer.appendChild(secondInput);
1081 |     }
1082 | 
1083 |     if (!self.config.time_24hr) {
1084 |       // add self.amPM if appropriate
1085 |       self.amPM = createElement(
1086 |         win.document,
1087 |         'span',
1088 |         'flatpickr-am-pm',
1089 |         self.l10n.amPM[
1090 |           int(
1091 |             (self.latestSelectedDateObj
1092 |               ? parseInt(self.hourElement.value)
1093 |               : self.config.defaultHour) > 11
1094 |           )
1095 |         ]
1096 |       );
1097 |       self.amPM.title = self.l10n.toggleTitle;
1098 |       self.amPM.tabIndex = -1;
1099 |       self.timeContainer.appendChild(self.amPM);
1100 |     }
1101 | 
1102 |     return self.timeContainer;
1103 |   }
1104 | 
1105 |   function buildWeekdays() {
1106 |     if (!self.weekdayContainer)
1107 |       self.weekdayContainer = createElement<HTMLDivElement>(
1108 |         win.document,
1109 |         'div',
1110 |         'flatpickr-weekdays'
1111 |       );
1112 |     else clearNode(self.weekdayContainer);
1113 | 
1114 |     for (let i = self.config.showMonths; i--; ) {
1115 |       const container = createElement<HTMLDivElement>(
1116 |         win.document,
1117 |         'div',
1118 |         'flatpickr-weekdaycontainer'
1119 |       );
1120 | 
1121 |       self.weekdayContainer.appendChild(container);
1122 |     }
1123 | 
1124 |     updateWeekdays();
1125 | 
1126 |     return self.weekdayContainer;
1127 |   }
1128 | 
1129 |   function updateWeekdays() {
1130 |     if (!self.weekdayContainer) {
1131 |       return;
1132 |     }
1133 | 
1134 |     const firstDayOfWeek = self.l10n.firstDayOfWeek;
1135 |     let weekdays = [...self.l10n.weekdays.shorthand];
1136 | 
1137 |     if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
1138 |       weekdays = [
1139 |         ...weekdays.splice(firstDayOfWeek, weekdays.length),
1140 |         ...weekdays.splice(0, firstDayOfWeek),
1141 |       ];
1142 |     }
1143 | 
1144 |     for (let i = self.config.showMonths; i--; ) {
1145 |       self.weekdayContainer.children[i].innerHTML = `
1146 |       <span class='flatpickr-weekday'>
1147 |         ${weekdays.join("</span><span class='flatpickr-weekday'>")}
1148 |       </span>
1149 |       `;
1150 |     }
1151 |   }
1152 | 
1153 |   /* istanbul ignore next */
1154 |   function buildWeeks() {
1155 |     self.calendarContainer.classList.add('hasWeeks');
1156 |     const weekWrapper = createElement<HTMLDivElement>(win.document, 'div', 'flatpickr-weekwrapper');
1157 |     weekWrapper.appendChild(
1158 |       createElement(win.document, 'span', 'flatpickr-weekday', self.l10n.weekAbbreviation)
1159 |     );
1160 |     const weekNumbers = createElement<HTMLDivElement>(win.document, 'div', 'flatpickr-weeks');
1161 |     weekWrapper.appendChild(weekNumbers);
1162 | 
1163 |     return {
1164 |       weekWrapper,
1165 |       weekNumbers,
1166 |     };
1167 |   }
1168 | 
1169 |   function changeMonth(value: number, isOffset = true) {
1170 |     const delta = isOffset ? value : value - self.currentMonth;
1171 | 
1172 |     if (
1173 |       (delta < 0 && self._hidePrevMonthArrow === true) ||
1174 |       (delta > 0 && self._hideNextMonthArrow === true)
1175 |     )
1176 |       return;
1177 | 
1178 |     self.currentMonth += delta;
1179 | 
1180 |     if (self.currentMonth < 0 || self.currentMonth > 11) {
1181 |       self.currentYear += self.currentMonth > 11 ? 1 : -1;
1182 |       self.currentMonth = (self.currentMonth + 12) % 12;
1183 | 
1184 |       triggerEvent('onYearChange');
1185 |       buildMonthSwitch();
1186 |     }
1187 | 
1188 |     buildDays();
1189 | 
1190 |     triggerEvent('onMonthChange');
1191 |     updateNavigationCurrentMonth();
1192 |   }
1193 | 
1194 |   function clear(triggerChangeEvent = true, toInitial = true) {
1195 |     self.input.value = '';
1196 | 
1197 |     if (self.altInput !== undefined) self.altInput.value = '';
1198 | 
1199 |     if (self.mobileInput !== undefined) self.mobileInput.value = '';
1200 | 
1201 |     self.selectedDates = [];
1202 |     self.latestSelectedDateObj = undefined;
1203 |     if (toInitial === true) {
1204 |       self.currentYear = self._initialDate.getFullYear();
1205 |       self.currentMonth = self._initialDate.getMonth();
1206 |     }
1207 | 
1208 |     if (self.config.enableTime === true) {
1209 |       const { hours, minutes, seconds } = getDefaultHours(self.config);
1210 |       setHours(hours, minutes, seconds);
1211 |     }
1212 | 
1213 |     self.redraw();
1214 | 
1215 |     if (triggerChangeEvent)
1216 |       // triggerChangeEvent is true (default) or an Event
1217 |       triggerEvent('onChange');
1218 |   }
1219 | 
1220 |   function close() {
1221 |     self.isOpen = false;
1222 | 
1223 |     if (!self.isMobile) {
1224 |       if (self.calendarContainer !== undefined) {
1225 |         self.calendarContainer.classList.remove('open');
1226 |       }
1227 |       if (self._input !== undefined) {
1228 |         self._input.classList.remove('active');
1229 |       }
1230 |     }
1231 | 
1232 |     triggerEvent('onClose');
1233 |   }
1234 | 
1235 |   function destroy() {
1236 |     if (self.config !== undefined) triggerEvent('onDestroy');
1237 | 
1238 |     for (let i = self._handlers.length; i--; ) {
1239 |       self._handlers[i].remove();
1240 |     }
1241 | 
1242 |     self._handlers = [];
1243 | 
1244 |     if (self.mobileInput) {
1245 |       if (self.mobileInput.parentNode) self.mobileInput.parentNode.removeChild(self.mobileInput);
1246 |       self.mobileInput = undefined;
1247 |     } else if (self.calendarContainer && self.calendarContainer.parentNode) {
1248 |       if (self.config.static && self.calendarContainer.parentNode) {
1249 |         const wrapper = self.calendarContainer.parentNode;
1250 |         wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
1251 | 
1252 |         if (wrapper.parentNode) {
1253 |           while (wrapper.firstChild) wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
1254 |           wrapper.parentNode.removeChild(wrapper);
1255 |         }
1256 |       } else self.calendarContainer.parentNode.removeChild(self.calendarContainer);
1257 |     }
1258 | 
1259 |     if (self.altInput) {
1260 |       self.input.type = 'text';
1261 |       if (self.altInput.parentNode) self.altInput.parentNode.removeChild(self.altInput);
1262 |       delete self.altInput;
1263 |     }
1264 | 
1265 |     if (self.input) {
1266 |       self.input.type = (self.input as any)._type;
1267 |       self.input.classList.remove('flatpickr-input');
1268 |       self.input.removeAttribute('readonly');
1269 |     }
1270 | 
1271 |     (
1272 |       [
1273 |         '_showTimeInput',
1274 |         'latestSelectedDateObj',
1275 |         '_hideNextMonthArrow',
1276 |         '_hidePrevMonthArrow',
1277 |         '__hideNextMonthArrow',
1278 |         '__hidePrevMonthArrow',
1279 |         'isMobile',
1280 |         'isOpen',
1281 |         'selectedDateElem',
1282 |         'minDateHasTime',
1283 |         'maxDateHasTime',
1284 |         'days',
1285 |         'daysContainer',
1286 |         '_input',
1287 |         '_positionElement',
1288 |         'innerContainer',
1289 |         'rContainer',
1290 |         'monthNav',
1291 |         'todayDateElem',
1292 |         'calendarContainer',
1293 |         'weekdayContainer',
1294 |         'prevMonthNav',
1295 |         'nextMonthNav',
1296 |         'monthsDropdownContainer',
1297 |         'currentMonthElement',
1298 |         'currentYearElement',
1299 |         'navigationCurrentMonth',
1300 |         'selectedDateElem',
1301 |         'config',
1302 |       ] as (keyof Instance)[]
1303 |     ).forEach((k) => {
1304 |       try {
1305 |         delete self[k as keyof Instance];
1306 |       } catch (_) {
1307 |         //
1308 |       }
1309 |     });
1310 |   }
1311 | 
1312 |   function isCalendarElem(elem: HTMLElement) {
1313 |     return self.calendarContainer.contains(elem);
1314 |   }
1315 | 
1316 |   function documentClick(e: MouseEvent) {
1317 |     if (self.isOpen && !self.config.inline) {
1318 |       const eventTarget = getEventTarget(e);
1319 |       const isCalendarElement = isCalendarElem(eventTarget as HTMLElement);
1320 |       const isInput =
1321 |         eventTarget === self.input ||
1322 |         eventTarget === self.altInput ||
1323 |         self.element.contains(eventTarget as HTMLElement) ||
1324 |         // web components
1325 |         // e.path is not present in all browsers. circumventing typechecks
1326 |         ((e as any).path &&
1327 |           (e as any).path.indexOf &&
1328 |           (~(e as any).path.indexOf(self.input) || ~(e as any).path.indexOf(self.altInput)));
1329 | 
1330 |       const lostFocus =
1331 |         !isInput && !isCalendarElement && !isCalendarElem(e.relatedTarget as HTMLElement);
1332 | 
1333 |       const isIgnored = !self.config.ignoredFocusElements.some((elem) =>
1334 |         elem.contains(eventTarget as Node)
1335 |       );
1336 | 
1337 |       if (lostFocus && isIgnored) {
1338 |         if (self.config.allowInput) {
1339 |           self.setDate(
1340 |             self._input.value,
1341 |             false,
1342 |             self.config.altInput ? self.config.altFormat : self.config.dateFormat
1343 |           );
1344 |         }
1345 | 
1346 |         if (
1347 |           self.timeContainer !== undefined &&
1348 |           self.minuteElement !== undefined &&
1349 |           self.hourElement !== undefined &&
1350 |           self.input.value !== '' &&
1351 |           self.input.value !== undefined
1352 |         ) {
1353 |           updateTime();
1354 |         }
1355 | 
1356 |         self.close();
1357 | 
1358 |         if (self.config && self.config.mode === 'range' && self.selectedDates.length === 1)
1359 |           self.clear(false);
1360 |       }
1361 |     }
1362 |   }
1363 | 
1364 |   function changeYear(newYear: number) {
1365 |     if (
1366 |       !newYear ||
1367 |       (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
1368 |       (self.config.maxDate && newYear > self.config.maxDate.getFullYear())
1369 |     )
1370 |       return;
1371 | 
1372 |     const newYearNum = newYear,
1373 |       isNewYear = self.currentYear !== newYearNum;
1374 | 
1375 |     self.currentYear = newYearNum || self.currentYear;
1376 | 
1377 |     if (self.config.maxDate && self.currentYear === self.config.maxDate.getFullYear()) {
1378 |       self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
1379 |     } else if (self.config.minDate && self.currentYear === self.config.minDate.getFullYear()) {
1380 |       self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
1381 |     }
1382 | 
1383 |     if (isNewYear) {
1384 |       self.redraw();
1385 |       triggerEvent('onYearChange');
1386 |       buildMonthSwitch();
1387 |     }
1388 |   }
1389 | 
1390 |   function isEnabled(date: DateOption, timeless = true): boolean {
1391 |     const dateToCheck = self.parseDate(date, undefined, timeless); // timeless
1392 | 
1393 |     if (
1394 |       (self.config.minDate &&
1395 |         dateToCheck &&
1396 |         compareDates(
1397 |           dateToCheck,
1398 |           self.config.minDate,
1399 |           timeless !== undefined ? timeless : !self.minDateHasTime
1400 |         ) < 0) ||
1401 |       (self.config.maxDate &&
1402 |         dateToCheck &&
1403 |         compareDates(
1404 |           dateToCheck,
1405 |           self.config.maxDate,
1406 |           timeless !== undefined ? timeless : !self.maxDateHasTime
1407 |         ) > 0)
1408 |     )
1409 |       return false;
1410 |     if (!self.config.enable && self.config.disable.length === 0) return true;
1411 | 
1412 |     if (dateToCheck === undefined) return false;
1413 | 
1414 |     const bool = !!self.config.enable,
1415 |       array = self.config.enable ?? self.config.disable;
1416 | 
1417 |     for (let i = 0, d; i < array.length; i++) {
1418 |       d = array[i];
1419 | 
1420 |       if (
1421 |         typeof d === 'function' &&
1422 |         d(dateToCheck) // disabled by function
1423 |       )
1424 |         return bool;
1425 |       else if (
1426 |         (d as Date).getTime &&
1427 |         dateToCheck !== undefined &&
1428 |         (d as Date).getTime() === dateToCheck.getTime()
1429 |       )
1430 |         // disabled by date
1431 |         return bool;
1432 |       else if (typeof d === 'string') {
1433 |         // disabled by date string
1434 |         const parsed = self.parseDate(d, undefined, true);
1435 |         return parsed && parsed.getTime() === dateToCheck.getTime() ? bool : !bool;
1436 |       } else if (
1437 |         // disabled by range
1438 |         typeof d === 'object' &&
1439 |         dateToCheck !== undefined &&
1440 |         (d as DateRangeLimit).from &&
1441 |         (d as DateRangeLimit).to &&
1442 |         dateToCheck.getTime() >= (d as DateRangeLimit<Date>).from.getTime() &&
1443 |         dateToCheck.getTime() <= (d as DateRangeLimit<Date>).to.getTime()
1444 |       )
1445 |         return bool;
1446 |     }
1447 | 
1448 |     return !bool;
1449 |   }
1450 | 
1451 |   function isInView(elem: Element) {
1452 |     if (self.daysContainer !== undefined)
1453 |       return (
1454 |         elem.className.indexOf('hidden') === -1 &&
1455 |         elem.className.indexOf('flatpickr-disabled') === -1 &&
1456 |         self.daysContainer.contains(elem)
1457 |       );
1458 |     return false;
1459 |   }
1460 | 
1461 |   function onBlur(e: FocusEvent) {
1462 |     const isInput = e.target === self._input;
1463 |     const valueChanged = self._input.value.trimEnd() !== getDateStr();
1464 | 
1465 |     if (
1466 |       isInput &&
1467 |       valueChanged &&
1468 |       !(e.relatedTarget && isCalendarElem(e.relatedTarget as HTMLElement))
1469 |     ) {
1470 |       self.setDate(
1471 |         self._input.value,
1472 |         true,
1473 |         e.target === self.altInput ? self.config.altFormat : self.config.dateFormat
1474 |       );
1475 |     }
1476 |   }
1477 | 
1478 |   function onKeyDown(e: KeyboardEvent) {
1479 |     // e.key                      e.keyCode
1480 |     // "Backspace"                        8
1481 |     // "Tab"                              9
1482 |     // "Enter"                           13
1483 |     // "Escape"     (IE "Esc")           27
1484 |     // "ArrowLeft"  (IE "Left")          37
1485 |     // "ArrowUp"    (IE "Up")            38
1486 |     // "ArrowRight" (IE "Right")         39
1487 |     // "ArrowDown"  (IE "Down")          40
1488 |     // "Delete"     (IE "Del")           46
1489 | 
1490 |     const eventTarget = getEventTarget(e);
1491 |     const isInput = self.config.wrap
1492 |       ? element.contains(eventTarget as HTMLElement)
1493 |       : eventTarget === self._input;
1494 |     const allowInput = self.config.allowInput;
1495 |     const allowKeydown = self.isOpen && (!allowInput || !isInput);
1496 |     const allowInlineKeydown = self.config.inline && isInput && !allowInput;
1497 | 
1498 |     if (e.keyCode === 13 && isInput) {
1499 |       if (allowInput) {
1500 |         self.setDate(
1501 |           self._input.value,
1502 |           true,
1503 |           eventTarget === self.altInput ? self.config.altFormat : self.config.dateFormat
1504 |         );
1505 |         self.close();
1506 |         return (eventTarget as HTMLElement).blur();
1507 |       } else {
1508 |         self.open();
1509 |       }
1510 |     } else if (isCalendarElem(eventTarget as HTMLElement) || allowKeydown || allowInlineKeydown) {
1511 |       const isTimeObj =
1512 |         !!self.timeContainer && self.timeContainer.contains(eventTarget as HTMLElement);
1513 | 
1514 |       switch (e.keyCode) {
1515 |         case 13:
1516 |           if (isTimeObj) {
1517 |             e.preventDefault();
1518 |             updateTime();
1519 |             focusAndClose();
1520 |           } else selectDate(e);
1521 | 
1522 |           break;
1523 | 
1524 |         case 27: // escape
1525 |           e.preventDefault();
1526 |           focusAndClose();
1527 |           break;
1528 | 
1529 |         case 8:
1530 |         case 46:
1531 |           if (isInput && !self.config.allowInput) {
1532 |             e.preventDefault();
1533 |             self.clear();
1534 |           }
1535 |           break;
1536 | 
1537 |         case 37:
1538 |         case 39:
1539 |           if (!isTimeObj && !isInput) {
1540 |             e.preventDefault();
1541 | 
1542 |             const activeElement = getClosestActiveElement();
1543 |             if (
1544 |               self.daysContainer !== undefined &&
1545 |               (allowInput === false || (activeElement && isInView(activeElement)))
1546 |             ) {
1547 |               const delta = e.keyCode === 39 ? 1 : -1;
1548 | 
1549 |               if (!e.ctrlKey) focusOnDay(undefined, delta);
1550 |               else {
1551 |                 e.stopPropagation();
1552 |                 changeMonth(delta);
1553 |                 focusOnDay(getFirstAvailableDay(1), 0);
1554 |               }
1555 |             }
1556 |           } else if (self.hourElement) self.hourElement.focus();
1557 | 
1558 |           break;
1559 | 
1560 |         case 38:
1561 |         case 40: {
1562 |           e.preventDefault();
1563 |           const delta = e.keyCode === 40 ? 1 : -1;
1564 |           if (
1565 |             (self.daysContainer && (eventTarget as DayElement).$i !== undefined) ||
1566 |             eventTarget === self.input ||
1567 |             eventTarget === self.altInput
1568 |           ) {
1569 |             if (e.ctrlKey) {
1570 |               e.stopPropagation();
1571 |               changeYear(self.currentYear - delta);
1572 |               focusOnDay(getFirstAvailableDay(1), 0);
1573 |             } else if (!isTimeObj) focusOnDay(undefined, delta * 7);
1574 |           } else if (eventTarget === self.currentYearElement) {
1575 |             changeYear(self.currentYear - delta);
1576 |           } else if (self.config.enableTime) {
1577 |             if (!isTimeObj && self.hourElement) self.hourElement.focus();
1578 |             updateTime(e);
1579 |             self._debouncedChange();
1580 |           }
1581 | 
1582 |           break;
1583 |         }
1584 |         case 9:
1585 |           if (isTimeObj) {
1586 |             const elems = (
1587 |               [self.hourElement, self.minuteElement, self.secondElement, self.amPM] as Node[]
1588 |             )
1589 |               .concat(self.pluginElements)
1590 |               .filter((x) => x) as HTMLInputElement[];
1591 | 
1592 |             const i = elems.indexOf(eventTarget as HTMLInputElement);
1593 | 
1594 |             if (i !== -1) {
1595 |               const target = elems[i + (e.shiftKey ? -1 : 1)];
1596 |               e.preventDefault();
1597 |               (target || self._input).focus();
1598 |             }
1599 |           } else if (
1600 |             !self.config.noCalendar &&
1601 |             self.daysContainer &&
1602 |             self.daysContainer.contains(eventTarget as Node) &&
1603 |             e.shiftKey
1604 |           ) {
1605 |             e.preventDefault();
1606 |             self._input.focus();
1607 |           }
1608 | 
1609 |           break;
1610 | 
1611 |         default:
1612 |           break;
1613 |       }
1614 |     }
1615 | 
1616 |     if (self.amPM !== undefined && eventTarget === self.amPM) {
1617 |       switch (e.key) {
1618 |         case self.l10n.amPM[0].charAt(0):
1619 |         case self.l10n.amPM[0].charAt(0).toLowerCase():
1620 |           self.amPM.textContent = self.l10n.amPM[0];
1621 |           setHoursFromInputs();
1622 |           updateValue();
1623 | 
1624 |           break;
1625 | 
1626 |         case self.l10n.amPM[1].charAt(0):
1627 |         case self.l10n.amPM[1].charAt(0).toLowerCase():
1628 |           self.amPM.textContent = self.l10n.amPM[1];
1629 |           setHoursFromInputs();
1630 |           updateValue();
1631 | 
1632 |           break;
1633 |       }
1634 |     }
1635 | 
1636 |     if (isInput || isCalendarElem(eventTarget as HTMLElement)) {
1637 |       triggerEvent('onKeyDown', e);
1638 |     }
1639 |   }
1640 | 
1641 |   function onMouseOver(elem?: DayElement, cellClass = 'flatpickr-day') {
1642 |     if (
1643 |       self.selectedDates.length !== 1 ||
1644 |       (elem &&
1645 |         (!elem.classList.contains(cellClass) || elem.classList.contains('flatpickr-disabled')))
1646 |     )
1647 |       return;
1648 | 
1649 |     const hoverDate = elem
1650 |         ? elem.dateObj.getTime()
1651 |         : (self.days.firstElementChild as DayElement).dateObj.getTime(),
1652 |       initialDate = (self.parseDate(self.selectedDates[0], undefined, true) as Date).getTime(),
1653 |       rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()),
1654 |       rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
1655 | 
1656 |     let containsDisabled = false;
1657 | 
1658 |     let minRange = 0,
1659 |       maxRange = 0;
1660 | 
1661 |     for (let t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
1662 |       if (!isEnabled(new Date(t), true)) {
1663 |         containsDisabled = containsDisabled || (t > rangeStartDate && t < rangeEndDate);
1664 | 
1665 |         if (t < initialDate && (!minRange || t > minRange)) minRange = t;
1666 |         else if (t > initialDate && (!maxRange || t < maxRange)) maxRange = t;
1667 |       }
1668 |     }
1669 | 
1670 |     const hoverableCells = Array.from(
1671 |       self.rContainer!.querySelectorAll(`*:nth-child(-n+${self.config.showMonths}) > .${cellClass}`)
1672 |     ) as DayElement[];
1673 | 
1674 |     hoverableCells.forEach((dayElem) => {
1675 |       const date = dayElem.dateObj;
1676 | 
1677 |       const timestamp = date.getTime();
1678 | 
1679 |       const outOfRange =
1680 |         (minRange > 0 && timestamp < minRange) || (maxRange > 0 && timestamp > maxRange);
1681 | 
1682 |       if (outOfRange) {
1683 |         dayElem.classList.add('notAllowed');
1684 |         ['inRange', 'startRange', 'endRange'].forEach((c) => {
1685 |           dayElem.classList.remove(c);
1686 |         });
1687 |         return;
1688 |       } else if (containsDisabled && !outOfRange) return;
1689 | 
1690 |       ['startRange', 'inRange', 'endRange', 'notAllowed'].forEach((c) => {
1691 |         dayElem.classList.remove(c);
1692 |       });
1693 | 
1694 |       if (elem !== undefined) {
1695 |         elem.classList.add(
1696 |           hoverDate <= self.selectedDates[0].getTime() ? 'startRange' : 'endRange'
1697 |         );
1698 | 
1699 |         if (initialDate < hoverDate && timestamp === initialDate)
1700 |           dayElem.classList.add('startRange');
1701 |         else if (initialDate > hoverDate && timestamp === initialDate)
1702 |           dayElem.classList.add('endRange');
1703 |         if (
1704 |           timestamp >= minRange &&
1705 |           (maxRange === 0 || timestamp <= maxRange) &&
1706 |           isBetween(timestamp, initialDate, hoverDate)
1707 |         )
1708 |           dayElem.classList.add('inRange');
1709 |       }
1710 |     });
1711 |   }
1712 | 
1713 |   function onResize() {
1714 |     if (self.isOpen && !self.config.static && !self.config.inline) positionCalendar();
1715 |   }
1716 | 
1717 |   function open(e?: FocusEvent | MouseEvent, positionElement = self._positionElement) {
1718 |     if (self.isMobile === true) {
1719 |       if (e) {
1720 |         e.preventDefault();
1721 |         const eventTarget = getEventTarget(e);
1722 |         if (eventTarget) {
1723 |           (eventTarget as HTMLInputElement).blur();
1724 |         }
1725 |       }
1726 | 
1727 |       if (self.mobileInput !== undefined) {
1728 |         self.mobileInput.focus();
1729 |         self.mobileInput.click();
1730 |       }
1731 | 
1732 |       triggerEvent('onOpen');
1733 |       return;
1734 |     } else if (self._input.disabled || self.config.inline) {
1735 |       return;
1736 |     }
1737 | 
1738 |     const wasOpen = self.isOpen;
1739 | 
1740 |     self.isOpen = true;
1741 | 
1742 |     if (!wasOpen) {
1743 |       self.calendarContainer.classList.add('open');
1744 |       self._input.classList.add('active');
1745 |       triggerEvent('onOpen');
1746 |       positionCalendar(positionElement);
1747 |     }
1748 | 
1749 |     if (self.config.enableTime === true && self.config.noCalendar === true) {
1750 |       if (
1751 |         self.config.allowInput === false &&
1752 |         (e === undefined ||
1753 |           !(self.timeContainer as HTMLDivElement).contains(e.relatedTarget as Node))
1754 |       ) {
1755 |         win.setTimeout(() => (self.hourElement as HTMLInputElement).select(), 50);
1756 |       }
1757 |     }
1758 |   }
1759 | 
1760 |   function minMaxDateSetter(type: 'min' | 'max') {
1761 |     return (date: DateOption) => {
1762 |       const dateObj = (self.config[`_${type}Date` as '_minDate' | '_maxDate'] = self.parseDate(
1763 |         date,
1764 |         self.config.dateFormat
1765 |       ));
1766 | 
1767 |       const inverseDateObj =
1768 |         self.config[`_${type === 'min' ? 'max' : 'min'}Date` as '_minDate' | '_maxDate'];
1769 | 
1770 |       if (dateObj !== undefined) {
1771 |         self[type === 'min' ? 'minDateHasTime' : 'maxDateHasTime'] =
1772 |           (dateObj as Date).getHours() > 0 ||
1773 |           (dateObj as Date).getMinutes() > 0 ||
1774 |           (dateObj as Date).getSeconds() > 0;
1775 |       }
1776 | 
1777 |       if (self.selectedDates) {
1778 |         self.selectedDates = self.selectedDates.filter((d) => isEnabled(d));
1779 |         if (!self.selectedDates.length && type === 'min') setHoursFromDate(dateObj);
1780 |         updateValue();
1781 |       }
1782 | 
1783 |       if (self.daysContainer) {
1784 |         redraw();
1785 | 
1786 |         if (dateObj !== undefined) self.currentYearElement[type] = dateObj.getFullYear().toString();
1787 |         else self.currentYearElement.removeAttribute(type);
1788 | 
1789 |         self.currentYearElement.disabled =
1790 |           !!inverseDateObj &&
1791 |           dateObj !== undefined &&
1792 |           inverseDateObj.getFullYear() === dateObj.getFullYear();
1793 |       }
1794 |     };
1795 |   }
1796 | 
1797 |   function parseConfig() {
1798 |     const boolOpts: (keyof Options)[] = [
1799 |       'wrap',
1800 |       'weekNumbers',
1801 |       'allowInput',
1802 |       'allowInvalidPreload',
1803 |       'clickOpens',
1804 |       'time_24hr',
1805 |       'enableTime',
1806 |       'noCalendar',
1807 |       'altInput',
1808 |       'shorthandCurrentMonth',
1809 |       'inline',
1810 |       'static',
1811 |       'enableSeconds',
1812 |       'disableMobile',
1813 |     ];
1814 | 
1815 |     const userConfig = {
1816 |       ...JSON.parse(JSON.stringify(element.dataset || {})),
1817 |       ...instanceConfig,
1818 |     } as Options;
1819 | 
1820 |     const formats = {} as Record<'dateFormat' | 'altFormat', string>;
1821 | 
1822 |     self.config.parseDate = userConfig.parseDate;
1823 |     self.config.formatDate = userConfig.formatDate;
1824 | 
1825 |     Object.defineProperty(self.config, 'enable', {
1826 |       get: () => self.config._enable,
1827 |       set: (dates) => {
1828 |         self.config._enable = parseDateRules(dates);
1829 |       },
1830 |     });
1831 | 
1832 |     Object.defineProperty(self.config, 'disable', {
1833 |       get: () => self.config._disable,
1834 |       set: (dates) => {
1835 |         self.config._disable = parseDateRules(dates);
1836 |       },
1837 |     });
1838 | 
1839 |     const timeMode = userConfig.mode === 'time';
1840 | 
1841 |     if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
1842 |       const defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaultOptions.dateFormat;
1843 |       formats.dateFormat =
1844 |         userConfig.noCalendar || timeMode
1845 |           ? 'H:i' + (userConfig.enableSeconds ? ':S' : '')
1846 |           : defaultDateFormat + ' H:i' + (userConfig.enableSeconds ? ':S' : '');
1847 |     }
1848 | 
1849 |     if (userConfig.altInput && (userConfig.enableTime || timeMode) && !userConfig.altFormat) {
1850 |       const defaultAltFormat = flatpickr.defaultConfig.altFormat || defaultOptions.altFormat;
1851 |       formats.altFormat =
1852 |         userConfig.noCalendar || timeMode
1853 |           ? 'h:i' + (userConfig.enableSeconds ? ':S K' : ' K')
1854 |           : defaultAltFormat + ` h:i${userConfig.enableSeconds ? ':S' : ''} K`;
1855 |     }
1856 | 
1857 |     Object.defineProperty(self.config, 'minDate', {
1858 |       get: () => self.config._minDate,
1859 |       set: minMaxDateSetter('min'),
1860 |     });
1861 | 
1862 |     Object.defineProperty(self.config, 'maxDate', {
1863 |       get: () => self.config._maxDate,
1864 |       set: minMaxDateSetter('max'),
1865 |     });
1866 | 
1867 |     const minMaxTimeSetter = (type: string) => (val: any) => {
1868 |       self.config[type === 'min' ? '_minTime' : '_maxTime'] = self.parseDate(val, 'H:i:S');
1869 |     };
1870 | 
1871 |     Object.defineProperty(self.config, 'minTime', {
1872 |       get: () => self.config._minTime,
1873 |       set: minMaxTimeSetter('min'),
1874 |     });
1875 | 
1876 |     Object.defineProperty(self.config, 'maxTime', {
1877 |       get: () => self.config._maxTime,
1878 |       set: minMaxTimeSetter('max'),
1879 |     });
1880 | 
1881 |     if (userConfig.mode === 'time') {
1882 |       self.config.noCalendar = true;
1883 |       self.config.enableTime = true;
1884 |     }
1885 | 
1886 |     Object.assign(self.config, formats, userConfig);
1887 | 
1888 |     for (let i = 0; i < boolOpts.length; i++)
1889 |       // https://github.com/microsoft/TypeScript/issues/31663
1890 |       (self.config as any)[boolOpts[i]] =
1891 |         self.config[boolOpts[i]] === true || self.config[boolOpts[i]] === 'true';
1892 | 
1893 |     HOOKS.filter((hook) => self.config[hook] !== undefined).forEach((hook) => {
1894 |       self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
1895 |     });
1896 | 
1897 |     self.isMobile =
1898 |       !self.config.disableMobile &&
1899 |       !self.config.inline &&
1900 |       self.config.mode === 'single' &&
1901 |       !self.config.disable.length &&
1902 |       !self.config.enable &&
1903 |       !self.config.weekNumbers &&
1904 |       /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
1905 | 
1906 |     for (let i = 0; i < self.config.plugins.length; i++) {
1907 |       const pluginConf = self.config.plugins[i](self) || ({} as Options);
1908 |       for (const key in pluginConf) {
1909 |         if (HOOKS.indexOf(key as HookKey) > -1) {
1910 |           (self.config as any)[key] = arrayify(pluginConf[key as HookKey] as Hook)
1911 |             .map(bindToInstance)
1912 |             .concat(self.config[key as HookKey]);
1913 |         } else if (typeof userConfig[key as keyof Options] === 'undefined')
1914 |           (self.config as any)[key] = pluginConf[key as keyof Options] as any;
1915 |       }
1916 |     }
1917 | 
1918 |     if (!userConfig.altInputClass) {
1919 |       self.config.altInputClass = getInputElem().className + ' ' + self.config.altInputClass;
1920 |     }
1921 | 
1922 |     triggerEvent('onParseConfig');
1923 |   }
1924 | 
1925 |   function getInputElem() {
1926 |     return self.config.wrap
1927 |       ? (element.querySelector('[data-input]') as HTMLInputElement)
1928 |       : (element as HTMLInputElement);
1929 |   }
1930 | 
1931 |   function setupLocale() {
1932 |     if (
1933 |       typeof self.config.locale !== 'object' &&
1934 |       typeof flatpickr.l10ns[self.config.locale as LocaleKey] === 'undefined'
1935 |     )
1936 |       self.config.errorHandler(new Error(`flatpickr: invalid locale ${self.config.locale}`));
1937 | 
1938 |     self.l10n = {
1939 |       ...(flatpickr.l10ns.default as Locale),
1940 |       ...(typeof self.config.locale === 'object'
1941 |         ? self.config.locale
1942 |         : self.config.locale !== 'default'
1943 |           ? flatpickr.l10ns[self.config.locale as LocaleKey]
1944 |           : undefined),
1945 |     };
1946 | 
1947 |     tokenRegex.D = `(${self.l10n.weekdays.shorthand.join('|')})`;
1948 |     tokenRegex.l = `(${self.l10n.weekdays.longhand.join('|')})`;
1949 |     tokenRegex.M = `(${self.l10n.months.shorthand.join('|')})`;
1950 |     tokenRegex.F = `(${self.l10n.months.longhand.join('|')})`;
1951 |     tokenRegex.K = `(${self.l10n.amPM[0]}|${
1952 |       self.l10n.amPM[1]
1953 |     }|${self.l10n.amPM[0].toLowerCase()}|${self.l10n.amPM[1].toLowerCase()})`;
1954 | 
1955 |     const userConfig = {
1956 |       ...instanceConfig,
1957 |       ...JSON.parse(JSON.stringify(element.dataset || {})),
1958 |     } as Options;
1959 | 
1960 |     if (userConfig.time_24hr === undefined && flatpickr.defaultConfig.time_24hr === undefined) {
1961 |       self.config.time_24hr = self.l10n.time_24hr;
1962 |     }
1963 | 
1964 |     self.formatDate = createDateFormatter(self);
1965 |     self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
1966 |   }
1967 | 
1968 |   function positionCalendar(customPositionElement?: HTMLElement): any {
1969 |     if (typeof self.config.position === 'function') {
1970 |       return void self.config.position(self, customPositionElement);
1971 |     }
1972 |     if (self.calendarContainer === undefined) return;
1973 | 
1974 |     triggerEvent('onPreCalendarPosition');
1975 |     const positionElement = customPositionElement || self._positionElement;
1976 | 
1977 |     const calendarHeight = Array.prototype.reduce.call(
1978 |         self.calendarContainer.children,
1979 |         ((acc: number, child: HTMLElement) => acc + child.offsetHeight) as any,
1980 |         0
1981 |       ) as number,
1982 |       calendarWidth = self.calendarContainer.offsetWidth,
1983 |       configPos = self.config.position.split(' '),
1984 |       configPosVertical = configPos[0],
1985 |       configPosHorizontal = configPos.length > 1 ? configPos[1] : null,
1986 |       inputBounds = positionElement.getBoundingClientRect(),
1987 |       distanceFromBottom = win.innerHeight - inputBounds.bottom,
1988 |       showOnTop =
1989 |         configPosVertical === 'above' ||
1990 |         (configPosVertical !== 'below' &&
1991 |           distanceFromBottom < calendarHeight &&
1992 |           inputBounds.top > calendarHeight);
1993 | 
1994 |     const top =
1995 |       win.pageYOffset +
1996 |       inputBounds.top +
1997 |       (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
1998 | 
1999 |     toggleClass(self.calendarContainer, 'arrowTop', !showOnTop);
2000 |     toggleClass(self.calendarContainer, 'arrowBottom', showOnTop);
2001 | 
2002 |     if (self.config.inline) return;
2003 | 
2004 |     let left = win.pageXOffset + inputBounds.left;
2005 |     let isCenter = false;
2006 |     let isRight = false;
2007 | 
2008 |     if (configPosHorizontal === 'center') {
2009 |       left -= (calendarWidth - inputBounds.width) / 2;
2010 |       isCenter = true;
2011 |     } else if (configPosHorizontal === 'right') {
2012 |       left -= calendarWidth - inputBounds.width;
2013 |       isRight = true;
2014 |     }
2015 | 
2016 |     toggleClass(self.calendarContainer, 'arrowLeft', !isCenter && !isRight);
2017 |     toggleClass(self.calendarContainer, 'arrowCenter', isCenter);
2018 |     toggleClass(self.calendarContainer, 'arrowRight', isRight);
2019 | 
2020 |     const right = win.document.body.offsetWidth - (win.pageXOffset + inputBounds.right);
2021 |     const rightMost = left + calendarWidth > win.document.body.offsetWidth;
2022 |     const centerMost = right + calendarWidth > win.document.body.offsetWidth;
2023 | 
2024 |     toggleClass(self.calendarContainer, 'rightMost', rightMost);
2025 | 
2026 |     if (self.config.static) return;
2027 | 
2028 |     self.calendarContainer.style.top = `${top}px`;
2029 | 
2030 |     if (!rightMost) {
2031 |       self.calendarContainer.style.left = `${left}px`;
2032 |       self.calendarContainer.style.right = 'auto';
2033 |     } else if (!centerMost) {
2034 |       self.calendarContainer.style.left = 'auto';
2035 |       self.calendarContainer.style.right = `${right}px`;
2036 |     } else {
2037 |       const doc = getDocumentStyleSheet() as CSSStyleSheet;
2038 |       // some testing environments don't have css support
2039 |       if (doc === undefined) return;
2040 |       const bodyWidth = win.document.body.offsetWidth;
2041 |       const centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
2042 |       const centerBefore = '.flatpickr-calendar.centerMost:before';
2043 |       const centerAfter = '.flatpickr-calendar.centerMost:after';
2044 |       const centerIndex = doc.cssRules.length;
2045 |       const centerStyle = `{left:${inputBounds.left}px;right:auto;}`;
2046 |       toggleClass(self.calendarContainer, 'rightMost', false);
2047 |       toggleClass(self.calendarContainer, 'centerMost', true);
2048 |       doc.insertRule(`${centerBefore},${centerAfter}${centerStyle}`, centerIndex);
2049 |       self.calendarContainer.style.left = `${centerLeft}px`;
2050 |       self.calendarContainer.style.right = 'auto';
2051 |     }
2052 |   }
2053 | 
2054 |   function getDocumentStyleSheet() {
2055 |     let editableSheet: CSSStyleSheet | null = null;
2056 |     for (let i = 0; i < win.document.styleSheets.length; i++) {
2057 |       const sheet = win.document.styleSheets[i] as CSSStyleSheet;
2058 |       if (!sheet.cssRules) continue;
2059 |       try {
2060 |         sheet.cssRules;
2061 |       } catch (err) {
2062 |         continue;
2063 |       }
2064 |       editableSheet = sheet;
2065 |       break;
2066 |     }
2067 |     return editableSheet != null ? editableSheet : createStyleSheet();
2068 |   }
2069 | 
2070 |   function createStyleSheet() {
2071 |     const style = win.document.createElement('style');
2072 |     win.document.head.appendChild(style);
2073 |     return style.sheet as CSSStyleSheet;
2074 |   }
2075 | 
2076 |   function redraw() {
2077 |     if (self.config.noCalendar || self.isMobile) return;
2078 | 
2079 |     buildMonthSwitch();
2080 |     updateNavigationCurrentMonth();
2081 |     buildDays();
2082 |   }
2083 | 
2084 |   function focusAndClose() {
2085 |     self._input.focus();
2086 | 
2087 |     if (
2088 |       win.navigator.userAgent.indexOf('MSIE') !== -1 ||
2089 |       (navigator as any).msMaxTouchPoints !== undefined
2090 |     ) {
2091 |       // hack - bugs in the way IE handles focus keeps the calendar open
2092 |       win.setTimeout(self.close, 0);
2093 |     } else {
2094 |       self.close();
2095 |     }
2096 |   }
2097 | 
2098 |   function selectDate(e: MouseEvent | KeyboardEvent) {
2099 |     e.preventDefault();
2100 |     e.stopPropagation();
2101 | 
2102 |     const isSelectable = (day: Element) =>
2103 |       day.classList &&
2104 |       day.classList.contains('flatpickr-day') &&
2105 |       !day.classList.contains('flatpickr-disabled') &&
2106 |       !day.classList.contains('notAllowed');
2107 | 
2108 |     const t = findParent(getEventTarget(e) as Element, isSelectable);
2109 | 
2110 |     if (t === undefined) return;
2111 | 
2112 |     const target = t as DayElement;
2113 | 
2114 |     const selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
2115 | 
2116 |     const shouldChangeMonth =
2117 |       (selectedDate.getMonth() < self.currentMonth ||
2118 |         selectedDate.getMonth() > self.currentMonth + self.config.showMonths - 1) &&
2119 |       self.config.mode !== 'range';
2120 | 
2121 |     self.selectedDateElem = target;
2122 | 
2123 |     if (self.config.mode === 'single') self.selectedDates = [selectedDate];
2124 |     else if (self.config.mode === 'multiple') {
2125 |       const selectedIndex = isDateSelected(selectedDate);
2126 | 
2127 |       if (selectedIndex) self.selectedDates.splice(parseInt(selectedIndex), 1);
2128 |       else self.selectedDates.push(selectedDate);
2129 |     } else if (self.config.mode === 'range') {
2130 |       if (self.selectedDates.length === 2) {
2131 |         self.clear(false, false);
2132 |       }
2133 |       self.latestSelectedDateObj = selectedDate;
2134 |       self.selectedDates.push(selectedDate);
2135 | 
2136 |       // unless selecting same date twice, sort ascendingly
2137 |       if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
2138 |         self.selectedDates.sort((a, b) => a.getTime() - b.getTime());
2139 |     }
2140 | 
2141 |     setHoursFromInputs();
2142 | 
2143 |     if (shouldChangeMonth) {
2144 |       const isNewYear = self.currentYear !== selectedDate.getFullYear();
2145 |       self.currentYear = selectedDate.getFullYear();
2146 |       self.currentMonth = selectedDate.getMonth();
2147 | 
2148 |       if (isNewYear) {
2149 |         triggerEvent('onYearChange');
2150 |         buildMonthSwitch();
2151 |       }
2152 | 
2153 |       triggerEvent('onMonthChange');
2154 |     }
2155 | 
2156 |     updateNavigationCurrentMonth();
2157 |     buildDays();
2158 | 
2159 |     updateValue();
2160 | 
2161 |     // maintain focus
2162 |     if (!shouldChangeMonth && self.config.mode !== 'range' && self.config.showMonths === 1)
2163 |       focusOnDayElem(target);
2164 |     else if (self.selectedDateElem !== undefined && self.hourElement === undefined) {
2165 |       self.selectedDateElem && self.selectedDateElem.focus();
2166 |     }
2167 | 
2168 |     if (self.hourElement !== undefined) self.hourElement !== undefined && self.hourElement.focus();
2169 | 
2170 |     if (self.config.closeOnSelect) {
2171 |       const single = self.config.mode === 'single' && !self.config.enableTime;
2172 |       const range =
2173 |         self.config.mode === 'range' && self.selectedDates.length === 2 && !self.config.enableTime;
2174 | 
2175 |       if (single || range) {
2176 |         focusAndClose();
2177 |       }
2178 |     }
2179 |     triggerChange();
2180 |   }
2181 | 
2182 |   const CALLBACKS: { [k in keyof Options]: Function[] } = {
2183 |     locale: [setupLocale, updateWeekdays],
2184 |     showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
2185 |     minDate: [jumpToDate],
2186 |     maxDate: [jumpToDate],
2187 |     positionElement: [updatePositionElement],
2188 |     clickOpens: [
2189 |       () => {
2190 |         if (self.config.clickOpens === true) {
2191 |           bind(self._input, 'focus', self.open);
2192 |           bind(self._input, 'click', self.open);
2193 |         } else {
2194 |           self._input.removeEventListener('focus', self.open);
2195 |           self._input.removeEventListener('click', self.open);
2196 |         }
2197 |       },
2198 |     ],
2199 |   };
2200 | 
2201 |   function set<K extends keyof Options>(option: K | { [k in K]?: Options[k] }, value?: any) {
2202 |     if (option !== null && typeof option === 'object') {
2203 |       Object.assign(self.config, option);
2204 |       for (const key in option) {
2205 |         if (CALLBACKS[key] !== undefined) (CALLBACKS[key] as Function[]).forEach((x) => x());
2206 |       }
2207 |     } else {
2208 |       self.config[option as K] = value;
2209 | 
2210 |       if (CALLBACKS[option as K] !== undefined)
2211 |         (CALLBACKS[option as K] as Function[]).forEach((x) => x());
2212 |       else if (HOOKS.indexOf(option as HookKey) > -1)
2213 |         (self.config as any)[option] = arrayify(value);
2214 |     }
2215 | 
2216 |     self.redraw();
2217 |     updateValue(true);
2218 |   }
2219 | 
2220 |   function setSelectedDate(inputDate: DateOption | DateOption[], format?: string) {
2221 |     let dates: (Date | undefined)[] = [];
2222 |     if (Array.isArray(inputDate)) dates = inputDate.map((d) => self.parseDate(d, format));
2223 |     else if ((inputDate as Date).getDate || typeof inputDate === 'number')
2224 |       dates = [self.parseDate(inputDate, format)];
2225 |     else if (typeof inputDate === 'string') {
2226 |       switch (self.config.mode) {
2227 |         case 'single':
2228 |         case 'time':
2229 |           dates = [self.parseDate(inputDate, format)];
2230 |           break;
2231 | 
2232 |         case 'multiple':
2233 |           dates = inputDate
2234 |             .split(self.config.conjunction)
2235 |             .map((date) => self.parseDate(date, format));
2236 |           break;
2237 | 
2238 |         case 'range':
2239 |           dates = inputDate
2240 |             .split(self.l10n.rangeSeparator)
2241 |             .map((date) => self.parseDate(date, format));
2242 | 
2243 |           break;
2244 | 
2245 |         default:
2246 |           break;
2247 |       }
2248 |     } else
2249 |       self.config.errorHandler(new Error(`Invalid date supplied: ${JSON.stringify(inputDate)}`));
2250 | 
2251 |     self.selectedDates = (
2252 |       self.config.allowInvalidPreload
2253 |         ? dates
2254 |         : dates.filter((d) => (d as Date).getDate && isEnabled(d, false))
2255 |     ) as Date[];
2256 | 
2257 |     if (self.config.mode === 'range') self.selectedDates.sort((a, b) => a.getTime() - b.getTime());
2258 |   }
2259 | 
2260 |   function setDate(
2261 |     date: DateOption | DateOption[],
2262 |     triggerChange = false,
2263 |     format = self.config.dateFormat
2264 |   ) {
2265 |     if ((date !== 0 && !date) || (Array.isArray(date) && date.length === 0))
2266 |       return self.clear(triggerChange);
2267 | 
2268 |     setSelectedDate(date, format);
2269 | 
2270 |     self.latestSelectedDateObj = self.selectedDates[self.selectedDates.length - 1];
2271 | 
2272 |     self.redraw();
2273 |     jumpToDate(undefined, triggerChange);
2274 | 
2275 |     setHoursFromDate();
2276 |     if (self.selectedDates.length === 0) {
2277 |       self.clear(false);
2278 |     }
2279 |     updateValue(triggerChange);
2280 | 
2281 |     if (triggerChange) triggerEvent('onChange');
2282 |   }
2283 | 
2284 |   function parseDateRules(arr: DateLimit[]): DateLimit<Date>[] {
2285 |     return arr
2286 |       .slice()
2287 |       .map((rule) => {
2288 |         if (typeof rule === 'string' || typeof rule === 'number' || (rule as Date).getDate) {
2289 |           return self.parseDate(rule as Date | string | number, undefined, true) as Date;
2290 |         } else if (
2291 |           rule &&
2292 |           typeof rule === 'object' &&
2293 |           (rule as DateRangeLimit).from &&
2294 |           (rule as DateRangeLimit).to
2295 |         )
2296 |           return {
2297 |             from: self.parseDate((rule as DateRangeLimit).from, undefined) as Date,
2298 |             to: self.parseDate((rule as DateRangeLimit).to, undefined) as Date,
2299 |           };
2300 | 
2301 |         return rule;
2302 |       })
2303 |       .filter((x) => x) as DateLimit<Date>[]; // remove falsy values
2304 |   }
2305 | 
2306 |   function setupDates() {
2307 |     self.selectedDates = [];
2308 |     self.now = self.parseDate(self.config.now) || new Date();
2309 | 
2310 |     // Workaround IE11 setting placeholder as the input's value
2311 |     const preloadedDate =
2312 |       self.config.defaultDate ||
2313 |       ((self.input.nodeName === 'INPUT' || self.input.nodeName === 'TEXTAREA') &&
2314 |       self.input.placeholder &&
2315 |       self.input.value === self.input.placeholder
2316 |         ? null
2317 |         : self.input.value);
2318 | 
2319 |     if (preloadedDate) setSelectedDate(preloadedDate, self.config.dateFormat);
2320 | 
2321 |     self._initialDate =
2322 |       self.selectedDates.length > 0
2323 |         ? self.selectedDates[0]
2324 |         : self.config.minDate && self.config.minDate.getTime() > self.now.getTime()
2325 |           ? self.config.minDate
2326 |           : self.config.maxDate && self.config.maxDate.getTime() < self.now.getTime()
2327 |             ? self.config.maxDate
2328 |             : self.now;
2329 | 
2330 |     self.currentYear = self._initialDate.getFullYear();
2331 |     self.currentMonth = self._initialDate.getMonth();
2332 | 
2333 |     if (self.selectedDates.length > 0) self.latestSelectedDateObj = self.selectedDates[0];
2334 | 
2335 |     if (self.config.minTime !== undefined)
2336 |       self.config.minTime = self.parseDate(self.config.minTime, 'H:i');
2337 | 
2338 |     if (self.config.maxTime !== undefined)
2339 |       self.config.maxTime = self.parseDate(self.config.maxTime, 'H:i');
2340 | 
2341 |     self.minDateHasTime =
2342 |       !!self.config.minDate &&
2343 |       (self.config.minDate.getHours() > 0 ||
2344 |         self.config.minDate.getMinutes() > 0 ||
2345 |         self.config.minDate.getSeconds() > 0);
2346 | 
2347 |     self.maxDateHasTime =
2348 |       !!self.config.maxDate &&
2349 |       (self.config.maxDate.getHours() > 0 ||
2350 |         self.config.maxDate.getMinutes() > 0 ||
2351 |         self.config.maxDate.getSeconds() > 0);
2352 |   }
2353 | 
2354 |   function setupInputs() {
2355 |     self.input = getInputElem();
2356 | 
2357 |     /* istanbul ignore next */
2358 |     if (!self.input) {
2359 |       self.config.errorHandler(new Error('Invalid input element specified'));
2360 |       return;
2361 |     }
2362 | 
2363 |     // hack: store previous type to restore it after destroy()
2364 |     (self.input as any)._type = (self.input as any).type;
2365 |     (self.input as any).type = 'text';
2366 | 
2367 |     self.input.classList.add('flatpickr-input');
2368 |     self._input = self.input;
2369 | 
2370 |     if (self.config.altInput) {
2371 |       // replicate self.element
2372 |       self.altInput = createElement<HTMLInputElement>(
2373 |         win.document,
2374 |         self.input.nodeName as 'input',
2375 |         self.config.altInputClass
2376 |       );
2377 |       self._input = self.altInput;
2378 |       self.altInput.placeholder = self.input.placeholder;
2379 |       self.altInput.disabled = self.input.disabled;
2380 |       self.altInput.required = self.input.required;
2381 |       self.altInput.tabIndex = self.input.tabIndex;
2382 |       self.altInput.type = 'text';
2383 |       self.input.setAttribute('type', 'hidden');
2384 | 
2385 |       if (!self.config.static && self.input.parentNode)
2386 |         self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
2387 |     }
2388 | 
2389 |     if (!self.config.allowInput) self._input.setAttribute('readonly', 'readonly');
2390 | 
2391 |     updatePositionElement();
2392 |   }
2393 | 
2394 |   function updatePositionElement() {
2395 |     self._positionElement = self.config.positionElement || self._input;
2396 |   }
2397 | 
2398 |   function setupMobile() {
2399 |     const inputType = self.config.enableTime
2400 |       ? self.config.noCalendar
2401 |         ? 'time'
2402 |         : 'datetime-local'
2403 |       : 'date';
2404 | 
2405 |     self.mobileInput = createElement<HTMLInputElement>(
2406 |       win.document,
2407 |       'input',
2408 |       self.input.className + ' flatpickr-mobile'
2409 |     );
2410 |     self.mobileInput.tabIndex = 1;
2411 |     self.mobileInput.type = inputType;
2412 |     self.mobileInput.disabled = self.input.disabled;
2413 |     self.mobileInput.required = self.input.required;
2414 |     self.mobileInput.placeholder = self.input.placeholder;
2415 | 
2416 |     self.mobileFormatStr =
2417 |       inputType === 'datetime-local' ? 'Y-m-d\\TH:i:S' : inputType === 'date' ? 'Y-m-d' : 'H:i:S';
2418 | 
2419 |     if (self.selectedDates.length > 0) {
2420 |       self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(
2421 |         self.selectedDates[0],
2422 |         self.mobileFormatStr
2423 |       );
2424 |     }
2425 | 
2426 |     if (self.config.minDate) self.mobileInput.min = self.formatDate(self.config.minDate, 'Y-m-d');
2427 | 
2428 |     if (self.config.maxDate) self.mobileInput.max = self.formatDate(self.config.maxDate, 'Y-m-d');
2429 | 
2430 |     if (self.input.getAttribute('step'))
2431 |       self.mobileInput.step = String(self.input.getAttribute('step'));
2432 | 
2433 |     self.input.type = 'hidden';
2434 |     if (self.altInput !== undefined) self.altInput.type = 'hidden';
2435 | 
2436 |     try {
2437 |       if (self.input.parentNode)
2438 |         self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
2439 |     } catch {}
2440 | 
2441 |     bind(self.mobileInput, 'change', (e: KeyboardEvent) => {
2442 |       self.setDate((getEventTarget(e) as HTMLInputElement).value, false, self.mobileFormatStr);
2443 |       triggerEvent('onChange');
2444 |       triggerEvent('onClose');
2445 |     });
2446 |   }
2447 | 
2448 |   function toggle(e?: FocusEvent | MouseEvent) {
2449 |     if (self.isOpen === true) return self.close();
2450 |     self.open(e);
2451 |   }
2452 | 
2453 |   function triggerEvent(event: HookKey, data?: any) {
2454 |     // If the instance has been destroyed already, all hooks have been removed
2455 |     if (self.config === undefined) return;
2456 | 
2457 |     const hooks = self.config[event];
2458 | 
2459 |     if (hooks !== undefined && hooks.length > 0) {
2460 |       for (let i = 0; hooks[i] && i < hooks.length; i++)
2461 |         hooks[i](self.selectedDates, self.input.value, self, data);
2462 |     }
2463 | 
2464 |     if (event === 'onChange') {
2465 |       self.input.dispatchEvent(createEvent('change'));
2466 | 
2467 |       // many front-end frameworks bind to the input event
2468 |       self.input.dispatchEvent(createEvent('input'));
2469 |     }
2470 |   }
2471 | 
2472 |   function createEvent(name: string): Event {
2473 |     const e = win.document.createEvent('Event');
2474 |     e.initEvent(name, true, true);
2475 |     return e;
2476 |   }
2477 | 
2478 |   function isDateSelected(date: Date) {
2479 |     for (let i = 0; i < self.selectedDates.length; i++) {
2480 |       const selectedDate = self.selectedDates[i];
2481 |       if ((selectedDate as Date).getDate && compareDates(selectedDate, date) === 0) return '' + i;
2482 |     }
2483 | 
2484 |     return false;
2485 |   }
2486 | 
2487 |   function isDateInRange(date: Date) {
2488 |     if (self.config.mode !== 'range' || self.selectedDates.length < 2) return false;
2489 |     return (
2490 |       compareDates(date, self.selectedDates[0]) >= 0 &&
2491 |       compareDates(date, self.selectedDates[1]) <= 0
2492 |     );
2493 |   }
2494 | 
2495 |   function updateNavigationCurrentMonth() {
2496 |     if (self.config.noCalendar || self.isMobile || !self.monthNav) return;
2497 | 
2498 |     self.yearElements.forEach((yearElement, i) => {
2499 |       const d = new Date(self.currentYear, self.currentMonth, 1);
2500 |       d.setMonth(self.currentMonth + i);
2501 | 
2502 |       if (self.config.showMonths > 1 || self.config.monthSelectorType === 'static') {
2503 |         self.monthElements[i].textContent =
2504 |           monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + ' ';
2505 |       } else {
2506 |         self.monthsDropdownContainer.value = d.getMonth().toString();
2507 |       }
2508 | 
2509 |       yearElement.value = d.getFullYear().toString();
2510 |     });
2511 | 
2512 |     self._hidePrevMonthArrow =
2513 |       self.config.minDate !== undefined &&
2514 |       (self.currentYear === self.config.minDate.getFullYear()
2515 |         ? self.currentMonth <= self.config.minDate.getMonth()
2516 |         : self.currentYear < self.config.minDate.getFullYear());
2517 | 
2518 |     self._hideNextMonthArrow =
2519 |       self.config.maxDate !== undefined &&
2520 |       (self.currentYear === self.config.maxDate.getFullYear()
2521 |         ? self.currentMonth + 1 > self.config.maxDate.getMonth()
2522 |         : self.currentYear > self.config.maxDate.getFullYear());
2523 |   }
2524 | 
2525 |   function getDateStr(specificFormat?: string) {
2526 |     const format =
2527 |       specificFormat || (self.config.altInput ? self.config.altFormat : self.config.dateFormat);
2528 | 
2529 |     return self.selectedDates
2530 |       .map((dObj) => self.formatDate(dObj, format))
2531 |       .filter(
2532 |         (d, i, arr) =>
2533 |           self.config.mode !== 'range' || self.config.enableTime || arr.indexOf(d) === i
2534 |       )
2535 |       .join(self.config.mode !== 'range' ? self.config.conjunction : self.l10n.rangeSeparator);
2536 |   }
2537 | 
2538 |   /**
2539 |    * Updates the values of inputs associated with the calendar
2540 |    */
2541 |   function updateValue(triggerChange = true) {
2542 |     if (self.mobileInput !== undefined && self.mobileFormatStr) {
2543 |       self.mobileInput.value =
2544 |         self.latestSelectedDateObj !== undefined
2545 |           ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
2546 |           : '';
2547 |     }
2548 | 
2549 |     self.input.value = getDateStr(self.config.dateFormat);
2550 | 
2551 |     if (self.altInput !== undefined) {
2552 |       self.altInput.value = getDateStr(self.config.altFormat);
2553 |     }
2554 | 
2555 |     if (triggerChange !== false) triggerEvent('onValueUpdate');
2556 |   }
2557 | 
2558 |   function onMonthNavClick(e: MouseEvent) {
2559 |     const eventTarget = getEventTarget(e);
2560 |     const isPrevMonth = self.prevMonthNav.contains(eventTarget as Node);
2561 |     const isNextMonth = self.nextMonthNav.contains(eventTarget as Node);
2562 | 
2563 |     if (isPrevMonth || isNextMonth) {
2564 |       changeMonth(isPrevMonth ? -1 : 1);
2565 |     } else if (self.yearElements.indexOf(eventTarget as HTMLInputElement) >= 0) {
2566 |       (eventTarget as HTMLInputElement).select();
2567 |     } else if ((eventTarget as Element).classList.contains('arrowUp')) {
2568 |       self.changeYear(self.currentYear + 1);
2569 |     } else if ((eventTarget as Element).classList.contains('arrowDown')) {
2570 |       self.changeYear(self.currentYear - 1);
2571 |     }
2572 |   }
2573 | 
2574 |   function timeWrapper(e: MouseEvent | KeyboardEvent | FocusEvent | IncrementEvent): void {
2575 |     e.preventDefault();
2576 | 
2577 |     const isKeyDown = e.type === 'keydown',
2578 |       eventTarget = getEventTarget(e),
2579 |       input = eventTarget as HTMLInputElement;
2580 | 
2581 |     if (self.amPM !== undefined && eventTarget === self.amPM) {
2582 |       self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
2583 |     }
2584 | 
2585 |     const min = parseFloat(input.getAttribute('min') as string),
2586 |       max = parseFloat(input.getAttribute('max') as string),
2587 |       step = parseFloat(input.getAttribute('step') as string),
2588 |       curValue = parseInt(input.value, 10),
2589 |       delta =
2590 |         (e as IncrementEvent).delta ||
2591 |         (isKeyDown ? ((e as KeyboardEvent).which === 38 ? 1 : -1) : 0);
2592 | 
2593 |     let newValue = curValue + step * delta;
2594 | 
2595 |     if (typeof input.value !== 'undefined' && input.value.length === 2) {
2596 |       const isHourElem = input === self.hourElement,
2597 |         isMinuteElem = input === self.minuteElement;
2598 | 
2599 |       if (newValue < min) {
2600 |         newValue = max + newValue + int(!isHourElem) + (int(isHourElem) && int(!self.amPM));
2601 | 
2602 |         if (isMinuteElem) incrementNumInput(undefined, -1, self.hourElement);
2603 |       } else if (newValue > max) {
2604 |         newValue = input === self.hourElement ? newValue - max - int(!self.amPM) : min;
2605 | 
2606 |         if (isMinuteElem) incrementNumInput(undefined, 1, self.hourElement);
2607 |       }
2608 | 
2609 |       if (
2610 |         self.amPM &&
2611 |         isHourElem &&
2612 |         (step === 1 ? newValue + curValue === 23 : Math.abs(newValue - curValue) > step)
2613 |       ) {
2614 |         self.amPM.textContent = self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
2615 |       }
2616 | 
2617 |       input.value = pad(newValue);
2618 |     }
2619 |   }
2620 | 
2621 |   init();
2622 |   return self;
2623 | }
2624 | 
2625 | /* istanbul ignore next */
2626 | function _flatpickr(nodeList: ArrayLike<Node>, config?: Options): Instance | Instance[] {
2627 |   // static list
2628 |   const nodes = Array.prototype.slice
2629 |     .call(nodeList)
2630 |     .filter((x: any) => x.onClickEvent) as HTMLElement[];
2631 | 
2632 |   const instances: Instance[] = [];
2633 |   for (let i = 0; i < nodes.length; i++) {
2634 |     const node = nodes[i] as FPHTMLElement;
2635 |     try {
2636 |       if (node.getAttribute('data-fp-omit') !== null) continue;
2637 | 
2638 |       if (node._flatpickr !== undefined) {
2639 |         node._flatpickr.destroy();
2640 |         node._flatpickr = undefined;
2641 |       }
2642 | 
2643 |       node._flatpickr = FlatpickrInstance(node, config || {});
2644 |       instances.push(node._flatpickr);
2645 |     } catch (e) {
2646 |       console.error(e);
2647 |     }
2648 |   }
2649 | 
2650 |   return instances.length === 1 ? instances[0] : instances;
2651 | }
2652 | 
2653 | /* istanbul ignore next */
2654 | if (
2655 |   typeof HTMLElement !== 'undefined' &&
2656 |   typeof HTMLCollection !== 'undefined' &&
2657 |   typeof NodeList !== 'undefined'
2658 | ) {
2659 |   // browser env
2660 |   (HTMLCollection.prototype as FPHTMLCollection).flatpickr = (
2661 |     NodeList.prototype as FPNodeList
2662 |   ).flatpickr = function (config?: Options) {
2663 |     return _flatpickr(this, config);
2664 |   };
2665 | 
2666 |   (HTMLElement.prototype as FPHTMLElement).flatpickr = function (config?: Options) {
2667 |     return _flatpickr([this], config) as Instance;
2668 |   };
2669 | }
2670 | 
2671 | /* istanbul ignore next */
2672 | const flatpickr = function (selector: Node, config?: Options) {
2673 |   return _flatpickr([selector], config);
2674 | } as FlatpickrFn;
2675 | 
2676 | /* istanbul ignore next */
2677 | flatpickr.defaultConfig = {};
2678 | 
2679 | flatpickr.l10ns = {
2680 |   en: { ...English },
2681 |   default: { ...English },
2682 | };
2683 | 
2684 | flatpickr.localize = (l10n: CustomLocale) => {
2685 |   flatpickr.l10ns.default = {
2686 |     ...flatpickr.l10ns.default,
2687 |     ...l10n,
2688 |   };
2689 | };
2690 | flatpickr.setDefaults = (config: Options) => {
2691 |   flatpickr.defaultConfig = {
2692 |     ...flatpickr.defaultConfig,
2693 |     ...(config as ParsedOptions),
2694 |   };
2695 | };
2696 | 
2697 | flatpickr.parseDate = createDateParser({});
2698 | flatpickr.formatDate = createDateFormatter({});
2699 | flatpickr.compareDates = compareDates;
2700 | 
2701 | /* istanbul ignore next */
2702 | if (typeof jQuery !== 'undefined' && typeof jQuery.fn !== 'undefined') {
2703 |   (jQuery.fn as any).flatpickr = function (config: Options) {
2704 |     return _flatpickr(this, config);
2705 |   };
2706 | }
2707 | 
2708 | (Date.prototype as FPDate).fp_incr = function (days: number | string) {
2709 |   return new Date(
2710 |     this.getFullYear(),
2711 |     this.getMonth(),
2712 |     this.getDate() + (typeof days === 'string' ? parseInt(days, 10) : days)
2713 |   );
2714 | };
2715 | 
2716 | if (typeof window !== 'undefined') {
2717 |   (window as any).flatpickr = flatpickr;
2718 | }
2719 | 
2720 | export default flatpickr;
2721 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ar-dz.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Algerian Arabic locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const AlgerianArabic: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
16 |     longhand: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
21 |     longhand: [
22 |       'جانفي',
23 |       'فيفري',
24 |       'مارس',
25 |       'أفريل',
26 |       'ماي',
27 |       'جوان',
28 |       'جويليه',
29 |       'أوت',
30 |       'سبتمبر',
31 |       'أكتوبر',
32 |       'نوفمبر',
33 |       'ديسمبر',
34 |     ],
35 |   },
36 |   firstDayOfWeek: 0,
37 |   rangeSeparator: ' إلى ',
38 |   weekAbbreviation: 'Wk',
39 |   scrollTitle: 'قم بالتمرير للزيادة',
40 |   toggleTitle: 'اضغط للتبديل',
41 |   yearAriaLabel: 'سنة',
42 |   monthAriaLabel: 'شهر',
43 |   hourAriaLabel: 'ساعة',
44 |   minuteAriaLabel: 'دقيقة',
45 |   time_24hr: true,
46 | };
47 | 
48 | fp.l10ns.ar = AlgerianArabic;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ar.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Arabic locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Arabic: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
16 |     longhand: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
21 |     longhand: [
22 |       'يناير',
23 |       'فبراير',
24 |       'مارس',
25 |       'أبريل',
26 |       'مايو',
27 |       'يونيو',
28 |       'يوليو',
29 |       'أغسطس',
30 |       'سبتمبر',
31 |       'أكتوبر',
32 |       'نوفمبر',
33 |       'ديسمبر',
34 |     ],
35 |   },
36 |   firstDayOfWeek: 6,
37 |   rangeSeparator: ' إلى ',
38 |   weekAbbreviation: 'Wk',
39 |   scrollTitle: 'قم بالتمرير للزيادة',
40 |   toggleTitle: 'اضغط للتبديل',
41 |   amPM: ['ص', 'م'],
42 |   yearAriaLabel: 'سنة',
43 |   monthAriaLabel: 'شهر',
44 |   hourAriaLabel: 'ساعة',
45 |   minuteAriaLabel: 'دقيقة',
46 |   time_24hr: false,
47 | };
48 | 
49 | fp.l10ns.ar = Arabic;
50 | 
51 | export default fp.l10ns;
52 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/at.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Austria locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Austria: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
16 |     longhand: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jän', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
21 |     longhand: [
22 |       'Jänner',
23 |       'Februar',
24 |       'März',
25 |       'April',
26 |       'Mai',
27 |       'Juni',
28 |       'Juli',
29 |       'August',
30 |       'September',
31 |       'Oktober',
32 |       'November',
33 |       'Dezember',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   weekAbbreviation: 'KW',
39 |   rangeSeparator: ' bis ',
40 |   scrollTitle: 'Zum Ändern scrollen',
41 |   toggleTitle: 'Zum Umschalten klicken',
42 |   time_24hr: true,
43 | };
44 | 
45 | fp.l10ns.at = Austria;
46 | 
47 | export default fp.l10ns;
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/az.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Azerbaijan locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Azerbaijan: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['B.', 'B.e.', 'Ç.a.', 'Ç.', 'C.a.', 'C.', 'Ş.'],
16 |     longhand: [
17 |       'Bazar',
18 |       'Bazar ertəsi',
19 |       'Çərşənbə axşamı',
20 |       'Çərşənbə',
21 |       'Cümə axşamı',
22 |       'Cümə',
23 |       'Şənbə',
24 |     ],
25 |   },
26 | 
27 |   months: {
28 |     shorthand: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'İyn', 'İyl', 'Avq', 'Sen', 'Okt', 'Noy', 'Dek'],
29 |     longhand: [
30 |       'Yanvar',
31 |       'Fevral',
32 |       'Mart',
33 |       'Aprel',
34 |       'May',
35 |       'İyun',
36 |       'İyul',
37 |       'Avqust',
38 |       'Sentyabr',
39 |       'Oktyabr',
40 |       'Noyabr',
41 |       'Dekabr',
42 |     ],
43 |   },
44 |   firstDayOfWeek: 1,
45 |   ordinal: () => {
46 |     return '.';
47 |   },
48 |   rangeSeparator: ' - ',
49 |   weekAbbreviation: 'Hf',
50 |   scrollTitle: 'Artırmaq üçün sürüşdürün',
51 |   toggleTitle: 'Aç / Bağla',
52 |   amPM: ['GƏ', 'GS'],
53 |   time_24hr: true,
54 | };
55 | 
56 | fp.l10ns.az = Azerbaijan;
57 | 
58 | export default fp.l10ns;
59 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/be.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Belarusian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Belarusian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Нд', 'Пн', 'Аў', 'Ср', 'Чц', 'Пт', 'Сб'],
16 |     longhand: ['Нядзеля', 'Панядзелак', 'Аўторак', 'Серада', 'Чацвер', 'Пятніца', 'Субота'],
17 |   },
18 |   months: {
19 |     shorthand: ['Сту', 'Лют', 'Сак', 'Кра', 'Тра', 'Чэр', 'Ліп', 'Жні', 'Вер', 'Кас', 'Ліс', 'Сне'],
20 |     longhand: [
21 |       'Студзень',
22 |       'Люты',
23 |       'Сакавік',
24 |       'Красавік',
25 |       'Травень',
26 |       'Чэрвень',
27 |       'Ліпень',
28 |       'Жнівень',
29 |       'Верасень',
30 |       'Кастрычнік',
31 |       'Лістапад',
32 |       'Снежань',
33 |     ],
34 |   },
35 |   firstDayOfWeek: 1,
36 |   ordinal: function () {
37 |     return '';
38 |   },
39 |   rangeSeparator: ' — ',
40 |   weekAbbreviation: 'Тыд.',
41 |   scrollTitle: 'Пракруціце для павелічэння',
42 |   toggleTitle: 'Націсніце для пераключэння',
43 |   amPM: ['ДП', 'ПП'],
44 |   yearAriaLabel: 'Год',
45 |   time_24hr: true,
46 | };
47 | 
48 | fp.l10ns.be = Belarusian;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/bg.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Bulgarian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Bulgarian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
16 |     longhand: ['Неделя', 'Понеделник', 'Вторник', 'Сряда', 'Четвъртък', 'Петък', 'Събота'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'Яну',
22 |       'Фев',
23 |       'Март',
24 |       'Апр',
25 |       'Май',
26 |       'Юни',
27 |       'Юли',
28 |       'Авг',
29 |       'Сеп',
30 |       'Окт',
31 |       'Ное',
32 |       'Дек',
33 |     ],
34 |     longhand: [
35 |       'Януари',
36 |       'Февруари',
37 |       'Март',
38 |       'Април',
39 |       'Май',
40 |       'Юни',
41 |       'Юли',
42 |       'Август',
43 |       'Септември',
44 |       'Октомври',
45 |       'Ноември',
46 |       'Декември',
47 |     ],
48 |   },
49 |   time_24hr: true,
50 |   firstDayOfWeek: 1,
51 | };
52 | 
53 | fp.l10ns.bg = Bulgarian;
54 | export default fp.l10ns;
55 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/bn.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Bangla locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Bangla: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['রবি', 'সোম', 'মঙ্গল', 'বুধ', 'বৃহস্পতি', 'শুক্র', 'শনি'],
16 |     longhand: ['রবিবার', 'সোমবার', 'মঙ্গলবার', 'বুধবার', 'বৃহস্পতিবার', 'শুক্রবার', 'শনিবার'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'জানু',
22 |       'ফেব্রু',
23 |       'মার্চ',
24 |       'এপ্রিল',
25 |       'মে',
26 |       'জুন',
27 |       'জুলাই',
28 |       'আগ',
29 |       'সেপ্টে',
30 |       'অক্টো',
31 |       'নভে',
32 |       'ডিসে',
33 |     ],
34 |     longhand: [
35 |       'জানুয়ারী',
36 |       'ফেব্রুয়ারী',
37 |       'মার্চ',
38 |       'এপ্রিল',
39 |       'মে',
40 |       'জুন',
41 |       'জুলাই',
42 |       'আগস্ট',
43 |       'সেপ্টেম্বর',
44 |       'অক্টোবর',
45 |       'নভেম্বর',
46 |       'ডিসেম্বর',
47 |     ],
48 |   },
49 | };
50 | 
51 | fp.l10ns.bn = Bangla;
52 | export default fp.l10ns;
53 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/bs.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Bosnian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Bosnian: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['Ned', 'Pon', 'Uto', 'Sri', 'Čet', 'Pet', 'Sub'],
18 |     longhand: ['Nedjelja', 'Ponedjeljak', 'Utorak', 'Srijeda', 'Četvrtak', 'Petak', 'Subota'],
19 |   },
20 | 
21 |   months: {
22 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'],
23 |     longhand: [
24 |       'Januar',
25 |       'Februar',
26 |       'Mart',
27 |       'April',
28 |       'Maj',
29 |       'Juni',
30 |       'Juli',
31 |       'Avgust',
32 |       'Septembar',
33 |       'Oktobar',
34 |       'Novembar',
35 |       'Decembar',
36 |     ],
37 |   },
38 |   time_24hr: true,
39 | };
40 | 
41 | fp.l10ns.bs = Bosnian;
42 | 
43 | export default fp.l10ns;
44 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/cat.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Catalan locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Catalan: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Dg', 'Dl', 'Dt', 'Dc', 'Dj', 'Dv', 'Ds'],
16 |     longhand: ['Diumenge', 'Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres', 'Dissabte'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'Gen',
22 |       'Febr',
23 |       'Març',
24 |       'Abr',
25 |       'Maig',
26 |       'Juny',
27 |       'Jul',
28 |       'Ag',
29 |       'Set',
30 |       'Oct',
31 |       'Nov',
32 |       'Des',
33 |     ],
34 |     longhand: [
35 |       'Gener',
36 |       'Febrer',
37 |       'Març',
38 |       'Abril',
39 |       'Maig',
40 |       'Juny',
41 |       'Juliol',
42 |       'Agost',
43 |       'Setembre',
44 |       'Octubre',
45 |       'Novembre',
46 |       'Desembre',
47 |     ],
48 |   },
49 | 
50 |   ordinal: (nth) => {
51 |     const s = nth % 100;
52 |     if (s > 3 && s < 21) return 'è';
53 |     switch (s % 10) {
54 |       case 1:
55 |         return 'r';
56 |       case 2:
57 |         return 'n';
58 |       case 3:
59 |         return 'r';
60 |       case 4:
61 |         return 't';
62 |       default:
63 |         return 'è';
64 |     }
65 |   },
66 | 
67 |   firstDayOfWeek: 1,
68 |   rangeSeparator: ' a ',
69 |   time_24hr: true,
70 | };
71 | 
72 | fp.l10ns.cat = fp.l10ns.ca = Catalan;
73 | 
74 | export default fp.l10ns;
75 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ckb.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Kurdish (Sorani) locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Kurdish: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['یەکشەممە', 'دووشەممە', 'سێشەممە', 'چوارشەممە', 'پێنجشەممە', 'هەینی', 'شەممە'],
16 |     longhand: ['یەکشەممە', 'دووشەممە', 'سێشەممە', 'چوارشەممە', 'پێنجشەممە', 'هەینی', 'شەممە'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'ڕێبەندان',
22 |       'ڕەشەمە',
23 |       'نەورۆز',
24 |       'گوڵان',
25 |       'جۆزەردان',
26 |       'پووشپەڕ',
27 |       'گەلاوێژ',
28 |       'خەرمانان',
29 |       'ڕەزبەر',
30 |       'گەڵاڕێزان',
31 |       'سەرماوەز',
32 |       'بەفرانبار',
33 |     ],
34 |     longhand: [
35 |       'ڕێبەندان',
36 |       'ڕەشەمە',
37 |       'نەورۆز',
38 |       'گوڵان',
39 |       'جۆزەردان',
40 |       'پووشپەڕ',
41 |       'گەلاوێژ',
42 |       'خەرمانان',
43 |       'ڕەزبەر',
44 |       'گەڵاڕێزان',
45 |       'سەرماوەز',
46 |       'بەفرانبار',
47 |     ],
48 |   },
49 |   firstDayOfWeek: 6,
50 |   ordinal: () => {
51 |     return '';
52 |   },
53 | };
54 | 
55 | fp.l10ns.ckb = Kurdish;
56 | 
57 | export default fp.l10ns;
58 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/cs.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Czech locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Czech: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Ne', 'Po', 'Út', 'St', 'Čt', 'Pá', 'So'],
16 |     longhand: ['Neděle', 'Pondělí', 'Úterý', 'Středa', 'Čtvrtek', 'Pátek', 'Sobota'],
17 |   },
18 |   months: {
19 |     shorthand: ['Led', 'Ún', 'Bře', 'Dub', 'Kvě', 'Čer', 'Čvc', 'Srp', 'Zář', 'Říj', 'Lis', 'Pro'],
20 |     longhand: [
21 |       'Leden',
22 |       'Únor',
23 |       'Březen',
24 |       'Duben',
25 |       'Květen',
26 |       'Červen',
27 |       'Červenec',
28 |       'Srpen',
29 |       'Září',
30 |       'Říjen',
31 |       'Listopad',
32 |       'Prosinec',
33 |     ],
34 |   },
35 |   firstDayOfWeek: 1,
36 |   ordinal: function () {
37 |     return '.';
38 |   },
39 |   rangeSeparator: ' do ',
40 |   weekAbbreviation: 'Týd.',
41 |   scrollTitle: 'Rolujte pro změnu',
42 |   toggleTitle: 'Přepnout dopoledne/odpoledne',
43 |   amPM: ['dop.', 'odp.'],
44 |   yearAriaLabel: 'Rok',
45 |   time_24hr: true,
46 | };
47 | 
48 | fp.l10ns.cs = Czech;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/cy.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Welsh locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Welsh: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Sul', 'Llun', 'Maw', 'Mer', 'Iau', 'Gwe', 'Sad'],
16 |     longhand: [
17 |       'Dydd Sul',
18 |       'Dydd Llun',
19 |       'Dydd Mawrth',
20 |       'Dydd Mercher',
21 |       'Dydd Iau',
22 |       'Dydd Gwener',
23 |       'Dydd Sadwrn',
24 |     ],
25 |   },
26 | 
27 |   months: {
28 |     shorthand: [
29 |       'Ion',
30 |       'Chwef',
31 |       'Maw',
32 |       'Ebr',
33 |       'Mai',
34 |       'Meh',
35 |       'Gorff',
36 |       'Awst',
37 |       'Medi',
38 |       'Hyd',
39 |       'Tach',
40 |       'Rhag',
41 |     ],
42 |     longhand: [
43 |       'Ionawr',
44 |       'Chwefror',
45 |       'Mawrth',
46 |       'Ebrill',
47 |       'Mai',
48 |       'Mehefin',
49 |       'Gorffennaf',
50 |       'Awst',
51 |       'Medi',
52 |       'Hydref',
53 |       'Tachwedd',
54 |       'Rhagfyr',
55 |     ],
56 |   },
57 | 
58 |   firstDayOfWeek: 1,
59 | 
60 |   ordinal: (nth) => {
61 |     if (nth === 1) return 'af';
62 | 
63 |     if (nth === 2) return 'ail';
64 | 
65 |     if (nth === 3 || nth === 4) return 'ydd';
66 | 
67 |     if (nth === 5 || nth === 6) return 'ed';
68 | 
69 |     if ((nth >= 7 && nth <= 10) || nth == 12 || nth == 15 || nth == 18 || nth == 20) return 'fed';
70 | 
71 |     if (nth == 11 || nth == 13 || nth == 14 || nth == 16 || nth == 17 || nth == 19) return 'eg';
72 | 
73 |     if (nth >= 21 && nth <= 39) return 'ain';
74 | 
75 |     // Inconclusive.
76 |     return '';
77 |   },
78 |   time_24hr: true,
79 | };
80 | 
81 | fp.l10ns.cy = Welsh;
82 | 
83 | export default fp.l10ns;
84 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/da.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Danish locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Danish: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['søn', 'man', 'tir', 'ons', 'tors', 'fre', 'lør'],
16 |     longhand: ['søndag', 'mandag', 'tirsdag', 'onsdag', 'torsdag', 'fredag', 'lørdag'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'],
21 |     longhand: [
22 |       'januar',
23 |       'februar',
24 |       'marts',
25 |       'april',
26 |       'maj',
27 |       'juni',
28 |       'juli',
29 |       'august',
30 |       'september',
31 |       'oktober',
32 |       'november',
33 |       'december',
34 |     ],
35 |   },
36 | 
37 |   ordinal: () => {
38 |     return '.';
39 |   },
40 | 
41 |   firstDayOfWeek: 1,
42 |   rangeSeparator: ' til ',
43 |   weekAbbreviation: 'uge',
44 |   time_24hr: true,
45 | };
46 | 
47 | fp.l10ns.da = Danish;
48 | 
49 | export default fp.l10ns;
50 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/de.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* German locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const German: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
16 |     longhand: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
21 |     longhand: [
22 |       'Januar',
23 |       'Februar',
24 |       'März',
25 |       'April',
26 |       'Mai',
27 |       'Juni',
28 |       'Juli',
29 |       'August',
30 |       'September',
31 |       'Oktober',
32 |       'November',
33 |       'Dezember',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   weekAbbreviation: 'KW',
39 |   rangeSeparator: ' bis ',
40 |   scrollTitle: 'Zum Ändern scrollen',
41 |   toggleTitle: 'Zum Umschalten klicken',
42 |   time_24hr: true,
43 | };
44 | 
45 | fp.l10ns.de = German;
46 | 
47 | export default fp.l10ns;
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/default.ts:
--------------------------------------------------------------------------------
 1 | import { Locale } from '../types/locale';
 2 | 
 3 | export const english: Locale = {
 4 |   weekdays: {
 5 |     shorthand: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
 6 |     longhand: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
 7 |   },
 8 |   months: {
 9 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
10 |     longhand: [
11 |       'January',
12 |       'February',
13 |       'March',
14 |       'April',
15 |       'May',
16 |       'June',
17 |       'July',
18 |       'August',
19 |       'September',
20 |       'October',
21 |       'November',
22 |       'December',
23 |     ],
24 |   },
25 |   daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
26 |   firstDayOfWeek: 0,
27 |   ordinal: (nth: number) => {
28 |     const s = nth % 100;
29 |     if (s > 3 && s < 21) return 'th';
30 |     switch (s % 10) {
31 |       case 1:
32 |         return 'st';
33 |       case 2:
34 |         return 'nd';
35 |       case 3:
36 |         return 'rd';
37 |       default:
38 |         return 'th';
39 |     }
40 |   },
41 |   rangeSeparator: ' to ',
42 |   weekAbbreviation: 'Wk',
43 |   scrollTitle: 'Scroll to increment',
44 |   toggleTitle: 'Click to toggle',
45 |   amPM: ['AM', 'PM'],
46 |   yearAriaLabel: 'Year',
47 |   monthAriaLabel: 'Month',
48 |   hourAriaLabel: 'Hour',
49 |   minuteAriaLabel: 'Minute',
50 |   time_24hr: false,
51 | };
52 | 
53 | export default english;
54 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/eo.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Esperanto locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Esperanto: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   rangeSeparator: ' ĝis ',
17 |   weekAbbreviation: 'Sem',
18 |   scrollTitle: 'Rulumu por pligrandigi la valoron',
19 |   toggleTitle: 'Klaku por ŝalti',
20 | 
21 |   weekdays: {
22 |     shorthand: ['Dim', 'Lun', 'Mar', 'Mer', 'Ĵaŭ', 'Ven', 'Sab'],
23 |     longhand: ['dimanĉo', 'lundo', 'mardo', 'merkredo', 'ĵaŭdo', 'vendredo', 'sabato'],
24 |   },
25 | 
26 |   months: {
27 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aŭg', 'Sep', 'Okt', 'Nov', 'Dec'],
28 |     longhand: [
29 |       'januaro',
30 |       'februaro',
31 |       'marto',
32 |       'aprilo',
33 |       'majo',
34 |       'junio',
35 |       'julio',
36 |       'aŭgusto',
37 |       'septembro',
38 |       'oktobro',
39 |       'novembro',
40 |       'decembro',
41 |     ],
42 |   },
43 | 
44 |   ordinal: () => {
45 |     return '-a';
46 |   },
47 |   time_24hr: true,
48 | };
49 | 
50 | fp.l10ns.eo = Esperanto;
51 | export default fp.l10ns;
52 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/es.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Spanish locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Spanish: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
16 |     longhand: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
21 |     longhand: [
22 |       'Enero',
23 |       'Febrero',
24 |       'Marzo',
25 |       'Abril',
26 |       'Mayo',
27 |       'Junio',
28 |       'Julio',
29 |       'Agosto',
30 |       'Septiembre',
31 |       'Octubre',
32 |       'Noviembre',
33 |       'Diciembre',
34 |     ],
35 |   },
36 | 
37 |   ordinal: () => {
38 |     return 'º';
39 |   },
40 | 
41 |   firstDayOfWeek: 1,
42 |   rangeSeparator: ' a ',
43 |   time_24hr: true,
44 | };
45 | 
46 | fp.l10ns.es = Spanish;
47 | 
48 | export default fp.l10ns;
49 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/et.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Estonian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Estonian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['P', 'E', 'T', 'K', 'N', 'R', 'L'],
16 |     longhand: ['Pühapäev', 'Esmaspäev', 'Teisipäev', 'Kolmapäev', 'Neljapäev', 'Reede', 'Laupäev'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'Jaan',
22 |       'Veebr',
23 |       'Märts',
24 |       'Apr',
25 |       'Mai',
26 |       'Juuni',
27 |       'Juuli',
28 |       'Aug',
29 |       'Sept',
30 |       'Okt',
31 |       'Nov',
32 |       'Dets',
33 |     ],
34 |     longhand: [
35 |       'Jaanuar',
36 |       'Veebruar',
37 |       'Märts',
38 |       'Aprill',
39 |       'Mai',
40 |       'Juuni',
41 |       'Juuli',
42 |       'August',
43 |       'September',
44 |       'Oktoober',
45 |       'November',
46 |       'Detsember',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 | 
52 |   ordinal: function () {
53 |     return '.';
54 |   },
55 | 
56 |   weekAbbreviation: 'Näd',
57 |   rangeSeparator: ' kuni ',
58 |   scrollTitle: 'Keri, et suurendada',
59 |   toggleTitle: 'Klõpsa, et vahetada',
60 |   time_24hr: true,
61 | };
62 | 
63 | fp.l10ns.et = Estonian;
64 | 
65 | export default fp.l10ns;
66 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/fa.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Farsi (Persian) locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Persian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['یک', 'دو', 'سه', 'چهار', 'پنج', 'جمعه', 'شنبه'],
16 |     longhand: ['یک‌شنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنچ‌شنبه', 'جمعه', 'شنبه'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'ژانویه',
22 |       'فوریه',
23 |       'مارس',
24 |       'آوریل',
25 |       'مه',
26 |       'ژوئن',
27 |       'ژوئیه',
28 |       'اوت',
29 |       'سپتامبر',
30 |       'اکتبر',
31 |       'نوامبر',
32 |       'دسامبر',
33 |     ],
34 |     longhand: [
35 |       'ژانویه',
36 |       'فوریه',
37 |       'مارس',
38 |       'آوریل',
39 |       'مه',
40 |       'ژوئن',
41 |       'ژوئیه',
42 |       'اوت',
43 |       'سپتامبر',
44 |       'اکتبر',
45 |       'نوامبر',
46 |       'دسامبر',
47 |     ],
48 |   },
49 |   firstDayOfWeek: 6,
50 |   ordinal: () => {
51 |     return '';
52 |   },
53 | };
54 | 
55 | fp.l10ns.fa = Persian;
56 | 
57 | export default fp.l10ns;
58 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/fi.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Finnish locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Finnish: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['su', 'ma', 'ti', 'ke', 'to', 'pe', 'la'],
18 |     longhand: [
19 |       'sunnuntai',
20 |       'maanantai',
21 |       'tiistai',
22 |       'keskiviikko',
23 |       'torstai',
24 |       'perjantai',
25 |       'lauantai',
26 |     ],
27 |   },
28 | 
29 |   months: {
30 |     shorthand: [
31 |       'tammi',
32 |       'helmi',
33 |       'maalis',
34 |       'huhti',
35 |       'touko',
36 |       'kesä',
37 |       'heinä',
38 |       'elo',
39 |       'syys',
40 |       'loka',
41 |       'marras',
42 |       'joulu',
43 |     ],
44 |     longhand: [
45 |       'tammikuu',
46 |       'helmikuu',
47 |       'maaliskuu',
48 |       'huhtikuu',
49 |       'toukokuu',
50 |       'kesäkuu',
51 |       'heinäkuu',
52 |       'elokuu',
53 |       'syyskuu',
54 |       'lokakuu',
55 |       'marraskuu',
56 |       'joulukuu',
57 |     ],
58 |   },
59 | 
60 |   ordinal: () => {
61 |     return '.';
62 |   },
63 |   time_24hr: true,
64 | };
65 | 
66 | fp.l10ns.fi = Finnish;
67 | 
68 | export default fp.l10ns;
69 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/fo.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Faroese locale for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Faroese: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Sun', 'Mán', 'Týs', 'Mik', 'Hós', 'Frí', 'Ley'],
16 |     longhand: [
17 |       'Sunnudagur',
18 |       'Mánadagur',
19 |       'Týsdagur',
20 |       'Mikudagur',
21 |       'Hósdagur',
22 |       'Fríggjadagur',
23 |       'Leygardagur',
24 |     ],
25 |   },
26 | 
27 |   months: {
28 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
29 |     longhand: [
30 |       'Januar',
31 |       'Februar',
32 |       'Mars',
33 |       'Apríl',
34 |       'Mai',
35 |       'Juni',
36 |       'Juli',
37 |       'August',
38 |       'Septembur',
39 |       'Oktobur',
40 |       'Novembur',
41 |       'Desembur',
42 |     ],
43 |   },
44 | 
45 |   ordinal: () => {
46 |     return '.';
47 |   },
48 | 
49 |   firstDayOfWeek: 1,
50 |   rangeSeparator: ' til ',
51 |   weekAbbreviation: 'vika',
52 |   scrollTitle: 'Rulla fyri at broyta',
53 |   toggleTitle: 'Trýst fyri at skifta',
54 |   yearAriaLabel: 'Ár',
55 |   time_24hr: true,
56 | };
57 | 
58 | fp.l10ns.fo = Faroese;
59 | 
60 | export default fp.l10ns;
61 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/fr.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* French locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const French: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['dim', 'lun', 'mar', 'mer', 'jeu', 'ven', 'sam'],
18 |     longhand: ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'],
19 |   },
20 | 
21 |   months: {
22 |     shorthand: [
23 |       'janv',
24 |       'févr',
25 |       'mars',
26 |       'avr',
27 |       'mai',
28 |       'juin',
29 |       'juil',
30 |       'août',
31 |       'sept',
32 |       'oct',
33 |       'nov',
34 |       'déc',
35 |     ],
36 |     longhand: [
37 |       'janvier',
38 |       'février',
39 |       'mars',
40 |       'avril',
41 |       'mai',
42 |       'juin',
43 |       'juillet',
44 |       'août',
45 |       'septembre',
46 |       'octobre',
47 |       'novembre',
48 |       'décembre',
49 |     ],
50 |   },
51 | 
52 |   ordinal: (nth) => {
53 |     if (nth > 1) return '';
54 | 
55 |     return 'er';
56 |   },
57 |   rangeSeparator: ' au ',
58 |   weekAbbreviation: 'Sem',
59 |   scrollTitle: 'Défiler pour augmenter la valeur',
60 |   toggleTitle: 'Cliquer pour basculer',
61 |   time_24hr: true,
62 | };
63 | 
64 | fp.l10ns.fr = French;
65 | 
66 | export default fp.l10ns;
67 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ga.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Gaelic Irish locale for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Irish: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['Dom', 'Lua', 'Mái', 'Céa', 'Déa', 'Aoi', 'Sat'],
18 |     longhand: [
19 |       'Dé Domhnaigh',
20 |       'Dé Luain',
21 |       'Dé Máirt',
22 |       'Dé Céadaoin',
23 |       'Déardaoin',
24 |       'Dé hAoine',
25 |       'Dé Sathairn',
26 |     ],
27 |   },
28 | 
29 |   months: {
30 |     shorthand: ['Ean', 'Fea', 'Már', 'Aib', 'Bea', 'Mei', 'Iúi', 'Lún', 'MFo', 'DFo', 'Sam', 'Nol'],
31 |     longhand: [
32 |       'Eanáir',
33 |       'Feabhra',
34 |       'Márta',
35 |       'Aibreán',
36 |       'Bealtaine',
37 |       'Meitheamh',
38 |       'Iúil',
39 |       'Lúnasa',
40 |       'Meán Fómhair',
41 |       'Deireadh Fómhair',
42 |       'Samhain',
43 |       'Nollaig',
44 |     ],
45 |   },
46 |   time_24hr: true,
47 | };
48 | 
49 | fp.l10ns.hr = Irish;
50 | 
51 | export default fp.l10ns;
52 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/gr.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Greek locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Greek: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Κυ', 'Δε', 'Τρ', 'Τε', 'Πέ', 'Πα', 'Σά'],
16 |     longhand: ['Κυριακή', 'Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σάββατο'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'Ιαν',
22 |       'Φεβ',
23 |       'Μάρ',
24 |       'Απρ',
25 |       'Μάι',
26 |       'Ιούν',
27 |       'Ιούλ',
28 |       'Αύγ',
29 |       'Σεπ',
30 |       'Οκτ',
31 |       'Νοέ',
32 |       'Δεκ',
33 |     ],
34 |     longhand: [
35 |       'Ιανουάριος',
36 |       'Φεβρουάριος',
37 |       'Μάρτιος',
38 |       'Απρίλιος',
39 |       'Μάιος',
40 |       'Ιούνιος',
41 |       'Ιούλιος',
42 |       'Αύγουστος',
43 |       'Σεπτέμβριος',
44 |       'Οκτώβριος',
45 |       'Νοέμβριος',
46 |       'Δεκέμβριος',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 | 
52 |   ordinal: function () {
53 |     return '';
54 |   },
55 | 
56 |   weekAbbreviation: 'Εβδ',
57 |   rangeSeparator: ' έως ',
58 |   scrollTitle: 'Μετακυλήστε για προσαύξηση',
59 |   toggleTitle: 'Κάντε κλικ για αλλαγή',
60 |   amPM: ['ΠΜ', 'ΜΜ'],
61 |   yearAriaLabel: 'χρόνος',
62 |   monthAriaLabel: 'μήνας',
63 |   hourAriaLabel: 'ώρα',
64 |   minuteAriaLabel: 'λεπτό',
65 | };
66 | 
67 | fp.l10ns.gr = Greek;
68 | 
69 | export default fp.l10ns;
70 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/he.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Hebrew locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Hebrew: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['א', 'ב', 'ג', 'ד', 'ה', 'ו', 'ש'],
16 |     longhand: ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'ינו׳',
22 |       'פבר׳',
23 |       'מרץ',
24 |       'אפר׳',
25 |       'מאי',
26 |       'יוני',
27 |       'יולי',
28 |       'אוג׳',
29 |       'ספט׳',
30 |       'אוק׳',
31 |       'נוב׳',
32 |       'דצמ׳',
33 |     ],
34 |     longhand: [
35 |       'ינואר',
36 |       'פברואר',
37 |       'מרץ',
38 |       'אפריל',
39 |       'מאי',
40 |       'יוני',
41 |       'יולי',
42 |       'אוגוסט',
43 |       'ספטמבר',
44 |       'אוקטובר',
45 |       'נובמבר',
46 |       'דצמבר',
47 |     ],
48 |   },
49 |   rangeSeparator: ' אל ',
50 |   time_24hr: true,
51 | };
52 | 
53 | fp.l10ns.he = Hebrew;
54 | 
55 | export default fp.l10ns;
56 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/hi.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Hindi locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Hindi: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['रवि', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि'],
16 |     longhand: ['रविवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'गुरुवार', 'शुक्रवार', 'शनिवार'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'जन',
22 |       'फर',
23 |       'मार्च',
24 |       'अप्रेल',
25 |       'मई',
26 |       'जून',
27 |       'जूलाई',
28 |       'अग',
29 |       'सित',
30 |       'अक्ट',
31 |       'नव',
32 |       'दि',
33 |     ],
34 |     longhand: [
35 |       'जनवरी ',
36 |       'फरवरी',
37 |       'मार्च',
38 |       'अप्रेल',
39 |       'मई',
40 |       'जून',
41 |       'जूलाई',
42 |       'अगस्त ',
43 |       'सितम्बर',
44 |       'अक्टूबर',
45 |       'नवम्बर',
46 |       'दिसम्बर',
47 |     ],
48 |   },
49 | };
50 | 
51 | fp.l10ns.hi = Hindi;
52 | 
53 | export default fp.l10ns;
54 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/hr.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Croatian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Croatian: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['Ned', 'Pon', 'Uto', 'Sri', 'Čet', 'Pet', 'Sub'],
18 |     longhand: ['Nedjelja', 'Ponedjeljak', 'Utorak', 'Srijeda', 'Četvrtak', 'Petak', 'Subota'],
19 |   },
20 | 
21 |   months: {
22 |     shorthand: [
23 |       'Sij',
24 |       'Velj',
25 |       'Ožu',
26 |       'Tra',
27 |       'Svi',
28 |       'Lip',
29 |       'Srp',
30 |       'Kol',
31 |       'Ruj',
32 |       'Lis',
33 |       'Stu',
34 |       'Pro',
35 |     ],
36 |     longhand: [
37 |       'Siječanj',
38 |       'Veljača',
39 |       'Ožujak',
40 |       'Travanj',
41 |       'Svibanj',
42 |       'Lipanj',
43 |       'Srpanj',
44 |       'Kolovoz',
45 |       'Rujan',
46 |       'Listopad',
47 |       'Studeni',
48 |       'Prosinac',
49 |     ],
50 |   },
51 |   time_24hr: true,
52 | };
53 | 
54 | fp.l10ns.hr = Croatian;
55 | 
56 | export default fp.l10ns;
57 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/hu.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Hungarian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Hungarian: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Szo'],
18 |     longhand: ['Vasárnap', 'Hétfő', 'Kedd', 'Szerda', 'Csütörtök', 'Péntek', 'Szombat'],
19 |   },
20 | 
21 |   months: {
22 |     shorthand: [
23 |       'Jan',
24 |       'Feb',
25 |       'Már',
26 |       'Ápr',
27 |       'Máj',
28 |       'Jún',
29 |       'Júl',
30 |       'Aug',
31 |       'Szep',
32 |       'Okt',
33 |       'Nov',
34 |       'Dec',
35 |     ],
36 |     longhand: [
37 |       'Január',
38 |       'Február',
39 |       'Március',
40 |       'Április',
41 |       'Május',
42 |       'Június',
43 |       'Július',
44 |       'Augusztus',
45 |       'Szeptember',
46 |       'Október',
47 |       'November',
48 |       'December',
49 |     ],
50 |   },
51 | 
52 |   ordinal: function () {
53 |     return '.';
54 |   },
55 | 
56 |   weekAbbreviation: 'Hét',
57 |   scrollTitle: 'Görgessen',
58 |   toggleTitle: 'Kattintson a váltáshoz',
59 |   rangeSeparator: ' - ',
60 |   time_24hr: true,
61 | };
62 | 
63 | fp.l10ns.hu = Hungarian;
64 | 
65 | export default fp.l10ns;
66 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/hy.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Armenian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Armenian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Կիր', 'Երկ', 'Երք', 'Չրք', 'Հնգ', 'Ուրբ', 'Շբթ'],
16 |     longhand: ['Կիրակի', 'Եկուշաբթի', 'Երեքշաբթի', 'Չորեքշաբթի', 'Հինգշաբթի', 'Ուրբաթ', 'Շաբաթ'],
17 |   },
18 |   months: {
19 |     shorthand: ['Հնվ', 'Փտր', 'Մար', 'Ապր', 'Մայ', 'Հնս', 'Հլս', 'Օգս', 'Սեպ', 'Հոկ', 'Նմբ', 'Դեկ'],
20 |     longhand: [
21 |       'Հունվար',
22 |       'Փետրվար',
23 |       'Մարտ',
24 |       'Ապրիլ',
25 |       'Մայիս',
26 |       'Հունիս',
27 |       'Հուլիս',
28 |       'Օգոստոս',
29 |       'Սեպտեմբեր',
30 |       'Հոկտեմբեր',
31 |       'Նոյեմբեր',
32 |       'Դեկտեմբեր',
33 |     ],
34 |   },
35 |   firstDayOfWeek: 1,
36 |   ordinal: function () {
37 |     return '';
38 |   },
39 |   rangeSeparator: ' — ',
40 |   weekAbbreviation: 'ՇԲՏ',
41 |   scrollTitle: 'Ոլորեք՝ մեծացնելու համար',
42 |   toggleTitle: 'Սեղմեք՝ փոխելու համար',
43 |   amPM: ['ՄԿ', 'ԿՀ'],
44 |   yearAriaLabel: 'Տարի',
45 |   monthAriaLabel: 'Ամիս',
46 |   hourAriaLabel: 'Ժամ',
47 |   minuteAriaLabel: 'Րոպե',
48 |   time_24hr: true,
49 | };
50 | 
51 | fp.l10ns.hy = Armenian;
52 | 
53 | export default fp.l10ns;
54 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/id.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Indonesian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Indonesian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Min', 'Sen', 'Sel', 'Rab', 'Kam', 'Jum', 'Sab'],
16 |     longhand: ['Minggu', 'Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun', 'Jul', 'Agu', 'Sep', 'Okt', 'Nov', 'Des'],
21 |     longhand: [
22 |       'Januari',
23 |       'Februari',
24 |       'Maret',
25 |       'April',
26 |       'Mei',
27 |       'Juni',
28 |       'Juli',
29 |       'Agustus',
30 |       'September',
31 |       'Oktober',
32 |       'November',
33 |       'Desember',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 | 
39 |   ordinal: () => {
40 |     return '';
41 |   },
42 |   time_24hr: true,
43 |   rangeSeparator: ' - ',
44 | };
45 | 
46 | fp.l10ns.id = Indonesian;
47 | 
48 | export default fp.l10ns;
49 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/index.ts:
--------------------------------------------------------------------------------
  1 | import { CustomLocale, key } from '../types/locale';
  2 | import { Arabic as ar } from './ar';
  3 | import { Austria as at } from './at';
  4 | import { Azerbaijan as az } from './az';
  5 | import { Belarusian as be } from './be';
  6 | import { Bulgarian as bg } from './bg';
  7 | import { Bangla as bn } from './bn';
  8 | import { Bosnian as bs } from './bs';
  9 | import { Catalan as cat } from './cat';
 10 | import { Kurdish as ckb } from './ckb';
 11 | import { Czech as cs } from './cs';
 12 | import { Welsh as cy } from './cy';
 13 | import { Danish as da } from './da';
 14 | import { German as de } from './de';
 15 | import { english as en } from './default';
 16 | import { Esperanto as eo } from './eo';
 17 | import { Spanish as es } from './es';
 18 | import { Estonian as et } from './et';
 19 | import { Persian as fa } from './fa';
 20 | import { Finnish as fi } from './fi';
 21 | import { Faroese as fo } from './fo';
 22 | import { French as fr } from './fr';
 23 | import { Greek as gr } from './gr';
 24 | import { Hebrew as he } from './he';
 25 | import { Hindi as hi } from './hi';
 26 | import { Croatian as hr } from './hr';
 27 | import { Hungarian as hu } from './hu';
 28 | import { Armenian as hy } from './hy';
 29 | import { Indonesian as id } from './id';
 30 | import { Icelandic as is } from './is';
 31 | import { Italian as it } from './it';
 32 | import { Japanese as ja } from './ja';
 33 | import { Georgian as ka } from './ka';
 34 | import { Khmer as km } from './km';
 35 | import { Korean as ko } from './ko';
 36 | import { Kazakh as kz } from './kz';
 37 | import { Lithuanian as lt } from './lt';
 38 | import { Latvian as lv } from './lv';
 39 | import { Macedonian as mk } from './mk';
 40 | import { Mongolian as mn } from './mn';
 41 | import { Malaysian as ms } from './ms';
 42 | import { Burmese as my } from './my';
 43 | import { Dutch as nl } from './nl';
 44 | import { NorwegianNynorsk as nn } from './nn';
 45 | import { Norwegian as no } from './no';
 46 | import { Punjabi as pa } from './pa';
 47 | import { Polish as pl } from './pl';
 48 | import { Portuguese as pt } from './pt';
 49 | import { Romanian as ro } from './ro';
 50 | import { Russian as ru } from './ru';
 51 | import { Sinhala as si } from './si';
 52 | import { Slovak as sk } from './sk';
 53 | import { Slovenian as sl } from './sl';
 54 | import { Albanian as sq } from './sq';
 55 | import { Serbian as sr } from './sr';
 56 | import { Swedish as sv } from './sv';
 57 | import { Thai as th } from './th';
 58 | import { Turkish as tr } from './tr';
 59 | import { Ukrainian as uk } from './uk';
 60 | import { Uzbek as uz } from './uz';
 61 | import { UzbekLatin as uzLatn } from './uz_latn';
 62 | import { Vietnamese as vn } from './vn';
 63 | import { Mandarin as zh } from './zh';
 64 | import { MandarinTraditional as zh_tw } from './zh-tw';
 65 | 
 66 | const l10n: Record<key, CustomLocale> = {
 67 |   ar,
 68 |   at,
 69 |   az,
 70 |   be,
 71 |   bg,
 72 |   bn,
 73 |   bs,
 74 |   ca: cat,
 75 |   ckb,
 76 |   cat,
 77 |   cs,
 78 |   cy,
 79 |   da,
 80 |   de,
 81 |   default: { ...en },
 82 |   en,
 83 |   eo,
 84 |   es,
 85 |   et,
 86 |   fa,
 87 |   fi,
 88 |   fo,
 89 |   fr,
 90 |   gr,
 91 |   he,
 92 |   hi,
 93 |   hr,
 94 |   hu,
 95 |   hy,
 96 |   id,
 97 |   is,
 98 |   it,
 99 |   ja,
100 |   ka,
101 |   ko,
102 |   km,
103 |   kz,
104 |   lt,
105 |   lv,
106 |   mk,
107 |   mn,
108 |   ms,
109 |   my,
110 |   nl,
111 |   nn,
112 |   no,
113 |   pa,
114 |   pl,
115 |   pt,
116 |   ro,
117 |   ru,
118 |   si,
119 |   sk,
120 |   sl,
121 |   sq,
122 |   sr,
123 |   sv,
124 |   th,
125 |   tr,
126 |   uk,
127 |   vn,
128 |   zh,
129 |   zh_tw,
130 |   uz,
131 |   uz_latn: uzLatn,
132 | };
133 | 
134 | export default l10n;
135 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/is.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Icelandic locale for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Icelandic: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Sun', 'Mán', 'Þri', 'Mið', 'Fim', 'Fös', 'Lau'],
16 |     longhand: [
17 |       'Sunnudagur',
18 |       'Mánudagur',
19 |       'Þriðjudagur',
20 |       'Miðvikudagur',
21 |       'Fimmtudagur',
22 |       'Föstudagur',
23 |       'Laugardagur',
24 |     ],
25 |   },
26 | 
27 |   months: {
28 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Maí', 'Jún', 'Júl', 'Ágú', 'Sep', 'Okt', 'Nóv', 'Des'],
29 |     longhand: [
30 |       'Janúar',
31 |       'Febrúar',
32 |       'Mars',
33 |       'Apríl',
34 |       'Maí',
35 |       'Júní',
36 |       'Júlí',
37 |       'Ágúst',
38 |       'September',
39 |       'Október',
40 |       'Nóvember',
41 |       'Desember',
42 |     ],
43 |   },
44 | 
45 |   ordinal: () => {
46 |     return '.';
47 |   },
48 | 
49 |   firstDayOfWeek: 1,
50 |   rangeSeparator: ' til ',
51 |   weekAbbreviation: 'vika',
52 |   yearAriaLabel: 'Ár',
53 |   time_24hr: true,
54 | };
55 | 
56 | fp.l10ns.is = Icelandic;
57 | 
58 | export default fp.l10ns;
59 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/it.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Italian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Italian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'],
16 |     longhand: ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],
21 |     longhand: [
22 |       'Gennaio',
23 |       'Febbraio',
24 |       'Marzo',
25 |       'Aprile',
26 |       'Maggio',
27 |       'Giugno',
28 |       'Luglio',
29 |       'Agosto',
30 |       'Settembre',
31 |       'Ottobre',
32 |       'Novembre',
33 |       'Dicembre',
34 |     ],
35 |   },
36 |   firstDayOfWeek: 1,
37 |   ordinal: () => '°',
38 |   rangeSeparator: ' al ',
39 |   weekAbbreviation: 'Se',
40 |   scrollTitle: 'Scrolla per aumentare',
41 |   toggleTitle: 'Clicca per cambiare',
42 |   time_24hr: true,
43 | };
44 | 
45 | fp.l10ns.it = Italian;
46 | 
47 | export default fp.l10ns;
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ja.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Japanese locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Japanese: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['日', '月', '火', '水', '木', '金', '土'],
16 |     longhand: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       '1月',
22 |       '2月',
23 |       '3月',
24 |       '4月',
25 |       '5月',
26 |       '6月',
27 |       '7月',
28 |       '8月',
29 |       '9月',
30 |       '10月',
31 |       '11月',
32 |       '12月',
33 |     ],
34 |     longhand: [
35 |       '1月',
36 |       '2月',
37 |       '3月',
38 |       '4月',
39 |       '5月',
40 |       '6月',
41 |       '7月',
42 |       '8月',
43 |       '9月',
44 |       '10月',
45 |       '11月',
46 |       '12月',
47 |     ],
48 |   },
49 |   time_24hr: true,
50 |   rangeSeparator: ' から ',
51 |   monthAriaLabel: '月',
52 |   amPM: ['午前', '午後'],
53 |   yearAriaLabel: '年',
54 |   hourAriaLabel: '時間',
55 |   minuteAriaLabel: '分',
56 | };
57 | 
58 | fp.l10ns.ja = Japanese;
59 | 
60 | export default fp.l10ns;
61 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ka.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Georgian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Georgian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['კვ', 'ორ', 'სა', 'ოთ', 'ხუ', 'პა', 'შა'],
16 |     longhand: ['კვირა', 'ორშაბათი', 'სამშაბათი', 'ოთხშაბათი', 'ხუთშაბათი', 'პარასკევი', 'შაბათი'],
17 |   },
18 |   months: {
19 |     shorthand: ['იან', 'თებ', 'მარ', 'აპრ', 'მაი', 'ივნ', 'ივლ', 'აგვ', 'სექ', 'ოქტ', 'ნოე', 'დეკ'],
20 |     longhand: [
21 |       'იანვარი',
22 |       'თებერვალი',
23 |       'მარტი',
24 |       'აპრილი',
25 |       'მაისი',
26 |       'ივნისი',
27 |       'ივლისი',
28 |       'აგვისტო',
29 |       'სექტემბერი',
30 |       'ოქტომბერი',
31 |       'ნოემბერი',
32 |       'დეკემბერი',
33 |     ],
34 |   },
35 |   firstDayOfWeek: 1,
36 |   ordinal: function () {
37 |     return '';
38 |   },
39 |   rangeSeparator: ' — ',
40 |   weekAbbreviation: 'კვ.',
41 |   scrollTitle: 'დასქროლეთ გასადიდებლად',
42 |   toggleTitle: 'დააკლიკეთ გადართვისთვის',
43 |   amPM: ['AM', 'PM'],
44 |   yearAriaLabel: 'წელი',
45 |   time_24hr: true,
46 | };
47 | 
48 | fp.l10ns.ka = Georgian;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/km.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Khmer locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Khmer: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['អាទិត្យ', 'ចន្ទ', 'អង្គារ', 'ពុធ', 'ព្រហស.', 'សុក្រ', 'សៅរ៍'],
16 |     longhand: ['អាទិត្យ', 'ចន្ទ', 'អង្គារ', 'ពុធ', 'ព្រហស្បតិ៍', 'សុក្រ', 'សៅរ៍'],
17 |   },
18 |   months: {
19 |     shorthand: [
20 |       'មករា',
21 |       'កុម្ភះ',
22 |       'មីនា',
23 |       'មេសា',
24 |       'ឧសភា',
25 |       'មិថុនា',
26 |       'កក្កដា',
27 |       'សីហា',
28 |       'កញ្ញា',
29 |       'តុលា',
30 |       'វិច្ឆិកា',
31 |       'ធ្នូ',
32 |     ],
33 |     longhand: [
34 |       'មករា',
35 |       'កុម្ភះ',
36 |       'មីនា',
37 |       'មេសា',
38 |       'ឧសភា',
39 |       'មិថុនា',
40 |       'កក្កដា',
41 |       'សីហា',
42 |       'កញ្ញា',
43 |       'តុលា',
44 |       'វិច្ឆិកា',
45 |       'ធ្នូ',
46 |     ],
47 |   },
48 |   ordinal: () => {
49 |     return '';
50 |   },
51 |   firstDayOfWeek: 1,
52 |   rangeSeparator: ' ដល់ ',
53 |   weekAbbreviation: 'សប្តាហ៍',
54 |   scrollTitle: 'រំកិលដើម្បីបង្កើន',
55 |   toggleTitle: 'ចុចដើម្បីផ្លាស់ប្ដូរ',
56 |   yearAriaLabel: 'ឆ្នាំ',
57 |   time_24hr: true,
58 | };
59 | 
60 | fp.l10ns.km = Khmer;
61 | export default fp.l10ns;
62 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ko.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Republic of Korea locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Korean: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['일', '월', '화', '수', '목', '금', '토'],
16 |     longhand: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       '1월',
22 |       '2월',
23 |       '3월',
24 |       '4월',
25 |       '5월',
26 |       '6월',
27 |       '7월',
28 |       '8월',
29 |       '9월',
30 |       '10월',
31 |       '11월',
32 |       '12월',
33 |     ],
34 |     longhand: [
35 |       '1월',
36 |       '2월',
37 |       '3월',
38 |       '4월',
39 |       '5월',
40 |       '6월',
41 |       '7월',
42 |       '8월',
43 |       '9월',
44 |       '10월',
45 |       '11월',
46 |       '12월',
47 |     ],
48 |   },
49 | 
50 |   ordinal: () => {
51 |     return '일';
52 |   },
53 | 
54 |   rangeSeparator: ' ~ ',
55 |   amPM: ['오전', '오후'],
56 | };
57 | 
58 | fp.l10ns.ko = Korean;
59 | 
60 | export default fp.l10ns;
61 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/kz.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Kazakh locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Kazakh: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Жс', 'Дс', 'Сc', 'Ср', 'Бс', 'Жм', 'Сб'],
16 |     longhand: ['Жексенбi', 'Дүйсенбi', 'Сейсенбi', 'Сәрсенбi', 'Бейсенбi', 'Жұма', 'Сенбi'],
17 |   },
18 |   months: {
19 |     shorthand: ['Қаң', 'Ақп', 'Нау', 'Сәу', 'Мам', 'Мау', 'Шiл', 'Там', 'Қыр', 'Қаз', 'Қар', 'Жел'],
20 |     longhand: [
21 |       'Қаңтар',
22 |       'Ақпан',
23 |       'Наурыз',
24 |       'Сәуiр',
25 |       'Мамыр',
26 |       'Маусым',
27 |       'Шiлде',
28 |       'Тамыз',
29 |       'Қыркүйек',
30 |       'Қазан',
31 |       'Қараша',
32 |       'Желтоқсан',
33 |     ],
34 |   },
35 |   firstDayOfWeek: 1,
36 |   ordinal: function () {
37 |     return '';
38 |   },
39 |   rangeSeparator: ' — ',
40 |   weekAbbreviation: 'Апта',
41 |   scrollTitle: 'Үлкейту үшін айналдырыңыз',
42 |   toggleTitle: 'Ауыстыру үшін басыңыз',
43 |   amPM: ['ТД', 'ТК'],
44 |   yearAriaLabel: 'Жыл',
45 | };
46 | 
47 | fp.l10ns.kz = Kazakh;
48 | 
49 | export default fp.l10ns;
50 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/lt.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Lithuanian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Lithuanian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['S', 'Pr', 'A', 'T', 'K', 'Pn', 'Š'],
16 |     longhand: [
17 |       'Sekmadienis',
18 |       'Pirmadienis',
19 |       'Antradienis',
20 |       'Trečiadienis',
21 |       'Ketvirtadienis',
22 |       'Penktadienis',
23 |       'Šeštadienis',
24 |     ],
25 |   },
26 | 
27 |   months: {
28 |     shorthand: ['Sau', 'Vas', 'Kov', 'Bal', 'Geg', 'Bir', 'Lie', 'Rgp', 'Rgs', 'Spl', 'Lap', 'Grd'],
29 |     longhand: [
30 |       'Sausis',
31 |       'Vasaris',
32 |       'Kovas',
33 |       'Balandis',
34 |       'Gegužė',
35 |       'Birželis',
36 |       'Liepa',
37 |       'Rugpjūtis',
38 |       'Rugsėjis',
39 |       'Spalis',
40 |       'Lapkritis',
41 |       'Gruodis',
42 |     ],
43 |   },
44 | 
45 |   firstDayOfWeek: 1,
46 | 
47 |   ordinal: function () {
48 |     return '-a';
49 |   },
50 |   rangeSeparator: ' iki ',
51 |   weekAbbreviation: 'Sav',
52 |   scrollTitle: 'Keisti laiką pelės rateliu',
53 |   toggleTitle: 'Perjungti laiko formatą',
54 |   time_24hr: true,
55 | };
56 | 
57 | fp.l10ns.lt = Lithuanian;
58 | 
59 | export default fp.l10ns;
60 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/lv.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Latvian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Latvian: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['Sv', 'Pr', 'Ot', 'Tr', 'Ce', 'Pk', 'Se'],
18 |     longhand: [
19 |       'Svētdiena',
20 |       'Pirmdiena',
21 |       'Otrdiena',
22 |       'Trešdiena',
23 |       'Ceturtdiena',
24 |       'Piektdiena',
25 |       'Sestdiena',
26 |     ],
27 |   },
28 | 
29 |   months: {
30 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jūn', 'Jūl', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
31 |     longhand: [
32 |       'Janvāris',
33 |       'Februāris',
34 |       'Marts',
35 |       'Aprīlis',
36 |       'Maijs',
37 |       'Jūnijs',
38 |       'Jūlijs',
39 |       'Augusts',
40 |       'Septembris',
41 |       'Oktobris',
42 |       'Novembris',
43 |       'Decembris',
44 |     ],
45 |   },
46 | 
47 |   rangeSeparator: ' līdz ',
48 |   time_24hr: true,
49 | };
50 | 
51 | fp.l10ns.lv = Latvian;
52 | 
53 | export default fp.l10ns;
54 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/mk.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Macedonian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Macedonian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Не', 'По', 'Вт', 'Ср', 'Че', 'Пе', 'Са'],
16 |     longhand: ['Недела', 'Понеделник', 'Вторник', 'Среда', 'Четврток', 'Петок', 'Сабота'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Јан', 'Фев', 'Мар', 'Апр', 'Мај', 'Јун', 'Јул', 'Авг', 'Сеп', 'Окт', 'Ное', 'Дек'],
21 |     longhand: [
22 |       'Јануари',
23 |       'Февруари',
24 |       'Март',
25 |       'Април',
26 |       'Мај',
27 |       'Јуни',
28 |       'Јули',
29 |       'Август',
30 |       'Септември',
31 |       'Октомври',
32 |       'Ноември',
33 |       'Декември',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   weekAbbreviation: 'Нед.',
39 |   rangeSeparator: ' до ',
40 |   time_24hr: true,
41 | };
42 | 
43 | fp.l10ns.mk = Macedonian;
44 | 
45 | export default fp.l10ns;
46 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/mn.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Mongolian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Mongolian: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 |   weekdays: {
16 |     shorthand: ['Да', 'Мя', 'Лх', 'Пү', 'Ба', 'Бя', 'Ня'],
17 |     longhand: ['Даваа', 'Мягмар', 'Лхагва', 'Пүрэв', 'Баасан', 'Бямба', 'Ням'],
18 |   },
19 | 
20 |   months: {
21 |     shorthand: [
22 |       '1-р сар',
23 |       '2-р сар',
24 |       '3-р сар',
25 |       '4-р сар',
26 |       '5-р сар',
27 |       '6-р сар',
28 |       '7-р сар',
29 |       '8-р сар',
30 |       '9-р сар',
31 |       '10-р сар',
32 |       '11-р сар',
33 |       '12-р сар',
34 |     ],
35 |     longhand: [
36 |       'Нэгдүгээр сар',
37 |       'Хоёрдугаар сар',
38 |       'Гуравдугаар сар',
39 |       'Дөрөвдүгээр сар',
40 |       'Тавдугаар сар',
41 |       'Зургаадугаар сар',
42 |       'Долдугаар сар',
43 |       'Наймдугаар сар',
44 |       'Есдүгээр сар',
45 |       'Аравдугаар сар',
46 |       'Арваннэгдүгээр сар',
47 |       'Арванхоёрдугаар сар',
48 |     ],
49 |   },
50 |   rangeSeparator: '-с ',
51 |   time_24hr: true,
52 | };
53 | 
54 | fp.l10ns.mn = Mongolian;
55 | export default fp.l10ns;
56 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ms.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Malaysian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Malaysian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Aha', 'Isn', 'Sel', 'Rab', 'Kha', 'Jum', 'Sab'],
16 |     longhand: ['Ahad', 'Isnin', 'Selasa', 'Rabu', 'Khamis', 'Jumaat', 'Sabtu'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mac', 'Apr', 'Mei', 'Jun', 'Jul', 'Ogo', 'Sep', 'Okt', 'Nov', 'Dis'],
21 |     longhand: [
22 |       'Januari',
23 |       'Februari',
24 |       'Mac',
25 |       'April',
26 |       'Mei',
27 |       'Jun',
28 |       'Julai',
29 |       'Ogos',
30 |       'September',
31 |       'Oktober',
32 |       'November',
33 |       'Disember',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 | 
39 |   ordinal: () => {
40 |     return '';
41 |   },
42 | };
43 | 
44 | export default fp.l10ns;
45 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/my.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Burmese locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Burmese: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['နွေ', 'လာ', 'ဂါ', 'ဟူး', 'ကြာ', 'သော', 'နေ'],
16 |     longhand: ['တနင်္ဂနွေ', 'တနင်္လာ', 'အင်္ဂါ', 'ဗုဒ္ဓဟူး', 'ကြာသပတေး', 'သောကြာ', 'စနေ'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'ဇန်',
22 |       'ဖေ',
23 |       'မတ်',
24 |       'ပြီ',
25 |       'မေ',
26 |       'ဇွန်',
27 |       'လိုင်',
28 |       'သြ',
29 |       'စက်',
30 |       'အောက်',
31 |       'နို',
32 |       'ဒီ',
33 |     ],
34 |     longhand: [
35 |       'ဇန်နဝါရီ',
36 |       'ဖေဖော်ဝါရီ',
37 |       'မတ်',
38 |       'ဧပြီ',
39 |       'မေ',
40 |       'ဇွန်',
41 |       'ဇူလိုင်',
42 |       'သြဂုတ်',
43 |       'စက်တင်ဘာ',
44 |       'အောက်တိုဘာ',
45 |       'နိုဝင်ဘာ',
46 |       'ဒီဇင်ဘာ',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 | 
52 |   ordinal: () => {
53 |     return '';
54 |   },
55 |   time_24hr: true,
56 | };
57 | 
58 | fp.l10ns.my = Burmese;
59 | 
60 | export default fp.l10ns;
61 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/nl.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Dutch locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Dutch: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
16 |     longhand: ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'jan',
22 |       'feb',
23 |       'mrt',
24 |       'apr',
25 |       'mei',
26 |       'jun',
27 |       'jul',
28 |       'aug',
29 |       'sept',
30 |       'okt',
31 |       'nov',
32 |       'dec',
33 |     ],
34 |     longhand: [
35 |       'januari',
36 |       'februari',
37 |       'maart',
38 |       'april',
39 |       'mei',
40 |       'juni',
41 |       'juli',
42 |       'augustus',
43 |       'september',
44 |       'oktober',
45 |       'november',
46 |       'december',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 |   weekAbbreviation: 'wk',
52 |   rangeSeparator: ' t/m ',
53 |   scrollTitle: 'Scroll voor volgende / vorige',
54 |   toggleTitle: 'Klik om te wisselen',
55 |   time_24hr: true,
56 | 
57 |   ordinal: (nth) => {
58 |     if (nth === 1 || nth === 8 || nth >= 20) return 'ste';
59 | 
60 |     return 'de';
61 |   },
62 | };
63 | 
64 | fp.l10ns.nl = Dutch;
65 | 
66 | export default fp.l10ns;
67 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/nn.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Norwegian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const NorwegianNynorsk: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Sø.', 'Må.', 'Ty.', 'On.', 'To.', 'Fr.', 'La.'],
16 |     longhand: ['Søndag', 'Måndag', 'Tysdag', 'Onsdag', 'Torsdag', 'Fredag', 'Laurdag'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'Jan',
22 |       'Feb',
23 |       'Mars',
24 |       'Apr',
25 |       'Mai',
26 |       'Juni',
27 |       'Juli',
28 |       'Aug',
29 |       'Sep',
30 |       'Okt',
31 |       'Nov',
32 |       'Des',
33 |     ],
34 |     longhand: [
35 |       'Januar',
36 |       'Februar',
37 |       'Mars',
38 |       'April',
39 |       'Mai',
40 |       'Juni',
41 |       'Juli',
42 |       'August',
43 |       'September',
44 |       'Oktober',
45 |       'November',
46 |       'Desember',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 |   rangeSeparator: ' til ',
52 |   weekAbbreviation: 'Veke',
53 |   scrollTitle: 'Scroll for å endre',
54 |   toggleTitle: 'Klikk for å veksle',
55 |   time_24hr: true,
56 | 
57 |   ordinal: () => {
58 |     return '.';
59 |   },
60 | };
61 | 
62 | fp.l10ns.nn = NorwegianNynorsk;
63 | 
64 | export default fp.l10ns;
65 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/no.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Norwegian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Norwegian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Søn', 'Man', 'Tir', 'Ons', 'Tor', 'Fre', 'Lør'],
16 |     longhand: ['Søndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
21 |     longhand: [
22 |       'Januar',
23 |       'Februar',
24 |       'Mars',
25 |       'April',
26 |       'Mai',
27 |       'Juni',
28 |       'Juli',
29 |       'August',
30 |       'September',
31 |       'Oktober',
32 |       'November',
33 |       'Desember',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   rangeSeparator: ' til ',
39 |   weekAbbreviation: 'Uke',
40 |   scrollTitle: 'Scroll for å endre',
41 |   toggleTitle: 'Klikk for å veksle',
42 |   time_24hr: true,
43 | 
44 |   ordinal: () => {
45 |     return '.';
46 |   },
47 | };
48 | 
49 | fp.l10ns.no = Norwegian;
50 | 
51 | export default fp.l10ns;
52 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/pa.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Punjabi locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Punjabi: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['ਐਤ', 'ਸੋਮ', 'ਮੰਗਲ', 'ਬੁੱਧ', 'ਵੀਰ', 'ਸ਼ੁੱਕਰ', 'ਸ਼ਨਿੱਚਰ'],
16 |     longhand: ['ਐਤਵਾਰ', 'ਸੋਮਵਾਰ', 'ਮੰਗਲਵਾਰ', 'ਬੁੱਧਵਾਰ', 'ਵੀਰਵਾਰ', 'ਸ਼ੁੱਕਰਵਾਰ', 'ਸ਼ਨਿੱਚਰਵਾਰ'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['ਜਨ', 'ਫ਼ਰ', 'ਮਾਰ', 'ਅਪ੍ਰੈ', 'ਮਈ', 'ਜੂਨ', 'ਜੁਲਾ', 'ਅਗ', 'ਸਤੰ', 'ਅਕ', 'ਨਵੰ', 'ਦਸੰ'],
21 |     longhand: [
22 |       'ਜਨਵਰੀ',
23 |       'ਫ਼ਰਵਰੀ',
24 |       'ਮਾਰਚ',
25 |       'ਅਪ੍ਰੈਲ',
26 |       'ਮਈ',
27 |       'ਜੂਨ',
28 |       'ਜੁਲਾਈ',
29 |       'ਅਗਸਤ',
30 |       'ਸਤੰਬਰ',
31 |       'ਅਕਤੂਬਰ',
32 |       'ਨਵੰਬਰ',
33 |       'ਦਸੰਬਰ',
34 |     ],
35 |   },
36 |   time_24hr: true,
37 | };
38 | 
39 | fp.l10ns.pa = Punjabi;
40 | 
41 | export default fp.l10ns;
42 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/pl.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Polish locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Polish: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Nd', 'Pn', 'Wt', 'Śr', 'Cz', 'Pt', 'So'],
16 |     longhand: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Paź', 'Lis', 'Gru'],
21 |     longhand: [
22 |       'Styczeń',
23 |       'Luty',
24 |       'Marzec',
25 |       'Kwiecień',
26 |       'Maj',
27 |       'Czerwiec',
28 |       'Lipiec',
29 |       'Sierpień',
30 |       'Wrzesień',
31 |       'Październik',
32 |       'Listopad',
33 |       'Grudzień',
34 |     ],
35 |   },
36 |   rangeSeparator: ' do ',
37 |   weekAbbreviation: 'tydz.',
38 |   scrollTitle: 'Przewiń, aby zwiększyć',
39 |   toggleTitle: 'Kliknij, aby przełączyć',
40 |   firstDayOfWeek: 1,
41 |   time_24hr: true,
42 | 
43 |   ordinal: () => {
44 |     return '.';
45 |   },
46 | };
47 | 
48 | fp.l10ns.pl = Polish;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/pt.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Portuguese locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Portuguese: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
16 |     longhand: [
17 |       'Domingo',
18 |       'Segunda-feira',
19 |       'Terça-feira',
20 |       'Quarta-feira',
21 |       'Quinta-feira',
22 |       'Sexta-feira',
23 |       'Sábado',
24 |     ],
25 |   },
26 | 
27 |   months: {
28 |     shorthand: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
29 |     longhand: [
30 |       'Janeiro',
31 |       'Fevereiro',
32 |       'Março',
33 |       'Abril',
34 |       'Maio',
35 |       'Junho',
36 |       'Julho',
37 |       'Agosto',
38 |       'Setembro',
39 |       'Outubro',
40 |       'Novembro',
41 |       'Dezembro',
42 |     ],
43 |   },
44 | 
45 |   rangeSeparator: ' até ',
46 |   time_24hr: true,
47 | };
48 | 
49 | fp.l10ns.pt = Portuguese;
50 | 
51 | export default fp.l10ns;
52 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ro.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Romanian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Romanian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Dum', 'Lun', 'Mar', 'Mie', 'Joi', 'Vin', 'Sâm'],
16 |     longhand: ['Duminică', 'Luni', 'Marți', 'Miercuri', 'Joi', 'Vineri', 'Sâmbătă'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Ian', 'Feb', 'Mar', 'Apr', 'Mai', 'Iun', 'Iul', 'Aug', 'Sep', 'Oct', 'Noi', 'Dec'],
21 |     longhand: [
22 |       'Ianuarie',
23 |       'Februarie',
24 |       'Martie',
25 |       'Aprilie',
26 |       'Mai',
27 |       'Iunie',
28 |       'Iulie',
29 |       'August',
30 |       'Septembrie',
31 |       'Octombrie',
32 |       'Noiembrie',
33 |       'Decembrie',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   time_24hr: true,
39 | 
40 |   ordinal: () => {
41 |     return '';
42 |   },
43 | };
44 | 
45 | fp.l10ns.ro = Romanian;
46 | 
47 | export default fp.l10ns;
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/ru.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Russian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Russian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
16 |     longhand: ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'],
17 |   },
18 |   months: {
19 |     shorthand: [
20 |       'Янв',
21 |       'Фев',
22 |       'Март',
23 |       'Апр',
24 |       'Май',
25 |       'Июнь',
26 |       'Июль',
27 |       'Авг',
28 |       'Сен',
29 |       'Окт',
30 |       'Ноя',
31 |       'Дек',
32 |     ],
33 |     longhand: [
34 |       'Январь',
35 |       'Февраль',
36 |       'Март',
37 |       'Апрель',
38 |       'Май',
39 |       'Июнь',
40 |       'Июль',
41 |       'Август',
42 |       'Сентябрь',
43 |       'Октябрь',
44 |       'Ноябрь',
45 |       'Декабрь',
46 |     ],
47 |   },
48 |   firstDayOfWeek: 1,
49 |   ordinal: function () {
50 |     return '';
51 |   },
52 |   rangeSeparator: ' — ',
53 |   weekAbbreviation: 'Нед.',
54 |   scrollTitle: 'Прокрутите для увеличения',
55 |   toggleTitle: 'Нажмите для переключения',
56 |   amPM: ['ДП', 'ПП'],
57 |   yearAriaLabel: 'Год',
58 |   time_24hr: true,
59 | };
60 | 
61 | fp.l10ns.ru = Russian;
62 | 
63 | export default fp.l10ns;
64 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/si.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Sinhala locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Sinhala: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['ඉ', 'ස', 'අ', 'බ', 'බ්‍ර', 'සි', 'සෙ'],
16 |     longhand: ['ඉරිදා', 'සඳුදා', 'අඟහරුවාදා', 'බදාදා', 'බ්‍රහස්පතින්දා', 'සිකුරාදා', 'සෙනසුරාදා'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'ජන',
22 |       'පෙබ',
23 |       'මාර්',
24 |       'අප්‍රේ',
25 |       'මැයි',
26 |       'ජුනි',
27 |       'ජූලි',
28 |       'අගෝ',
29 |       'සැප්',
30 |       'ඔක්',
31 |       'නොවැ',
32 |       'දෙසැ',
33 |     ],
34 |     longhand: [
35 |       'ජනවාරි',
36 |       'පෙබරවාරි',
37 |       'මාර්තු',
38 |       'අප්‍රේල්',
39 |       'මැයි',
40 |       'ජුනි',
41 |       'ජූලි',
42 |       'අගෝස්තු',
43 |       'සැප්තැම්බර්',
44 |       'ඔක්තෝබර්',
45 |       'නොවැම්බර්',
46 |       'දෙසැම්බර්',
47 |     ],
48 |   },
49 |   time_24hr: true,
50 | };
51 | 
52 | fp.l10ns.si = Sinhala;
53 | 
54 | export default fp.l10ns;
55 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/sk.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Slovak locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Slovak: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Ned', 'Pon', 'Ut', 'Str', 'Štv', 'Pia', 'Sob'],
16 |     longhand: ['Nedeľa', 'Pondelok', 'Utorok', 'Streda', 'Štvrtok', 'Piatok', 'Sobota'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Máj', 'Jún', 'Júl', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
21 |     longhand: [
22 |       'Január',
23 |       'Február',
24 |       'Marec',
25 |       'Apríl',
26 |       'Máj',
27 |       'Jún',
28 |       'Júl',
29 |       'August',
30 |       'September',
31 |       'Október',
32 |       'November',
33 |       'December',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   rangeSeparator: ' do ',
39 |   time_24hr: true,
40 |   ordinal: function () {
41 |     return '.';
42 |   },
43 | };
44 | 
45 | fp.l10ns.sk = Slovak;
46 | 
47 | export default fp.l10ns;
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/sl.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Slovenian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Slovenian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Ned', 'Pon', 'Tor', 'Sre', 'Čet', 'Pet', 'Sob'],
16 |     longhand: ['Nedelja', 'Ponedeljek', 'Torek', 'Sreda', 'Četrtek', 'Petek', 'Sobota'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'],
21 |     longhand: [
22 |       'Januar',
23 |       'Februar',
24 |       'Marec',
25 |       'April',
26 |       'Maj',
27 |       'Junij',
28 |       'Julij',
29 |       'Avgust',
30 |       'September',
31 |       'Oktober',
32 |       'November',
33 |       'December',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   rangeSeparator: ' do ',
39 |   time_24hr: true,
40 |   ordinal: function () {
41 |     return '.';
42 |   },
43 | };
44 | 
45 | fp.l10ns.sl = Slovenian;
46 | 
47 | export default fp.l10ns;
48 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/sq.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Albanian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Albanian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Di', 'Hë', 'Ma', 'Më', 'En', 'Pr', 'Sh'],
16 |     longhand: ['E Diel', 'E Hënë', 'E Martë', 'E Mërkurë', 'E Enjte', 'E Premte', 'E Shtunë'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Shk', 'Mar', 'Pri', 'Maj', 'Qer', 'Kor', 'Gus', 'Sht', 'Tet', 'Nën', 'Dhj'],
21 |     longhand: [
22 |       'Janar',
23 |       'Shkurt',
24 |       'Mars',
25 |       'Prill',
26 |       'Maj',
27 |       'Qershor',
28 |       'Korrik',
29 |       'Gusht',
30 |       'Shtator',
31 |       'Tetor',
32 |       'Nëntor',
33 |       'Dhjetor',
34 |     ],
35 |   },
36 |   firstDayOfWeek: 1,
37 |   rangeSeparator: ' deri ',
38 |   weekAbbreviation: 'Java',
39 |   yearAriaLabel: 'Viti',
40 |   monthAriaLabel: 'Muaji',
41 |   hourAriaLabel: 'Ora',
42 |   minuteAriaLabel: 'Minuta',
43 |   time_24hr: true,
44 | };
45 | 
46 | fp.l10ns.sq = Albanian;
47 | 
48 | export default fp.l10ns;
49 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/sr-cyr.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Serbian Cyrillic locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const SerbianCyrillic: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Нед', 'Пон', 'Уто', 'Сре', 'Чет', 'Пет', 'Суб'],
16 |     longhand: ['Недеља', 'Понедељак', 'Уторак', 'Среда', 'Четвртак', 'Петак', 'Субота'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Јан', 'Феб', 'Мар', 'Апр', 'Мај', 'Јун', 'Јул', 'Авг', 'Сеп', 'Окт', 'Нов', 'Дец'],
21 |     longhand: [
22 |       'Јануар',
23 |       'Фебруар',
24 |       'Март',
25 |       'Април',
26 |       'Мај',
27 |       'Јун',
28 |       'Јул',
29 |       'Август',
30 |       'Септембар',
31 |       'Октобар',
32 |       'Новембар',
33 |       'Децембар',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   weekAbbreviation: 'Нед.',
39 |   rangeSeparator: ' до ',
40 | };
41 | 
42 | fp.l10ns.sr = SerbianCyrillic;
43 | 
44 | export default fp.l10ns;
45 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/sr.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Serbian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Serbian: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Ned', 'Pon', 'Uto', 'Sre', 'Čet', 'Pet', 'Sub'],
16 |     longhand: ['Nedelja', 'Ponedeljak', 'Utorak', 'Sreda', 'Četvrtak', 'Petak', 'Subota'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Avg', 'Sep', 'Okt', 'Nov', 'Dec'],
21 |     longhand: [
22 |       'Januar',
23 |       'Februar',
24 |       'Mart',
25 |       'April',
26 |       'Maj',
27 |       'Jun',
28 |       'Jul',
29 |       'Avgust',
30 |       'Septembar',
31 |       'Oktobar',
32 |       'Novembar',
33 |       'Decembar',
34 |     ],
35 |   },
36 | 
37 |   firstDayOfWeek: 1,
38 |   weekAbbreviation: 'Ned.',
39 |   rangeSeparator: ' do ',
40 |   time_24hr: true,
41 | };
42 | 
43 | fp.l10ns.sr = Serbian;
44 | 
45 | export default fp.l10ns;
46 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/sv.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Swedish locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Swedish: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 |   weekAbbreviation: 'v',
16 | 
17 |   weekdays: {
18 |     shorthand: ['sön', 'mån', 'tis', 'ons', 'tor', 'fre', 'lör'],
19 |     longhand: ['söndag', 'måndag', 'tisdag', 'onsdag', 'torsdag', 'fredag', 'lördag'],
20 |   },
21 | 
22 |   months: {
23 |     shorthand: ['jan', 'feb', 'mar', 'apr', 'maj', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'],
24 |     longhand: [
25 |       'januari',
26 |       'februari',
27 |       'mars',
28 |       'april',
29 |       'maj',
30 |       'juni',
31 |       'juli',
32 |       'augusti',
33 |       'september',
34 |       'oktober',
35 |       'november',
36 |       'december',
37 |     ],
38 |   },
39 |   rangeSeparator: ' till ',
40 |   time_24hr: true,
41 | 
42 |   ordinal: () => {
43 |     return '.';
44 |   },
45 | };
46 | 
47 | fp.l10ns.sv = Swedish;
48 | 
49 | export default fp.l10ns;
50 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/th.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Thai locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Thai: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['อา', 'จ', 'อ', 'พ', 'พฤ', 'ศ', 'ส'],
16 |     longhand: ['อาทิตย์', 'จันทร์', 'อังคาร', 'พุธ', 'พฤหัสบดี', 'ศุกร์', 'เสาร์'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'ม.ค.',
22 |       'ก.พ.',
23 |       'มี.ค.',
24 |       'เม.ย.',
25 |       'พ.ค.',
26 |       'มิ.ย.',
27 |       'ก.ค.',
28 |       'ส.ค.',
29 |       'ก.ย.',
30 |       'ต.ค.',
31 |       'พ.ย.',
32 |       'ธ.ค.',
33 |     ],
34 |     longhand: [
35 |       'มกราคม',
36 |       'กุมภาพันธ์',
37 |       'มีนาคม',
38 |       'เมษายน',
39 |       'พฤษภาคม',
40 |       'มิถุนายน',
41 |       'กรกฎาคม',
42 |       'สิงหาคม',
43 |       'กันยายน',
44 |       'ตุลาคม',
45 |       'พฤศจิกายน',
46 |       'ธันวาคม',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 |   rangeSeparator: ' ถึง ',
52 |   scrollTitle: 'เลื่อนเพื่อเพิ่มหรือลด',
53 |   toggleTitle: 'คลิกเพื่อเปลี่ยน',
54 |   time_24hr: true,
55 | 
56 |   ordinal: () => {
57 |     return '';
58 |   },
59 | };
60 | 
61 | fp.l10ns.th = Thai;
62 | 
63 | export default fp.l10ns;
64 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/tr.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Turkish locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Turkish: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt'],
16 |     longhand: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
21 |     longhand: [
22 |       'Ocak',
23 |       'Şubat',
24 |       'Mart',
25 |       'Nisan',
26 |       'Mayıs',
27 |       'Haziran',
28 |       'Temmuz',
29 |       'Ağustos',
30 |       'Eylül',
31 |       'Ekim',
32 |       'Kasım',
33 |       'Aralık',
34 |     ],
35 |   },
36 |   firstDayOfWeek: 1,
37 |   ordinal: () => {
38 |     return '.';
39 |   },
40 |   rangeSeparator: ' - ',
41 |   weekAbbreviation: 'Hf',
42 |   scrollTitle: 'Artırmak için kaydırın',
43 |   toggleTitle: 'Aç/Kapa',
44 |   amPM: ['ÖÖ', 'ÖS'],
45 |   time_24hr: true,
46 | };
47 | 
48 | fp.l10ns.tr = Turkish;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/uk.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Ukrainian locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Ukrainian: CustomLocale = {
14 |   firstDayOfWeek: 1,
15 | 
16 |   weekdays: {
17 |     shorthand: ['Нд', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'],
18 |     longhand: ['Неділя', 'Понеділок', 'Вівторок', 'Середа', 'Четвер', "П'ятниця", 'Субота'],
19 |   },
20 | 
21 |   months: {
22 |     shorthand: ['Січ', 'Лют', 'Бер', 'Кві', 'Тра', 'Чер', 'Лип', 'Сер', 'Вер', 'Жов', 'Лис', 'Гру'],
23 |     longhand: [
24 |       'Січень',
25 |       'Лютий',
26 |       'Березень',
27 |       'Квітень',
28 |       'Травень',
29 |       'Червень',
30 |       'Липень',
31 |       'Серпень',
32 |       'Вересень',
33 |       'Жовтень',
34 |       'Листопад',
35 |       'Грудень',
36 |     ],
37 |   },
38 |   time_24hr: true,
39 | };
40 | 
41 | fp.l10ns.uk = Ukrainian;
42 | 
43 | export default fp.l10ns;
44 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/uz.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Uzbek locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Uzbek: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Якш', 'Душ', 'Сеш', 'Чор', 'Пай', 'Жум', 'Шан'],
16 |     longhand: ['Якшанба', 'Душанба', 'Сешанба', 'Чоршанба', 'Пайшанба', 'Жума', 'Шанба'],
17 |   },
18 |   months: {
19 |     shorthand: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
20 |     longhand: [
21 |       'Январ',
22 |       'Феврал',
23 |       'Март',
24 |       'Апрел',
25 |       'Май',
26 |       'Июн',
27 |       'Июл',
28 |       'Август',
29 |       'Сентябр',
30 |       'Октябр',
31 |       'Ноябр',
32 |       'Декабр',
33 |     ],
34 |   },
35 |   firstDayOfWeek: 1,
36 |   ordinal: function () {
37 |     return '';
38 |   },
39 |   rangeSeparator: ' — ',
40 |   weekAbbreviation: 'Ҳафта',
41 |   scrollTitle: 'Катталаштириш учун айлантиринг',
42 |   toggleTitle: 'Ўтиш учун босинг',
43 |   amPM: ['AM', 'PM'],
44 |   yearAriaLabel: 'Йил',
45 |   time_24hr: true,
46 | };
47 | 
48 | fp.l10ns.uz = Uzbek;
49 | 
50 | export default fp.l10ns;
51 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/uz_latn.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Uzbek locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const UzbekLatin: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['Ya', 'Du', 'Se', 'Cho', 'Pa', 'Ju', 'Sha'],
16 |     longhand: ['Yakshanba', 'Dushanba', 'Seshanba', 'Chorshanba', 'Payshanba', 'Juma', 'Shanba'],
17 |   },
18 |   months: {
19 |     shorthand: [
20 |       'Yan',
21 |       'Fev',
22 |       'Mar',
23 |       'Apr',
24 |       'May',
25 |       'Iyun',
26 |       'Iyul',
27 |       'Avg',
28 |       'Sen',
29 |       'Okt',
30 |       'Noy',
31 |       'Dek',
32 |     ],
33 |     longhand: [
34 |       'Yanvar',
35 |       'Fevral',
36 |       'Mart',
37 |       'Aprel',
38 |       'May',
39 |       'Iyun',
40 |       'Iyul',
41 |       'Avgust',
42 |       'Sentabr',
43 |       'Oktabr',
44 |       'Noyabr',
45 |       'Dekabr',
46 |     ],
47 |   },
48 |   firstDayOfWeek: 1,
49 |   ordinal: function () {
50 |     return '';
51 |   },
52 |   rangeSeparator: ' — ',
53 |   weekAbbreviation: 'Hafta',
54 |   scrollTitle: 'Kattalashtirish uchun aylantiring',
55 |   toggleTitle: 'O‘tish uchun bosing',
56 |   amPM: ['AM', 'PM'],
57 |   yearAriaLabel: 'Yil',
58 |   time_24hr: true,
59 | };
60 | 
61 | fp.l10ns['uz_latn'] = UzbekLatin;
62 | 
63 | export default fp.l10ns;
64 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/vn.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Vietnamese locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Vietnamese: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
16 |     longhand: ['Chủ nhật', 'Thứ hai', 'Thứ ba', 'Thứ tư', 'Thứ năm', 'Thứ sáu', 'Thứ bảy'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       'Th1',
22 |       'Th2',
23 |       'Th3',
24 |       'Th4',
25 |       'Th5',
26 |       'Th6',
27 |       'Th7',
28 |       'Th8',
29 |       'Th9',
30 |       'Th10',
31 |       'Th11',
32 |       'Th12',
33 |     ],
34 |     longhand: [
35 |       'Tháng một',
36 |       'Tháng hai',
37 |       'Tháng ba',
38 |       'Tháng tư',
39 |       'Tháng năm',
40 |       'Tháng sáu',
41 |       'Tháng bảy',
42 |       'Tháng tám',
43 |       'Tháng chín',
44 |       'Tháng mười',
45 |       'Tháng mười một',
46 |       'Tháng mười hai',
47 |     ],
48 |   },
49 | 
50 |   firstDayOfWeek: 1,
51 |   rangeSeparator: ' đến ',
52 | };
53 | 
54 | fp.l10ns.vn = Vietnamese;
55 | 
56 | export default fp.l10ns;
57 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/zh-tw.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Mandarin locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | export const MandarinTraditional: CustomLocale = {
13 |   weekdays: {
14 |     shorthand: ['週日', '週一', '週二', '週三', '週四', '週五', '週六'],
15 |     longhand: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
16 |   },
17 |   months: {
18 |     shorthand: [
19 |       '一月',
20 |       '二月',
21 |       '三月',
22 |       '四月',
23 |       '五月',
24 |       '六月',
25 |       '七月',
26 |       '八月',
27 |       '九月',
28 |       '十月',
29 |       '十一月',
30 |       '十二月',
31 |     ],
32 |     longhand: [
33 |       '一月',
34 |       '二月',
35 |       '三月',
36 |       '四月',
37 |       '五月',
38 |       '六月',
39 |       '七月',
40 |       '八月',
41 |       '九月',
42 |       '十月',
43 |       '十一月',
44 |       '十二月',
45 |     ],
46 |   },
47 |   rangeSeparator: ' 至 ',
48 |   weekAbbreviation: '週',
49 |   scrollTitle: '滾動切換',
50 |   toggleTitle: '點擊切換 12/24 小時時制',
51 | };
52 | fp.l10ns.zh_tw = MandarinTraditional;
53 | export default fp.l10ns;
54 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/l10n/zh.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from '../types/instance';
 2 | 
 3 | /* Mandarin locals for flatpickr */
 4 | import { CustomLocale } from '../types/locale';
 5 | 
 6 | const fp =
 7 |   typeof window !== 'undefined' && (window as any).flatpickr !== undefined
 8 |     ? (window as any).flatpickr
 9 |     : ({
10 |         l10ns: {},
11 |       } as FlatpickrFn);
12 | 
13 | export const Mandarin: CustomLocale = {
14 |   weekdays: {
15 |     shorthand: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
16 |     longhand: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
17 |   },
18 | 
19 |   months: {
20 |     shorthand: [
21 |       '一月',
22 |       '二月',
23 |       '三月',
24 |       '四月',
25 |       '五月',
26 |       '六月',
27 |       '七月',
28 |       '八月',
29 |       '九月',
30 |       '十月',
31 |       '十一月',
32 |       '十二月',
33 |     ],
34 |     longhand: [
35 |       '一月',
36 |       '二月',
37 |       '三月',
38 |       '四月',
39 |       '五月',
40 |       '六月',
41 |       '七月',
42 |       '八月',
43 |       '九月',
44 |       '十月',
45 |       '十一月',
46 |       '十二月',
47 |     ],
48 |   },
49 | 
50 |   rangeSeparator: ' 至 ',
51 |   weekAbbreviation: '周',
52 |   scrollTitle: '滚动切换',
53 |   toggleTitle: '点击切换 12/24 小时时制',
54 | };
55 | 
56 | fp.l10ns.zh = Mandarin;
57 | 
58 | export default fp.l10ns;
59 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/confirmDate/confirmDate.css:
--------------------------------------------------------------------------------
 1 | .flatpickr-confirm {
 2 | 	height: 40px;
 3 | 	max-height: 0px;
 4 | 	visibility: hidden;
 5 | 	display: flex;
 6 | 	justify-content: center;
 7 | 	align-items: center;
 8 | 	cursor: pointer;
 9 | 	background: rgba(0,0,0,0.06)
10 | }
11 | 
12 | .flatpickr-confirm svg path {
13 | 	fill: inherit;
14 | }
15 | 
16 | .flatpickr-confirm.darkTheme {
17 | 	color: white;
18 | 	fill: white;
19 | }
20 | 
21 | .flatpickr-confirm.visible {
22 | 	max-height: 40px;
23 | 	visibility: visible
24 | }
25 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/confirmDate/confirmDate.ts:
--------------------------------------------------------------------------------
 1 | import { Instance } from '../../types/instance';
 2 | import { Plugin } from '../../types/options';
 3 | import { getEventTarget } from '../../utils/dom';
 4 | 
 5 | export interface Config {
 6 |   confirmIcon?: string;
 7 |   confirmText?: string;
 8 |   showAlways?: boolean;
 9 |   theme?: string;
10 | }
11 | 
12 | const defaultConfig: Config = {
13 |   confirmIcon:
14 |     "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='17' height='17' viewBox='0 0 17 17'> <g> </g> <path d='M15.418 1.774l-8.833 13.485-4.918-4.386 0.666-0.746 4.051 3.614 8.198-12.515 0.836 0.548z' fill='#000000' /> </svg>",
15 |   confirmText: 'OK ',
16 |   showAlways: false,
17 |   theme: 'light',
18 | };
19 | 
20 | function confirmDatePlugin(pluginConfig: Config): Plugin {
21 |   const config = { ...defaultConfig, ...pluginConfig };
22 |   let confirmContainer: HTMLDivElement;
23 |   const confirmButtonCSSClass = 'flatpickr-confirm';
24 | 
25 |   return function (fp: Instance) {
26 |     if (fp.config.noCalendar || fp.isMobile) return {};
27 |     return {
28 |       onKeyDown(_: Date[], __: string, ___: Instance, e: KeyboardEvent) {
29 |         const eventTarget = getEventTarget(e);
30 |         const isTargetLastFocusableElement =
31 |           (!fp.config.time_24hr && eventTarget === fp.amPM) ||
32 |           (fp.config.time_24hr &&
33 |             ((fp.config.enableSeconds && eventTarget === fp.secondElement) ||
34 |               (!fp.config.enableSeconds && eventTarget === fp.minuteElement)));
35 |         if (fp.config.enableTime && e.key === 'Tab' && isTargetLastFocusableElement) {
36 |           e.preventDefault();
37 |           confirmContainer.focus();
38 |         } else if (e.key === 'Enter' && eventTarget === confirmContainer) fp.close();
39 |       },
40 | 
41 |       onReady() {
42 |         confirmContainer = fp._createElement<HTMLDivElement>(
43 |           fp.calendarContainer.doc,
44 |           'div',
45 |           `${confirmButtonCSSClass} ${config.showAlways ? 'visible' : ''} ${config.theme}Theme`,
46 |           config.confirmText
47 |         );
48 | 
49 |         confirmContainer.tabIndex = -1;
50 |         confirmContainer.innerHTML += config.confirmIcon;
51 | 
52 |         confirmContainer.addEventListener('click', fp.close);
53 |         fp.calendarContainer.appendChild(confirmContainer);
54 | 
55 |         fp.loadedPlugins.push('confirmDate');
56 |       },
57 |       ...(!config.showAlways
58 |         ? {
59 |             onChange: function (_: Date[], dateStr: string) {
60 |               const showCondition =
61 |                 fp.config.enableTime ||
62 |                 fp.config.mode === 'multiple' ||
63 |                 fp.loadedPlugins.indexOf('monthSelect') !== -1;
64 | 
65 |               const localConfirmContainer = fp.calendarContainer.querySelector(
66 |                 `.${confirmButtonCSSClass}`
67 |               );
68 | 
69 |               if (!localConfirmContainer) return;
70 | 
71 |               if (dateStr && !fp.config.inline && showCondition && localConfirmContainer)
72 |                 return localConfirmContainer.classList.add('visible');
73 | 
74 |               localConfirmContainer.classList.remove('visible');
75 |             },
76 |           }
77 |         : {}),
78 |     };
79 |   };
80 | }
81 | 
82 | export default confirmDatePlugin;
83 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/labelPlugin/labelPlugin.ts:
--------------------------------------------------------------------------------
 1 | import { Plugin } from '../../types/options';
 2 | 
 3 | function labelPlugin(): Plugin {
 4 |   return function (fp) {
 5 |     return {
 6 |       onReady() {
 7 |         const id = fp.input.id;
 8 | 
 9 |         if (!id) {
10 |           return;
11 |         }
12 | 
13 |         if (fp.mobileInput) {
14 |           fp.input.removeAttribute('id');
15 |           fp.mobileInput.id = id;
16 |         } else if (fp.altInput) {
17 |           fp.input.removeAttribute('id');
18 |           fp.altInput.id = id;
19 |         }
20 | 
21 |         fp.loadedPlugins.push('labelPlugin');
22 |       },
23 |     };
24 |   };
25 | }
26 | 
27 | export default labelPlugin;
28 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/minMaxTimePlugin.ts:
--------------------------------------------------------------------------------
  1 | import { Instance } from '../types/instance';
  2 | import { Plugin } from '../types/options';
  3 | import {
  4 |   calculateSecondsSinceMidnight,
  5 |   compareDates,
  6 |   compareTimes,
  7 |   createDateFormatter,
  8 |   parseSeconds,
  9 | } from '../utils/dates';
 10 | 
 11 | export interface MinMaxTime {
 12 |   minTime?: string;
 13 |   maxTime?: string;
 14 | }
 15 | 
 16 | export interface Config {
 17 |   table?: Record<string, MinMaxTime>;
 18 |   getTimeLimits?: (date: Date) => MinMaxTime;
 19 |   tableDateFormat?: string;
 20 | }
 21 | 
 22 | export interface State {
 23 |   formatDate: (date: Date, f: string) => string;
 24 |   tableDateFormat: string;
 25 |   defaults: MinMaxTime;
 26 | }
 27 | 
 28 | function minMaxTimePlugin(config: Config = {}): Plugin {
 29 |   const state: State = {
 30 |     formatDate: createDateFormatter({}),
 31 |     tableDateFormat: config.tableDateFormat || 'Y-m-d',
 32 |     defaults: {
 33 |       minTime: undefined,
 34 |       maxTime: undefined,
 35 |     },
 36 |   };
 37 | 
 38 |   function findDateTimeLimit(date: Date): MinMaxTime | undefined {
 39 |     if (config.table !== undefined) {
 40 |       return config.table[state.formatDate(date, state.tableDateFormat)];
 41 |     }
 42 | 
 43 |     return config.getTimeLimits && config.getTimeLimits(date);
 44 |   }
 45 | 
 46 |   return function (fp) {
 47 |     return {
 48 |       onReady(this: Instance) {
 49 |         state.formatDate = this.formatDate;
 50 |         state.defaults = {
 51 |           minTime: this.config.minTime && state.formatDate(this.config.minTime, 'H:i'),
 52 |           maxTime: this.config.maxTime && state.formatDate(this.config.maxTime, 'H:i'),
 53 |         };
 54 |         fp.loadedPlugins.push('minMaxTime');
 55 |       },
 56 | 
 57 |       onChange(this: Instance) {
 58 |         const latest = this.latestSelectedDateObj;
 59 |         const matchingTimeLimit = latest && findDateTimeLimit(latest);
 60 | 
 61 |         if (latest && matchingTimeLimit !== undefined) {
 62 |           this.set(matchingTimeLimit);
 63 | 
 64 |           (fp.config.minTime as Date).setFullYear(latest.getFullYear());
 65 |           (fp.config.maxTime as Date).setFullYear(latest.getFullYear());
 66 |           (fp.config.minTime as Date).setMonth(latest.getMonth());
 67 |           (fp.config.maxTime as Date).setMonth(latest.getMonth());
 68 |           (fp.config.minTime as Date).setDate(latest.getDate());
 69 |           (fp.config.maxTime as Date).setDate(latest.getDate());
 70 | 
 71 |           if ((fp.config.minTime as Date) > (fp.config.maxTime as Date)) {
 72 |             const minBound = calculateSecondsSinceMidnight(
 73 |               (fp.config.minTime as Date).getHours(),
 74 |               (fp.config.minTime as Date).getMinutes(),
 75 |               (fp.config.minTime as Date).getSeconds()
 76 |             );
 77 |             const maxBound = calculateSecondsSinceMidnight(
 78 |               (fp.config.maxTime as Date).getHours(),
 79 |               (fp.config.maxTime as Date).getMinutes(),
 80 |               (fp.config.maxTime as Date).getSeconds()
 81 |             );
 82 |             const currentTime = calculateSecondsSinceMidnight(
 83 |               latest.getHours(),
 84 |               latest.getMinutes(),
 85 |               latest.getSeconds()
 86 |             );
 87 | 
 88 |             if (currentTime > maxBound && currentTime < minBound) {
 89 |               const result = parseSeconds(minBound);
 90 |               fp.setDate(
 91 |                 new Date(latest.getTime()).setHours(result[0], result[1], result[2]),
 92 |                 false
 93 |               );
 94 |             }
 95 |           } else {
 96 |             if (compareDates(latest, fp.config.maxTime as Date, false) > 0) {
 97 |               fp.setDate(
 98 |                 new Date(latest.getTime()).setHours(
 99 |                   (fp.config.maxTime as Date).getHours(),
100 |                   (fp.config.maxTime as Date).getMinutes(),
101 |                   (fp.config.maxTime as Date).getSeconds(),
102 |                   (fp.config.maxTime as Date).getMilliseconds()
103 |                 ),
104 |                 false
105 |               );
106 |             } else if (compareDates(latest, fp.config.minTime as Date, false) < 0) {
107 |               fp.setDate(
108 |                 new Date(latest.getTime()).setHours(
109 |                   (fp.config.minTime as Date).getHours(),
110 |                   (fp.config.minTime as Date).getMinutes(),
111 |                   (fp.config.minTime as Date).getSeconds(),
112 |                   (fp.config.minTime as Date).getMilliseconds()
113 |                 ),
114 |                 false
115 |               );
116 |             }
117 |           }
118 |         } else {
119 |           const newMinMax = state.defaults || {
120 |             minTime: undefined,
121 |             maxTime: undefined,
122 |           };
123 | 
124 |           this.set(newMinMax);
125 | 
126 |           if (!latest) return;
127 | 
128 |           const { minTime, maxTime } = fp.config;
129 | 
130 |           if (minTime && compareTimes(latest, minTime) < 0) {
131 |             fp.setDate(
132 |               new Date(latest.getTime()).setHours(
133 |                 minTime.getHours(),
134 |                 minTime.getMinutes(),
135 |                 minTime.getSeconds(),
136 |                 minTime.getMilliseconds()
137 |               ),
138 |               false
139 |             );
140 |           } else if (maxTime && compareTimes(latest, maxTime) > 0) {
141 |             fp.setDate(
142 |               new Date(latest.getTime()).setHours(
143 |                 maxTime.getHours(),
144 |                 maxTime.getMinutes(),
145 |                 maxTime.getSeconds(),
146 |                 maxTime.getMilliseconds()
147 |               )
148 |             );
149 |           }
150 |           //
151 |         }
152 |       },
153 |     };
154 |   };
155 | }
156 | 
157 | export default minMaxTimePlugin;
158 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/momentPlugin.ts:
--------------------------------------------------------------------------------
 1 | /* eslint-disable @typescript-eslint/ban-types */
 2 | import { Plugin } from '../types/options';
 3 | import { IncrementEvent } from '../utils';
 4 | import { getEventTarget } from '../utils/dom';
 5 | 
 6 | export interface Config {
 7 |   moment: Function;
 8 | }
 9 | 
10 | function momentPlugin(config: Config): Plugin {
11 |   const moment = config.moment;
12 | 
13 |   return function (fp) {
14 |     function captureIncrement(e: Event) {
15 |       const event = e as IncrementEvent;
16 |       event.stopPropagation();
17 |       const date = moment(fp.selectedDates[0]);
18 | 
19 |       const input = getEventTarget(event) as HTMLInputElement;
20 |       const unit = Array.from(input.classList)
21 |         .filter((name) => name.startsWith('flatpickr-'))
22 |         .map((name) => name.substring(10))[0];
23 |       const step = parseFloat(input.getAttribute('step') as string);
24 | 
25 |       date.add(step * event.delta, unit);
26 |       fp.setDate(date.toDate());
27 |     }
28 | 
29 |     return {
30 |       parseDate: (datestr, format) => {
31 |         return moment(datestr, format, true).toDate();
32 |       },
33 |       formatDate: (date, format) => {
34 |         // locale can also be used
35 |         const momentDate = moment(date);
36 |         if (typeof fp.config.locale === 'string') {
37 |           momentDate.locale(fp.config.locale);
38 |         }
39 |         return momentDate.format(format);
40 |       },
41 |       onReady() {
42 |         [fp.hourElement, fp.minuteElement, fp.secondElement].forEach(
43 |           (element) =>
44 |             element &&
45 |             element.addEventListener('increment', captureIncrement, {
46 |               capture: true,
47 |             })
48 |         );
49 |       },
50 |       onDestroy() {
51 |         [fp.hourElement, fp.minuteElement, fp.secondElement].forEach(
52 |           (element) =>
53 |             element &&
54 |             element.removeEventListener('increment', captureIncrement, {
55 |               capture: true,
56 |             })
57 |         );
58 |       },
59 |     };
60 |   };
61 | }
62 | 
63 | export default momentPlugin;
64 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/monthSelect/index.ts:
--------------------------------------------------------------------------------
  1 | import { DayElement, Instance } from '../../types/instance';
  2 | import { Plugin } from '../../types/options';
  3 | import { clearNode, getEventTarget } from '../../utils/dom';
  4 | import { monthToStr } from '../../utils/formatting';
  5 | 
  6 | export interface Config {
  7 |   shorthand: boolean;
  8 |   dateFormat: string;
  9 |   altFormat: string;
 10 |   theme: string;
 11 |   _stubbedCurrentMonth?: number;
 12 | }
 13 | 
 14 | export interface ElementDate extends Element {
 15 |   dateObj: Date;
 16 | }
 17 | 
 18 | export type MonthElement = HTMLSpanElement & { dateObj: Date; $i: number };
 19 | 
 20 | const defaultConfig: Config = {
 21 |   shorthand: false,
 22 |   dateFormat: 'F Y',
 23 |   altFormat: 'F Y',
 24 |   theme: 'light',
 25 | };
 26 | 
 27 | function monthSelectPlugin(pluginConfig?: Partial<Config>): Plugin {
 28 |   const config = { ...defaultConfig, ...pluginConfig };
 29 | 
 30 |   return (fp: Instance) => {
 31 |     fp.config.dateFormat = config.dateFormat;
 32 |     fp.config.altFormat = config.altFormat;
 33 |     const self = { monthsContainer: null as null | HTMLDivElement };
 34 | 
 35 |     function clearUnnecessaryDOMElements(): void {
 36 |       if (!fp.rContainer) return;
 37 | 
 38 |       clearNode(fp.rContainer);
 39 | 
 40 |       for (let index = 0; index < fp.monthElements.length; index++) {
 41 |         const element = fp.monthElements[index];
 42 |         if (!element.parentNode) continue;
 43 | 
 44 |         element.parentNode.removeChild(element);
 45 |       }
 46 |     }
 47 | 
 48 |     function build() {
 49 |       if (!fp.rContainer) return;
 50 | 
 51 |       self.monthsContainer = fp._createElement<HTMLDivElement>(
 52 |         fp.rContainer.doc,
 53 |         'div',
 54 |         'flatpickr-monthSelect-months'
 55 |       );
 56 | 
 57 |       self.monthsContainer.tabIndex = -1;
 58 | 
 59 |       buildMonths();
 60 | 
 61 |       fp.rContainer.appendChild(self.monthsContainer);
 62 | 
 63 |       fp.calendarContainer.classList.add(`flatpickr-monthSelect-theme-${config.theme}`);
 64 |     }
 65 | 
 66 |     function buildMonths() {
 67 |       if (!self.monthsContainer) return;
 68 | 
 69 |       clearNode(self.monthsContainer);
 70 | 
 71 |       const frag = self.monthsContainer.doc.createDocumentFragment();
 72 | 
 73 |       for (let i = 0; i < 12; i++) {
 74 |         const month = fp.createDay(
 75 |           'flatpickr-monthSelect-month',
 76 |           new Date(fp.currentYear, i),
 77 |           0,
 78 |           i
 79 |         );
 80 |         if (
 81 |           month.dateObj.getMonth() === new Date().getMonth() &&
 82 |           month.dateObj.getFullYear() === new Date().getFullYear()
 83 |         )
 84 |           month.classList.add('today');
 85 |         month.textContent = monthToStr(i, config.shorthand, fp.l10n);
 86 |         month.addEventListener('click', selectMonth);
 87 |         frag.appendChild(month);
 88 |       }
 89 | 
 90 |       self.monthsContainer.appendChild(frag);
 91 |       if (fp.config.minDate && fp.currentYear === fp.config.minDate.getFullYear())
 92 |         fp.prevMonthNav.classList.add('flatpickr-disabled');
 93 |       else fp.prevMonthNav.classList.remove('flatpickr-disabled');
 94 | 
 95 |       if (fp.config.maxDate && fp.currentYear === fp.config.maxDate.getFullYear())
 96 |         fp.nextMonthNav.classList.add('flatpickr-disabled');
 97 |       else fp.nextMonthNav.classList.remove('flatpickr-disabled');
 98 |     }
 99 | 
100 |     function bindEvents() {
101 |       fp._bind(fp.prevMonthNav, 'click', (e) => {
102 |         e.preventDefault();
103 |         e.stopPropagation();
104 | 
105 |         fp.changeYear(fp.currentYear - 1);
106 |         selectYear();
107 |         buildMonths();
108 |       });
109 | 
110 |       fp._bind(fp.nextMonthNav, 'click', (e) => {
111 |         e.preventDefault();
112 |         e.stopPropagation();
113 | 
114 |         fp.changeYear(fp.currentYear + 1);
115 |         selectYear();
116 |         buildMonths();
117 |       });
118 | 
119 |       fp._bind(self.monthsContainer as HTMLElement, 'mouseover', (e: MouseEvent) => {
120 |         if (fp.config.mode === 'range')
121 |           fp.onMouseOver(getEventTarget(e) as DayElement, 'flatpickr-monthSelect-month');
122 |       });
123 |     }
124 | 
125 |     function setCurrentlySelected() {
126 |       if (!fp.rContainer) return;
127 |       if (!fp.selectedDates.length) return;
128 | 
129 |       const currentlySelected = fp.rContainer.querySelectorAll(
130 |         '.flatpickr-monthSelect-month.selected'
131 |       );
132 | 
133 |       for (let index = 0; index < currentlySelected.length; index++) {
134 |         currentlySelected[index].classList.remove('selected');
135 |       }
136 | 
137 |       const targetMonth = fp.selectedDates[0].getMonth();
138 |       const month = fp.rContainer.querySelector(
139 |         `.flatpickr-monthSelect-month:nth-child(${targetMonth + 1})`
140 |       );
141 | 
142 |       if (month) {
143 |         month.classList.add('selected');
144 |       }
145 |     }
146 | 
147 |     function selectYear() {
148 |       let selectedDate = fp.selectedDates[0];
149 |       if (selectedDate) {
150 |         selectedDate = new Date(selectedDate);
151 |         selectedDate.setFullYear(fp.currentYear);
152 |         if (fp.config.minDate && selectedDate < fp.config.minDate) {
153 |           selectedDate = fp.config.minDate;
154 |         }
155 |         if (fp.config.maxDate && selectedDate > fp.config.maxDate) {
156 |           selectedDate = fp.config.maxDate;
157 |         }
158 |         fp.currentYear = selectedDate.getFullYear();
159 |       }
160 | 
161 |       fp.currentYearElement.value = String(fp.currentYear);
162 | 
163 |       if (fp.rContainer) {
164 |         const months: NodeListOf<ElementDate> = fp.rContainer.querySelectorAll(
165 |           '.flatpickr-monthSelect-month'
166 |         );
167 |         months.forEach((month) => {
168 |           month.dateObj.setFullYear(fp.currentYear);
169 |           if (
170 |             (fp.config.minDate && month.dateObj < fp.config.minDate) ||
171 |             (fp.config.maxDate && month.dateObj > fp.config.maxDate)
172 |           ) {
173 |             month.classList.add('flatpickr-disabled');
174 |           } else {
175 |             month.classList.remove('flatpickr-disabled');
176 |           }
177 |         });
178 |       }
179 |       setCurrentlySelected();
180 |     }
181 | 
182 |     function selectMonth(e: Event) {
183 |       e.preventDefault();
184 |       e.stopPropagation();
185 | 
186 |       const eventTarget = getEventTarget(e) as Element;
187 | 
188 |       if (!eventTarget?.classList) return;
189 |       if (eventTarget.classList.contains('flatpickr-disabled')) return;
190 |       if (eventTarget.classList.contains('notAllowed')) return; // necessary??
191 | 
192 |       setMonth((eventTarget as MonthElement).dateObj);
193 | 
194 |       if (fp.config.closeOnSelect) {
195 |         const single = fp.config.mode === 'single';
196 |         const range = fp.config.mode === 'range' && fp.selectedDates.length === 2;
197 | 
198 |         if (single || range) fp.close();
199 |       }
200 |     }
201 | 
202 |     function setMonth(date: Date) {
203 |       const selectedDate = new Date(fp.currentYear, date.getMonth(), date.getDate());
204 |       let selectedDates: Date[] = [];
205 | 
206 |       switch (fp.config.mode) {
207 |         case 'single':
208 |           selectedDates = [selectedDate];
209 |           break;
210 | 
211 |         case 'multiple':
212 |           selectedDates.push(selectedDate);
213 |           break;
214 | 
215 |         case 'range':
216 |           if (fp.selectedDates.length === 2) {
217 |             selectedDates = [selectedDate];
218 |           } else {
219 |             selectedDates = fp.selectedDates.concat([selectedDate]);
220 |             selectedDates.sort((a, b) => a.getTime() - b.getTime());
221 |           }
222 | 
223 |           break;
224 |       }
225 | 
226 |       fp.setDate(selectedDates, true);
227 |       setCurrentlySelected();
228 |     }
229 | 
230 |     const shifts: Record<number, number> = {
231 |       37: -1,
232 |       39: 1,
233 |       40: 3,
234 |       38: -3,
235 |     };
236 | 
237 |     function onKeyDown(_: any, __: any, ___: any, e: KeyboardEvent) {
238 |       const shouldMove = shifts[e.keyCode] !== undefined;
239 |       if (!shouldMove && e.keyCode !== 13) {
240 |         return;
241 |       }
242 | 
243 |       if (!fp.rContainer || !self.monthsContainer) return;
244 | 
245 |       const currentlySelected = fp.rContainer.querySelector(
246 |         '.flatpickr-monthSelect-month.selected'
247 |       ) as HTMLElement;
248 | 
249 |       let index = Array.prototype.indexOf.call(
250 |         self.monthsContainer.children,
251 |         self.monthsContainer.doc.activeElement
252 |       );
253 | 
254 |       if (index === -1) {
255 |         const target = currentlySelected || self.monthsContainer.firstElementChild;
256 |         target.focus();
257 |         index = (target as MonthElement).$i;
258 |       }
259 | 
260 |       if (shouldMove) {
261 |         (
262 |           self.monthsContainer.children[(12 + index + shifts[e.keyCode]) % 12] as HTMLElement
263 |         ).focus();
264 |       } else if (
265 |         e.keyCode === 13 &&
266 |         self.monthsContainer.contains(self.monthsContainer.doc.activeElement)
267 |       ) {
268 |         setMonth((self.monthsContainer.doc.activeElement as MonthElement).dateObj);
269 |       }
270 |     }
271 | 
272 |     function closeHook() {
273 |       if (fp.config?.mode === 'range' && fp.selectedDates.length === 1) fp.clear(false);
274 | 
275 |       if (!fp.selectedDates.length) buildMonths();
276 |     }
277 | 
278 |     // Help the prev/next year nav honor config.minDate (see 3fa5a69)
279 |     function stubCurrentMonth() {
280 |       config._stubbedCurrentMonth = fp._initialDate.getMonth();
281 | 
282 |       fp._initialDate.setMonth(config._stubbedCurrentMonth);
283 |       fp.currentMonth = config._stubbedCurrentMonth;
284 |     }
285 | 
286 |     function unstubCurrentMonth() {
287 |       if (!config._stubbedCurrentMonth) return;
288 | 
289 |       fp._initialDate.setMonth(config._stubbedCurrentMonth);
290 |       fp.currentMonth = config._stubbedCurrentMonth;
291 |       delete config._stubbedCurrentMonth;
292 |     }
293 | 
294 |     function destroyPluginInstance() {
295 |       if (self.monthsContainer !== null) {
296 |         const months = self.monthsContainer.querySelectorAll('.flatpickr-monthSelect-month');
297 | 
298 |         for (let index = 0; index < months.length; index++) {
299 |           months[index].removeEventListener('click', selectMonth);
300 |         }
301 |       }
302 |     }
303 | 
304 |     return {
305 |       onParseConfig() {
306 |         fp.config.enableTime = false;
307 |       },
308 |       onValueUpdate: setCurrentlySelected,
309 |       onKeyDown,
310 |       onReady: [
311 |         stubCurrentMonth,
312 |         clearUnnecessaryDOMElements,
313 |         build,
314 |         bindEvents,
315 |         setCurrentlySelected,
316 |         () => {
317 |           fp.config.onClose.push(closeHook);
318 |           fp.loadedPlugins.push('monthSelect');
319 |         },
320 |       ],
321 |       onDestroy: [
322 |         unstubCurrentMonth,
323 |         destroyPluginInstance,
324 |         () => {
325 |           fp.config.onClose = fp.config.onClose.filter((hook) => hook !== closeHook);
326 |         },
327 |       ],
328 |     };
329 |   };
330 | }
331 | 
332 | export default monthSelectPlugin;
333 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/monthSelect/style.css:
--------------------------------------------------------------------------------
  1 | .flatpickr-monthSelect-months {
  2 |   margin: 10px 1px 3px 1px;
  3 |   flex-wrap: wrap;
  4 | }
  5 | 
  6 | .flatpickr-monthSelect-month {
  7 |   background: none;
  8 |   border: 1px solid transparent;
  9 |   border-radius: 4px;
 10 |   -webkit-box-sizing: border-box;
 11 |   box-sizing: border-box;
 12 |   color: #393939;
 13 |   cursor: pointer;
 14 |   display: inline-block;
 15 |   font-weight: 400;
 16 |   margin: 0.5px;
 17 |   justify-content: center;
 18 |   padding: 10px;
 19 |   position: relative;
 20 |   -webkit-box-pack: center;
 21 |   -webkit-justify-content: center;
 22 |   -ms-flex-pack: center;
 23 |   text-align: center;
 24 |   width: 33%;
 25 | }
 26 | 
 27 | .flatpickr-monthSelect-month.flatpickr-disabled {
 28 | 	color: #eee;
 29 | }
 30 | 
 31 | .flatpickr-monthSelect-month.flatpickr-disabled:hover,
 32 | .flatpickr-monthSelect-month.flatpickr-disabled:focus {
 33 | 	cursor: not-allowed;
 34 | 	background: none !important;
 35 | }
 36 | 
 37 | .flatpickr-monthSelect-theme-dark {
 38 |   background: #3f4458;
 39 | }
 40 | 
 41 | .flatpickr-monthSelect-theme-dark .flatpickr-current-month input.cur-year {
 42 |   color: #fff;
 43 | }
 44 | 
 45 | .flatpickr-monthSelect-theme-dark .flatpickr-months .flatpickr-prev-month,
 46 | .flatpickr-monthSelect-theme-dark .flatpickr-months .flatpickr-next-month {
 47 |   color: #fff;
 48 |   fill: #fff;
 49 | }
 50 | 
 51 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month {
 52 |   color: rgba(255, 255, 255, 0.95);
 53 | }
 54 | 
 55 | .flatpickr-monthSelect-month.today {
 56 |   border-color: #959ea9;
 57 | }
 58 | 
 59 | .flatpickr-monthSelect-month.inRange,
 60 | .flatpickr-monthSelect-month.inRange.today,
 61 | .flatpickr-monthSelect-month:hover,
 62 | .flatpickr-monthSelect-month:focus {
 63 |   background: #e6e6e6;
 64 |   cursor: pointer;
 65 |   outline: 0;
 66 |   border-color: #e6e6e6;
 67 | }
 68 | 
 69 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month.inRange,
 70 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month:hover,
 71 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month:focus {
 72 |   background: #646c8c;
 73 |   border-color: #646c8c;
 74 | }
 75 | 
 76 | .flatpickr-monthSelect-month.today:hover,
 77 | .flatpickr-monthSelect-month.today:focus {
 78 |   background: #959ea9;
 79 |   border-color: #959ea9;
 80 |   color: #fff;
 81 | }
 82 | 
 83 | .flatpickr-monthSelect-month.selected,
 84 | .flatpickr-monthSelect-month.startRange,
 85 | .flatpickr-monthSelect-month.endRange {
 86 |   background-color: #569ff7;
 87 |   box-shadow: none;
 88 |   color: #fff;
 89 |   border-color: #569ff7;
 90 | }
 91 | 
 92 | .flatpickr-monthSelect-month.startRange {
 93 |   border-radius: 50px 0 0 50px;
 94 | }
 95 | 
 96 | .flatpickr-monthSelect-month.endRange {
 97 |   border-radius: 0 50px 50px 0;
 98 | }
 99 | 
100 | .flatpickr-monthSelect-month.startRange.endRange {
101 |   border-radius: 50px;
102 | }
103 | 
104 | .flatpickr-monthSelect-month.inRange {
105 |   border-radius: 0;
106 |   box-shadow: -5px 0 0 #e6e6e6, 5px 0 0 #e6e6e6;
107 | }
108 | 
109 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month.selected,
110 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month.startRange,
111 | .flatpickr-monthSelect-theme-dark .flatpickr-monthSelect-month.endRange {
112 |   background: #80cbc4;
113 |   -webkit-box-shadow: none;
114 |   box-shadow: none;
115 |   color: #fff;
116 |   border-color: #80cbc4;
117 | }
118 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/rangePlugin.ts:
--------------------------------------------------------------------------------
  1 | import 'obsidian';
  2 | 
  3 | import { Plugin } from '../types/options';
  4 | 
  5 | export interface Config {
  6 |   input?: string | HTMLInputElement;
  7 |   position?: 'left';
  8 |   win?: Window;
  9 | }
 10 | 
 11 | declare global {
 12 |   interface Window {
 13 |     rangePlugin: (config?: Config) => void;
 14 |   }
 15 | }
 16 | 
 17 | function rangePlugin(config: Config = {}): Plugin {
 18 |   return function (fp) {
 19 |     let dateFormat = '',
 20 |       secondInput: HTMLInputElement,
 21 |       _secondInputFocused: boolean,
 22 |       _prevDates: Date[];
 23 | 
 24 |     const win = config.win || activeWindow;
 25 | 
 26 |     const createSecondInput = () => {
 27 |       if (config.input) {
 28 |         secondInput =
 29 |           typeof config.input === 'string'
 30 |             ? (win.document.querySelector(config.input) as HTMLInputElement)
 31 |             : config.input;
 32 | 
 33 |         if (!secondInput) {
 34 |           fp.config.errorHandler(new Error('Invalid input element specified'));
 35 |           return;
 36 |         }
 37 | 
 38 |         if (fp.config.wrap) {
 39 |           secondInput = secondInput.querySelector('[data-input]') as HTMLInputElement;
 40 |         }
 41 |       } else {
 42 |         secondInput = fp._input.cloneNode() as HTMLInputElement;
 43 |         secondInput.removeAttribute('id');
 44 |         (secondInput as any)._flatpickr = undefined;
 45 |       }
 46 | 
 47 |       if (secondInput.value) {
 48 |         const parsedDate = fp.parseDate(secondInput.value);
 49 | 
 50 |         if (parsedDate) fp.selectedDates.push(parsedDate);
 51 |       }
 52 | 
 53 |       secondInput.setAttribute('data-fp-omit', '');
 54 | 
 55 |       if (fp.config.clickOpens) {
 56 |         fp._bind(secondInput, ['focus', 'click'], () => {
 57 |           if (fp.selectedDates[1]) {
 58 |             fp.latestSelectedDateObj = fp.selectedDates[1];
 59 |             fp._setHoursFromDate(fp.selectedDates[1]);
 60 |             fp.jumpToDate(fp.selectedDates[1]);
 61 |           }
 62 | 
 63 |           _secondInputFocused = true;
 64 |           fp.isOpen = false;
 65 |           fp.open(undefined, config.position === 'left' ? fp._input : secondInput);
 66 |         });
 67 | 
 68 |         fp._bind(fp._input, ['focus', 'click'], (e: FocusEvent) => {
 69 |           e.preventDefault();
 70 |           fp.isOpen = false;
 71 |           fp.open();
 72 |         });
 73 |       }
 74 | 
 75 |       if (fp.config.allowInput)
 76 |         fp._bind(secondInput, 'keydown', (e: KeyboardEvent) => {
 77 |           if ((e as KeyboardEvent).key === 'Enter') {
 78 |             fp.setDate([fp.selectedDates[0], secondInput.value], true, dateFormat);
 79 |             secondInput.click();
 80 |           }
 81 |         });
 82 | 
 83 |       if (!config.input)
 84 |         fp._input.parentNode &&
 85 |           fp._input.parentNode.insertBefore(secondInput, fp._input.nextSibling);
 86 |     };
 87 | 
 88 |     const plugin = {
 89 |       onParseConfig() {
 90 |         fp.config.mode = 'range';
 91 | 
 92 |         dateFormat = fp.config.altInput ? fp.config.altFormat : fp.config.dateFormat;
 93 |       },
 94 | 
 95 |       onReady() {
 96 |         createSecondInput();
 97 |         fp.config.ignoredFocusElements.push(secondInput);
 98 |         if (fp.config.allowInput) {
 99 |           fp._input.removeAttribute('readonly');
100 |           secondInput.removeAttribute('readonly');
101 |         } else {
102 |           secondInput.setAttribute('readonly', 'readonly');
103 |         }
104 | 
105 |         fp._bind(fp._input, 'focus', () => {
106 |           fp.latestSelectedDateObj = fp.selectedDates[0];
107 |           fp._setHoursFromDate(fp.selectedDates[0]);
108 |           _secondInputFocused = false;
109 |           fp.jumpToDate(fp.selectedDates[0]);
110 |         });
111 | 
112 |         if (fp.config.allowInput)
113 |           fp._bind(fp._input, 'keydown', (e: KeyboardEvent) => {
114 |             if ((e as KeyboardEvent).key === 'Enter')
115 |               fp.setDate([fp._input.value, fp.selectedDates[1]], true, dateFormat);
116 |           });
117 | 
118 |         fp.setDate(fp.selectedDates, false);
119 |         plugin.onValueUpdate(fp.selectedDates);
120 |         fp.loadedPlugins.push('range');
121 |       },
122 | 
123 |       onPreCalendarPosition() {
124 |         if (_secondInputFocused) {
125 |           fp._positionElement = secondInput;
126 |           win.setTimeout(() => {
127 |             fp._positionElement = fp._input;
128 |           }, 0);
129 |         }
130 |       },
131 | 
132 |       onChange() {
133 |         if (!fp.selectedDates.length) {
134 |           win.setTimeout(() => {
135 |             if (fp.selectedDates.length) return;
136 | 
137 |             secondInput.value = '';
138 |             _prevDates = [];
139 |           }, 10);
140 |         }
141 | 
142 |         if (_secondInputFocused) {
143 |           win.setTimeout(() => {
144 |             secondInput.focus();
145 |           }, 0);
146 |         }
147 |       },
148 | 
149 |       onDestroy() {
150 |         if (!config.input)
151 |           secondInput.parentNode && secondInput.parentNode.removeChild(secondInput);
152 |       },
153 | 
154 |       onValueUpdate(selDates: Date[]) {
155 |         if (!secondInput) return;
156 | 
157 |         _prevDates =
158 |           !_prevDates || selDates.length >= _prevDates.length ? [...selDates] : _prevDates;
159 | 
160 |         if (_prevDates.length > selDates.length) {
161 |           const newSelectedDate = selDates[0];
162 |           const newDates = _secondInputFocused
163 |             ? [_prevDates[0], newSelectedDate]
164 |             : [newSelectedDate, _prevDates[1]];
165 | 
166 |           if (newDates[0].getTime() > newDates[1].getTime()) {
167 |             if (_secondInputFocused) {
168 |               newDates[0] = newDates[1];
169 |             } else {
170 |               newDates[1] = newDates[0];
171 |             }
172 |           }
173 | 
174 |           fp.setDate(newDates, false);
175 |           _prevDates = [...newDates];
176 |         }
177 | 
178 |         [fp._input.value = '', secondInput.value = ''] = fp.selectedDates.map((d) =>
179 |           fp.formatDate(d, dateFormat)
180 |         );
181 |       },
182 |     };
183 | 
184 |     return plugin;
185 |   };
186 | }
187 | 
188 | export default rangePlugin;
189 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/scrollPlugin.ts:
--------------------------------------------------------------------------------
 1 | import { Instance } from '../types/instance';
 2 | import { Plugin } from '../types/options';
 3 | import { getEventTarget } from '../utils/dom';
 4 | 
 5 | function delta(e: WheelEvent) {
 6 |   return Math.max(-1, Math.min(1, (e as any).wheelDelta || -e.deltaY));
 7 | }
 8 | 
 9 | const scroll = (e: WheelEvent) => {
10 |   e.preventDefault();
11 |   const ev = new CustomEvent('increment', {
12 |     bubbles: true,
13 |   });
14 |   (ev as any).delta = delta(e);
15 |   (getEventTarget(e) as HTMLInputElement).dispatchEvent(ev);
16 | };
17 | 
18 | function scrollMonth(fp: Instance) {
19 |   return (e: WheelEvent) => {
20 |     e.preventDefault();
21 |     const mDelta = delta(e);
22 |     fp.changeMonth(mDelta);
23 |   };
24 | }
25 | 
26 | function scrollPlugin(): Plugin {
27 |   return function (fp) {
28 |     const monthScroller = scrollMonth(fp);
29 |     return {
30 |       onReady() {
31 |         if (fp.timeContainer) {
32 |           fp.timeContainer.addEventListener('wheel', scroll);
33 |         }
34 | 
35 |         if (fp.yearElements) {
36 |           fp.yearElements.forEach((yearElem) => yearElem.addEventListener('wheel', scroll));
37 |         }
38 | 
39 |         if (fp.monthElements) {
40 |           fp.monthElements.forEach((monthElem) =>
41 |             monthElem.addEventListener('wheel', monthScroller)
42 |           );
43 |         }
44 | 
45 |         fp.loadedPlugins.push('scroll');
46 |       },
47 |       onDestroy() {
48 |         if (fp.timeContainer) {
49 |           fp.timeContainer.removeEventListener('wheel', scroll);
50 |         }
51 | 
52 |         if (fp.yearElements) {
53 |           fp.yearElements.forEach((yearElem) => yearElem.removeEventListener('wheel', scroll));
54 |         }
55 | 
56 |         if (fp.monthElements) {
57 |           fp.monthElements.forEach((monthElem) =>
58 |             monthElem.removeEventListener('wheel', monthScroller)
59 |           );
60 |         }
61 |       },
62 |     };
63 |   };
64 | }
65 | 
66 | export default scrollPlugin;
67 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/plugins/weekSelect/weekSelect.ts:
--------------------------------------------------------------------------------
 1 | import { DayElement } from '../../types/instance';
 2 | import { Plugin } from '../../types/options';
 3 | import { getEventTarget } from '../../utils/dom';
 4 | 
 5 | export type PlusWeeks = {
 6 |   weekStartDay: Date;
 7 |   weekEndDay: Date;
 8 | };
 9 | 
10 | function weekSelectPlugin(): Plugin<PlusWeeks> {
11 |   return function (fp) {
12 |     function onDayHover(event: MouseEvent) {
13 |       const day = getEventTarget(event) as DayElement;
14 |       if (!day.classList.contains('flatpickr-day')) return;
15 | 
16 |       const days = fp.days.childNodes;
17 |       const dayIndex = day.$i;
18 | 
19 |       const dayIndSeven = dayIndex / 7;
20 |       const weekStartDay = (days[7 * Math.floor(dayIndSeven)] as DayElement).dateObj;
21 |       const weekEndDay = (days[7 * Math.ceil(dayIndSeven + 0.01) - 1] as DayElement).dateObj;
22 | 
23 |       for (let i = days.length; i--; ) {
24 |         const day = days[i] as DayElement;
25 |         const date = day.dateObj;
26 |         if (date > weekEndDay || date < weekStartDay) day.classList.remove('inRange');
27 |         else day.classList.add('inRange');
28 |       }
29 |     }
30 | 
31 |     function highlightWeek() {
32 |       const selDate = fp.latestSelectedDateObj;
33 |       if (
34 |         selDate !== undefined &&
35 |         selDate.getMonth() === fp.currentMonth &&
36 |         selDate.getFullYear() === fp.currentYear
37 |       ) {
38 |         fp.weekStartDay = (
39 |           fp.days.childNodes[
40 |             7 * Math.floor((fp.selectedDateElem as DayElement).$i / 7)
41 |           ] as DayElement
42 |         ).dateObj;
43 |         fp.weekEndDay = (
44 |           fp.days.childNodes[
45 |             7 * Math.ceil((fp.selectedDateElem as DayElement).$i / 7 + 0.01) - 1
46 |           ] as DayElement
47 |         ).dateObj;
48 |       }
49 |       const days = fp.days.childNodes;
50 |       for (let i = days.length; i--; ) {
51 |         const date = (days[i] as DayElement).dateObj;
52 |         if (date >= fp.weekStartDay && date <= fp.weekEndDay)
53 |           (days[i] as DayElement).classList.add('week', 'selected');
54 |       }
55 |     }
56 | 
57 |     function clearHover() {
58 |       const days = fp.days.childNodes;
59 |       for (let i = days.length; i--; ) (days[i] as Element).classList.remove('inRange');
60 |     }
61 | 
62 |     function onReady() {
63 |       if (fp.daysContainer !== undefined)
64 |         fp.daysContainer.addEventListener('mouseover', onDayHover);
65 |     }
66 | 
67 |     function onDestroy() {
68 |       if (fp.daysContainer !== undefined)
69 |         fp.daysContainer.removeEventListener('mouseover', onDayHover);
70 |     }
71 | 
72 |     return {
73 |       onValueUpdate: highlightWeek,
74 |       onMonthChange: highlightWeek,
75 |       onYearChange: highlightWeek,
76 |       onOpen: highlightWeek,
77 |       onClose: clearHover,
78 |       onParseConfig: function () {
79 |         fp.config.mode = 'single';
80 |         fp.config.enableTime = false;
81 |         fp.config.dateFormat = fp.config.dateFormat ? fp.config.dateFormat : '\\W\\e\\e\\k #W, Y';
82 |         fp.config.altFormat = fp.config.altFormat ? fp.config.altFormat : '\\W\\e\\e\\k #W, Y';
83 |       },
84 |       onReady: [
85 |         onReady,
86 |         highlightWeek,
87 |         () => {
88 |           fp.loadedPlugins.push('weekSelect');
89 |         },
90 |       ],
91 |       onDestroy,
92 |     };
93 |   };
94 | }
95 | 
96 | export default weekSelectPlugin;
97 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/_vars.styl:
--------------------------------------------------------------------------------
 1 | $bezier = cubic-bezier(0.23, 1, 0.32, 1)
 2 | $slideTime = 400ms
 3 | 
 4 | // calendar width calculation
 5 | $daySize = 39px
 6 | $padding = ($daySize/16)
 7 | $dayMargin = 2px
 8 | $daysWidth = ($daySize*7 + $dayMargin*14 + $padding*2 + 2)
 9 | $calendarWidth = $daysWidth
10 | 
11 | $monthNavHeight ?= 34px
12 | $weekdaysHeight ?= 28px
13 | $timeHeight = 40px
14 | 
15 | // Colors
16 | 
17 | $calendarBackground ?= #ffffff
18 | $calendarBorderColor ?= #e6e6e6
19 | 
20 | $monthForeground ?= alpha(black, 0.9)
21 | $arrow_hover_color ?= #f64747
22 | 
23 | $monthBackground ?= transparent
24 | 
25 | $weekdaysBackground ?= transparent
26 | $weekdaysForeground ?= alpha(black, 0.54)
27 | 
28 | $dayForeground ?= #393939
29 | $dayHoverBackground ?= #e6e6e6
30 | 
31 | $todayColor ?= #959ea9
32 | $selectedDayBackground ?= #569FF7
33 | 
34 | $invertedBg = invert($calendarBackground)
35 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/flatpickr.styl:
--------------------------------------------------------------------------------
  1 | @require "./_vars.styl"
  2 | 
  3 | @keyframes fpFadeInDown
  4 |   from
  5 |     opacity 0
  6 |     transform translate3d(0, -20px, 0)
  7 | 
  8 |   to
  9 |     opacity 1
 10 |     transform translate3d(0, 0, 0)
 11 | 
 12 | 
 13 | .flatpickr-calendar
 14 |   background transparent
 15 |   opacity 0
 16 |   display none
 17 |   text-align center
 18 |   visibility hidden
 19 |   padding 0
 20 |   animation none
 21 |   direction ltr
 22 |   border 0
 23 |   font-size 14px
 24 |   line-height 24px
 25 |   border-radius 5px
 26 |   position absolute
 27 |   width $calendarWidth
 28 |   box-sizing border-box
 29 |   touch-action manipulation
 30 | 
 31 |   if $noCalendarBorder is defined
 32 |     box-shadow 0 3px 13px alpha(black, 0.08)
 33 | 
 34 |   else
 35 |     background $calendarBackground
 36 |     box-shadow 1px 0 0 $calendarBorderColor,
 37 |       -1px 0 0 $calendarBorderColor,
 38 |       0 1px 0 $calendarBorderColor,
 39 |       0 -1px 0 $calendarBorderColor,
 40 |       0 3px 13px alpha(black, 0.08)
 41 | 
 42 | 
 43 |   &.open, &.inline
 44 |     opacity 1
 45 |     max-height 640px
 46 |     visibility visible
 47 | 
 48 |   &.open
 49 |     display inline-block
 50 |     z-index 99999
 51 | 
 52 |   &.animate.open
 53 |     animation fpFadeInDown 300ms $bezier
 54 | 
 55 |   &.inline
 56 |     display block
 57 |     position relative
 58 |     top 2px
 59 | 
 60 |   &.static
 61 |     position absolute
 62 |     top calc(100% + 2px)
 63 | 
 64 |     &.open
 65 |       z-index 999
 66 |       display block
 67 | 
 68 |   &.multiMonth
 69 |     .flatpickr-days .dayContainer:nth-child(n+1)
 70 |       & .flatpickr-day.inRange:nth-child(7n+7)
 71 |         box-shadow: none !important;
 72 | 
 73 |     .flatpickr-days .dayContainer:nth-child(n+2)
 74 |       & .flatpickr-day.inRange:nth-child(7n+1)
 75 |         box-shadow: -2px 0 0 #e6e6e6, 5px 0 0 #e6e6e6
 76 | 
 77 | 
 78 | 
 79 |   .hasWeeks, .hasTime
 80 |     .dayContainer
 81 |       border-bottom 0
 82 |       border-bottom-right-radius 0
 83 |       border-bottom-left-radius 0
 84 | 
 85 |   if $noCalendarBorder
 86 |     .hasWeeks .dayContainer
 87 |       border-left 0
 88 | 
 89 |   &.hasTime
 90 |     .flatpickr-time
 91 |       height $timeHeight
 92 |       border-top 1px solid $calendarBorderColor
 93 | 
 94 |     if $noCalendarBorder is defined
 95 |       .flatpickr-innerContainer
 96 |         border-bottom 0
 97 | 
 98 |       .flatpickr-time
 99 |         border 1px solid $calendarBorderColor
100 | 
101 |   &.noCalendar.hasTime
102 |     .flatpickr-time
103 |       height auto
104 | 
105 |   &:before, &:after
106 |     position absolute
107 |     display block
108 |     pointer-events none
109 |     border solid transparent
110 |     content ''
111 |     height 0
112 |     width 0
113 |     left 22px
114 | 
115 |   &.rightMost, &.arrowRight
116 |     &:before, &:after
117 |       left auto
118 |       right 22px
119 | 
120 |   &.arrowCenter
121 |     &:before, &:after
122 |       left 50%
123 |       right 50%
124 | 
125 |   &:before
126 |     border-width 5px
127 |     margin 0 -5px
128 | 
129 |   &:after
130 |     border-width 4px
131 |     margin 0 -4px
132 | 
133 |   &.arrowTop
134 |     &:before, &:after
135 |       bottom 100%
136 |     &:before
137 |       border-bottom-color $calendarBorderColor
138 |     &:after
139 |       if $noCalendarBorder is defined
140 |         border-bottom-color $monthBackground
141 |       else
142 |         border-bottom-color $calendarBackground
143 | 
144 |   &.arrowBottom
145 |     &:before, &:after
146 |       top 100%
147 |     &:before
148 |       border-top-color $calendarBorderColor
149 |     &:after
150 |       if $noCalendarBorder is defined
151 |         border-top-color $monthBackground
152 |       else
153 |         border-top-color $calendarBackground
154 | 
155 |   &:focus
156 |     outline 0
157 | 
158 | .flatpickr-wrapper
159 |   position relative
160 |   display inline-block
161 | 
162 | .flatpickr-months
163 |   display flex
164 | 
165 |   .flatpickr-month
166 |     if $noCalendarBorder is defined
167 |       border-radius 5px 5px 0 0
168 |     background $monthBackground
169 |     color $monthForeground
170 |     fill $monthForeground
171 |     height $monthNavHeight
172 |     line-height 1
173 |     text-align center
174 |     position relative
175 |     user-select none
176 |     overflow hidden
177 |     flex 1
178 | 
179 |   .flatpickr-prev-month, .flatpickr-next-month
180 |     user-select none
181 |     text-decoration none
182 |     cursor pointer
183 |     position absolute
184 |     top 0
185 |     height $monthNavHeight
186 |     padding 10px
187 |     z-index 3
188 |     color $monthForeground
189 |     fill $monthForeground
190 | 
191 |     &.flatpickr-disabled
192 |       display none
193 | 
194 |     i
195 |       position relative
196 | 
197 |     &.flatpickr-prev-month
198 |       /*!
199 |       /*rtl:begin:ignore*//*
200 |       */
201 |       left 0
202 |       /*!
203 |       /*rtl:end:ignore*//*
204 |       */
205 | 
206 | 
207 |     &.flatpickr-next-month
208 |       /*!
209 |       /*rtl:begin:ignore*//*
210 |       */
211 |       right 0
212 |       /*!
213 |       /*rtl:end:ignore*//*
214 |       */
215 | 
216 |     &:hover
217 |       color $todayColor
218 |       svg
219 |         if $arrow_hover_color is defined
220 |           fill $arrow_hover_color
221 | 
222 |         else
223 |           fill $todayColor
224 | 
225 |     svg
226 |       width 14px
227 |       height 14px
228 | 
229 |       path
230 |         transition fill 0.1s
231 |         fill inherit
232 | 
233 | 
234 | .numInputWrapper
235 |   position relative
236 |   height auto
237 | 
238 |   input, span
239 |     display inline-block
240 | 
241 |   input
242 |     width 100%
243 |     &::-ms-clear
244 |       display none
245 | 
246 |     &::-webkit-outer-spin-button, &::-webkit-inner-spin-button
247 |       margin 0
248 |       -webkit-appearance none
249 | 
250 |   span
251 |     position absolute
252 |     right 0
253 |     width 14px
254 |     padding 0 4px 0 2px
255 |     height 50%
256 |     line-height 50%
257 |     opacity 0
258 |     cursor pointer
259 |     border 1px solid alpha($dayForeground, 0.15)
260 |     box-sizing border-box
261 | 
262 |     &:hover
263 |       background: alpha($invertedBg, 0.1)
264 | 
265 |     &:active
266 |       background: alpha($invertedBg, 0.2)
267 | 
268 |     &:after
269 |       display block
270 |       content ""
271 |       position absolute
272 | 
273 |     &.arrowUp
274 |       top 0
275 |       border-bottom 0
276 | 
277 |       &:after
278 |         border-left 4px solid transparent
279 |         border-right 4px solid transparent
280 |         border-bottom 4px solid alpha($dayForeground, 0.6)
281 |         top 26%
282 | 
283 |     &.arrowDown
284 |       top 50%
285 | 
286 |       &:after
287 |         border-left 4px solid transparent
288 |         border-right 4px solid transparent
289 |         border-top 4px solid alpha($dayForeground, 0.6)
290 |         top 40%
291 | 
292 |     svg
293 |       width inherit
294 |       height auto
295 |       path
296 |         fill alpha($monthForeground, 0.5)
297 | 
298 |   &:hover
299 |     background: alpha($invertedBg, 0.05)
300 | 
301 |     span
302 |       opacity 1
303 | 
304 | 
305 | .flatpickr-current-month
306 |   font-size 135%
307 |   line-height inherit
308 |   font-weight 300
309 |   color inherit
310 |   position absolute
311 |   width 75%
312 |   left 12.5%
313 |   padding (0.22*$monthNavHeight) 0 0 0
314 |   line-height 1
315 |   height $monthNavHeight
316 |   display inline-block
317 |   text-align center
318 |   transform translate3d(0px, 0px, 0px)
319 | 
320 |   span.cur-month
321 |     font-family inherit
322 |     font-weight 700
323 |     color inherit
324 |     display inline-block
325 |     margin-left 0.5ch
326 |     padding 0
327 | 
328 |     &:hover
329 |       background: alpha($invertedBg, 0.05)
330 | 
331 | 
332 |   .numInputWrapper
333 |     width 6ch
334 |     width unquote("7ch\0")
335 |     display inline-block
336 | 
337 |     span.arrowUp:after
338 |       border-bottom-color $monthForeground
339 | 
340 |     span.arrowDown:after
341 |       border-top-color $monthForeground
342 | 
343 |   input.cur-year
344 |     background transparent
345 |     box-sizing border-box
346 |     color inherit
347 |     cursor text
348 |     padding 0 0 0 0.5ch
349 |     margin 0
350 |     display inline-block
351 |     font-size inherit
352 |     font-family inherit
353 |     font-weight 300
354 |     line-height inherit
355 |     height auto
356 |     border 0
357 |     border-radius 0
358 |     vertical-align initial
359 |     -webkit-appearance textfield
360 |     -moz-appearance textfield
361 |     appearance textfield
362 | 
363 |     &:focus
364 |       outline 0
365 | 
366 |     &[disabled], &[disabled]:hover
367 |       font-size 100%
368 |       color alpha($monthForeground, 0.5)
369 |       background transparent
370 |       pointer-events none
371 | 
372 |   .flatpickr-monthDropdown-months
373 |     appearance: menulist
374 |     background: $monthBackground
375 |     border: none
376 |     border-radius: 0
377 |     box-sizing: border-box
378 |     color: inherit
379 |     cursor: pointer
380 |     font-size: inherit
381 |     font-family: inherit
382 |     font-weight: 300
383 |     height: auto
384 |     line-height: inherit
385 |     margin: -1px 0 0 0
386 |     outline: none
387 |     padding: 0 0 0 0.5ch
388 |     position: relative
389 |     vertical-align: initial
390 |     -webkit-box-sizing: border-box
391 |     -webkit-appearance: menulist
392 |     -moz-appearance: menulist
393 |     width: auto
394 | 
395 |     &:focus, &:active
396 |       outline: none
397 | 
398 |     &:hover
399 |       background: alpha($invertedBg, 0.05)
400 | 
401 |     .flatpickr-monthDropdown-month
402 |       background-color: $monthBackground
403 |       outline: none
404 |       padding: 0
405 | 
406 | .flatpickr-weekdays
407 |   background $weekdaysBackground
408 |   text-align center
409 |   overflow hidden
410 |   width 100%
411 |   display flex
412 |   align-items center
413 |   height $weekdaysHeight
414 | 
415 |   .flatpickr-weekdaycontainer
416 |     display flex
417 |     flex 1
418 | 
419 | 
420 | 
421 | span.flatpickr-weekday
422 |   cursor default
423 |   font-size 90%
424 |   background $monthBackground
425 |   color $weekdaysForeground
426 |   line-height 1
427 |   margin 0
428 |   text-align center
429 |   display block
430 |   flex 1
431 |   font-weight bolder
432 | 
433 | 
434 | .dayContainer, .flatpickr-weeks
435 |   padding 1px 0 0 0
436 | 
437 | .flatpickr-days
438 |   position: relative;
439 |   overflow: hidden;
440 |   display flex
441 |   align-items: flex-start;
442 |   width $daysWidth
443 | 
444 |   &:focus
445 |     outline 0
446 | 
447 |   if $noCalendarBorder is defined
448 |     border-left 1px solid $calendarBorderColor
449 |     border-right 1px solid $calendarBorderColor
450 | 
451 | 
452 | .dayContainer
453 |   padding 0
454 |   outline 0
455 |   text-align left
456 |   width ($daysWidth)
457 |   min-width ($daysWidth)
458 |   max-width ($daysWidth)
459 |   box-sizing border-box
460 |   display inline-block
461 |   display -ms-flexbox
462 |   display flex
463 |   flex-wrap wrap
464 |   -ms-flex-wrap wrap
465 |   -ms-flex-pack: justify
466 |   justify-content space-around
467 |   transform: translate3d(0px, 0px, 0px);
468 |   opacity 1
469 | 
470 |   & + .dayContainer
471 |     box-shadow: -1px 0 0 $calendarBorderColor;
472 | 
473 | 
474 | .flatpickr-day
475 |   background none
476 |   border 1px solid transparent
477 |   border-radius 150px
478 |   box-sizing border-box
479 |   color $dayForeground
480 |   cursor pointer
481 | 
482 |   font-weight 400
483 |   width 14.2857143%
484 |   flex-basis 14.2857143%
485 |   max-width $daySize
486 |   height $daySize
487 |   line-height $daySize
488 |   margin 0
489 | 
490 |   display inline-block
491 |   position relative
492 |   justify-content center
493 |   text-align center
494 | 
495 |   &, &.prevMonthDay, &.nextMonthDay
496 |     &.inRange, &.today.inRange, &:hover, &:focus
497 |       cursor pointer
498 |       outline 0
499 |       background $dayHoverBackground
500 |       border-color $dayHoverBackground
501 | 
502 | 
503 |   &.today
504 |     border-color $todayColor
505 | 
506 |     &:hover, &:focus
507 |       border-color $todayColor
508 |       background $todayColor
509 |       if $today_fg_color is defined
510 |         color $today_fg_color
511 |       else
512 |         color white
513 | 
514 |   &.selected, &.startRange, &.endRange
515 |     &, &.inRange, &:focus, &:hover, &.prevMonthDay, &.nextMonthDay
516 |       background $selectedDayBackground
517 |       box-shadow none
518 | 
519 |       if $selectedDayForeground is defined
520 |         color $selectedDayForeground
521 |       else
522 |         color white
523 | 
524 |       border-color $selectedDayBackground
525 | 
526 |     &.startRange
527 |       border-radius 50px 0 0 50px
528 |       //box-shadow:  (2.5*$dayMargin) 0 0 $selectedDayBackground
529 | 
530 |     &.endRange
531 |       border-radius 0 50px 50px 0
532 | 
533 |     // Avoid adding extra fill because it overflows in multimonth mode
534 |     &.startRange + .endRange:not(:nth-child(7n+1))
535 |       box-shadow: (-5*$dayMargin) 0 0 $selectedDayBackground
536 | 
537 |     &.startRange.endRange
538 |       border-radius 50px
539 | 
540 |   &.inRange
541 |     border-radius 0
542 |     box-shadow: (-2.5*$dayMargin) 0 0 $dayHoverBackground, (2.5*$dayMargin) 0 0 $dayHoverBackground
543 | 
544 |   &.flatpickr-disabled, &.flatpickr-disabled:hover,
545 |   &.prevMonthDay, &.nextMonthDay,
546 |   &.notAllowed, &.notAllowed.prevMonthDay, &.notAllowed.nextMonthDay
547 |     color alpha($dayForeground, 0.3)
548 |     background transparent
549 | 
550 |     if $disabled_border_color is defined
551 |       border-color $disabled_border_color
552 | 
553 |     else
554 |       border-color transparent
555 |     cursor default
556 | 
557 |   &.flatpickr-disabled, &.flatpickr-disabled:hover
558 |     cursor not-allowed
559 |     color alpha($dayForeground, 0.1)
560 | 
561 |   &.week.selected
562 |     border-radius 0
563 |     box-shadow: (-2.5*$dayMargin) 0 0 $selectedDayBackground,
564 |       (2.5*$dayMargin) 0 0 $selectedDayBackground
565 | 
566 |   &.hidden
567 |     visibility hidden
568 | 
569 | .rangeMode .flatpickr-day
570 |   margin-top 1px
571 | 
572 | .flatpickr-weekwrapper
573 |   float left
574 | 
575 |   .flatpickr-weeks
576 |     padding 0 12px
577 |     if $noCalendarBorder is defined
578 |       border-left 1px solid $calendarBorderColor
579 |     else
580 |       box-shadow 1px 0 0 $calendarBorderColor
581 | 
582 |   .flatpickr-weekday
583 |     float none
584 |     width 100%
585 |     line-height $weekdaysHeight
586 | 
587 |   span.flatpickr-day
588 |     &, &:hover
589 |       display block
590 |       width 100%
591 |       max-width none
592 |       color alpha($dayForeground, 0.3)
593 |       background transparent
594 |       cursor default
595 |       border none
596 | 
597 | 
598 | .flatpickr-innerContainer
599 |   display block
600 |   display flex
601 |   box-sizing border-box
602 |   overflow: hidden;
603 | 
604 |   if $noCalendarBorder is defined
605 |     background $calendarBackground
606 |     border-bottom 1px solid $calendarBorderColor
607 | 
608 | 
609 | .flatpickr-rContainer
610 |   display inline-block
611 |   padding 0
612 |   box-sizing border-box
613 | 
614 | 
615 | .flatpickr-time
616 |   text-align center
617 |   outline 0
618 |   display block
619 |   height 0 // hide initially
620 |   line-height $timeHeight
621 |   max-height $timeHeight
622 |   box-sizing border-box
623 |   overflow hidden
624 |   display flex
625 | 
626 |   if $noCalendarBorder is defined
627 |     background $calendarBackground
628 |     border-radius 0 0 5px  5px
629 | 
630 |   &:after
631 |     content ""
632 |     display table
633 |     clear both
634 | 
635 |   .numInputWrapper
636 |     flex 1
637 |     width 40%
638 |     height $timeHeight
639 |     float left
640 | 
641 |     span.arrowUp:after
642 |       border-bottom-color $dayForeground
643 | 
644 |     span.arrowDown:after
645 |       border-top-color $dayForeground
646 | 
647 |   &.hasSeconds .numInputWrapper
648 |     width 26%
649 | 
650 |   &.time24hr .numInputWrapper
651 |     width 49%
652 | 
653 |   input
654 |     background transparent
655 |     box-shadow none
656 |     border 0
657 |     border-radius 0
658 |     text-align center
659 |     margin 0
660 |     padding 0
661 |     height inherit
662 |     line-height inherit
663 |     color $dayForeground
664 |     font-size 14px
665 |     position relative
666 |     box-sizing border-box
667 |     -webkit-appearance textfield
668 |     -moz-appearance textfield
669 |     appearance textfield
670 | 
671 | 
672 |     &.flatpickr-hour
673 |       font-weight bold
674 | 
675 |     &.flatpickr-minute, &.flatpickr-second
676 |       font-weight 400
677 | 
678 |     &:focus
679 |       outline 0
680 |       border 0
681 | 
682 |   .flatpickr-time-separator, .flatpickr-am-pm
683 |     height inherit
684 |     float left
685 |     line-height inherit
686 |     color $dayForeground
687 |     font-weight bold
688 |     width 2%
689 |     user-select none
690 |     align-self center
691 | 
692 |   .flatpickr-am-pm
693 |     outline 0
694 |     width 18%
695 |     cursor pointer
696 |     text-align center
697 |     font-weight 400
698 | 
699 |   input, .flatpickr-am-pm
700 |     &:hover, &:focus
701 |       background lighten($dayHoverBackground, 3)
702 | 
703 | .flatpickr-input[readonly]
704 |   cursor pointer
705 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/airbnb.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = #eee
 3 | 
 4 | $monthForeground = #3c3f40
 5 | $monthBackground = transparent
 6 | 
 7 | $weekdaysBackground = transparent
 8 | $weekdays_color = #757575
 9 | 
10 | $dayForeground = #404848
11 | $dayHoverBackground = #e9e9e9
12 | $disabled_border_color = $dayHoverBackground
13 | 
14 | $disabled_day_color = alpha(black, 0.15)
15 | 
16 | $todayColor = #F64747
17 | $today_fg_color = #fff
18 | 
19 | $selectedDayBackground =  #4f99ff
20 | $selectedDayForeground = #fff
21 | 
22 | @require "../flatpickr"
23 | 
24 | .flatpickr-calendar
25 | 	width $daysWidth
26 | 
27 | .dayContainer
28 | 	padding 0
29 | 	border-right 0
30 | 
31 | span.flatpickr-day
32 | 	&, &.prevMonthDay, &.nextMonthDay
33 | 		border-radius 0 !important
34 | 		border 1px solid $dayHoverBackground
35 | 		max-width none
36 | 		border-right-color transparent
37 | 
38 | 		&:nth-child(n+8)
39 | 			border-top-color transparent
40 | 
41 | 		&:nth-child(7n-6)
42 | 			border-left 0
43 | 
44 | 		&:nth-child(n+36)
45 | 			border-bottom 0
46 | 
47 | 		&:nth-child(-n+7)
48 | 			margin-top 0
49 | 
50 | 		&.today:not(.selected)
51 | 			border-color $dayHoverBackground
52 | 			border-right-color transparent
53 | 			border-top-color transparent
54 | 			border-bottom-color $todayColor
55 | 
56 | 			&:hover
57 | 				border 1px solid $todayColor
58 | 
59 | 		&.startRange, &.endRange
60 | 			border-color $selectedDayBackground
61 | 
62 | 
63 | 		&.today, &.selected
64 | 			z-index 2
65 | 
66 | .rangeMode .flatpickr-day
67 | 	margin-top -1px
68 | 
69 | .flatpickr-weekwrapper .flatpickr-weeks
70 | 	box-shadow none
71 | 
72 | .flatpickr-weekwrapper span.flatpickr-day
73 | 	border 0
74 | 	margin -1px 0 0 -1px
75 | 
76 | 
77 | .hasWeeks .flatpickr-days
78 | 	border-right 0
79 | 
80 | @css {
81 | 	@media screen and (min-width:0\0) and (min-resolution: +72dpi) {
82 | 		span.flatpickr-day {
83 | 			display: block;
84 | 			flex: 1 0 auto;
85 | 		}
86 | 	}
87 | }
88 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/confetti.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = alpha(#484848, 0.1)
 3 | 
 4 | $monthForeground = #fff
 5 | $monthBackground = #FFB866
 6 | 
 7 | $weekdaysBackground = #FFB866
 8 | 
 9 | $dayForeground = #484848
10 | $dayHoverBackground = #e2e2e2
11 | 
12 | $todayColor = #bbb
13 | 
14 | $selectedDayBackground = #FFB866
15 | $selectedDayForeground = #fff
16 | 
17 | $noCalendarBorder = true
18 | @require "../flatpickr"
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/dark.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #3f4458
 2 | $calendarBorderColor = darken(#3f4458, 50%)
 3 | 
 4 | $monthForeground = #fff
 5 | $monthBackground = #3f4458
 6 | 
 7 | $weekdaysBackground = transparent
 8 | $weekdaysForeground = #fff
 9 | 
10 | $dayForeground = alpha(white, 0.95)
11 | $dayHoverBackground = lighten($calendarBackground, 25%)
12 | 
13 | $todayColor = #eee
14 | $today_fg_color = #3f4458
15 | 
16 | $selectedDayBackground = #80CBC4
17 | 
18 | @require "../flatpickr"
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/light.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = #eceef1
 3 | 
 4 | $monthForeground = #5a6171
 5 | $monthBackground = #eceef1
 6 | 
 7 | $weekdaysBackground = #eceef1
 8 | $weekdaysForeground = #5a6171
 9 | 
10 | $dayForeground = #484848
11 | $dayHoverBackground = #e2e2e2
12 | 
13 | $todayColor = #bbb
14 | 
15 | $selectedDayBackground = #FF5A5F
16 | $selectedDayForeground = #fff
17 | 
18 | $noCalendarBorder = true
19 | @require "../flatpickr"
20 | 
21 | span.flatpickr-day.selected
22 | 	font-weight bold


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/material_blue.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = alpha(#484848, 0.2)
 3 | 
 4 | $monthForeground = #fff
 5 | $monthBackground = #42A5F5
 6 | 
 7 | $weekdaysBackground = #42A5F5
 8 | 
 9 | $dayForeground = #484848
10 | $dayHoverBackground = #e2e2e2
11 | 
12 | $todayColor = #bbb
13 | 
14 | $selectedDayBackground = #42A5F5
15 | $selectedDayForeground = #fff
16 | 
17 | $noCalendarBorder = true
18 | @require "../flatpickr"
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/material_green.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = alpha(#484848, 0.2)
 3 | 
 4 | $monthForeground = #fff
 5 | $monthBackground = #1BBC9B
 6 | 
 7 | $weekdaysBackground = #1BBC9B
 8 | 
 9 | $dayForeground = #484848
10 | $dayHoverBackground = #e2e2e2
11 | 
12 | $todayColor = #bbb
13 | 
14 | $selectedDayBackground = #1BBC9B
15 | $selectedDayForeground = #fff
16 | 
17 | $noCalendarBorder = true
18 | @require "../flatpickr"
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/material_orange.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = alpha(#484848, 0.2)
 3 | 
 4 | $monthForeground = #fff
 5 | $monthBackground = #FF8A65
 6 | 
 7 | $weekdaysBackground = #FF8A65
 8 | 
 9 | $dayForeground = #484848
10 | $dayHoverBackground = #e2e2e2
11 | 
12 | $todayColor = #bbb
13 | 
14 | $selectedDayBackground = #FF8A65
15 | $selectedDayForeground = #fff
16 | 
17 | $noCalendarBorder = true
18 | @require "../flatpickr"
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/style/themes/material_red.styl:
--------------------------------------------------------------------------------
 1 | $calendarBackground = #fff
 2 | $calendarBorderColor = alpha(#484848, 0.2)
 3 | 
 4 | $monthForeground = #fff
 5 | $monthBackground = #EF5350
 6 | 
 7 | $weekdaysBackground = #EF5350
 8 | 
 9 | $dayForeground = #484848
10 | $dayHoverBackground = #e2e2e2
11 | 
12 | $todayColor = #bbb
13 | 
14 | $selectedDayBackground = #EF5350
15 | $selectedDayForeground = #fff
16 | 
17 | $noCalendarBorder = true
18 | @require "../flatpickr"
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/types/globals.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn, Instance } from './instance';
 2 | import { Options } from './options';
 3 | 
 4 | export interface FPHTMLElement extends HTMLElement {
 5 |   flatpickr: (config?: Options) => Instance;
 6 |   _flatpickr?: Instance;
 7 | }
 8 | 
 9 | export interface FPNodeList extends NodeList {
10 |   flatpickr: (config?: Options) => Instance | Instance[];
11 | }
12 | 
13 | export interface FPHTMLCollection extends HTMLCollection {
14 |   flatpickr: (config?: Options) => Instance | Instance[];
15 | }
16 | 
17 | export interface FPWindow extends Window {
18 |   flatpickr: FlatpickrFn;
19 | }
20 | 
21 | export interface FPDate extends Date {
22 |   fp_incr: (n: number) => Date;
23 | }
24 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/types/instance.ts:
--------------------------------------------------------------------------------
  1 | import { Formats, RevFormat, TokenRegex } from '../utils/formatting';
  2 | import { CustomLocale, Locale, key as LocaleKey } from './locale';
  3 | import { DateOption, Options, ParsedOptions } from './options';
  4 | 
  5 | export interface Elements {
  6 |   element: HTMLElement;
  7 |   input: HTMLInputElement;
  8 |   altInput?: HTMLInputElement;
  9 |   _input: HTMLInputElement;
 10 |   mobileInput?: HTMLInputElement;
 11 |   mobileFormatStr?: string;
 12 | 
 13 |   selectedDateElem?: DayElement;
 14 |   todayDateElem?: DayElement;
 15 | 
 16 |   _positionElement: HTMLElement;
 17 |   weekdayContainer: HTMLDivElement;
 18 |   calendarContainer: HTMLDivElement;
 19 |   innerContainer?: HTMLDivElement;
 20 |   rContainer?: HTMLDivElement;
 21 |   daysContainer?: HTMLDivElement;
 22 |   days: HTMLDivElement;
 23 | 
 24 |   weekWrapper?: HTMLDivElement;
 25 |   weekNumbers?: HTMLDivElement;
 26 | 
 27 |   // month nav
 28 |   monthNav: HTMLDivElement;
 29 | 
 30 |   monthsDropdownContainer: HTMLSelectElement;
 31 | 
 32 |   yearElements: HTMLInputElement[];
 33 |   monthElements: HTMLSpanElement[];
 34 | 
 35 |   // month nav getters
 36 |   currentYearElement: HTMLInputElement;
 37 |   currentMonthElement: HTMLSpanElement;
 38 | 
 39 |   // month nav arrows
 40 |   _hidePrevMonthArrow: boolean;
 41 |   _hideNextMonthArrow: boolean;
 42 |   prevMonthNav: HTMLElement;
 43 |   nextMonthNav: HTMLElement;
 44 | 
 45 |   timeContainer?: HTMLDivElement;
 46 |   hourElement?: HTMLInputElement;
 47 |   minuteElement?: HTMLInputElement;
 48 |   secondElement?: HTMLInputElement;
 49 |   amPM?: HTMLSpanElement;
 50 | 
 51 |   pluginElements: Node[];
 52 | }
 53 | 
 54 | export interface Formatting {
 55 |   revFormat: RevFormat;
 56 |   formats: Formats;
 57 |   tokenRegex: TokenRegex;
 58 | }
 59 | 
 60 | export type Instance = Elements &
 61 |   Formatting & {
 62 |     // Dates
 63 |     minRangeDate?: Date;
 64 |     maxRangeDate?: Date;
 65 |     now: Date;
 66 |     latestSelectedDateObj?: Date;
 67 |     _selectedDateObj?: Date;
 68 |     selectedDates: Date[];
 69 |     _initialDate: Date;
 70 | 
 71 |     // State
 72 |     config: ParsedOptions;
 73 |     loadedPlugins: string[];
 74 |     l10n: Locale;
 75 | 
 76 |     currentYear: number;
 77 |     currentMonth: number;
 78 | 
 79 |     isOpen: boolean;
 80 |     isMobile: boolean;
 81 | 
 82 |     minDateHasTime: boolean;
 83 |     maxDateHasTime: boolean;
 84 | 
 85 |     // Methods
 86 |     changeMonth: (value: number, isOffset?: boolean, fromKeyboard?: boolean) => void;
 87 |     changeYear: (year: number) => void;
 88 |     clear: (emitChangeEvent?: boolean, toInitial?: boolean) => void;
 89 |     close: () => void;
 90 |     destroy: () => void;
 91 |     isEnabled: (date: DateOption, timeless?: boolean) => boolean;
 92 |     jumpToDate: (date?: DateOption, triggerChange?: boolean) => void;
 93 |     updateValue: (triggerChange?: boolean) => void;
 94 |     onMouseOver: (elem?: DayElement, cellClass?: string) => void;
 95 |     open: (e?: FocusEvent | MouseEvent, positionElement?: HTMLElement) => void;
 96 |     redraw: () => void;
 97 |     set: (option: keyof Options | { [k in keyof Options]?: Options[k] }, value?: any) => void;
 98 |     setDate: (date: DateOption | DateOption[], triggerChange?: boolean, format?: string) => void;
 99 |     toggle: () => void;
100 | 
101 |     pad: (num: string | number) => string;
102 |     parseDate: (
103 |       date: Date | string | number,
104 |       givenFormat?: string,
105 |       timeless?: boolean
106 |     ) => Date | undefined;
107 |     formatDate: (dateObj: Date, frmt: string) => string;
108 | 
109 |     // Internals
110 | 
111 |     _handlers: {
112 |       remove: () => void;
113 |     }[];
114 | 
115 |     _bind: <E extends Element | Window | Document>(
116 |       element: E | E[],
117 |       event: string | string[],
118 |       handler: (e?: any) => void,
119 |       options?: { capture?: boolean; once?: boolean; passive?: boolean }
120 |     ) => void;
121 |     _createElement: <E extends HTMLElement>(
122 |       doc: Document,
123 |       tag: keyof HTMLElementTagNameMap,
124 |       className: string,
125 |       content?: string
126 |     ) => E;
127 |     createDay: (className: string, date: Date, dayNumber: number, i: number) => DayElement;
128 |     _setHoursFromDate: (date: Date) => void;
129 |     _debouncedChange: () => void;
130 |     __hideNextMonthArrow: boolean;
131 |     __hidePrevMonthArrow: boolean;
132 |     _positionCalendar: (customPositionElement?: HTMLElement) => void;
133 | 
134 |     utils: {
135 |       getDaysInMonth: (month?: number, year?: number) => number;
136 |     };
137 |   };
138 | 
139 | export interface FlatpickrFn {
140 |   (selector: Node, config?: Options): Instance;
141 |   (selector: ArrayLike<Node>, config?: Options): Instance[];
142 |   (selector: string, config?: Options): Instance | Instance[];
143 |   defaultConfig: Partial<ParsedOptions>;
144 |   l10ns: { [k in LocaleKey]?: CustomLocale } & { default: Locale };
145 |   localize: (l10n: CustomLocale) => void;
146 |   setDefaults: (config: Options) => void;
147 |   parseDate: (date: DateOption, format?: string, timeless?: boolean) => Date | undefined;
148 |   formatDate: (date: Date, format: string) => string;
149 |   compareDates: (date1: Date, date2: Date, timeless?: boolean) => number;
150 | }
151 | 
152 | export type DayElement = HTMLSpanElement & { dateObj: Date; $i: number };
153 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/types/locale.ts:
--------------------------------------------------------------------------------
  1 | export type Locale = {
  2 |   weekdays: {
  3 |     shorthand: [string, string, string, string, string, string, string];
  4 |     longhand: [string, string, string, string, string, string, string];
  5 |   };
  6 |   months: {
  7 |     shorthand: [
  8 |       string,
  9 |       string,
 10 |       string,
 11 |       string,
 12 |       string,
 13 |       string,
 14 |       string,
 15 |       string,
 16 |       string,
 17 |       string,
 18 |       string,
 19 |       string,
 20 |     ];
 21 |     longhand: [
 22 |       string,
 23 |       string,
 24 |       string,
 25 |       string,
 26 |       string,
 27 |       string,
 28 |       string,
 29 |       string,
 30 |       string,
 31 |       string,
 32 |       string,
 33 |       string,
 34 |     ];
 35 |   };
 36 |   daysInMonth: [
 37 |     number,
 38 |     number,
 39 |     number,
 40 |     number,
 41 |     number,
 42 |     number,
 43 |     number,
 44 |     number,
 45 |     number,
 46 |     number,
 47 |     number,
 48 |     number,
 49 |   ];
 50 |   firstDayOfWeek: number;
 51 |   ordinal: (nth: number) => string;
 52 |   rangeSeparator: string;
 53 |   weekAbbreviation: string;
 54 |   scrollTitle: string;
 55 |   toggleTitle: string;
 56 |   amPM: [string, string];
 57 |   yearAriaLabel: string;
 58 |   monthAriaLabel: string;
 59 |   hourAriaLabel: string;
 60 |   minuteAriaLabel: string;
 61 |   time_24hr: boolean;
 62 | };
 63 | 
 64 | export type CustomLocale = {
 65 |   ordinal?: Locale['ordinal'];
 66 |   daysInMonth?: Locale['daysInMonth'];
 67 |   firstDayOfWeek?: Locale['firstDayOfWeek'];
 68 |   rangeSeparator?: Locale['rangeSeparator'];
 69 |   weekAbbreviation?: Locale['weekAbbreviation'];
 70 |   toggleTitle?: Locale['toggleTitle'];
 71 |   scrollTitle?: Locale['scrollTitle'];
 72 |   yearAriaLabel?: string;
 73 |   monthAriaLabel?: string;
 74 |   hourAriaLabel?: string;
 75 |   minuteAriaLabel?: string;
 76 |   amPM?: Locale['amPM'];
 77 |   time_24hr?: Locale['time_24hr'];
 78 |   weekdays: {
 79 |     shorthand: [string, string, string, string, string, string, string];
 80 |     longhand: [string, string, string, string, string, string, string];
 81 |   };
 82 |   months: {
 83 |     shorthand: [
 84 |       string,
 85 |       string,
 86 |       string,
 87 |       string,
 88 |       string,
 89 |       string,
 90 |       string,
 91 |       string,
 92 |       string,
 93 |       string,
 94 |       string,
 95 |       string,
 96 |     ];
 97 |     longhand: [
 98 |       string,
 99 |       string,
100 |       string,
101 |       string,
102 |       string,
103 |       string,
104 |       string,
105 |       string,
106 |       string,
107 |       string,
108 |       string,
109 |       string,
110 |     ];
111 |   };
112 | };
113 | 
114 | export type key =
115 |   | 'ar'
116 |   | 'at'
117 |   | 'az'
118 |   | 'be'
119 |   | 'bg'
120 |   | 'bn'
121 |   | 'bs'
122 |   | 'ca'
123 |   | 'cat'
124 |   | 'ckb'
125 |   | 'cs'
126 |   | 'cy'
127 |   | 'da'
128 |   | 'de'
129 |   | 'default'
130 |   | 'en'
131 |   | 'eo'
132 |   | 'es'
133 |   | 'et'
134 |   | 'fa'
135 |   | 'fi'
136 |   | 'fo'
137 |   | 'fr'
138 |   | 'gr'
139 |   | 'he'
140 |   | 'hi'
141 |   | 'hr'
142 |   | 'hu'
143 |   | 'hy'
144 |   | 'id'
145 |   | 'is'
146 |   | 'it'
147 |   | 'ja'
148 |   | 'ka'
149 |   | 'ko'
150 |   | 'km'
151 |   | 'kz'
152 |   | 'lt'
153 |   | 'lv'
154 |   | 'mk'
155 |   | 'mn'
156 |   | 'ms'
157 |   | 'my'
158 |   | 'nl'
159 |   | 'nn'
160 |   | 'no'
161 |   | 'pa'
162 |   | 'pl'
163 |   | 'pt'
164 |   | 'ro'
165 |   | 'ru'
166 |   | 'si'
167 |   | 'sk'
168 |   | 'sl'
169 |   | 'sq'
170 |   | 'sr'
171 |   | 'sv'
172 |   | 'th'
173 |   | 'tr'
174 |   | 'uk'
175 |   | 'vn'
176 |   | 'zh'
177 |   | 'uz'
178 |   | 'uz_latn'
179 |   | 'zh_tw';
180 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/types/options.ts:
--------------------------------------------------------------------------------
  1 | import { Instance } from './instance';
  2 | import { CustomLocale, Locale, key as LocaleKey } from './locale';
  3 | 
  4 | export type DateOption = Date | string | number;
  5 | export type DateRangeLimit<D = DateOption> = { from: D; to: D };
  6 | export type DateLimit<D = DateOption> = D | DateRangeLimit<D> | ((date: Date) => boolean);
  7 | 
  8 | export type Hook = (dates: Date[], currentDateString: string, self: Instance, data?: any) => void;
  9 | 
 10 | export type HookKey =
 11 |   | 'onChange'
 12 |   | 'onClose'
 13 |   | 'onDayCreate'
 14 |   | 'onDestroy'
 15 |   | 'onKeyDown'
 16 |   | 'onMonthChange'
 17 |   | 'onOpen'
 18 |   | 'onParseConfig'
 19 |   | 'onReady'
 20 |   | 'onValueUpdate'
 21 |   | 'onYearChange'
 22 |   | 'onPreCalendarPosition';
 23 | 
 24 | export const HOOKS: HookKey[] = [
 25 |   'onChange',
 26 |   'onClose',
 27 |   'onDayCreate',
 28 |   'onDestroy',
 29 |   'onKeyDown',
 30 |   'onMonthChange',
 31 |   'onOpen',
 32 |   'onParseConfig',
 33 |   'onReady',
 34 |   'onValueUpdate',
 35 |   'onYearChange',
 36 |   'onPreCalendarPosition',
 37 | ];
 38 | 
 39 | export type Plugin<E = any> = (fp: Instance & E) => Options;
 40 | 
 41 | export interface BaseOptions {
 42 |   /*
 43 |   Allows the user to enter a date directly input the input field. By default, direct entry is disabled.
 44 |   */
 45 |   allowInput: boolean;
 46 | 
 47 |   /* Allow preloading of invalid date */
 48 |   allowInvalidPreload: boolean;
 49 | 
 50 |   /* Exactly the same as date format, but for the altInput field */
 51 |   altFormat: string;
 52 | 
 53 |   /* Show the user a readable date (as per altFormat), but return something totally different to the server.*/
 54 |   altInput: boolean;
 55 | 
 56 |   /* This class will be added to the input element created by the altInput option.  Note that altInput already inherits classes from the original input. */
 57 |   altInputClass: string;
 58 | 
 59 |   /* Whether to enable animations, such as month transitions */
 60 |   animate: boolean;
 61 | 
 62 |   /* Instead of body, appends the calendar to the specified node instead. */
 63 |   appendTo: HTMLElement;
 64 | 
 65 |   /* Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud. */
 66 |   /* Defaults to "F j, Y" */
 67 |   ariaDateFormat: string;
 68 | 
 69 |   /* Whether the default time should be auto-filled when the input is empty and gains or loses focus. */
 70 |   /* Defaults to true */
 71 |   autoFillDefaultTime: boolean;
 72 | 
 73 |   /*
 74 |     Whether clicking on the input should open the picker.
 75 |     Set it to false if you only want to open the calendar programmatically
 76 |   */
 77 |   clickOpens: boolean;
 78 | 
 79 |   /* Whether calendar should close after date selection */
 80 |   closeOnSelect: boolean;
 81 | 
 82 |   /*
 83 |     If "mode" is "multiple", this string will be used to join
 84 |     selected dates together for the date input value.
 85 |   */
 86 |   conjunction: string;
 87 | 
 88 |   /*
 89 |     A string of characters which are used to define how the date will be displayed in the input box.
 90 |     See https://chmln.github.io/flatpickr/formatting
 91 |   */
 92 |   dateFormat: string;
 93 | 
 94 |   /* The initial selected date(s). */
 95 |   defaultDate: DateOption | DateOption[];
 96 | 
 97 |   /* Initial value of the hour element, when no date is selected */
 98 |   defaultHour: number;
 99 | 
100 |   /* Initial value of the minute element, when no date is selected */
101 |   defaultMinute: number;
102 | 
103 |   /* Initial value of the seconds element, when no date is selected */
104 |   defaultSeconds: number;
105 | 
106 |   /*
107 |     Disables certain dates, preventing them from being selected.
108 |     See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates */
109 |   disable: DateLimit<DateOption>[];
110 | 
111 |   /* Set this to true to always use the non-native picker on mobile devices.
112 | By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used. */
113 |   disableMobile: boolean;
114 | 
115 |   /* Disables all dates except these specified. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few */
116 |   enable: DateLimit<DateOption>[];
117 | 
118 |   /* Enables seconds selection in the time picker.
119 |    */
120 |   enableSeconds: boolean;
121 | 
122 |   /* Enables the time picker */
123 |   enableTime: boolean;
124 | 
125 |   errorHandler: (e: Error) => void;
126 | 
127 |   /* Allows using a custom date formatting function instead of the built-in. Generally unnecessary.  */
128 |   formatDate: (date: Date, format: string, locale: Locale) => string;
129 | 
130 |   /* If "weekNumbers" are enabled, this is the function that outputs the week number for a given dates, optionally along with other text  */
131 |   getWeek: (date: Date) => string | number;
132 | 
133 |   /*   Adjusts the step for the hour input (incl. scrolling) */
134 |   hourIncrement: number;
135 | 
136 |   /* By default, clicking anywhere outside of calendar/input will close the calendar.
137 |   Clicking on elements specified in this option will not close the calendar */
138 |   ignoredFocusElements: HTMLElement[];
139 | 
140 |   /* Displays the calendar inline */
141 |   inline: boolean;
142 | 
143 |   /* The locale, either as a string (e.g. "ru", "en") or as an object.
144 |   See https://chmln.github.io/flatpickr/localization/ */
145 |   locale: LocaleKey | Partial<CustomLocale>;
146 | 
147 |   /* The maximum date that a user can pick to (inclusive). */
148 |   maxDate: DateOption;
149 | 
150 |   /* The maximum time that a user can pick to (inclusive). */
151 |   maxTime: DateOption;
152 | 
153 |   /* The minimum date that a user can start picking from (inclusive). */
154 |   minDate: DateOption;
155 | 
156 |   /* The minimum time that a user can start picking from (inclusive). */
157 |   minTime: DateOption;
158 | 
159 |   /* Adjusts the step for the minute input (incl. scrolling)
160 |   Defaults to 5 */
161 |   minuteIncrement: number;
162 | 
163 |   /* Date selection mode, defaults to "single" */
164 |   mode: 'single' | 'multiple' | 'range' | 'time';
165 | 
166 |   /* How the month selector in the calendar should be shown */
167 |   monthSelectorType: 'dropdown' | 'static';
168 | 
169 |   /* HTML for the right arrow icon, used to switch months. */
170 |   nextArrow: string;
171 | 
172 |   /* Hides the day selection in calendar.
173 | Use it along with "enableTime" to create a time picker. */
174 |   noCalendar: boolean;
175 | 
176 |   now?: DateOption;
177 | 
178 |   /* Fires when the selected dates have changed - when a date is picked or cleared, by user or programmatically */
179 |   onChange: Hook | Hook[];
180 | 
181 |   /* Fires when the calendar is closed */
182 |   onClose: Hook | Hook[];
183 | 
184 |   /* Fires for every day cell in the calendar, where the fourth argument is the html element of the cell. See https://chmln.github.io/flatpickr/events/#ondaycreate*/
185 |   onDayCreate: Hook | Hook[];
186 | 
187 |   /* Fires before the calendar instance is destroyed */
188 |   onDestroy: Hook | Hook[];
189 | 
190 |   /* Fires when valid keyboard input for calendar is detected */
191 |   onKeyDown: Hook | Hook[];
192 | 
193 |   /* Fires after the month has changed */
194 |   onMonthChange: Hook | Hook[];
195 | 
196 |   /* Fires after the calendar is opened */
197 |   onOpen: Hook | Hook[];
198 | 
199 |   /* Fires after the configuration for the calendar is parsed */
200 |   onParseConfig: Hook | Hook[];
201 | 
202 |   /* Fires once the calendar instance is ready */
203 |   onReady: Hook | Hook[];
204 | 
205 |   /* Like onChange, but fires immediately after any date changes */
206 |   onValueUpdate: Hook | Hook[];
207 | 
208 |   /* Fires after the year has changed */
209 |   onYearChange: Hook | Hook[];
210 | 
211 |   onPreCalendarPosition: Hook | Hook[];
212 | 
213 |   /* A custom datestring parser */
214 |   parseDate: (date: string, format: string) => Date;
215 | 
216 |   /* Plugins. See https://chmln.github.io/flatpickr/plugins/ */
217 |   plugins: Plugin[];
218 | 
219 |   /* How the calendar should be positioned with regards to the input. Defaults to "auto" */
220 |   position:
221 |     | 'auto'
222 |     | 'above'
223 |     | 'below'
224 |     | 'auto left'
225 |     | 'auto center'
226 |     | 'auto right'
227 |     | 'above left'
228 |     | 'above center'
229 |     | 'above right'
230 |     | 'below left'
231 |     | 'below center'
232 |     | 'below right'
233 |     | ((self: Instance, customElement: HTMLElement | undefined) => void);
234 | 
235 |   /*
236 |     The element off of which the calendar will be positioned.
237 |     Defaults to the date input
238 |   */
239 |   positionElement: Element;
240 | 
241 |   /* HTML for the left arrow icon, used to switch months. */
242 |   prevArrow: string;
243 | 
244 |   /* Whether to display the current month name in shorthand mode, e.g. "Sep" instead "September" */
245 |   shorthandCurrentMonth: boolean;
246 | 
247 |   /* Creates a wrapper to position the calendar. Use this if the input is inside a scrollable element */
248 |   static: boolean;
249 | 
250 |   /* Sets the number of months to show */
251 |   showMonths?: number;
252 | 
253 |   /* Displays time picker in 24 hour mode without AM/PM selection when enabled.*/
254 |   time_24hr: boolean;
255 | 
256 |   /* Display week numbers left of the calendar. */
257 |   weekNumbers: boolean;
258 | 
259 |   /* See https://chmln.github.io/flatpickr/examples/#flatpickr-external-elements */
260 |   wrap: boolean;
261 | 
262 |   win: Window;
263 | }
264 | 
265 | export type Options = Partial<BaseOptions>;
266 | 
267 | export interface ParsedOptions {
268 |   _disable: DateLimit<Date>[];
269 |   _enable?: DateLimit<Date>[];
270 |   _maxDate?: Date;
271 |   _maxTime?: Date;
272 |   _minDate?: Date;
273 |   _minTime?: Date;
274 |   allowInput: boolean;
275 |   allowInvalidPreload: boolean;
276 |   altFormat: string;
277 |   altInput: boolean;
278 |   altInputClass: string;
279 |   animate: boolean;
280 |   appendTo?: HTMLElement;
281 |   ariaDateFormat: string;
282 |   autoFillDefaultTime: boolean;
283 |   clickOpens: boolean;
284 |   closeOnSelect: boolean;
285 |   conjunction: string;
286 |   dateFormat: string;
287 |   defaultDate?: Date | Date[];
288 |   defaultHour: number;
289 |   defaultMinute: number;
290 |   defaultSeconds: number;
291 |   disable: DateLimit<Date>[];
292 |   disableMobile: boolean;
293 |   enable?: DateLimit<Date>[];
294 |   enableSeconds: boolean;
295 |   enableTime: boolean;
296 |   errorHandler: (err: Error) => void;
297 |   formatDate?: Options['formatDate'];
298 |   getWeek: (date: Date) => string | number;
299 |   hourIncrement: number;
300 |   ignoredFocusElements: HTMLElement[];
301 |   inline: boolean;
302 |   locale: LocaleKey | CustomLocale;
303 |   maxDate?: Date;
304 |   maxTime?: Date;
305 |   minDate?: Date;
306 |   minTime?: Date;
307 |   minuteIncrement: number;
308 |   mode: BaseOptions['mode'];
309 |   monthSelectorType: string;
310 |   nextArrow: string;
311 |   noCalendar: boolean;
312 |   now: Date;
313 |   onChange: Hook[];
314 |   onClose: Hook[];
315 |   onDayCreate: Hook[];
316 |   onDestroy: Hook[];
317 |   onKeyDown: Hook[];
318 |   onMonthChange: Hook[];
319 |   onOpen: Hook[];
320 |   onParseConfig: Hook[];
321 |   onReady: Hook[];
322 |   onValueUpdate: Hook[];
323 |   onYearChange: Hook[];
324 |   onPreCalendarPosition: Hook[];
325 |   parseDate?: BaseOptions['parseDate'];
326 |   plugins: Plugin[];
327 |   position: BaseOptions['position'];
328 |   positionElement?: HTMLElement;
329 |   prevArrow: string;
330 |   shorthandCurrentMonth: boolean;
331 |   showMonths: number;
332 |   static: boolean;
333 |   time_24hr: boolean;
334 |   weekNumbers: boolean;
335 |   wrap: boolean;
336 |   win: Window;
337 | }
338 | 
339 | export const defaults: ParsedOptions = {
340 |   _disable: [],
341 |   allowInput: false,
342 |   allowInvalidPreload: false,
343 |   altFormat: 'F j, Y',
344 |   altInput: false,
345 |   altInputClass: 'form-control input',
346 |   animate: typeof window === 'object' && window.navigator.userAgent.indexOf('MSIE') === -1,
347 |   ariaDateFormat: 'F j, Y',
348 |   autoFillDefaultTime: true,
349 |   clickOpens: true,
350 |   closeOnSelect: true,
351 |   conjunction: ', ',
352 |   dateFormat: 'Y-m-d',
353 |   defaultHour: 12,
354 |   defaultMinute: 0,
355 |   defaultSeconds: 0,
356 |   disable: [],
357 |   disableMobile: false,
358 |   enableSeconds: false,
359 |   enableTime: false,
360 |   errorHandler: (err: Error) => typeof console !== 'undefined' && console.warn(err),
361 |   getWeek: (givenDate: Date) => {
362 |     const date = new Date(givenDate.getTime());
363 |     date.setHours(0, 0, 0, 0);
364 | 
365 |     // Thursday in current week decides the year.
366 |     date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
367 | 
368 |     // January 4 is always in week 1.
369 |     const week1 = new Date(date.getFullYear(), 0, 4);
370 | 
371 |     // Adjust to Thursday in week 1 and count number of weeks from date to week1.
372 |     return (
373 |       1 +
374 |       Math.round(
375 |         ((date.getTime() - week1.getTime()) / 86400000 - 3 + ((week1.getDay() + 6) % 7)) / 7
376 |       )
377 |     );
378 |   },
379 |   hourIncrement: 1,
380 |   ignoredFocusElements: [],
381 |   inline: false,
382 |   locale: 'default',
383 |   minuteIncrement: 5,
384 |   mode: 'single',
385 |   monthSelectorType: 'dropdown',
386 |   nextArrow:
387 |     "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
388 |   noCalendar: false,
389 |   now: new Date(),
390 |   onChange: [],
391 |   onClose: [],
392 |   onDayCreate: [],
393 |   onDestroy: [],
394 |   onKeyDown: [],
395 |   onMonthChange: [],
396 |   onOpen: [],
397 |   onParseConfig: [],
398 |   onReady: [],
399 |   onValueUpdate: [],
400 |   onYearChange: [],
401 |   onPreCalendarPosition: [],
402 |   plugins: [],
403 |   position: 'auto',
404 |   positionElement: undefined,
405 |   prevArrow:
406 |     "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
407 |   shorthandCurrentMonth: false,
408 |   showMonths: 1,
409 |   static: false,
410 |   time_24hr: false,
411 |   weekNumbers: false,
412 |   wrap: false,
413 |   win: window,
414 | };
415 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/typings.d.ts:
--------------------------------------------------------------------------------
 1 | import { FlatpickrFn } from './types/instance';
 2 | import { Instance as _Instance } from './types/instance';
 3 | import {
 4 |   CustomLocale as _CustomLocale,
 5 |   Locale as _Locale,
 6 |   key as _LocaleKey,
 7 | } from './types/locale';
 8 | import {
 9 |   DateLimit as _DateLimit,
10 |   DateOption as _DateOption,
11 |   DateRangeLimit as _DateRangeLimit,
12 |   Hook as _Hook,
13 |   HookKey as _HookKey,
14 |   Options as _Options,
15 |   ParsedOptions as _ParsedOptions,
16 |   Plugin as _Plugin,
17 | } from './types/options';
18 | 
19 | declare const flatpickr: FlatpickrFn;
20 | 
21 | declare namespace flatpickr {
22 |   export type Instance = _Instance;
23 |   export type CustomLocale = _CustomLocale;
24 |   export type Locale = _Locale;
25 | 
26 |   export namespace Options {
27 |     export type Options = _Options;
28 |     export type Hook = _Hook;
29 |     export type HookKey = _HookKey;
30 |     export type ParsedOptions = _ParsedOptions;
31 |     export type DateLimit = _DateLimit;
32 |     export type DateOption = _DateOption;
33 |     export type DateRangeLimit = _DateRangeLimit;
34 |     export type Plugin = _Plugin;
35 |     export type LocaleKey = _LocaleKey;
36 |   }
37 | }
38 | 
39 | export default flatpickr;
40 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/utils/dates.ts:
--------------------------------------------------------------------------------
  1 | import { english } from '../l10n/default';
  2 | import { Locale } from '../types/locale';
  3 | import { ParsedOptions, defaults } from '../types/options';
  4 | import { RevFormatFn, formats, revFormat, token, tokenRegex } from './formatting';
  5 | 
  6 | export interface FormatterArgs {
  7 |   config?: ParsedOptions;
  8 |   l10n?: Locale;
  9 |   isMobile?: boolean;
 10 | }
 11 | 
 12 | export const createDateFormatter =
 13 |   ({ config = defaults, l10n = english, isMobile = false }: FormatterArgs) =>
 14 |   (dateObj: Date, frmt: string, overrideLocale?: Locale): string => {
 15 |     const locale = overrideLocale || l10n;
 16 | 
 17 |     if (config.formatDate !== undefined && !isMobile) {
 18 |       return config.formatDate(dateObj, frmt, locale);
 19 |     }
 20 | 
 21 |     return frmt
 22 |       .split('')
 23 |       .map((c, i, arr) =>
 24 |         formats[c as token] && arr[i - 1] !== '\\'
 25 |           ? formats[c as token](dateObj, locale, config)
 26 |           : c !== '\\'
 27 |             ? c
 28 |             : ''
 29 |       )
 30 |       .join('');
 31 |   };
 32 | 
 33 | export const createDateParser =
 34 |   ({ config = defaults, l10n = english }) =>
 35 |   (
 36 |     date: Date | string | number,
 37 |     givenFormat?: string,
 38 |     timeless?: boolean,
 39 |     customLocale?: Locale
 40 |   ): Date | undefined => {
 41 |     if (date !== 0 && !date) return undefined;
 42 | 
 43 |     const locale = customLocale || l10n;
 44 | 
 45 |     let parsedDate: Date | undefined;
 46 |     const dateOrig = date;
 47 | 
 48 |     if ((date as Date).getDate) parsedDate = new Date((date as Date).getTime());
 49 |     else if (
 50 |       typeof date !== 'string' &&
 51 |       (date as number).toFixed !== undefined // timestamp
 52 |     )
 53 |       // create a copy
 54 | 
 55 |       parsedDate = new Date(date);
 56 |     else if (typeof date === 'string') {
 57 |       // date string
 58 |       const format = givenFormat || (config || defaults).dateFormat;
 59 |       const datestr = String(date).trim();
 60 | 
 61 |       if (datestr === 'today') {
 62 |         parsedDate = new Date();
 63 |         timeless = true;
 64 |       } else if (config && config.parseDate) {
 65 |         parsedDate = config.parseDate(date, format);
 66 |       } else if (
 67 |         /Z$/.test(datestr) ||
 68 |         /GMT$/.test(datestr) // datestrings w/ timezone
 69 |       ) {
 70 |         parsedDate = new Date(date);
 71 |       } else {
 72 |         let matched;
 73 |         const ops: { fn: RevFormatFn; val: string }[] = [];
 74 | 
 75 |         for (let i = 0, matchIndex = 0, regexStr = ''; i < format.length; i++) {
 76 |           const token = format[i] as token;
 77 |           const isBackSlash = (token as string) === '\\';
 78 |           const escaped = format[i - 1] === '\\' || isBackSlash;
 79 | 
 80 |           if (tokenRegex[token] && !escaped) {
 81 |             regexStr += tokenRegex[token];
 82 |             const match = new RegExp(regexStr).exec(date);
 83 |             if (match && (matched = true)) {
 84 |               ops[token !== 'Y' ? 'push' : 'unshift']({
 85 |                 fn: revFormat[token],
 86 |                 val: match[++matchIndex],
 87 |               });
 88 |             }
 89 |           } else if (!isBackSlash) regexStr += '.'; // don't really care
 90 |         }
 91 | 
 92 |         parsedDate =
 93 |           !config || !config.noCalendar
 94 |             ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
 95 |             : (new Date(new Date().setHours(0, 0, 0, 0)) as Date);
 96 | 
 97 |         ops.forEach(
 98 |           ({ fn, val }) => (parsedDate = fn(parsedDate as Date, val, locale) || parsedDate)
 99 |         );
100 | 
101 |         parsedDate = matched ? parsedDate : undefined;
102 |       }
103 |     }
104 | 
105 |     /* istanbul ignore next */
106 |     if (!((parsedDate as Date).getDate && !isNaN(parsedDate.getTime()))) {
107 |       config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));
108 |       return undefined;
109 |     }
110 | 
111 |     if (timeless === true) parsedDate.setHours(0, 0, 0, 0);
112 | 
113 |     return parsedDate;
114 |   };
115 | 
116 | /**
117 |  * Compute the difference in dates, measured in ms
118 |  */
119 | export function compareDates(date1: Date, date2: Date, timeless = true) {
120 |   if (timeless !== false) {
121 |     return (
122 |       new Date(date1.getTime()).setHours(0, 0, 0, 0) -
123 |       new Date(date2.getTime()).setHours(0, 0, 0, 0)
124 |     );
125 |   }
126 | 
127 |   return date1.getTime() - date2.getTime();
128 | }
129 | 
130 | /**
131 |  * Compute the difference in times, measured in ms
132 |  */
133 | export function compareTimes(date1: Date, date2: Date) {
134 |   return (
135 |     3600 * (date1.getHours() - date2.getHours()) +
136 |     60 * (date1.getMinutes() - date2.getMinutes()) +
137 |     date1.getSeconds() -
138 |     date2.getSeconds()
139 |   );
140 | }
141 | 
142 | export const isBetween = (ts: number, ts1: number, ts2: number) => {
143 |   return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
144 | };
145 | 
146 | export const calculateSecondsSinceMidnight = (hours: number, minutes: number, seconds: number) => {
147 |   return hours * 3600 + minutes * 60 + seconds;
148 | };
149 | 
150 | export const parseSeconds = (secondsSinceMidnight: number) => {
151 |   const hours = Math.floor(secondsSinceMidnight / 3600),
152 |     minutes = (secondsSinceMidnight - hours * 3600) / 60;
153 |   return [hours, minutes, secondsSinceMidnight - hours * 3600 - minutes * 60];
154 | };
155 | 
156 | export const duration = {
157 |   DAY: 86400000,
158 | };
159 | 
160 | export function getDefaultHours(config: ParsedOptions) {
161 |   let hours = config.defaultHour;
162 |   let minutes = config.defaultMinute;
163 |   let seconds = config.defaultSeconds;
164 | 
165 |   if (config.minDate !== undefined) {
166 |     const minHour = config.minDate.getHours();
167 |     const minMinutes = config.minDate.getMinutes();
168 |     const minSeconds = config.minDate.getSeconds();
169 | 
170 |     if (hours < minHour) {
171 |       hours = minHour;
172 |     }
173 | 
174 |     if (hours === minHour && minutes < minMinutes) {
175 |       minutes = minMinutes;
176 |     }
177 | 
178 |     if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
179 |       seconds = config.minDate.getSeconds();
180 |   }
181 | 
182 |   if (config.maxDate !== undefined) {
183 |     const maxHr = config.maxDate.getHours();
184 |     const maxMinutes = config.maxDate.getMinutes();
185 |     hours = Math.min(hours, maxHr);
186 | 
187 |     if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);
188 |     if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();
189 |   }
190 | 
191 |   return { hours, minutes, seconds };
192 | }
193 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/utils/dom.ts:
--------------------------------------------------------------------------------
 1 | export function toggleClass(elem: HTMLElement, className: string, bool: boolean) {
 2 |   if (bool === true) return elem.classList.add(className);
 3 |   elem.classList.remove(className);
 4 | }
 5 | 
 6 | export function createElement<T extends HTMLElement>(
 7 |   doc: Document,
 8 |   tag: keyof HTMLElementTagNameMap,
 9 |   className: string,
10 |   content?: string
11 | ): T {
12 |   const e = doc.createElement(tag) as T;
13 |   className = className || '';
14 |   content = content || '';
15 | 
16 |   e.className = className;
17 | 
18 |   if (content !== undefined) e.textContent = content;
19 | 
20 |   return e;
21 | }
22 | 
23 | export function clearNode(node: HTMLElement) {
24 |   while (node.firstChild) node.removeChild(node.firstChild);
25 | }
26 | 
27 | export function findParent(node: Element, condition: (n: Element) => boolean): Element | undefined {
28 |   if (condition(node)) return node;
29 |   else if (node.parentNode) return findParent(node.parentNode as Element, condition);
30 | 
31 |   return undefined; // nothing found
32 | }
33 | 
34 | export function createNumberInput(
35 |   doc: Document,
36 |   inputClassName: string,
37 |   opts?: Record<string, any>
38 | ) {
39 |   const wrapper = createElement<HTMLDivElement>(doc, 'div', 'numInputWrapper'),
40 |     numInput = createElement<HTMLInputElement>(doc, 'input', 'numInput ' + inputClassName),
41 |     arrowUp = createElement<HTMLSpanElement>(doc, 'span', 'arrowUp'),
42 |     arrowDown = createElement<HTMLSpanElement>(doc, 'span', 'arrowDown');
43 | 
44 |   if (navigator.userAgent.indexOf('MSIE 9.0') === -1) {
45 |     numInput.type = 'number';
46 |   } else {
47 |     numInput.type = 'text';
48 |     numInput.pattern = '\\d*';
49 |   }
50 | 
51 |   if (opts !== undefined) for (const key in opts) numInput.setAttribute(key, opts[key]);
52 | 
53 |   wrapper.appendChild(numInput);
54 |   wrapper.appendChild(arrowUp);
55 |   wrapper.appendChild(arrowDown);
56 | 
57 |   return wrapper;
58 | }
59 | 
60 | export function getEventTarget(event: Event): EventTarget | null {
61 |   try {
62 |     if (typeof event.composedPath === 'function') {
63 |       const path = event.composedPath();
64 |       return path[0];
65 |     }
66 |     return event.target;
67 |   } catch (error) {
68 |     return event.target;
69 |   }
70 | }
71 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/utils/formatting.ts:
--------------------------------------------------------------------------------
  1 | import { Locale } from '../types/locale';
  2 | import { ParsedOptions } from '../types/options';
  3 | import { int, pad } from '../utils';
  4 | 
  5 | export type token =
  6 |   | 'D'
  7 |   | 'F'
  8 |   | 'G'
  9 |   | 'H'
 10 |   | 'J'
 11 |   | 'K'
 12 |   | 'M'
 13 |   | 'S'
 14 |   | 'U'
 15 |   | 'W'
 16 |   | 'Y'
 17 |   | 'Z'
 18 |   | 'd'
 19 |   | 'h'
 20 |   | 'i'
 21 |   | 'j'
 22 |   | 'l'
 23 |   | 'm'
 24 |   | 'n'
 25 |   | 's'
 26 |   | 'u'
 27 |   | 'w'
 28 |   | 'y';
 29 | 
 30 | const doNothing = (): undefined => undefined;
 31 | 
 32 | export const monthToStr = (monthNumber: number, shorthand: boolean, locale: Locale) =>
 33 |   locale.months[shorthand ? 'shorthand' : 'longhand'][monthNumber];
 34 | 
 35 | export type RevFormatFn = (date: Date, data: string, locale: Locale) => Date | void | undefined;
 36 | export type RevFormat = Record<string, RevFormatFn>;
 37 | export const revFormat: RevFormat = {
 38 |   D: doNothing,
 39 |   F: function (dateObj: Date, monthName: string, locale: Locale) {
 40 |     dateObj.setMonth(locale.months.longhand.indexOf(monthName));
 41 |   },
 42 |   G: (dateObj: Date, hour: string) => {
 43 |     dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
 44 |   },
 45 |   H: (dateObj: Date, hour: string) => {
 46 |     dateObj.setHours(parseFloat(hour));
 47 |   },
 48 |   J: (dateObj: Date, day: string) => {
 49 |     dateObj.setDate(parseFloat(day));
 50 |   },
 51 |   K: (dateObj: Date, amPM: string, locale: Locale) => {
 52 |     dateObj.setHours(
 53 |       (dateObj.getHours() % 12) + 12 * int(new RegExp(locale.amPM[1], 'i').test(amPM))
 54 |     );
 55 |   },
 56 |   M: function (dateObj: Date, shortMonth: string, locale: Locale) {
 57 |     dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
 58 |   },
 59 |   S: (dateObj: Date, seconds: string) => {
 60 |     dateObj.setSeconds(parseFloat(seconds));
 61 |   },
 62 |   U: (_: Date, unixSeconds: string) => new Date(parseFloat(unixSeconds) * 1000),
 63 | 
 64 |   W: function (dateObj: Date, weekNum: string, locale: Locale) {
 65 |     const weekNumber = parseInt(weekNum);
 66 |     const date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
 67 |     date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
 68 | 
 69 |     return date;
 70 |   },
 71 |   Y: (dateObj: Date, year: string) => {
 72 |     dateObj.setFullYear(parseFloat(year));
 73 |   },
 74 |   Z: (_: Date, ISODate: string) => new Date(ISODate),
 75 | 
 76 |   d: (dateObj: Date, day: string) => {
 77 |     dateObj.setDate(parseFloat(day));
 78 |   },
 79 |   h: (dateObj: Date, hour: string) => {
 80 |     dateObj.setHours((dateObj.getHours() >= 12 ? 12 : 0) + parseFloat(hour));
 81 |   },
 82 |   i: (dateObj: Date, minutes: string) => {
 83 |     dateObj.setMinutes(parseFloat(minutes));
 84 |   },
 85 |   j: (dateObj: Date, day: string) => {
 86 |     dateObj.setDate(parseFloat(day));
 87 |   },
 88 |   l: doNothing,
 89 |   m: (dateObj: Date, month: string) => {
 90 |     dateObj.setMonth(parseFloat(month) - 1);
 91 |   },
 92 |   n: (dateObj: Date, month: string) => {
 93 |     dateObj.setMonth(parseFloat(month) - 1);
 94 |   },
 95 |   s: (dateObj: Date, seconds: string) => {
 96 |     dateObj.setSeconds(parseFloat(seconds));
 97 |   },
 98 |   u: (_: Date, unixMillSeconds: string) => new Date(parseFloat(unixMillSeconds)),
 99 |   w: doNothing,
100 |   y: (dateObj: Date, year: string) => {
101 |     dateObj.setFullYear(2000 + parseFloat(year));
102 |   },
103 | };
104 | 
105 | export type TokenRegex = { [k in token]: string };
106 | export const tokenRegex: TokenRegex = {
107 |   D: '', // locale-dependent, setup on runtime
108 |   F: '', // locale-dependent, setup on runtime
109 |   G: '(\\d\\d|\\d)',
110 |   H: '(\\d\\d|\\d)',
111 |   J: '(\\d\\d|\\d)\\w+',
112 |   K: '', // locale-dependent, setup on runtime
113 |   M: '', // locale-dependent, setup on runtime
114 |   S: '(\\d\\d|\\d)',
115 |   U: '(.+)',
116 |   W: '(\\d\\d|\\d)',
117 |   Y: '(\\d{4})',
118 |   Z: '(.+)',
119 |   d: '(\\d\\d|\\d)',
120 |   h: '(\\d\\d|\\d)',
121 |   i: '(\\d\\d|\\d)',
122 |   j: '(\\d\\d|\\d)',
123 |   l: '', // locale-dependent, setup on runtime
124 |   m: '(\\d\\d|\\d)',
125 |   n: '(\\d\\d|\\d)',
126 |   s: '(\\d\\d|\\d)',
127 |   u: '(.+)',
128 |   w: '(\\d\\d|\\d)',
129 |   y: '(\\d{2})',
130 | };
131 | 
132 | export type Formats = Record<
133 |   token,
134 |   (date: Date, locale: Locale, options: ParsedOptions) => string | number
135 | >;
136 | export const formats: Formats = {
137 |   // get the date in UTC
138 |   Z: (date: Date) => date.toISOString(),
139 | 
140 |   // weekday name, short, e.g. Thu
141 |   D: function (date: Date, locale: Locale, options: ParsedOptions) {
142 |     return locale.weekdays.shorthand[formats.w(date, locale, options) as number];
143 |   },
144 | 
145 |   // full month name e.g. January
146 |   F: function (date: Date, locale: Locale, options: ParsedOptions) {
147 |     return monthToStr((formats.n(date, locale, options) as number) - 1, false, locale);
148 |   },
149 | 
150 |   // padded hour 1-12
151 |   G: function (date: Date, locale: Locale, options: ParsedOptions) {
152 |     return pad(formats.h(date, locale, options));
153 |   },
154 | 
155 |   // hours with leading zero e.g. 03
156 |   H: (date: Date) => pad(date.getHours()),
157 | 
158 |   // day (1-30) with ordinal suffix e.g. 1st, 2nd
159 |   J: function (date: Date, locale: Locale) {
160 |     return locale.ordinal !== undefined
161 |       ? date.getDate() + locale.ordinal(date.getDate())
162 |       : date.getDate();
163 |   },
164 | 
165 |   // AM/PM
166 |   K: (date: Date, locale: Locale) => locale.amPM[int(date.getHours() > 11)],
167 | 
168 |   // shorthand month e.g. Jan, Sep, Oct, etc
169 |   M: function (date: Date, locale: Locale) {
170 |     return monthToStr(date.getMonth(), true, locale);
171 |   },
172 | 
173 |   // seconds 00-59
174 |   S: (date: Date) => pad(date.getSeconds()),
175 | 
176 |   // unix timestamp
177 |   U: (date: Date) => date.getTime() / 1000,
178 | 
179 |   W: function (date: Date, _: Locale, options: ParsedOptions) {
180 |     return options.getWeek(date);
181 |   },
182 | 
183 |   // full year e.g. 2016, padded (0001-9999)
184 |   Y: (date: Date) => pad(date.getFullYear(), 4),
185 | 
186 |   // day in month, padded (01-30)
187 |   d: (date: Date) => pad(date.getDate()),
188 | 
189 |   // hour from 1-12 (am/pm)
190 |   h: (date: Date) => (date.getHours() % 12 ? date.getHours() % 12 : 12),
191 | 
192 |   // minutes, padded with leading zero e.g. 09
193 |   i: (date: Date) => pad(date.getMinutes()),
194 | 
195 |   // day in month (1-30)
196 |   j: (date: Date) => date.getDate(),
197 | 
198 |   // weekday name, full, e.g. Thursday
199 |   l: function (date: Date, locale: Locale) {
200 |     return locale.weekdays.longhand[date.getDay()];
201 |   },
202 | 
203 |   // padded month number (01-12)
204 |   m: (date: Date) => pad(date.getMonth() + 1),
205 | 
206 |   // the month number (1-12)
207 |   n: (date: Date) => date.getMonth() + 1,
208 | 
209 |   // seconds 0-59
210 |   s: (date: Date) => date.getSeconds(),
211 | 
212 |   // Unix Milliseconds
213 |   u: (date: Date) => date.getTime(),
214 | 
215 |   // number of the day of the week
216 |   w: (date: Date) => date.getDay(),
217 | 
218 |   // last two digits of year e.g. 16 for 2016
219 |   y: (date: Date) => String(date.getFullYear()).substring(2),
220 | };
221 | 


--------------------------------------------------------------------------------
/src/components/Editor/flatpickr/utils/index.ts:
--------------------------------------------------------------------------------
 1 | /* eslint-disable prefer-rest-params */
 2 | /* eslint-disable @typescript-eslint/ban-types */
 3 | export const pad = (number: string | number, length = 2) => `000${number}`.slice(length * -1);
 4 | export const int = (bool: boolean) => (bool === true ? 1 : 0);
 5 | 
 6 | /* istanbul ignore next */
 7 | export function debounce<F extends Function>(fn: F, wait: number, win: Window) {
 8 |   let t: number;
 9 |   return function (this: any) {
10 |     const args = arguments;
11 |     win.clearTimeout(t);
12 |     t = win.setTimeout(() => fn.apply(this, args), wait);
13 |   };
14 | }
15 | 
16 | export const arrayify = <T>(obj: T | T[]): T[] => (Array.isArray(obj) ? obj : [obj]);
17 | 
18 | export type IncrementEvent = MouseEvent & { delta: number; type: 'increment' };
19 | 


--------------------------------------------------------------------------------
/src/components/Editor/helpers.ts:
--------------------------------------------------------------------------------
 1 | import { StateManager } from 'src/StateManager';
 2 | 
 3 | export function getDropAction(stateManager: StateManager, transfer: DataTransfer) {
 4 |   // Return a 'copy' or 'link' action according to the content types, or undefined if no recognized type
 5 |   if (transfer.types.includes('text/uri-list')) return 'link';
 6 |   if (
 7 |     ['file', 'files', 'link', 'folder'].includes(
 8 |       (stateManager.app as any).dragManager.draggable?.type
 9 |     )
10 |   )
11 |     return 'link';
12 |   if (transfer.types.includes('text/html') || transfer.types.includes('text/plain')) return 'copy';
13 | }
14 | 


--------------------------------------------------------------------------------
/src/components/Editor/suggest.ts:
--------------------------------------------------------------------------------
  1 | import {
  2 |   App,
  3 |   Editor,
  4 |   EditorPosition,
  5 |   EditorSuggest,
  6 |   EditorSuggestContext,
  7 |   EditorSuggestTriggerInfo,
  8 |   TFile,
  9 |   moment,
 10 | } from 'obsidian';
 11 | 
 12 | import KanbanPlugin from '../../main';
 13 | import { buildTimeArray } from '../Item/helpers';
 14 | import { c, escapeRegExpStr } from '../helpers';
 15 | import { applyDate, constructDatePicker, toNextMonth, toPreviousMonth } from './datepicker';
 16 | import { Instance } from './flatpickr/types/instance';
 17 | 
 18 | export function matchTimeTrigger(timeTrigger: string, editor: Editor, cursor: EditorPosition) {
 19 |   const textCtx = (editor.getLine(cursor.line) || '').slice(0, cursor.ch);
 20 |   const timeTriggerRegex = new RegExp(`(?:^|\\s)${escapeRegExpStr(timeTrigger)}{?([^}]*)$`);
 21 |   return textCtx.match(timeTriggerRegex);
 22 | }
 23 | 
 24 | export function matchDateTrigger(dateTrigger: string, editor: Editor, cursor: EditorPosition) {
 25 |   const textCtx = (editor.getLine(cursor.line) || '').slice(0, cursor.ch);
 26 |   const dateTriggerRegex = new RegExp(`(?:^|\\s)${escapeRegExpStr(dateTrigger)}{?([^}]*)$`);
 27 |   return textCtx.match(dateTriggerRegex);
 28 | }
 29 | 
 30 | export class DateSuggest extends EditorSuggest<[]> {
 31 |   plugin: KanbanPlugin;
 32 |   app: App;
 33 | 
 34 |   get stateManager() {
 35 |     return this.context ? this.plugin.stateManagers.get(this.context.file) : null;
 36 |   }
 37 | 
 38 |   constructor(app: App, plugin: KanbanPlugin) {
 39 |     super(app);
 40 | 
 41 |     this.app = app;
 42 |     this.plugin = plugin;
 43 | 
 44 |     [...(this.scope as any).keys].forEach((k: any) => this.scope.unregister(k));
 45 | 
 46 |     this.suggestEl.addClass(c('date-suggest'));
 47 | 
 48 |     const move = (dir: 'up' | 'right' | 'down' | 'left') => {
 49 |       const { datepicker } = this;
 50 |       if (!datepicker) return;
 51 | 
 52 |       const currentDate = moment(datepicker.selectedDates[0] || new Date());
 53 |       let nextDate: Date;
 54 | 
 55 |       if (dir === 'right') {
 56 |         if (currentDate.weekday() === 6) {
 57 |           nextDate = toNextMonth(currentDate).toDate();
 58 |         } else {
 59 |           nextDate = currentDate.add(1, 'day').toDate();
 60 |         }
 61 |       } else if (dir === 'left') {
 62 |         if (currentDate.weekday() === 0) {
 63 |           nextDate = toPreviousMonth(currentDate).toDate();
 64 |         } else {
 65 |           nextDate = currentDate.subtract(1, 'day').toDate();
 66 |         }
 67 |       } else if (dir === 'up') {
 68 |         nextDate = currentDate.subtract(1, 'week').toDate();
 69 |       } else if (dir === 'down') {
 70 |         nextDate = currentDate.add(1, 'week').toDate();
 71 |       }
 72 | 
 73 |       if (nextDate) {
 74 |         datepicker.setDate(nextDate, false);
 75 |         return false;
 76 |       }
 77 |     };
 78 | 
 79 |     this.scope.register([], 'ArrowLeft', () => move('left'));
 80 |     this.scope.register([], 'ArrowRight', () => move('right'));
 81 |     this.scope.register([], 'ArrowDown', () => move('down'));
 82 |     this.scope.register([], 'ArrowUp', () => move('up'));
 83 | 
 84 |     this.scope.register([], 'Enter', () => {
 85 |       const selectedDates = this.datepicker.selectedDates;
 86 |       const ctx = this.context;
 87 | 
 88 |       if (selectedDates.length) {
 89 |         applyDate(ctx, this.stateManager, selectedDates[0]);
 90 |       } else {
 91 |         applyDate(ctx, this.stateManager, new Date());
 92 |       }
 93 | 
 94 |       this.close();
 95 |       return false;
 96 |     });
 97 | 
 98 |     this.scope.register([], 'Escape', () => {
 99 |       this.close();
100 |       return false;
101 |     });
102 |   }
103 | 
104 |   getSuggestions(): [] {
105 |     return [];
106 |   }
107 | 
108 |   suggestEl: HTMLElement;
109 |   renderSuggestion(): void {}
110 |   selectSuggestion(): void {}
111 | 
112 |   datepicker: Instance = null;
113 |   showSuggestions() {
114 |     const { datepicker, suggestEl, context, stateManager } = this;
115 |     if (!datepicker && stateManager) {
116 |       suggestEl.empty();
117 |       suggestEl.addClasses([c('date-picker'), c('ignore-click-outside')]);
118 |       constructDatePicker(context, stateManager, suggestEl, (picker) => {
119 |         this.datepicker = picker;
120 |         // eslint-disable-next-line @typescript-eslint/ban-ts-comment
121 |         // @ts-ignore
122 |         this.updatePosition(true);
123 |       });
124 |     }
125 |   }
126 | 
127 |   onTrigger(cursor: EditorPosition, editor: Editor, file: TFile): EditorSuggestTriggerInfo | null {
128 |     const stateManager = this.plugin.getStateManager(file);
129 |     if (!stateManager) return null;
130 | 
131 |     const dateTrigger = stateManager.getSetting('date-trigger');
132 |     const match = matchDateTrigger(dateTrigger, editor, cursor);
133 |     if (!match) return null;
134 | 
135 |     return {
136 |       start: { line: cursor.line, ch: cursor.ch - dateTrigger.length },
137 |       end: cursor,
138 |       query: dateTrigger,
139 |     };
140 |   }
141 | 
142 |   close() {
143 |     super.close();
144 | 
145 |     if (this.datepicker) {
146 |       this.datepicker.destroy();
147 |       this.datepicker = null;
148 |       this.suggestEl.empty();
149 |     }
150 |   }
151 | }
152 | 
153 | export class TimeSuggest extends EditorSuggest<string> {
154 |   plugin: KanbanPlugin;
155 |   times: string[];
156 | 
157 |   constructor(app: App, plugin: KanbanPlugin) {
158 |     super(app);
159 |     this.app = app;
160 |     this.plugin = plugin;
161 |   }
162 | 
163 |   onTrigger(cursor: EditorPosition, editor: Editor, file: TFile): EditorSuggestTriggerInfo {
164 |     const stateManager = this.plugin.getStateManager(file);
165 |     if (!stateManager) return null;
166 | 
167 |     const timeTrigger = stateManager.getSetting('time-trigger');
168 |     const match = matchTimeTrigger(timeTrigger, editor, cursor);
169 |     if (!match) return null;
170 | 
171 |     this.times = buildTimeArray(stateManager);
172 | 
173 |     return {
174 |       start: {
175 |         line: cursor.line,
176 |         ch: cursor.ch - match[1].length - timeTrigger.length,
177 |       },
178 |       end: cursor,
179 |       query: match[1],
180 |     };
181 |   }
182 | 
183 |   getSuggestions(context: EditorSuggestContext): string[] | Promise<string[]> {
184 |     const stateManager = this.plugin.getStateManager(context.file);
185 |     if (!stateManager) return [];
186 | 
187 |     return this.times.filter((t) => {
188 |       return t.startsWith(context.query) || t.startsWith('0' + context.query);
189 |     });
190 |   }
191 | 
192 |   renderSuggestion(value: string, el: HTMLElement): void {
193 |     if (value.endsWith('00')) {
194 |       el.createEl('strong', { text: value });
195 |     } else {
196 |       el.setText(value);
197 |     }
198 |   }
199 | 
200 |   selectSuggestion(value: string): void {
201 |     const { context, plugin } = this;
202 |     const stateManager = plugin.getStateManager(context.file);
203 |     if (!stateManager) return;
204 | 
205 |     const timeTrigger = stateManager.getSetting('time-trigger');
206 |     const replacement = `${timeTrigger}{${value}} `;
207 | 
208 |     context.editor.replaceRange(replacement, context.start, context.end);
209 |     context.editor.setCursor({
210 |       line: context.start.line,
211 |       ch: context.start.ch + replacement.length,
212 |     });
213 |     context.editor.focus();
214 |   }
215 | 
216 |   close(): void {
217 |     super.close();
218 |     this.times = null;
219 |   }
220 | }
221 | 


--------------------------------------------------------------------------------
/src/components/Icon/GripIcon.tsx:
--------------------------------------------------------------------------------
 1 | export function GripIcon(props: any) {
 2 |   return (
 3 |     <svg {...props} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16">
 4 |       <path
 5 |         fill="currentColor"
 6 |         d="M5 3h2v2H5zm0 4h2v2H5zm0 4h2v2H5zm4-8h2v2H9zm0 4h2v2H9zm0 4h2v2H9z"
 7 |       ></path>
 8 |     </svg>
 9 |   );
10 | }
11 | 


--------------------------------------------------------------------------------
/src/components/Icon/Icon.tsx:
--------------------------------------------------------------------------------
 1 | import { setIcon } from 'obsidian';
 2 | 
 3 | import { c } from '../helpers';
 4 | 
 5 | interface IconProps {
 6 |   name: string;
 7 |   className?: string;
 8 | }
 9 | 
10 | export function Icon({ name, className }: IconProps) {
11 |   return (
12 |     <span
13 |       data-icon={name}
14 |       className={`${c('icon')} ${className || ''}`}
15 |       ref={(c) => {
16 |         if (c) {
17 |           setIcon(c, name);
18 |         }
19 |       }}
20 |     />
21 |   );
22 | }
23 | 


--------------------------------------------------------------------------------
/src/components/Item/DateAndTime.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import { getLinkpath, moment } from 'obsidian';
  3 | import { JSX, useMemo } from 'preact/compat';
  4 | import { StateManager } from 'src/StateManager';
  5 | import { t } from 'src/lang/helpers';
  6 | 
  7 | import { c } from '../helpers';
  8 | import { DateColor, Item } from '../types';
  9 | 
 10 | export function getRelativeDate(date: moment.Moment, time: moment.Moment) {
 11 |   if (time) {
 12 |     return time.from(moment());
 13 |   }
 14 | 
 15 |   const today = moment().startOf('day');
 16 | 
 17 |   if (today.isSame(date, 'day')) {
 18 |     return t('today');
 19 |   }
 20 | 
 21 |   const diff = date.diff(today, 'day');
 22 | 
 23 |   if (diff === -1) {
 24 |     return t('yesterday');
 25 |   }
 26 | 
 27 |   if (diff === 1) {
 28 |     return t('tomorrow');
 29 |   }
 30 | 
 31 |   return date.from(today);
 32 | }
 33 | 
 34 | interface DateProps {
 35 |   item: Item;
 36 |   stateManager: StateManager;
 37 | }
 38 | 
 39 | export function RelativeDate({ item, stateManager }: DateProps) {
 40 |   const shouldShowRelativeDate = stateManager.useSetting('show-relative-date');
 41 | 
 42 |   if (!shouldShowRelativeDate || !item.data.metadata.date) {
 43 |     return null;
 44 |   }
 45 | 
 46 |   const relativeDate = getRelativeDate(item.data.metadata.date, item.data.metadata.time);
 47 | 
 48 |   return <span className={c('item-metadata-date-relative')}>{relativeDate}</span>;
 49 | }
 50 | 
 51 | interface DateAndTimeProps {
 52 |   onEditDate?: JSX.MouseEventHandler<HTMLSpanElement>;
 53 |   onEditTime?: JSX.MouseEventHandler<HTMLSpanElement>;
 54 |   filePath: string;
 55 |   getDateColor: (date: moment.Moment) => DateColor;
 56 | }
 57 | 
 58 | export function DateAndTime({
 59 |   item,
 60 |   stateManager,
 61 |   filePath,
 62 |   onEditDate,
 63 |   onEditTime,
 64 |   getDateColor,
 65 | }: DateProps & DateAndTimeProps) {
 66 |   const moveDates = stateManager.useSetting('move-dates');
 67 |   const dateFormat = stateManager.useSetting('date-format');
 68 |   const timeFormat = stateManager.useSetting('time-format');
 69 |   const dateDisplayFormat = stateManager.useSetting('date-display-format');
 70 |   const shouldLinkDate = stateManager.useSetting('link-date-to-daily-note');
 71 | 
 72 |   const targetDate = item.data.metadata.time ?? item.data.metadata.date;
 73 |   const dateColor = useMemo(() => {
 74 |     if (!targetDate) return null;
 75 |     return getDateColor(targetDate);
 76 |   }, [targetDate, getDateColor]);
 77 | 
 78 |   if (!moveDates || !targetDate) return null;
 79 | 
 80 |   const dateStr = targetDate.format(dateFormat);
 81 | 
 82 |   if (!dateStr) return null;
 83 | 
 84 |   const hasDate = !!item.data.metadata.date;
 85 |   const hasTime = !!item.data.metadata.time;
 86 |   const dateDisplayStr = targetDate.format(dateDisplayFormat);
 87 |   const timeDisplayStr = !hasTime ? null : targetDate.format(timeFormat);
 88 | 
 89 |   const datePath = dateStr ? getLinkpath(dateStr) : null;
 90 |   const isResolved = dateStr
 91 |     ? stateManager.app.metadataCache.getFirstLinkpathDest(datePath, filePath)
 92 |     : null;
 93 |   const date =
 94 |     datePath && shouldLinkDate ? (
 95 |       <a
 96 |         href={datePath}
 97 |         data-href={datePath}
 98 |         className={`internal-link ${isResolved ? '' : 'is-unresolved'}`}
 99 |         target="blank"
100 |         rel="noopener"
101 |       >
102 |         {dateDisplayStr}
103 |       </a>
104 |     ) : (
105 |       dateDisplayStr
106 |     );
107 | 
108 |   const dateProps: HTMLAttributes<HTMLSpanElement> = {};
109 | 
110 |   if (!shouldLinkDate) {
111 |     dateProps['aria-label'] = t('Change date');
112 |     dateProps.onClick = onEditDate;
113 |   }
114 | 
115 |   return (
116 |     <span
117 |       style={
118 |         dateColor && {
119 |           '--date-color': dateColor.color,
120 |           '--date-background-color': dateColor.backgroundColor,
121 |         }
122 |       }
123 |       className={classcat([
124 |         c('item-metadata-date-wrapper'),
125 |         c('date'),
126 |         {
127 |           'has-background': !!dateColor?.backgroundColor,
128 |         },
129 |       ])}
130 |     >
131 |       {hasDate && (
132 |         <>
133 |           <span
134 |             {...dateProps}
135 |             className={`${c('item-metadata-date')} ${!shouldLinkDate ? 'is-button' : ''}`}
136 |           >
137 |             {date}
138 |           </span>{' '}
139 |         </>
140 |       )}
141 |       {hasTime && (
142 |         <span
143 |           onClick={onEditTime}
144 |           className={`${c('item-metadata-time')} is-button`}
145 |           aria-label={t('Change time')}
146 |         >
147 |           {timeDisplayStr}
148 |         </span>
149 |       )}
150 |     </span>
151 |   );
152 | }
153 | 


--------------------------------------------------------------------------------
/src/components/Item/InlineMetadata.tsx:
--------------------------------------------------------------------------------
 1 | import classcat from 'classcat';
 2 | import { useContext } from 'preact/compat';
 3 | import { StateManager } from 'src/StateManager';
 4 | import {
 5 |   getDataviewPlugin,
 6 |   lableToIcon,
 7 |   lableToName,
 8 |   taskFields,
 9 | } from 'src/parsers/helpers/inlineMetadata';
10 | 
11 | import { SearchContext } from '../context';
12 | import { c, parseMetadataWithOptions } from '../helpers';
13 | import { Item } from '../types';
14 | import { MetadataValue } from './MetadataTable';
15 | 
16 | interface InlineMetadataProps {
17 |   item: Item;
18 |   stateManager: StateManager;
19 | }
20 | 
21 | export function InlineMetadata({ item, stateManager }: InlineMetadataProps) {
22 |   const search = useContext(SearchContext);
23 |   const metaKeys = stateManager.getSetting('metadata-keys');
24 |   const showInlineMetadata = stateManager.useSetting('inline-metadata-position') === 'footer';
25 |   const showTaskMetadata = stateManager.useSetting('move-task-metadata');
26 |   const { inlineMetadata } = item.data.metadata;
27 | 
28 |   if (!inlineMetadata || (!showInlineMetadata && !showTaskMetadata)) return null;
29 | 
30 |   const dataview = getDataviewPlugin();
31 | 
32 |   return (
33 |     <span className={c('item-task-metadata')}>
34 |       {inlineMetadata.map((m, i) => {
35 |         const data = parseMetadataWithOptions(m, metaKeys);
36 |         const { metadataKey: key, value, label: explicitLabel } = data;
37 |         const isTaskMetadata = taskFields.has(key);
38 | 
39 |         if (!showTaskMetadata && isTaskMetadata) return null;
40 |         if (!showInlineMetadata && !isTaskMetadata) return null;
41 | 
42 |         const isEmoji = m.wrapping === 'emoji-shorthand';
43 |         const val = dataview?.api?.parse(value) ?? value;
44 |         const isEmojiPriority = isEmoji && key === 'priority';
45 |         const isDate = !!val?.ts;
46 |         const classNameSlug = key.replace(/[^a-zA-Z0-9_]/g, '-');
47 | 
48 |         let label = '';
49 | 
50 |         if (explicitLabel && !isTaskMetadata) {
51 |           label = explicitLabel;
52 |         } else {
53 |           label = isEmoji ? lableToIcon(key, value) : lableToName(key);
54 |         }
55 | 
56 |         if (!isEmoji) label += ': ';
57 | 
58 |         return (
59 |           <span
60 |             className={classcat([
61 |               c('item-task-inline-metadata-item'),
62 |               c(`inline-metadata__${classNameSlug}`),
63 |               {
64 |                 'is-task-metadata': isTaskMetadata,
65 |                 'is-emoji': isEmoji,
66 |                 'is-date': isDate,
67 |               },
68 |             ])}
69 |             key={i}
70 |           >
71 |             {!isDate && <span className={c('item-task-inline-metadata-item-key')}>{label}</span>}
72 |             {!isEmojiPriority && (
73 |               <span className={c('item-task-inline-metadata-item-value')}>
74 |                 <MetadataValue
75 |                   searchQuery={search?.query}
76 |                   dateLabel={isDate ? label : undefined}
77 |                   data={data}
78 |                 />
79 |               </span>
80 |             )}
81 |           </span>
82 |         );
83 |       })}
84 |     </span>
85 |   );
86 | }
87 | 


--------------------------------------------------------------------------------
/src/components/Item/Item.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import {
  3 |   JSX,
  4 |   memo,
  5 |   useCallback,
  6 |   useContext,
  7 |   useEffect,
  8 |   useMemo,
  9 |   useRef,
 10 |   useState,
 11 | } from 'preact/compat';
 12 | import { Droppable, useNestedEntityPath } from 'src/dnd/components/Droppable';
 13 | import { DndManagerContext } from 'src/dnd/components/context';
 14 | import { useDragHandle } from 'src/dnd/managers/DragManager';
 15 | import { frontmatterKey } from 'src/parsers/common';
 16 | 
 17 | import { KanbanContext, SearchContext } from '../context';
 18 | import { c } from '../helpers';
 19 | import { EditState, EditingState, Item, isEditing } from '../types';
 20 | import { ItemCheckbox } from './ItemCheckbox';
 21 | import { ItemContent } from './ItemContent';
 22 | import { useItemMenu } from './ItemMenu';
 23 | import { ItemMenuButton } from './ItemMenuButton';
 24 | import { ItemMetadata } from './MetadataTable';
 25 | import { getItemClassModifiers } from './helpers';
 26 | 
 27 | export interface DraggableItemProps {
 28 |   item: Item;
 29 |   itemIndex: number;
 30 |   isStatic?: boolean;
 31 |   shouldMarkItemsComplete?: boolean;
 32 | }
 33 | 
 34 | export interface ItemInnerProps {
 35 |   item: Item;
 36 |   isStatic?: boolean;
 37 |   shouldMarkItemsComplete?: boolean;
 38 |   isMatch?: boolean;
 39 |   searchQuery?: string;
 40 | }
 41 | 
 42 | const ItemInner = memo(function ItemInner({
 43 |   item,
 44 |   shouldMarkItemsComplete,
 45 |   isMatch,
 46 |   searchQuery,
 47 |   isStatic,
 48 | }: ItemInnerProps) {
 49 |   const { stateManager, boardModifiers } = useContext(KanbanContext);
 50 |   const [editState, setEditState] = useState<EditState>(EditingState.cancel);
 51 | 
 52 |   const dndManager = useContext(DndManagerContext);
 53 | 
 54 |   useEffect(() => {
 55 |     const handler = () => {
 56 |       if (isEditing(editState)) setEditState(EditingState.cancel);
 57 |     };
 58 | 
 59 |     dndManager.dragManager.emitter.on('dragStart', handler);
 60 |     return () => {
 61 |       dndManager.dragManager.emitter.off('dragStart', handler);
 62 |     };
 63 |   }, [dndManager, editState]);
 64 | 
 65 |   useEffect(() => {
 66 |     if (item.data.forceEditMode) {
 67 |       setEditState({ x: 0, y: 0 });
 68 |     }
 69 |   }, [item.data.forceEditMode]);
 70 | 
 71 |   const path = useNestedEntityPath();
 72 | 
 73 |   const showItemMenu = useItemMenu({
 74 |     boardModifiers,
 75 |     item,
 76 |     setEditState: setEditState,
 77 |     stateManager,
 78 |     path,
 79 |   });
 80 | 
 81 |   const onContextMenu: JSX.MouseEventHandler<HTMLDivElement> = useCallback(
 82 |     (e) => {
 83 |       if (isEditing(editState)) return;
 84 |       if (
 85 |         e.targetNode.instanceOf(HTMLAnchorElement) &&
 86 |         (e.targetNode.hasClass('internal-link') || e.targetNode.hasClass('external-link'))
 87 |       ) {
 88 |         return;
 89 |       }
 90 |       showItemMenu(e);
 91 |     },
 92 |     [showItemMenu, editState]
 93 |   );
 94 | 
 95 |   const onDoubleClick: JSX.MouseEventHandler<HTMLDivElement> = useCallback(
 96 |     (e) => setEditState({ x: e.clientX, y: e.clientY }),
 97 |     [setEditState]
 98 |   );
 99 | 
100 |   const ignoreAttr = useMemo(() => {
101 |     if (isEditing(editState)) {
102 |       return {
103 |         'data-ignore-drag': true,
104 |       };
105 |     }
106 | 
107 |     return {};
108 |   }, [editState]);
109 | 
110 |   return (
111 |     <div
112 |       // eslint-disable-next-line react/no-unknown-property
113 |       onDblClick={onDoubleClick}
114 |       onContextMenu={onContextMenu}
115 |       className={c('item-content-wrapper')}
116 |       {...ignoreAttr}
117 |     >
118 |       <div className={c('item-title-wrapper')} {...ignoreAttr}>
119 |         <ItemCheckbox
120 |           boardModifiers={boardModifiers}
121 |           item={item}
122 |           path={path}
123 |           shouldMarkItemsComplete={shouldMarkItemsComplete}
124 |           stateManager={stateManager}
125 |         />
126 |         <ItemContent
127 |           item={item}
128 |           searchQuery={isMatch ? searchQuery : undefined}
129 |           setEditState={setEditState}
130 |           editState={editState}
131 |           isStatic={isStatic}
132 |         />
133 |         <ItemMenuButton editState={editState} setEditState={setEditState} showMenu={showItemMenu} />
134 |       </div>
135 |       <ItemMetadata searchQuery={isMatch ? searchQuery : undefined} item={item} />
136 |     </div>
137 |   );
138 | });
139 | 
140 | export const DraggableItem = memo(function DraggableItem(props: DraggableItemProps) {
141 |   const elementRef = useRef<HTMLDivElement>(null);
142 |   const measureRef = useRef<HTMLDivElement>(null);
143 |   const search = useContext(SearchContext);
144 | 
145 |   const { itemIndex, ...innerProps } = props;
146 | 
147 |   const bindHandle = useDragHandle(measureRef, measureRef);
148 | 
149 |   const isMatch = search?.query ? innerProps.item.data.titleSearch.includes(search.query) : false;
150 |   const classModifiers: string[] = getItemClassModifiers(innerProps.item);
151 | 
152 |   return (
153 |     <div
154 |       ref={(el) => {
155 |         measureRef.current = el;
156 |         bindHandle(el);
157 |       }}
158 |       className={c('item-wrapper')}
159 |     >
160 |       <div ref={elementRef} className={classcat([c('item'), ...classModifiers])}>
161 |         {props.isStatic ? (
162 |           <ItemInner
163 |             {...innerProps}
164 |             isMatch={isMatch}
165 |             searchQuery={search?.query}
166 |             isStatic={true}
167 |           />
168 |         ) : (
169 |           <Droppable
170 |             elementRef={elementRef}
171 |             measureRef={measureRef}
172 |             id={props.item.id}
173 |             index={itemIndex}
174 |             data={props.item}
175 |           >
176 |             <ItemInner {...innerProps} isMatch={isMatch} searchQuery={search?.query} />
177 |           </Droppable>
178 |         )}
179 |       </div>
180 |     </div>
181 |   );
182 | });
183 | 
184 | interface ItemsProps {
185 |   isStatic?: boolean;
186 |   items: Item[];
187 |   shouldMarkItemsComplete: boolean;
188 | }
189 | 
190 | export const Items = memo(function Items({ isStatic, items, shouldMarkItemsComplete }: ItemsProps) {
191 |   const search = useContext(SearchContext);
192 |   const { view } = useContext(KanbanContext);
193 |   const boardView = view.useViewState(frontmatterKey);
194 | 
195 |   return (
196 |     <>
197 |       {items.map((item, i) => {
198 |         return search?.query && !search.items.has(item) ? null : (
199 |           <DraggableItem
200 |             key={boardView + item.id}
201 |             item={item}
202 |             itemIndex={i}
203 |             shouldMarkItemsComplete={shouldMarkItemsComplete}
204 |             isStatic={isStatic}
205 |           />
206 |         );
207 |       })}
208 |     </>
209 |   );
210 | });
211 | 


--------------------------------------------------------------------------------
/src/components/Item/ItemCheckbox.tsx:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { memo, useCallback, useEffect, useState } from 'preact/compat';
  3 | import { StateManager } from 'src/StateManager';
  4 | import { Path } from 'src/dnd/types';
  5 | import { getTaskStatusDone, toggleTask } from 'src/parsers/helpers/inlineMetadata';
  6 | 
  7 | import { BoardModifiers } from '../../helpers/boardModifiers';
  8 | import { Icon } from '../Icon/Icon';
  9 | import { c } from '../helpers';
 10 | import { Item } from '../types';
 11 | 
 12 | interface ItemCheckboxProps {
 13 |   path: Path;
 14 |   item: Item;
 15 |   shouldMarkItemsComplete: boolean;
 16 |   stateManager: StateManager;
 17 |   boardModifiers: BoardModifiers;
 18 | }
 19 | 
 20 | export const ItemCheckbox = memo(function ItemCheckbox({
 21 |   shouldMarkItemsComplete,
 22 |   path,
 23 |   item,
 24 |   stateManager,
 25 |   boardModifiers,
 26 | }: ItemCheckboxProps) {
 27 |   const shouldShowCheckbox = stateManager.useSetting('show-checkboxes');
 28 | 
 29 |   const [isCtrlHoveringCheckbox, setIsCtrlHoveringCheckbox] = useState(false);
 30 |   const [isHoveringCheckbox, setIsHoveringCheckbox] = useState(false);
 31 | 
 32 |   const onCheckboxChange = useCallback(() => {
 33 |     const updates = toggleTask(item, stateManager.file);
 34 |     if (updates) {
 35 |       const [itemStrings, checkChars, thisIndex] = updates;
 36 |       const replacements: Item[] = itemStrings.map((str, i) => {
 37 |         const next = stateManager.getNewItem(str, checkChars[i]);
 38 |         if (i === thisIndex) next.id = item.id;
 39 |         return next;
 40 |       });
 41 | 
 42 |       boardModifiers.replaceItem(path, replacements);
 43 |     } else {
 44 |       boardModifiers.updateItem(
 45 |         path,
 46 |         update(item, {
 47 |           data: {
 48 |             checkChar: {
 49 |               $apply: (v) => {
 50 |                 return v === ' ' ? getTaskStatusDone() : ' ';
 51 |               },
 52 |             },
 53 |             $toggle: ['checked'],
 54 |           },
 55 |         })
 56 |       );
 57 |     }
 58 |   }, [item, stateManager, boardModifiers, ...path]);
 59 | 
 60 |   useEffect(() => {
 61 |     if (isHoveringCheckbox) {
 62 |       const handler = (e: KeyboardEvent) => {
 63 |         if (e.metaKey || e.ctrlKey) {
 64 |           setIsCtrlHoveringCheckbox(true);
 65 |         } else {
 66 |           setIsCtrlHoveringCheckbox(false);
 67 |         }
 68 |       };
 69 | 
 70 |       activeWindow.addEventListener('keydown', handler);
 71 |       activeWindow.addEventListener('keyup', handler);
 72 | 
 73 |       return () => {
 74 |         activeWindow.removeEventListener('keydown', handler);
 75 |         activeWindow.removeEventListener('keyup', handler);
 76 |       };
 77 |     }
 78 |   }, [isHoveringCheckbox]);
 79 | 
 80 |   if (!(shouldMarkItemsComplete || shouldShowCheckbox)) {
 81 |     return null;
 82 |   }
 83 | 
 84 |   return (
 85 |     <div
 86 |       onMouseEnter={(e) => {
 87 |         setIsHoveringCheckbox(true);
 88 | 
 89 |         if (e.ctrlKey || e.metaKey) {
 90 |           setIsCtrlHoveringCheckbox(true);
 91 |         }
 92 |       }}
 93 |       onMouseLeave={() => {
 94 |         setIsHoveringCheckbox(false);
 95 | 
 96 |         if (isCtrlHoveringCheckbox) {
 97 |           setIsCtrlHoveringCheckbox(false);
 98 |         }
 99 |       }}
100 |       className={c('item-prefix-button-wrapper')}
101 |     >
102 |       {shouldShowCheckbox && !isCtrlHoveringCheckbox && (
103 |         <input
104 |           onChange={onCheckboxChange}
105 |           type="checkbox"
106 |           className="task-list-item-checkbox"
107 |           checked={item.data.checked}
108 |           data-task={item.data.checkChar}
109 |         />
110 |       )}
111 |       {(isCtrlHoveringCheckbox || (!shouldShowCheckbox && shouldMarkItemsComplete)) && (
112 |         <a
113 |           onClick={() => {
114 |             boardModifiers.archiveItem(path);
115 |           }}
116 |           className={`${c('item-prefix-button')} clickable-icon`}
117 |           aria-label={isCtrlHoveringCheckbox ? undefined : 'Archive card'}
118 |         >
119 |           <Icon name="sheets-in-box" />
120 |         </a>
121 |       )}
122 |     </div>
123 |   );
124 | });
125 | 


--------------------------------------------------------------------------------
/src/components/Item/ItemContent.tsx:
--------------------------------------------------------------------------------
  1 | import { EditorView } from '@codemirror/view';
  2 | import { memo } from 'preact/compat';
  3 | import {
  4 |   Dispatch,
  5 |   StateUpdater,
  6 |   useCallback,
  7 |   useContext,
  8 |   useEffect,
  9 |   useMemo,
 10 |   useRef,
 11 | } from 'preact/hooks';
 12 | import { StateManager } from 'src/StateManager';
 13 | import { useNestedEntityPath } from 'src/dnd/components/Droppable';
 14 | import { Path } from 'src/dnd/types';
 15 | import { getTaskStatusDone, toggleTaskString } from 'src/parsers/helpers/inlineMetadata';
 16 | 
 17 | import { MarkdownEditor, allowNewLine } from '../Editor/MarkdownEditor';
 18 | import {
 19 |   MarkdownClonedPreviewRenderer,
 20 |   MarkdownRenderer,
 21 | } from '../MarkdownRenderer/MarkdownRenderer';
 22 | import { KanbanContext, SearchContext } from '../context';
 23 | import { c, useGetDateColorFn, useGetTagColorFn } from '../helpers';
 24 | import { EditState, EditingState, Item, isEditing } from '../types';
 25 | import { DateAndTime, RelativeDate } from './DateAndTime';
 26 | import { InlineMetadata } from './InlineMetadata';
 27 | import {
 28 |   constructDatePicker,
 29 |   constructMenuDatePickerOnChange,
 30 |   constructMenuTimePickerOnChange,
 31 |   constructTimePicker,
 32 | } from './helpers';
 33 | 
 34 | export function useDatePickers(item: Item, explicitPath?: Path) {
 35 |   const { stateManager, boardModifiers } = useContext(KanbanContext);
 36 |   const path = explicitPath || useNestedEntityPath();
 37 | 
 38 |   return useMemo(() => {
 39 |     const onEditDate = (e: MouseEvent) => {
 40 |       constructDatePicker(
 41 |         e.view,
 42 |         stateManager,
 43 |         { x: e.clientX, y: e.clientY },
 44 |         constructMenuDatePickerOnChange({
 45 |           stateManager,
 46 |           boardModifiers,
 47 |           item,
 48 |           hasDate: true,
 49 |           path,
 50 |         }),
 51 |         item.data.metadata.date?.toDate()
 52 |       );
 53 |     };
 54 | 
 55 |     const onEditTime = (e: MouseEvent) => {
 56 |       constructTimePicker(
 57 |         e.view, // Preact uses real events, so this is safe
 58 |         stateManager,
 59 |         { x: e.clientX, y: e.clientY },
 60 |         constructMenuTimePickerOnChange({
 61 |           stateManager,
 62 |           boardModifiers,
 63 |           item,
 64 |           hasTime: true,
 65 |           path,
 66 |         }),
 67 |         item.data.metadata.time
 68 |       );
 69 |     };
 70 | 
 71 |     return {
 72 |       onEditDate,
 73 |       onEditTime,
 74 |     };
 75 |   }, [boardModifiers, path, item, stateManager]);
 76 | }
 77 | 
 78 | export interface ItemContentProps {
 79 |   item: Item;
 80 |   setEditState: Dispatch<StateUpdater<EditState>>;
 81 |   searchQuery?: string;
 82 |   showMetadata?: boolean;
 83 |   editState: EditState;
 84 |   isStatic: boolean;
 85 | }
 86 | 
 87 | function checkCheckbox(stateManager: StateManager, title: string, checkboxIndex: number) {
 88 |   let count = 0;
 89 | 
 90 |   const lines = title.split(/\n\r?/g);
 91 |   const results: string[] = [];
 92 | 
 93 |   lines.forEach((line) => {
 94 |     if (count > checkboxIndex) {
 95 |       results.push(line);
 96 |       return;
 97 |     }
 98 | 
 99 |     const match = line.match(/^(\s*>)*(\s*[-+*]\s+?\[)([^\]])(\]\s+)/);
100 | 
101 |     if (match) {
102 |       if (count === checkboxIndex) {
103 |         const updates = toggleTaskString(line, stateManager.file);
104 |         if (updates) {
105 |           results.push(updates);
106 |         } else {
107 |           const check = match[3] === ' ' ? getTaskStatusDone() : ' ';
108 |           const m1 = match[1] ?? '';
109 |           const m2 = match[2] ?? '';
110 |           const m4 = match[4] ?? '';
111 |           results.push(m1 + m2 + check + m4 + line.slice(match[0].length));
112 |         }
113 |       } else {
114 |         results.push(line);
115 |       }
116 |       count++;
117 |       return;
118 |     }
119 | 
120 |     results.push(line);
121 |   });
122 | 
123 |   return results.join('\n');
124 | }
125 | 
126 | export function Tags({
127 |   tags,
128 |   searchQuery,
129 |   alwaysShow,
130 | }: {
131 |   tags?: string[];
132 |   searchQuery?: string;
133 |   alwaysShow?: boolean;
134 | }) {
135 |   const { stateManager } = useContext(KanbanContext);
136 |   const getTagColor = useGetTagColorFn(stateManager);
137 |   const search = useContext(SearchContext);
138 |   const shouldShow = stateManager.useSetting('move-tags') || alwaysShow;
139 | 
140 |   if (!tags.length || !shouldShow) return null;
141 | 
142 |   return (
143 |     <div className={c('item-tags')}>
144 |       {tags.map((tag, i) => {
145 |         const tagColor = getTagColor(tag);
146 | 
147 |         return (
148 |           <a
149 |             href={tag}
150 |             onClick={(e) => {
151 |               e.preventDefault();
152 | 
153 |               const tagAction = stateManager.getSetting('tag-action');
154 |               if (search && tagAction === 'kanban') {
155 |                 search.search(tag, true);
156 |                 return;
157 |               }
158 | 
159 |               (stateManager.app as any).internalPlugins
160 |                 .getPluginById('global-search')
161 |                 .instance.openGlobalSearch(`tag:${tag}`);
162 |             }}
163 |             key={i}
164 |             className={`tag ${c('item-tag')} ${
165 |               searchQuery && tag.toLocaleLowerCase().contains(searchQuery) ? 'is-search-match' : ''
166 |             }`}
167 |             style={
168 |               tagColor && {
169 |                 '--tag-color': tagColor.color,
170 |                 '--tag-background': tagColor.backgroundColor,
171 |               }
172 |             }
173 |           >
174 |             <span>{tag[0]}</span>
175 |             {tag.slice(1)}
176 |           </a>
177 |         );
178 |       })}
179 |     </div>
180 |   );
181 | }
182 | 
183 | export const ItemContent = memo(function ItemContent({
184 |   item,
185 |   editState,
186 |   setEditState,
187 |   searchQuery,
188 |   showMetadata = true,
189 |   isStatic,
190 | }: ItemContentProps) {
191 |   const { stateManager, filePath, boardModifiers } = useContext(KanbanContext);
192 |   const getDateColor = useGetDateColorFn(stateManager);
193 |   const titleRef = useRef<string | null>(null);
194 | 
195 |   useEffect(() => {
196 |     if (editState === EditingState.complete) {
197 |       if (titleRef.current !== null) {
198 |         boardModifiers.updateItem(path, stateManager.updateItemContent(item, titleRef.current));
199 |       }
200 |       titleRef.current = null;
201 |     } else if (editState === EditingState.cancel) {
202 |       titleRef.current = null;
203 |     }
204 |   }, [editState, stateManager, item]);
205 | 
206 |   const path = useNestedEntityPath();
207 |   const { onEditDate, onEditTime } = useDatePickers(item);
208 |   const onEnter = useCallback(
209 |     (cm: EditorView, mod: boolean, shift: boolean) => {
210 |       if (!allowNewLine(stateManager, mod, shift)) {
211 |         setEditState(EditingState.complete);
212 |         return true;
213 |       }
214 |     },
215 |     [stateManager]
216 |   );
217 | 
218 |   const onWrapperClick = useCallback(
219 |     (e: MouseEvent) => {
220 |       if (e.targetNode.instanceOf(HTMLElement)) {
221 |         if (e.targetNode.hasClass(c('item-metadata-date'))) {
222 |           onEditDate(e);
223 |         } else if (e.targetNode.hasClass(c('item-metadata-time'))) {
224 |           onEditTime(e);
225 |         }
226 |       }
227 |     },
228 |     [onEditDate, onEditTime]
229 |   );
230 | 
231 |   const onSubmit = useCallback(() => setEditState(EditingState.complete), []);
232 | 
233 |   const onEscape = useCallback(() => {
234 |     setEditState(EditingState.cancel);
235 |     return true;
236 |   }, [item]);
237 | 
238 |   const onCheckboxContainerClick = useCallback(
239 |     (e: PointerEvent) => {
240 |       const target = e.target as HTMLElement;
241 | 
242 |       if (target.hasClass('task-list-item-checkbox')) {
243 |         if (target.dataset.src) {
244 |           return;
245 |         }
246 | 
247 |         const checkboxIndex = parseInt(target.dataset.checkboxIndex, 10);
248 |         const checked = checkCheckbox(stateManager, item.data.titleRaw, checkboxIndex);
249 |         const updated = stateManager.updateItemContent(item, checked);
250 | 
251 |         boardModifiers.updateItem(path, updated);
252 |       }
253 |     },
254 |     [path, boardModifiers, stateManager, item]
255 |   );
256 | 
257 |   if (!isStatic && isEditing(editState)) {
258 |     return (
259 |       <div className={c('item-input-wrapper')}>
260 |         <MarkdownEditor
261 |           editState={editState}
262 |           className={c('item-input')}
263 |           onEnter={onEnter}
264 |           onEscape={onEscape}
265 |           onSubmit={onSubmit}
266 |           value={item.data.titleRaw}
267 |           onChange={(update) => {
268 |             if (update.docChanged) {
269 |               titleRef.current = update.state.doc.toString().trim();
270 |             }
271 |           }}
272 |         />
273 |       </div>
274 |     );
275 |   }
276 | 
277 |   return (
278 |     <div onClick={onWrapperClick} className={c('item-title')}>
279 |       {isStatic ? (
280 |         <MarkdownClonedPreviewRenderer
281 |           entityId={item.id}
282 |           className={c('item-markdown')}
283 |           markdownString={item.data.title}
284 |           searchQuery={searchQuery}
285 |           onPointerUp={onCheckboxContainerClick}
286 |         />
287 |       ) : (
288 |         <MarkdownRenderer
289 |           entityId={item.id}
290 |           className={c('item-markdown')}
291 |           markdownString={item.data.title}
292 |           searchQuery={searchQuery}
293 |           onPointerUp={onCheckboxContainerClick}
294 |         />
295 |       )}
296 |       {showMetadata && (
297 |         <div className={c('item-metadata')}>
298 |           <RelativeDate item={item} stateManager={stateManager} />
299 |           <DateAndTime
300 |             item={item}
301 |             stateManager={stateManager}
302 |             filePath={filePath}
303 |             getDateColor={getDateColor}
304 |           />
305 |           <InlineMetadata item={item} stateManager={stateManager} />
306 |           <Tags tags={item.data.metadata.tags} searchQuery={searchQuery} />
307 |         </div>
308 |       )}
309 |     </div>
310 |   );
311 | });
312 | 


--------------------------------------------------------------------------------
/src/components/Item/ItemForm.tsx:
--------------------------------------------------------------------------------
 1 | import { EditorView } from '@codemirror/view';
 2 | import { Dispatch, StateUpdater, useContext, useRef } from 'preact/hooks';
 3 | import useOnclickOutside from 'react-cool-onclickoutside';
 4 | import { t } from 'src/lang/helpers';
 5 | 
 6 | import { MarkdownEditor, allowNewLine } from '../Editor/MarkdownEditor';
 7 | import { getDropAction } from '../Editor/helpers';
 8 | import { KanbanContext } from '../context';
 9 | import { c } from '../helpers';
10 | import { EditState, EditingState, Item, isEditing } from '../types';
11 | 
12 | interface ItemFormProps {
13 |   addItems: (items: Item[]) => void;
14 |   editState: EditState;
15 |   setEditState: Dispatch<StateUpdater<EditState>>;
16 |   hideButton?: boolean;
17 | }
18 | 
19 | export function ItemForm({ addItems, editState, setEditState, hideButton }: ItemFormProps) {
20 |   const { stateManager } = useContext(KanbanContext);
21 |   const editorRef = useRef<EditorView>();
22 | 
23 |   const clear = () => setEditState(EditingState.cancel);
24 |   const clickOutsideRef = useOnclickOutside(clear, {
25 |     ignoreClass: [c('ignore-click-outside'), 'mobile-toolbar', 'suggestion-container'],
26 |   });
27 | 
28 |   const createItem = (title: string) => {
29 |     addItems([stateManager.getNewItem(title, ' ')]);
30 |     const cm = editorRef.current;
31 |     if (cm) {
32 |       cm.dispatch({
33 |         changes: {
34 |           from: 0,
35 |           to: cm.state.doc.length,
36 |           insert: '',
37 |         },
38 |       });
39 |     }
40 |   };
41 | 
42 |   if (isEditing(editState)) {
43 |     return (
44 |       <div className={c('item-form')} ref={clickOutsideRef}>
45 |         <div className={c('item-input-wrapper')}>
46 |           <MarkdownEditor
47 |             editorRef={editorRef}
48 |             editState={{ x: 0, y: 0 }}
49 |             className={c('item-input')}
50 |             placeholder={t('Card title...')}
51 |             onEnter={(cm, mod, shift) => {
52 |               if (!allowNewLine(stateManager, mod, shift)) {
53 |                 createItem(cm.state.doc.toString());
54 |                 return true;
55 |               }
56 |             }}
57 |             onSubmit={(cm) => {
58 |               createItem(cm.state.doc.toString());
59 |             }}
60 |             onEscape={clear}
61 |           />
62 |         </div>
63 |       </div>
64 |     );
65 |   }
66 | 
67 |   if (hideButton) return null;
68 | 
69 |   return (
70 |     <div className={c('item-button-wrapper')}>
71 |       <button
72 |         className={c('new-item-button')}
73 |         onClick={() => setEditState({ x: 0, y: 0 })}
74 |         onDragOver={(e) => {
75 |           if (getDropAction(stateManager, e.dataTransfer)) {
76 |             setEditState({ x: 0, y: 0 });
77 |           }
78 |         }}
79 |       >
80 |         <span className={c('item-button-plus')}>+</span> {t('Add a card')}
81 |       </button>
82 |     </div>
83 |   );
84 | }
85 | 


--------------------------------------------------------------------------------
/src/components/Item/ItemMenu.ts:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { Menu, Platform, TFile, TFolder } from 'obsidian';
  3 | import { Dispatch, StateUpdater, useCallback } from 'preact/hooks';
  4 | import { StateManager } from 'src/StateManager';
  5 | import { Path } from 'src/dnd/types';
  6 | import { moveEntity } from 'src/dnd/util/data';
  7 | import { t } from 'src/lang/helpers';
  8 | 
  9 | import { BoardModifiers } from '../../helpers/boardModifiers';
 10 | import { applyTemplate, escapeRegExpStr, generateInstanceId } from '../helpers';
 11 | import { EditState, Item } from '../types';
 12 | import {
 13 |   constructDatePicker,
 14 |   constructMenuDatePickerOnChange,
 15 |   constructMenuTimePickerOnChange,
 16 |   constructTimePicker,
 17 | } from './helpers';
 18 | 
 19 | const illegalCharsRegEx = /[\\/:"*?<>|]+/g;
 20 | const embedRegEx = /!?\[\[([^\]]*)\.[^\]]+\]\]/g;
 21 | const wikilinkRegEx = /!?\[\[([^\]]*)\]\]/g;
 22 | const mdLinkRegEx = /!?\[([^\]]*)\]\([^)]*\)/g;
 23 | const tagRegEx = /#([^\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~[\]\\\s\n\r]+)/g;
 24 | const condenceWhiteSpaceRE = /\s+/g;
 25 | 
 26 | interface UseItemMenuParams {
 27 |   setEditState: Dispatch<StateUpdater<EditState>>;
 28 |   item: Item;
 29 |   path: Path;
 30 |   boardModifiers: BoardModifiers;
 31 |   stateManager: StateManager;
 32 | }
 33 | 
 34 | export function useItemMenu({
 35 |   setEditState,
 36 |   item,
 37 |   path,
 38 |   boardModifiers,
 39 |   stateManager,
 40 | }: UseItemMenuParams) {
 41 |   return useCallback(
 42 |     (e: MouseEvent) => {
 43 |       const coordinates = { x: e.clientX, y: e.clientY };
 44 |       const hasDate = !!item.data.metadata.date;
 45 |       const hasTime = !!item.data.metadata.time;
 46 | 
 47 |       const menu = new Menu().addItem((i) => {
 48 |         i.setIcon('lucide-edit')
 49 |           .setTitle(t('Edit card'))
 50 |           .onClick(() => setEditState(coordinates));
 51 |       });
 52 | 
 53 |       menu
 54 |         .addItem((i) => {
 55 |           i.setIcon('lucide-file-plus-2')
 56 |             .setTitle(t('New note from card'))
 57 |             .onClick(async () => {
 58 |               const prevTitle = item.data.titleRaw.split('\n')[0].trim();
 59 |               const sanitizedTitle = prevTitle
 60 |                 .replace(embedRegEx, '$1')
 61 |                 .replace(wikilinkRegEx, '$1')
 62 |                 .replace(mdLinkRegEx, '$1')
 63 |                 .replace(tagRegEx, '$1')
 64 |                 .replace(illegalCharsRegEx, ' ')
 65 |                 .trim()
 66 |                 .replace(condenceWhiteSpaceRE, ' ');
 67 | 
 68 |               const newNoteFolder = stateManager.getSetting('new-note-folder');
 69 |               const newNoteTemplatePath = stateManager.getSetting('new-note-template');
 70 | 
 71 |               const targetFolder = newNoteFolder
 72 |                 ? (stateManager.app.vault.getAbstractFileByPath(newNoteFolder as string) as TFolder)
 73 |                 : stateManager.app.fileManager.getNewFileParent(stateManager.file.path);
 74 | 
 75 |               const newFile = (await (stateManager.app.fileManager as any).createNewMarkdownFile(
 76 |                 targetFolder,
 77 |                 sanitizedTitle
 78 |               )) as TFile;
 79 | 
 80 |               const newLeaf = stateManager.app.workspace.splitActiveLeaf();
 81 | 
 82 |               await newLeaf.openFile(newFile);
 83 | 
 84 |               stateManager.app.workspace.setActiveLeaf(newLeaf, false, true);
 85 | 
 86 |               await applyTemplate(stateManager, newNoteTemplatePath as string | undefined);
 87 | 
 88 |               const newTitleRaw = item.data.titleRaw.replace(
 89 |                 prevTitle,
 90 |                 stateManager.app.fileManager.generateMarkdownLink(newFile, stateManager.file.path)
 91 |               );
 92 | 
 93 |               boardModifiers.updateItem(path, stateManager.updateItemContent(item, newTitleRaw));
 94 |             });
 95 |         })
 96 |         .addItem((i) => {
 97 |           i.setIcon('lucide-link')
 98 |             .setTitle(t('Copy link to card'))
 99 |             .onClick(() => {
100 |               if (item.data.blockId) {
101 |                 navigator.clipboard.writeText(
102 |                   `${this.app.fileManager.generateMarkdownLink(
103 |                     stateManager.file,
104 |                     '',
105 |                     '#^' + item.data.blockId
106 |                   )}`
107 |                 );
108 |               } else {
109 |                 const id = generateInstanceId(6);
110 | 
111 |                 navigator.clipboard.writeText(
112 |                   `${this.app.fileManager.generateMarkdownLink(stateManager.file, '', '#^' + id)}`
113 |                 );
114 | 
115 |                 boardModifiers.updateItem(
116 |                   path,
117 |                   stateManager.updateItemContent(
118 |                     update(item, { data: { blockId: { $set: id } } }),
119 |                     item.data.titleRaw
120 |                   )
121 |                 );
122 |               }
123 |             });
124 |         })
125 |         .addSeparator();
126 | 
127 |       if (/\n/.test(item.data.titleRaw)) {
128 |         menu.addItem((i) => {
129 |           i.setIcon('lucide-wrap-text')
130 |             .setTitle(t('Split card'))
131 |             .onClick(async () => {
132 |               const titles = item.data.titleRaw.split(/[\r\n]+/g).map((t) => t.trim());
133 |               const newItems = await Promise.all(
134 |                 titles.map((title) => {
135 |                   return stateManager.getNewItem(title, ' ');
136 |                 })
137 |               );
138 | 
139 |               boardModifiers.splitItem(path, newItems);
140 |             });
141 |         });
142 |       }
143 | 
144 |       menu
145 |         .addItem((i) => {
146 |           i.setIcon('lucide-copy')
147 |             .setTitle(t('Duplicate card'))
148 |             .onClick(() => boardModifiers.duplicateEntity(path));
149 |         })
150 |         .addItem((i) => {
151 |           i.setIcon('lucide-list-start')
152 |             .setTitle(t('Insert card before'))
153 |             .onClick(() =>
154 |               boardModifiers.insertItems(path, [stateManager.getNewItem('', ' ', true)])
155 |             );
156 |         })
157 |         .addItem((i) => {
158 |           i.setIcon('lucide-list-end')
159 |             .setTitle(t('Insert card after'))
160 |             .onClick(() => {
161 |               const newPath = [...path];
162 | 
163 |               newPath[newPath.length - 1] = newPath[newPath.length - 1] + 1;
164 | 
165 |               boardModifiers.insertItems(newPath, [stateManager.getNewItem('', ' ', true)]);
166 |             });
167 |         })
168 |         .addItem((i) => {
169 |           i.setIcon('lucide-arrow-up')
170 |             .setTitle(t('Move to top'))
171 |             .onClick(() => boardModifiers.moveItemToTop(path));
172 |         })
173 |         .addItem((i) => {
174 |           i.setIcon('lucide-arrow-down')
175 |             .setTitle(t('Move to bottom'))
176 |             .onClick(() => boardModifiers.moveItemToBottom(path));
177 |         })
178 |         .addItem((i) => {
179 |           i.setIcon('lucide-archive')
180 |             .setTitle(t('Archive card'))
181 |             .onClick(() => boardModifiers.archiveItem(path));
182 |         })
183 |         .addItem((i) => {
184 |           i.setIcon('lucide-trash-2')
185 |             .setTitle(t('Delete card'))
186 |             .onClick(() => boardModifiers.deleteEntity(path));
187 |         })
188 |         .addSeparator()
189 |         .addItem((i) => {
190 |           i.setIcon('lucide-calendar-check')
191 |             .setTitle(hasDate ? t('Edit date') : t('Add date'))
192 |             .onClick(() => {
193 |               constructDatePicker(
194 |                 e.view,
195 |                 stateManager,
196 |                 coordinates,
197 |                 constructMenuDatePickerOnChange({
198 |                   stateManager,
199 |                   boardModifiers,
200 |                   item,
201 |                   hasDate,
202 |                   path,
203 |                 }),
204 |                 item.data.metadata.date?.toDate()
205 |               );
206 |             });
207 |         });
208 | 
209 |       if (hasDate) {
210 |         menu.addItem((i) => {
211 |           i.setIcon('lucide-x')
212 |             .setTitle(t('Remove date'))
213 |             .onClick(() => {
214 |               const shouldLinkDates = stateManager.getSetting('link-date-to-daily-note');
215 |               const dateTrigger = stateManager.getSetting('date-trigger');
216 |               const contentMatch = shouldLinkDates
217 |                 ? '(?:\\[[^\\]]+\\]\\([^\\)]+\\)|\\[\\[[^\\]]+\\]\\])'
218 |                 : '{[^}]+}';
219 |               const dateRegEx = new RegExp(
220 |                 `(^|\\s)${escapeRegExpStr(dateTrigger as string)}${contentMatch}`
221 |               );
222 | 
223 |               const titleRaw = item.data.titleRaw.replace(dateRegEx, '').trim();
224 | 
225 |               boardModifiers.updateItem(path, stateManager.updateItemContent(item, titleRaw));
226 |             });
227 |         });
228 | 
229 |         menu.addItem((i) => {
230 |           i.setIcon('lucide-clock')
231 |             .setTitle(hasTime ? t('Edit time') : t('Add time'))
232 |             .onClick(() => {
233 |               constructTimePicker(
234 |                 e.view,
235 |                 stateManager,
236 |                 coordinates,
237 |                 constructMenuTimePickerOnChange({
238 |                   stateManager,
239 |                   boardModifiers,
240 |                   item,
241 |                   hasTime,
242 |                   path,
243 |                 }),
244 |                 item.data.metadata.time
245 |               );
246 |             });
247 |         });
248 | 
249 |         if (hasTime) {
250 |           menu.addItem((i) => {
251 |             i.setIcon('lucide-x')
252 |               .setTitle(t('Remove time'))
253 |               .onClick(() => {
254 |                 const timeTrigger = stateManager.getSetting('time-trigger');
255 |                 const timeRegEx = new RegExp(
256 |                   `(^|\\s)${escapeRegExpStr(timeTrigger as string)}{([^}]+)}`
257 |                 );
258 | 
259 |                 const titleRaw = item.data.titleRaw.replace(timeRegEx, '').trim();
260 |                 boardModifiers.updateItem(path, stateManager.updateItemContent(item, titleRaw));
261 |               });
262 |           });
263 |         }
264 |       }
265 | 
266 |       menu.addSeparator();
267 | 
268 |       const addMoveToOptions = (menu: Menu) => {
269 |         const lanes = stateManager.state.children;
270 |         if (lanes.length <= 1) return;
271 |         for (let i = 0, len = lanes.length; i < len; i++) {
272 |           menu.addItem((item) =>
273 |             item
274 |               .setIcon('lucide-square-kanban')
275 |               .setChecked(path[0] === i)
276 |               .setTitle(lanes[i].data.title)
277 |               .onClick(() => {
278 |                 if (path[0] === i) return;
279 |                 stateManager.setState((boardData) => {
280 |                   return moveEntity(boardData, path, [i, 0]);
281 |                 });
282 |               })
283 |           );
284 |         }
285 |       };
286 | 
287 |       if (Platform.isPhone) {
288 |         addMoveToOptions(menu);
289 |       } else {
290 |         menu.addItem((item) => {
291 |           const submenu = (item as any)
292 |             .setTitle(t('Move to list'))
293 |             .setIcon('lucide-square-kanban')
294 |             .setSubmenu();
295 | 
296 |           addMoveToOptions(submenu);
297 |         });
298 |       }
299 | 
300 |       menu.showAtPosition(coordinates);
301 |     },
302 |     [setEditState, item, path, boardModifiers, stateManager]
303 |   );
304 | }
305 | 


--------------------------------------------------------------------------------
/src/components/Item/ItemMenuButton.tsx:
--------------------------------------------------------------------------------
 1 | import Preact from 'preact/compat';
 2 | import { Dispatch, StateUpdater } from 'preact/hooks';
 3 | import { t } from 'src/lang/helpers';
 4 | 
 5 | import { Icon } from '../Icon/Icon';
 6 | import { c } from '../helpers';
 7 | import { EditState, EditingState, isEditing } from '../types';
 8 | 
 9 | interface ItemMenuButtonProps {
10 |   editState: EditState;
11 |   setEditState: Dispatch<StateUpdater<EditState>>;
12 |   showMenu: (e: MouseEvent, internalLinkPath?: string) => void;
13 | }
14 | 
15 | export const ItemMenuButton = Preact.memo(function ItemMenuButton({
16 |   editState,
17 |   setEditState,
18 |   showMenu,
19 | }: ItemMenuButtonProps) {
20 |   const ignoreAttr = Preact.useMemo(() => {
21 |     if (editState) {
22 |       return {
23 |         'data-ignore-drag': true,
24 |       };
25 |     }
26 | 
27 |     return {};
28 |   }, [editState]);
29 | 
30 |   return (
31 |     <div {...ignoreAttr} className={c('item-postfix-button-wrapper')}>
32 |       {isEditing(editState) ? (
33 |         <a
34 |           data-ignore-drag={true}
35 |           onPointerDown={(e) => e.preventDefault()}
36 |           onClick={() => setEditState(EditingState.cancel)}
37 |           className={`${c('item-postfix-button')} is-enabled clickable-icon`}
38 |           aria-label={t('Cancel')}
39 |         >
40 |           <Icon name="lucide-x" />
41 |         </a>
42 |       ) : (
43 |         <a
44 |           data-ignore-drag={true}
45 |           onPointerDown={(e) => e.preventDefault()}
46 |           onClick={showMenu as any}
47 |           className={`${c('item-postfix-button')} clickable-icon`}
48 |           aria-label={t('More options')}
49 |         >
50 |           <Icon name="lucide-more-vertical" />
51 |         </a>
52 |       )}
53 |     </div>
54 |   );
55 | });
56 | 


--------------------------------------------------------------------------------
/src/components/Item/MetadataTable.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import { isPlainObject } from 'is-plain-object';
  3 | import { TFile, moment } from 'obsidian';
  4 | import { getAPI } from 'obsidian-dataview';
  5 | import { ComponentChild } from 'preact';
  6 | import { memo, useContext, useMemo } from 'preact/compat';
  7 | import { KanbanView } from 'src/KanbanView';
  8 | import { StateManager } from 'src/StateManager';
  9 | import { InlineField, taskFields } from 'src/parsers/helpers/inlineMetadata';
 10 | 
 11 | import { MarkdownRenderer } from '../MarkdownRenderer/MarkdownRenderer';
 12 | import { KanbanContext } from '../context';
 13 | import { c, parseMetadataWithOptions, useGetDateColorFn } from '../helpers';
 14 | import { DataKey, FileMetadata, Item, PageData } from '../types';
 15 | import { Tags } from './ItemContent';
 16 | 
 17 | export interface ItemMetadataProps {
 18 |   item: Item;
 19 |   searchQuery?: string;
 20 | }
 21 | 
 22 | function mergeMetadata(
 23 |   fileMetadata: FileMetadata,
 24 |   inlineMetadata: InlineField[] = [],
 25 |   metadataKeys: DataKey[]
 26 | ) {
 27 |   return inlineMetadata.reduce((acc, curr) => {
 28 |     if (taskFields.has(curr.key)) return acc;
 29 |     const data = parseMetadataWithOptions(curr, metadataKeys);
 30 | 
 31 |     acc[curr.key] = data;
 32 | 
 33 |     return acc;
 34 |   }, fileMetadata || {});
 35 | }
 36 | 
 37 | export function ItemMetadata({ item, searchQuery }: ItemMetadataProps) {
 38 |   const { stateManager } = useContext(KanbanContext);
 39 |   const mergeInlineMetadata =
 40 |     stateManager.useSetting('inline-metadata-position') === 'metadata-table';
 41 |   const metadataKeys = stateManager.useSetting('metadata-keys');
 42 |   const { fileMetadata, fileMetadataOrder, inlineMetadata } = item.data.metadata;
 43 | 
 44 |   const metadata = useMemo(() => {
 45 |     const metadata = mergeInlineMetadata
 46 |       ? mergeMetadata(fileMetadata, inlineMetadata, metadataKeys || [])
 47 |       : fileMetadata;
 48 | 
 49 |     if (!metadata) return null;
 50 |     if (!Object.keys(metadata).length) return null;
 51 | 
 52 |     return metadata;
 53 |   }, [fileMetadata, inlineMetadata, metadataKeys]);
 54 | 
 55 |   const order = useMemo(() => {
 56 |     const metadataOrder = new Set(fileMetadataOrder || []);
 57 |     if (mergeInlineMetadata && inlineMetadata?.length) {
 58 |       inlineMetadata.forEach((m) => {
 59 |         if (!metadataOrder.has(m.key)) metadataOrder.add(m.key);
 60 |       });
 61 |     }
 62 | 
 63 |     return Array.from(metadataOrder);
 64 |   }, [fileMetadataOrder, mergeInlineMetadata, inlineMetadata]);
 65 | 
 66 |   if (!metadata) {
 67 |     return null;
 68 |   }
 69 | 
 70 |   return (
 71 |     <div className={c('item-metadata-wrapper')}>
 72 |       <MetadataTable metadata={metadata} order={order} searchQuery={searchQuery} />
 73 |     </div>
 74 |   );
 75 | }
 76 | 
 77 | interface MetadataValueProps {
 78 |   data: PageData;
 79 |   dateLabel?: string;
 80 |   searchQuery?: string;
 81 | }
 82 | 
 83 | export function getDateFromObj(v: any, stateManager: StateManager) {
 84 |   let m: moment.Moment;
 85 | 
 86 |   if (v.ts) {
 87 |     m = moment(v.ts);
 88 |   } else if (moment.isMoment(v)) {
 89 |     m = v;
 90 |   } else if (v instanceof Date) {
 91 |     m = moment(v);
 92 |   }
 93 | 
 94 |   if (m) {
 95 |     const dateFormat = stateManager.getSetting(
 96 |       m.hours() === 0 ? 'date-display-format' : 'date-time-display-format'
 97 |     );
 98 | 
 99 |     return m.format(dateFormat);
100 |   }
101 | 
102 |   return null;
103 | }
104 | 
105 | export function getLinkFromObj(v: any, view: KanbanView) {
106 |   if (typeof v !== 'object' || !v.path) return null;
107 | 
108 |   const file = app.vault.getAbstractFileByPath(v.path);
109 |   if (file && file instanceof TFile) {
110 |     const link = app.fileManager.generateMarkdownLink(file, view.file.path, v.subpath, v.display);
111 |     return `${v.embed && link[0] !== '!' ? '!' : ''}${link}`;
112 |   }
113 | 
114 |   return `${v.embed ? '!' : ''}[[${v.path}${v.display ? `|${v.display}` : ''}]]`;
115 | }
116 | 
117 | function getDate(v: any) {
118 |   if (typeof v === 'string' && /^\d{4}-\d{2}-\d{2}/.test(v)) {
119 |     const d = moment(v);
120 |     if (d.isValid()) {
121 |       return d;
122 |     }
123 |   }
124 |   if (moment.isMoment(v)) return v;
125 |   if (v instanceof Date) return moment(v);
126 |   const dv = getAPI();
127 |   if (dv?.value.isDate(v)) return moment(v.ts);
128 |   return null;
129 | }
130 | 
131 | export function anyToString(v: any, stateManager: StateManager): string {
132 |   if (isPlainObject(v) && v.value) v = v.value;
133 |   const date = getDate(v);
134 |   if (date) return getDateFromObj(date, stateManager);
135 |   if (typeof v === 'string') return v;
136 |   if (v instanceof TFile) return v.path;
137 |   if (Array.isArray(v)) {
138 |     return v.map((v2) => anyToString(v2, stateManager)).join(' ');
139 |   }
140 |   if (v.rrule) return v.toText();
141 |   const dv = getAPI();
142 |   if (dv) return dv.value.toString(v);
143 |   return `${v}`;
144 | }
145 | 
146 | export function pageDataToString(data: PageData, stateManager: StateManager): string {
147 |   return anyToString(data.value, stateManager);
148 | }
149 | 
150 | export function MetadataValue({ data, dateLabel, searchQuery }: MetadataValueProps) {
151 |   const { view, stateManager } = useContext(KanbanContext);
152 |   const getDateColor = useGetDateColorFn(stateManager);
153 | 
154 |   const renderChild = (v: any, sep?: string) => {
155 |     const link = getLinkFromObj(v, view);
156 |     const date = getDate(v);
157 |     const str = anyToString(v, stateManager);
158 |     const isMatch = searchQuery && str.toLocaleLowerCase().contains(searchQuery);
159 | 
160 |     let content: ComponentChild;
161 |     if (link || data.containsMarkdown) {
162 |       content = (
163 |         <MarkdownRenderer
164 |           className="inline"
165 |           markdownString={link ? link : str}
166 |           searchQuery={searchQuery}
167 |         />
168 |       );
169 |     } else if (date) {
170 |       const dateColor = getDateColor(date);
171 |       content = (
172 |         <span
173 |           className={classcat({
174 |             [c('date')]: true,
175 |             'is-search-match': isMatch,
176 |             'has-background': dateColor?.backgroundColor,
177 |           })}
178 |           style={
179 |             dateColor && {
180 |               '--date-color': dateColor.color,
181 |               '--date-background-color': dateColor.backgroundColor,
182 |             }
183 |           }
184 |         >
185 |           {!!dateLabel && <span className={c('item-metadata-date-label')}>{dateLabel}</span>}
186 |           <span className={c('item-metadata-date')}>{str}</span>
187 |         </span>
188 |       );
189 |     } else if (isMatch) {
190 |       content = <span className="is-search-match">{str}</span>;
191 |     } else {
192 |       content = str;
193 |     }
194 | 
195 |     return (
196 |       <>
197 |         {content}
198 |         {sep ? <span>{sep}</span> : null}
199 |       </>
200 |     );
201 |   };
202 | 
203 |   if (Array.isArray(data.value)) {
204 |     return (
205 |       <span className={classcat([c('meta-value'), 'mod-array'])}>
206 |         {data.value.map((v, i, arr) => {
207 |           return renderChild(v, i < arr.length - 1 ? ', ' : undefined);
208 |         })}
209 |       </span>
210 |     );
211 |   }
212 | 
213 |   return <span className={classcat([c('meta-value')])}>{renderChild(data.value)}</span>;
214 | }
215 | 
216 | export interface MetadataTableProps {
217 |   metadata: { [k: string]: PageData } | null;
218 |   order?: string[];
219 |   searchQuery?: string;
220 | }
221 | 
222 | export const MetadataTable = memo(function MetadataTable({
223 |   metadata,
224 |   order,
225 |   searchQuery,
226 | }: MetadataTableProps) {
227 |   const { stateManager } = useContext(KanbanContext);
228 | 
229 |   if (!metadata) return null;
230 |   if (!order?.length) order = Object.keys(metadata);
231 | 
232 |   return (
233 |     <table className={c('meta-table')}>
234 |       <tbody>
235 |         {order.map((k) => {
236 |           const data = metadata[k];
237 |           if (!data) return null;
238 | 
239 |           const isSearchMatch = (data.label || k).toLocaleLowerCase().contains(searchQuery);
240 |           return (
241 |             <tr key={k} className={c('meta-row')}>
242 |               {!data.shouldHideLabel && (
243 |                 <td
244 |                   className={classcat([
245 |                     c('meta-key'),
246 |                     {
247 |                       'is-search-match': isSearchMatch,
248 |                     },
249 |                   ])}
250 |                   data-key={k}
251 |                 >
252 |                   <span>{data.label || k}</span>
253 |                 </td>
254 |               )}
255 |               <td
256 |                 colSpan={data.shouldHideLabel ? 2 : 1}
257 |                 className={c('meta-value-wrapper')}
258 |                 data-value={pageDataToString(data, stateManager)}
259 |               >
260 |                 {k === 'tags' ? (
261 |                   <Tags searchQuery={searchQuery} tags={data.value as string[]} alwaysShow />
262 |                 ) : (
263 |                   <MetadataValue data={data} searchQuery={searchQuery} />
264 |                 )}
265 |               </td>
266 |             </tr>
267 |           );
268 |         })}
269 |       </tbody>
270 |     </table>
271 |   );
272 | });
273 | 


--------------------------------------------------------------------------------
/src/components/Item/helpers.ts:
--------------------------------------------------------------------------------
  1 | import { FileWithPath, fromEvent } from 'file-selector';
  2 | import { Platform, TFile, TFolder, htmlToMarkdown, moment, parseLinktext, setIcon } from 'obsidian';
  3 | import { StateManager } from 'src/StateManager';
  4 | import { Path } from 'src/dnd/types';
  5 | import { buildLinkToDailyNote } from 'src/helpers';
  6 | import { getTaskStatusDone } from 'src/parsers/helpers/inlineMetadata';
  7 | 
  8 | import { BoardModifiers } from '../../helpers/boardModifiers';
  9 | import { getDefaultLocale } from '../Editor/datePickerLocale';
 10 | import flatpickr from '../Editor/flatpickr';
 11 | import { Instance } from '../Editor/flatpickr/types/instance';
 12 | import { c, escapeRegExpStr } from '../helpers';
 13 | import { Item } from '../types';
 14 | 
 15 | export function constructDatePicker(
 16 |   win: Window,
 17 |   stateManager: StateManager,
 18 |   coordinates: { x: number; y: number },
 19 |   onChange: (dates: Date[]) => void,
 20 |   date?: Date
 21 | ) {
 22 |   return win.document.body.createDiv(
 23 |     { cls: `${c('date-picker')} ${c('ignore-click-outside')}` },
 24 |     (div) => {
 25 |       div.style.left = `${coordinates.x || 0}px`;
 26 |       div.style.top = `${coordinates.y || 0}px`;
 27 | 
 28 |       div.createEl('input', { type: 'text' }, (input) => {
 29 |         div.win.setTimeout(() => {
 30 |           let picker: Instance | null = null;
 31 | 
 32 |           const clickHandler = (e: MouseEvent) => {
 33 |             if (
 34 |               e.target instanceof (e.view as Window & typeof globalThis).HTMLElement &&
 35 |               e.target.closest(`.${c('date-picker')}`) === null
 36 |             ) {
 37 |               selfDestruct();
 38 |             }
 39 |           };
 40 | 
 41 |           const keyHandler = (e: KeyboardEvent) => {
 42 |             if (e.key === 'Escape') {
 43 |               selfDestruct();
 44 |             }
 45 |           };
 46 | 
 47 |           const selfDestruct = () => {
 48 |             picker.destroy();
 49 |             div.remove();
 50 |             win.document.body.removeEventListener('click', clickHandler);
 51 |             win.document.removeEventListener('keydown', keyHandler);
 52 |           };
 53 | 
 54 |           picker = flatpickr(input, {
 55 |             locale: getDefaultLocale(stateManager),
 56 |             defaultDate: date,
 57 |             inline: true,
 58 |             onChange: (dates) => {
 59 |               onChange(dates);
 60 |               selfDestruct();
 61 |             },
 62 |             win,
 63 |           });
 64 | 
 65 |           div.win.setTimeout(() => {
 66 |             const height = div.clientHeight;
 67 |             const width = div.clientWidth;
 68 | 
 69 |             if (coordinates.y + height > win.innerHeight) {
 70 |               div.style.top = `${(coordinates.y || 0) - height}px`;
 71 |             }
 72 | 
 73 |             if (coordinates.x + width > win.innerWidth) {
 74 |               div.style.left = `${(coordinates.x || 0) - width}px`;
 75 |             }
 76 |           });
 77 | 
 78 |           win.document.body.addEventListener('click', clickHandler);
 79 |           win.document.addEventListener('keydown', keyHandler);
 80 |         });
 81 |       });
 82 |     }
 83 |   );
 84 | }
 85 | 
 86 | interface ConstructMenuDatePickerOnChangeParams {
 87 |   stateManager: StateManager;
 88 |   boardModifiers: BoardModifiers;
 89 |   item: Item;
 90 |   hasDate: boolean;
 91 |   path: Path;
 92 | }
 93 | 
 94 | export function constructMenuDatePickerOnChange({
 95 |   stateManager,
 96 |   boardModifiers,
 97 |   item,
 98 |   hasDate,
 99 |   path,
100 | }: ConstructMenuDatePickerOnChangeParams) {
101 |   const dateFormat = stateManager.getSetting('date-format');
102 |   const shouldLinkDates = stateManager.getSetting('link-date-to-daily-note');
103 |   const dateTrigger = stateManager.getSetting('date-trigger');
104 |   const contentMatch = shouldLinkDates
105 |     ? '(?:\\[[^\\]]+\\]\\([^)]+\\)|\\[\\[[^\\]]+\\]\\])'
106 |     : '{[^}]+}';
107 |   const dateRegEx = new RegExp(`(^|\\s)${escapeRegExpStr(dateTrigger as string)}${contentMatch}`);
108 | 
109 |   return (dates: Date[]) => {
110 |     const date = dates[0];
111 |     const formattedDate = moment(date).format(dateFormat);
112 |     const wrappedDate = shouldLinkDates
113 |       ? buildLinkToDailyNote(stateManager.app, formattedDate)
114 |       : `{${formattedDate}}`;
115 | 
116 |     let titleRaw = item.data.titleRaw;
117 | 
118 |     if (hasDate) {
119 |       titleRaw = item.data.titleRaw.replace(dateRegEx, `$1${dateTrigger}${wrappedDate}`);
120 |     } else {
121 |       titleRaw = `${item.data.titleRaw} ${dateTrigger}${wrappedDate}`;
122 |     }
123 | 
124 |     boardModifiers.updateItem(path, stateManager.updateItemContent(item, titleRaw));
125 |   };
126 | }
127 | 
128 | export function buildTimeArray(stateManager: StateManager) {
129 |   const format = stateManager.getSetting('time-format');
130 |   const time: string[] = [];
131 | 
132 |   for (let i = 0; i < 24; i++) {
133 |     time.push(moment({ hour: i }).format(format));
134 |     time.push(moment({ hour: i, minute: 15 }).format(format));
135 |     time.push(moment({ hour: i, minute: 30 }).format(format));
136 |     time.push(moment({ hour: i, minute: 45 }).format(format));
137 |   }
138 | 
139 |   return time;
140 | }
141 | 
142 | export function constructTimePicker(
143 |   win: Window,
144 |   stateManager: StateManager,
145 |   coordinates: { x: number; y: number },
146 |   onSelect: (opt: string) => void,
147 |   time?: moment.Moment
148 | ) {
149 |   const pickerClassName = c('time-picker');
150 |   const timeFormat = stateManager.getSetting('time-format');
151 |   const selected = time?.format(timeFormat);
152 | 
153 |   win.document.body.createDiv({ cls: `${pickerClassName} ${c('ignore-click-outside')}` }, (div) => {
154 |     const options = buildTimeArray(stateManager);
155 | 
156 |     const clickHandler = (e: MouseEvent) => {
157 |       if (
158 |         e.target instanceof (e.view as Window & typeof globalThis).HTMLElement &&
159 |         e.target.hasClass(c('time-picker-item')) &&
160 |         e.target.dataset.value
161 |       ) {
162 |         onSelect(e.target.dataset.value);
163 |         selfDestruct();
164 |       }
165 |     };
166 | 
167 |     const clickOutsideHandler = (e: MouseEvent) => {
168 |       if (
169 |         e.target instanceof (e.view as Window & typeof globalThis).HTMLElement &&
170 |         e.target.closest(`.${pickerClassName}`) === null
171 |       ) {
172 |         selfDestruct();
173 |       }
174 |     };
175 | 
176 |     const escHandler = (e: KeyboardEvent) => {
177 |       if (e.key === 'Escape') {
178 |         selfDestruct();
179 |       }
180 |     };
181 | 
182 |     const selfDestruct = () => {
183 |       div.remove();
184 |       div.removeEventListener('click', clickHandler);
185 |       win.document.body.removeEventListener('click', clickOutsideHandler);
186 |       win.document.removeEventListener('keydown', escHandler);
187 |     };
188 | 
189 |     div.style.left = `${coordinates.x || 0}px`;
190 |     div.style.top = `${coordinates.y || 0}px`;
191 | 
192 |     let selectedItem: HTMLDivElement = null;
193 |     let middleItem: HTMLDivElement = null;
194 | 
195 |     options.forEach((opt, index) => {
196 |       const isSelected = opt === selected;
197 |       div.createDiv(
198 |         {
199 |           cls: `${c('time-picker-item')} ${isSelected ? 'is-selected' : ''}`,
200 |           text: opt,
201 |         },
202 |         (item) => {
203 |           item.createEl('span', { cls: c('time-picker-check'), prepend: true }, (span) => {
204 |             setIcon(span, 'lucide-check');
205 |           });
206 | 
207 |           if (index % 4 === 0) {
208 |             item.addClass('is-hour');
209 |           }
210 | 
211 |           item.dataset.value = opt;
212 | 
213 |           if (isSelected) selectedItem = item;
214 |           if (index === Math.floor(options.length / 2)) {
215 |             middleItem = item;
216 |           }
217 |         }
218 |       );
219 |     });
220 | 
221 |     div.win.setTimeout(() => {
222 |       const height = div.clientHeight;
223 |       const width = div.clientWidth;
224 | 
225 |       if (coordinates.y + height > win.innerHeight) {
226 |         div.style.top = `${(coordinates.y || 0) - height}px`;
227 |       }
228 | 
229 |       if (coordinates.x + width > win.innerWidth) {
230 |         div.style.left = `${(coordinates.x || 0) - width}px`;
231 |       }
232 | 
233 |       (selectedItem || middleItem)?.scrollIntoView({
234 |         block: 'center',
235 |         inline: 'nearest',
236 |       });
237 | 
238 |       div.addEventListener('click', clickHandler);
239 |       win.document.body.addEventListener('click', clickOutsideHandler);
240 |       win.document.addEventListener('keydown', escHandler);
241 |     });
242 |   });
243 | }
244 | 
245 | interface ConstructMenuTimePickerOnChangeParams {
246 |   stateManager: StateManager;
247 |   boardModifiers: BoardModifiers;
248 |   item: Item;
249 |   hasTime: boolean;
250 |   path: Path;
251 | }
252 | 
253 | export function constructMenuTimePickerOnChange({
254 |   stateManager,
255 |   boardModifiers,
256 |   item,
257 |   hasTime,
258 |   path,
259 | }: ConstructMenuTimePickerOnChangeParams) {
260 |   const timeTrigger = stateManager.getSetting('time-trigger');
261 |   const timeRegEx = new RegExp(`(^|\\s)${escapeRegExpStr(timeTrigger as string)}{([^}]+)}`);
262 | 
263 |   return (time: string) => {
264 |     let titleRaw = item.data.titleRaw;
265 | 
266 |     if (hasTime) {
267 |       titleRaw = item.data.titleRaw.replace(timeRegEx, `$1${timeTrigger}{${time}}`);
268 |     } else {
269 |       titleRaw = `${item.data.titleRaw} ${timeTrigger}{${time}}`;
270 |     }
271 | 
272 |     boardModifiers.updateItem(path, stateManager.updateItemContent(item, titleRaw));
273 |   };
274 | }
275 | 
276 | export function getItemClassModifiers(item: Item) {
277 |   const date = item.data.metadata.date;
278 |   const classModifiers: string[] = [];
279 | 
280 |   if (date) {
281 |     if (date.isSame(new Date(), 'day')) {
282 |       classModifiers.push('is-today');
283 |     }
284 | 
285 |     if (date.isAfter(new Date(), 'day')) {
286 |       classModifiers.push('is-future');
287 |     }
288 | 
289 |     if (date.isBefore(new Date(), 'day')) {
290 |       classModifiers.push('is-past');
291 |     }
292 |   }
293 | 
294 |   if (item.data.checked && item.data.checkChar === getTaskStatusDone()) {
295 |     classModifiers.push('is-complete');
296 |   }
297 | 
298 |   for (const tag of item.data.metadata.tags) {
299 |     classModifiers.push(`has-tag-${tag.slice(1)}`);
300 |   }
301 | 
302 |   return classModifiers;
303 | }
304 | 
305 | export function linkTo(
306 |   stateManager: StateManager,
307 |   file: TFile,
308 |   sourcePath: string,
309 |   subpath?: string
310 | ) {
311 |   // Generate a link relative to this Kanban board, respecting user link type preferences
312 |   return stateManager.app.fileManager.generateMarkdownLink(file, sourcePath, subpath);
313 | }
314 | 
315 | export function getMarkdown(html: string) {
316 |   return htmlToMarkdown(html);
317 | }
318 | 
319 | export function fixLinks(text: string) {
320 |   // Internal links from e.g. dataview plugin incorrectly begin with `app://obsidian.md/`, and
321 |   // we also want to remove bullet points and task markers from text and markdown
322 |   return text.replace(/^\[(.*)\]\(app:\/\/obsidian.md\/(.*)\)$/, '[$1]($2)');
323 | }
324 | 
325 | interface FileData {
326 |   buffer: ArrayBuffer;
327 |   mimeType: string;
328 |   originalName: string;
329 | }
330 | 
331 | export function getFileListFromClipboard(win: Window & typeof globalThis) {
332 |   const clipboard = win.require('electron').remote.clipboard;
333 | 
334 |   if (process.platform === 'darwin') {
335 |     // https://github.com/electron/electron/issues/9035#issuecomment-359554116
336 |     if (clipboard.has('NSFilenamesPboardType')) {
337 |       return (
338 |         (clipboard.read('NSFilenamesPboardType') as string)
339 |           .match(/<string>.*<\/string>/g)
340 |           ?.map((item) => item.replace(/<string>|<\/string>/g, '')) || []
341 |       );
342 |     } else {
343 |       const clipboardImage = clipboard.readImage('clipboard');
344 |       if (!clipboardImage.isEmpty()) {
345 |         const png = clipboardImage.toPNG();
346 |         const fileInfo: FileData = {
347 |           buffer: png,
348 |           mimeType: 'image/png',
349 |           originalName: `Pasted image ${moment().format('YYYYMMDDHHmmss')}.png`,
350 |         };
351 |         return [fileInfo];
352 |       } else {
353 |         return [(clipboard.read('public.file-url') as string).replace('file://', '')].filter(
354 |           (item) => item
355 |         );
356 |       }
357 |     }
358 |   } else {
359 |     // https://github.com/electron/electron/issues/9035#issuecomment-536135202
360 |     // https://docs.microsoft.com/en-us/windows/win32/shell/clipboard#cf_hdrop
361 |     // https://www.codeproject.com/Reference/1091137/Windows-Clipboard-Formats
362 |     if (clipboard.has('CF_HDROP')) {
363 |       const rawFilePathStr = clipboard.read('CF_HDROP') || '';
364 |       let formatFilePathStr = [...rawFilePathStr]
365 |         .filter((_, index) => rawFilePathStr.charCodeAt(index) !== 0)
366 |         .join('')
367 |         .replace(/\\/g, '\\');
368 | 
369 |       const drivePrefix = formatFilePathStr.match(/[a-zA-Z]:\\/);
370 | 
371 |       if (drivePrefix) {
372 |         const drivePrefixIndex = formatFilePathStr.indexOf(drivePrefix[0]);
373 |         if (drivePrefixIndex !== 0) {
374 |           formatFilePathStr = formatFilePathStr.slice(drivePrefixIndex);
375 |         }
376 |         return formatFilePathStr
377 |           .split(drivePrefix[0])
378 |           .filter((item) => item)
379 |           .map((item) => drivePrefix + item);
380 |       }
381 |     } else {
382 |       const clipboardImage = clipboard.readImage('clipboard');
383 |       if (!clipboardImage.isEmpty()) {
384 |         const png = clipboardImage.toPNG();
385 |         const fileInfo: FileData = {
386 |           buffer: png,
387 |           mimeType: 'image/png',
388 |           originalName: `Pasted image ${moment().format('YYYYMMDDHHmmss')}.png`,
389 |         };
390 |         return [fileInfo];
391 |       } else {
392 |         return [
393 |           (clipboard.readBuffer('FileNameW').toString('ucs2') as string).replace(
394 |             RegExp(String.fromCharCode(0), 'g'),
395 |             ''
396 |           ),
397 |         ].filter((item) => item);
398 |       }
399 |     }
400 |   }
401 | 
402 |   return null;
403 | }
404 | 
405 | function getFileFromPath(file: string) {
406 |   return file.split('\\').pop().split('/').pop();
407 | }
408 | 
409 | async function linkFromBuffer(
410 |   stateManager: StateManager,
411 |   fileName: string,
412 |   ext: string,
413 |   buffer: ArrayBuffer
414 | ) {
415 |   const path = (await (stateManager.app.vault as any).getAvailablePathForAttachments(
416 |     fileName,
417 |     ext,
418 |     stateManager.file
419 |   )) as string;
420 | 
421 |   const newFile = await stateManager.app.vault.createBinary(path, buffer);
422 | 
423 |   return linkTo(stateManager, newFile, stateManager.file.path);
424 | }
425 | 
426 | async function handleElectronPaste(stateManager: StateManager, win: Window & typeof globalThis) {
427 |   const list = getFileListFromClipboard(win);
428 | 
429 |   if (!list || list.length === 0) return null;
430 | 
431 |   const fs = win.require('fs/promises');
432 |   const nPath = win.require('path');
433 | 
434 |   return (
435 |     await Promise.all(
436 |       list.map(async (file) => {
437 |         if (typeof file === 'string') {
438 |           const fileStr = getFileFromPath(file);
439 | 
440 |           const splitFile = fileStr.split('.');
441 |           const ext = splitFile.pop();
442 |           const fileName = splitFile.join('.');
443 | 
444 |           const path = (await (stateManager.app.vault as any).getAvailablePathForAttachments(
445 |             fileName,
446 |             ext,
447 |             stateManager.file
448 |           )) as string;
449 | 
450 |           const basePath = (stateManager.app.vault.adapter as any).basePath;
451 | 
452 |           await fs.copyFile(file, nPath.join(basePath, path));
453 | 
454 |           // Wait for Obsidian to update
455 |           await new Promise((resolve) => win.setTimeout(resolve, 50));
456 | 
457 |           const newFile = stateManager.app.vault.getAbstractFileByPath(path) as TFile;
458 | 
459 |           return linkTo(stateManager, newFile, stateManager.file.path);
460 |         } else {
461 |           const splitFile = file.originalName.split('.');
462 |           const ext = splitFile.pop();
463 |           const fileName = splitFile.join('.');
464 | 
465 |           return await linkFromBuffer(stateManager, fileName, ext, file.buffer);
466 |         }
467 |       })
468 |     )
469 |   ).filter((file) => file);
470 | }
471 | 
472 | function handleFiles(stateManager: StateManager, files: FileWithPath[], isPaste?: boolean) {
473 |   return Promise.all(
474 |     files.map((file) => {
475 |       const splitFileName = file.name.split('.');
476 | 
477 |       let ext = splitFileName.pop();
478 |       let fileName = splitFileName.join('.');
479 | 
480 |       if (isPaste) {
481 |         switch (file.type) {
482 |           case 'text/jpg':
483 |             ext = 'jpg';
484 |             break;
485 |           case 'text/jpeg':
486 |             ext = 'jpeg';
487 |             break;
488 |           case 'text/png':
489 |             ext = 'png';
490 |             break;
491 |         }
492 | 
493 |         fileName = 'Pasted image ' + moment().format('YYYYMMDDHHmmss');
494 |       }
495 | 
496 |       return new Promise<string>((resolve, reject) => {
497 |         const reader = new FileReader();
498 |         reader.onload = async (e) => {
499 |           try {
500 |             const path = (await (stateManager.app.vault as any).getAvailablePathForAttachments(
501 |               fileName,
502 |               ext,
503 |               stateManager.file
504 |             )) as string;
505 |             const newFile = await stateManager.app.vault.createBinary(
506 |               path,
507 |               e.target.result as ArrayBuffer
508 |             );
509 | 
510 |             resolve(linkTo(stateManager, newFile, stateManager.file.path));
511 |           } catch (e) {
512 |             console.error(e);
513 |             reject(e);
514 |           }
515 |         };
516 |         reader.readAsArrayBuffer(file as FileWithPath);
517 |       });
518 |     })
519 |   );
520 | }
521 | 
522 | async function handleNullDraggable(
523 |   stateManager: StateManager,
524 |   e: DragEvent | ClipboardEvent,
525 |   win: Window & typeof globalThis
526 | ) {
527 |   const isClipboardEvent = (e as DragEvent).view ? false : true;
528 |   const forcePlaintext = isClipboardEvent ? stateManager.getAView().isShiftPressed : false;
529 |   const transfer = isClipboardEvent
530 |     ? (e as ClipboardEvent).clipboardData
531 |     : (e as DragEvent).dataTransfer;
532 |   const clipboard =
533 |     isClipboardEvent && Platform.isDesktopApp ? win.require('electron').remote.clipboard : null;
534 |   const formats = clipboard ? clipboard.availableFormats() : [];
535 | 
536 |   if (!isClipboardEvent) {
537 |     const files = await fromEvent(e);
538 |     if (files.length) {
539 |       return await handleFiles(stateManager, files as FileWithPath[]);
540 |     }
541 |   } else if (isClipboardEvent && !forcePlaintext && !formats.includes('text/rtf')) {
542 |     if (Platform.isDesktopApp) {
543 |       const links = await handleElectronPaste(stateManager, win);
544 | 
545 |       if (links?.length) {
546 |         return links;
547 |       }
548 |     }
549 | 
550 |     const files: File[] = [];
551 |     const items = (e as ClipboardEvent).clipboardData.items;
552 | 
553 |     for (const index in items) {
554 |       const item = items[index];
555 |       if (item.kind === 'file') {
556 |         files.push(item.getAsFile());
557 |       }
558 |     }
559 | 
560 |     if (files.length) {
561 |       return await handleFiles(stateManager, files, true);
562 |     }
563 |   }
564 | 
565 |   const html = transfer.getData('text/html');
566 |   const plain = transfer.getData('text/plain');
567 |   const uris = transfer.getData('text/uri-list');
568 | 
569 |   const text = forcePlaintext ? plain || html : getMarkdown(html);
570 | 
571 |   return [fixLinks(text || uris || plain || html || '').trim()];
572 | }
573 | 
574 | export async function handleDragOrPaste(
575 |   stateManager: StateManager,
576 |   e: DragEvent | ClipboardEvent,
577 |   win: Window & typeof globalThis
578 | ): Promise<string[]> {
579 |   const draggable = (stateManager.app as any).dragManager.draggable;
580 |   const transfer = (e as DragEvent).view
581 |     ? (e as DragEvent).dataTransfer
582 |     : (e as ClipboardEvent).clipboardData;
583 | 
584 |   switch (draggable?.type) {
585 |     case 'file':
586 |       return [linkTo(stateManager, draggable.file, stateManager.file.path)];
587 |     case 'files':
588 |       return draggable.files.map((f: TFile) => linkTo(stateManager, f, stateManager.file.path));
589 |     case 'folder': {
590 |       return draggable.file.children
591 |         .map((f: TFile | TFolder) => {
592 |           if (f instanceof TFolder) {
593 |             return null;
594 |           }
595 | 
596 |           return linkTo(stateManager, f, stateManager.file.path);
597 |         })
598 |         .filter((link: string | null) => link);
599 |     }
600 |     case 'link': {
601 |       let link = draggable.file
602 |         ? linkTo(stateManager, draggable.file, parseLinktext(draggable.linktext).subpath)
603 |         : `[[${draggable.linktext}]]`;
604 |       const alias = new DOMParser().parseFromString(transfer.getData('text/html'), 'text/html')
605 |         .documentElement.textContent; // Get raw text
606 |       link = link.replace(/]]$/, `|${alias}]]`).replace(/^\[[^\]].+]\(/, `[${alias}](`);
607 |       return [link];
608 |     }
609 |     default: {
610 |       return await handleNullDraggable(stateManager, e, win);
611 |     }
612 |   }
613 | }
614 | 


--------------------------------------------------------------------------------
/src/components/Kanban.tsx:
--------------------------------------------------------------------------------
  1 | import animateScrollTo from 'animated-scroll-to';
  2 | import classcat from 'classcat';
  3 | import update from 'immutability-helper';
  4 | import { useCallback, useEffect, useMemo, useRef, useState } from 'preact/compat';
  5 | import { KanbanView } from 'src/KanbanView';
  6 | import { StateManager } from 'src/StateManager';
  7 | import { useIsAnythingDragging } from 'src/dnd/components/DragOverlay';
  8 | import { ScrollContainer } from 'src/dnd/components/ScrollContainer';
  9 | import { SortPlaceholder } from 'src/dnd/components/SortPlaceholder';
 10 | import { Sortable } from 'src/dnd/components/Sortable';
 11 | import { createHTMLDndHandlers } from 'src/dnd/managers/DragManager';
 12 | import { t } from 'src/lang/helpers';
 13 | 
 14 | import { DndScope } from '../dnd/components/Scope';
 15 | import { getBoardModifiers } from '../helpers/boardModifiers';
 16 | import { frontmatterKey } from '../parsers/common';
 17 | import { Icon } from './Icon/Icon';
 18 | import { Lanes } from './Lane/Lane';
 19 | import { LaneForm } from './Lane/LaneForm';
 20 | import { TableView } from './Table/Table';
 21 | import { KanbanContext, SearchContext } from './context';
 22 | import { baseClassName, c, useSearchValue } from './helpers';
 23 | import { DataTypes } from './types';
 24 | 
 25 | const boardScrollTiggers = [DataTypes.Item, DataTypes.Lane];
 26 | const boardAccepts = [DataTypes.Lane];
 27 | 
 28 | interface KanbanProps {
 29 |   stateManager: StateManager;
 30 |   view: KanbanView;
 31 | }
 32 | 
 33 | function getCSSClass(frontmatter: Record<string, any>): string[] {
 34 |   const classes = [];
 35 |   if (Array.isArray(frontmatter.cssclass)) {
 36 |     classes.push(...frontmatter.cssclass);
 37 |   } else if (typeof frontmatter.cssclass === 'string') {
 38 |     classes.push(frontmatter.cssclass);
 39 |   }
 40 |   if (Array.isArray(frontmatter.cssclasses)) {
 41 |     classes.push(...frontmatter.cssclasses);
 42 |   } else if (typeof frontmatter.cssclasses === 'string') {
 43 |     classes.push(frontmatter.cssclasses);
 44 |   }
 45 | 
 46 |   return classes;
 47 | }
 48 | 
 49 | export const Kanban = ({ view, stateManager }: KanbanProps) => {
 50 |   const boardData = stateManager.useState();
 51 |   const isAnythingDragging = useIsAnythingDragging();
 52 | 
 53 |   const rootRef = useRef<HTMLDivElement>(null);
 54 |   const searchRef = useRef<HTMLInputElement>(null);
 55 |   const [searchQuery, setSearchQuery] = useState<string>('');
 56 |   const [debouncedSearchQuery, setDebouncedSearchQuery] = useState<string>('');
 57 |   const [isSearching, setIsSearching] = useState<boolean>(false);
 58 | 
 59 |   const [isLaneFormVisible, setIsLaneFormVisible] = useState<boolean>(
 60 |     boardData?.children.length === 0
 61 |   );
 62 | 
 63 |   const filePath = stateManager.file.path;
 64 |   const maxArchiveLength = stateManager.useSetting('max-archive-size');
 65 |   const dateColors = stateManager.useSetting('date-colors');
 66 |   const tagColors = stateManager.useSetting('tag-colors');
 67 |   const boardView = view.useViewState(frontmatterKey);
 68 | 
 69 |   const closeLaneForm = useCallback(() => {
 70 |     if (boardData?.children.length > 0) {
 71 |       setIsLaneFormVisible(false);
 72 |     }
 73 |   }, [boardData?.children.length]);
 74 | 
 75 |   useEffect(() => {
 76 |     if (boardData?.children.length === 0 && !stateManager.hasError()) {
 77 |       setIsLaneFormVisible(true);
 78 |     }
 79 |   }, [boardData?.children.length, stateManager]);
 80 | 
 81 |   const onNewLane = useCallback(() => {
 82 |     rootRef.current?.win.setTimeout(() => {
 83 |       const board = rootRef.current?.getElementsByClassName(c('board'));
 84 | 
 85 |       if (board?.length) {
 86 |         animateScrollTo([board[0].scrollWidth, 0], {
 87 |           elementToScroll: board[0],
 88 |           speed: 300,
 89 |           minDuration: 150,
 90 |           easing: (x: number) => {
 91 |             return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
 92 |           },
 93 |         });
 94 |       }
 95 |     });
 96 |   }, []);
 97 | 
 98 |   useEffect(() => {
 99 |     const onSearchHotkey = (data: { commandId: string; data: string }) => {
100 |       if (data.commandId === 'editor:open-search') {
101 |         if (typeof data.data === 'string') {
102 |           setIsSearching(true);
103 |           setSearchQuery(data.data);
104 |           setDebouncedSearchQuery(data.data);
105 |         } else {
106 |           setIsSearching((val) => !val);
107 |         }
108 |       }
109 |     };
110 | 
111 |     const showLaneForm = () => {
112 |       setIsLaneFormVisible(true);
113 |     };
114 | 
115 |     view.emitter.on('hotkey', onSearchHotkey);
116 |     view.emitter.on('showLaneForm', showLaneForm);
117 | 
118 |     return () => {
119 |       view.emitter.off('hotkey', onSearchHotkey);
120 |       view.emitter.off('showLaneForm', showLaneForm);
121 |     };
122 |   }, [view]);
123 | 
124 |   useEffect(() => {
125 |     if (isSearching) {
126 |       searchRef.current?.focus();
127 |     }
128 |   }, [isSearching]);
129 | 
130 |   useEffect(() => {
131 |     const win = view.getWindow();
132 |     const trimmed = searchQuery.trim();
133 |     let id: number;
134 | 
135 |     if (trimmed) {
136 |       id = win.setTimeout(() => {
137 |         setDebouncedSearchQuery(trimmed);
138 |       }, 250);
139 |     } else {
140 |       setDebouncedSearchQuery('');
141 |     }
142 | 
143 |     return () => {
144 |       win.clearTimeout(id);
145 |     };
146 |   }, [searchQuery, view]);
147 | 
148 |   useEffect(() => {
149 |     if (maxArchiveLength === undefined || maxArchiveLength === -1) {
150 |       return;
151 |     }
152 | 
153 |     if (typeof maxArchiveLength === 'number' && boardData?.data.archive.length > maxArchiveLength) {
154 |       stateManager.setState((board) =>
155 |         update(board, {
156 |           data: {
157 |             archive: {
158 |               $set: board.data.archive.slice(maxArchiveLength * -1),
159 |             },
160 |           },
161 |         })
162 |       );
163 |     }
164 |   }, [boardData?.data.archive.length, maxArchiveLength]);
165 | 
166 |   const boardModifiers = useMemo(() => {
167 |     return getBoardModifiers(view, stateManager);
168 |   }, [stateManager, view]);
169 | 
170 |   const kanbanContext = useMemo(() => {
171 |     return {
172 |       view,
173 |       stateManager,
174 |       boardModifiers,
175 |       filePath,
176 |     };
177 |   }, [view, stateManager, boardModifiers, filePath, dateColors, tagColors]);
178 | 
179 |   const html5DragHandlers = createHTMLDndHandlers(stateManager);
180 | 
181 |   if (boardData === null || boardData === undefined)
182 |     return (
183 |       <div className={c('loading')}>
184 |         <div className="sk-pulse"></div>
185 |       </div>
186 |     );
187 | 
188 |   if (boardData.data.errors.length > 0) {
189 |     return (
190 |       <div>
191 |         <div>Error:</div>
192 |         {boardData.data.errors.map((e, i) => {
193 |           return (
194 |             <div key={i}>
195 |               <div>{e.description}</div>
196 |               <pre>{e.stack}</pre>
197 |             </div>
198 |           );
199 |         })}
200 |       </div>
201 |     );
202 |   }
203 | 
204 |   const axis = boardView === 'list' ? 'vertical' : 'horizontal';
205 |   const searchValue = useSearchValue(
206 |     boardData,
207 |     debouncedSearchQuery,
208 |     setSearchQuery,
209 |     setDebouncedSearchQuery,
210 |     setIsSearching
211 |   );
212 | 
213 |   return (
214 |     <DndScope id={view.id}>
215 |       <KanbanContext.Provider value={kanbanContext}>
216 |         <SearchContext.Provider value={searchValue}>
217 |           <div
218 |             ref={rootRef}
219 |             className={classcat([
220 |               baseClassName,
221 |               {
222 |                 'something-is-dragging': isAnythingDragging,
223 |               },
224 |               ...getCSSClass(boardData.data.frontmatter),
225 |             ])}
226 |             {...html5DragHandlers}
227 |           >
228 |             {(isLaneFormVisible || boardData.children.length === 0) && (
229 |               <LaneForm onNewLane={onNewLane} closeLaneForm={closeLaneForm} />
230 |             )}
231 |             {isSearching && (
232 |               <div className={c('search-wrapper')}>
233 |                 <input
234 |                   ref={searchRef}
235 |                   value={searchQuery}
236 |                   onChange={(e) => {
237 |                     setSearchQuery((e.target as HTMLInputElement).value);
238 |                   }}
239 |                   onKeyDown={(e) => {
240 |                     if (e.key === 'Escape') {
241 |                       setSearchQuery('');
242 |                       setDebouncedSearchQuery('');
243 |                       (e.target as HTMLInputElement).blur();
244 |                       setIsSearching(false);
245 |                     }
246 |                   }}
247 |                   type="text"
248 |                   className={c('filter-input')}
249 |                   placeholder={t('Search...')}
250 |                 />
251 |                 <a
252 |                   className={`${c('search-cancel-button')} clickable-icon`}
253 |                   onClick={() => {
254 |                     setSearchQuery('');
255 |                     setDebouncedSearchQuery('');
256 |                     setIsSearching(false);
257 |                   }}
258 |                   aria-label={t('Cancel')}
259 |                 >
260 |                   <Icon name="lucide-x" />
261 |                 </a>
262 |               </div>
263 |             )}
264 |             {boardView === 'table' ? (
265 |               <TableView boardData={boardData} stateManager={stateManager} />
266 |             ) : (
267 |               <ScrollContainer
268 |                 id={view.id}
269 |                 className={classcat([
270 |                   c('board'),
271 |                   {
272 |                     [c('horizontal')]: boardView !== 'list',
273 |                     [c('vertical')]: boardView === 'list',
274 |                     'is-adding-lane': isLaneFormVisible,
275 |                   },
276 |                 ])}
277 |                 triggerTypes={boardScrollTiggers}
278 |               >
279 |                 <div>
280 |                   <Sortable axis={axis}>
281 |                     <Lanes lanes={boardData.children} collapseDir={axis} />
282 |                     <SortPlaceholder
283 |                       accepts={boardAccepts}
284 |                       className={c('lane-placeholder')}
285 |                       index={boardData.children.length}
286 |                     />
287 |                   </Sortable>
288 |                 </div>
289 |               </ScrollContainer>
290 |             )}
291 |           </div>
292 |         </SearchContext.Provider>
293 |       </KanbanContext.Provider>
294 |     </DndScope>
295 |   );
296 | };
297 | 


--------------------------------------------------------------------------------
/src/components/Lane/Lane.tsx:
--------------------------------------------------------------------------------
  1 | import animateScrollTo from 'animated-scroll-to';
  2 | import classcat from 'classcat';
  3 | import update from 'immutability-helper';
  4 | import { Fragment, memo, useCallback, useContext, useMemo, useRef, useState } from 'preact/compat';
  5 | import {
  6 |   DraggableProps,
  7 |   Droppable,
  8 |   StaticDroppable,
  9 |   useNestedEntityPath,
 10 | } from 'src/dnd/components/Droppable';
 11 | import { ScrollContainer } from 'src/dnd/components/ScrollContainer';
 12 | import { SortPlaceholder } from 'src/dnd/components/SortPlaceholder';
 13 | import { Sortable, StaticSortable } from 'src/dnd/components/Sortable';
 14 | import { useDragHandle } from 'src/dnd/managers/DragManager';
 15 | import { frontmatterKey } from 'src/parsers/common';
 16 | import { getTaskStatusDone } from 'src/parsers/helpers/inlineMetadata';
 17 | 
 18 | import { Items } from '../Item/Item';
 19 | import { ItemForm } from '../Item/ItemForm';
 20 | import { KanbanContext, SearchContext, SortContext } from '../context';
 21 | import { c, generateInstanceId } from '../helpers';
 22 | import { DataTypes, EditState, EditingState, Item, Lane } from '../types';
 23 | import { LaneHeader } from './LaneHeader';
 24 | 
 25 | const laneAccepts = [DataTypes.Item];
 26 | 
 27 | export interface DraggableLaneProps {
 28 |   lane: Lane;
 29 |   laneIndex: number;
 30 |   isStatic?: boolean;
 31 |   collapseDir: 'horizontal' | 'vertical';
 32 |   isCollapsed?: boolean;
 33 | }
 34 | 
 35 | function DraggableLaneRaw({
 36 |   isStatic,
 37 |   lane,
 38 |   laneIndex,
 39 |   collapseDir,
 40 |   isCollapsed = false,
 41 | }: DraggableLaneProps) {
 42 |   const [editState, setEditState] = useState<EditState>(EditingState.cancel);
 43 |   const [isSorting, setIsSorting] = useState(false);
 44 | 
 45 |   const { stateManager, boardModifiers, view } = useContext(KanbanContext);
 46 |   const search = useContext(SearchContext);
 47 | 
 48 |   const boardView = view.useViewState(frontmatterKey);
 49 |   const path = useNestedEntityPath(laneIndex);
 50 |   const laneWidth = stateManager.useSetting('lane-width');
 51 |   const fullWidth = boardView === 'list' && stateManager.useSetting('full-list-lane-width');
 52 |   const insertionMethod = stateManager.useSetting('new-card-insertion-method');
 53 |   const laneStyles = useMemo(
 54 |     () =>
 55 |       !(isCollapsed && collapseDir === 'horizontal') && (fullWidth || laneWidth)
 56 |         ? { width: fullWidth ? '100%' : `${laneWidth}px` }
 57 |         : undefined,
 58 |     [fullWidth, laneWidth, isCollapsed]
 59 |   );
 60 | 
 61 |   const elementRef = useRef<HTMLDivElement>(null);
 62 |   const measureRef = useRef<HTMLDivElement>(null);
 63 |   const dragHandleRef = useRef<HTMLDivElement>(null);
 64 | 
 65 |   const bindHandle = useDragHandle(measureRef, dragHandleRef);
 66 | 
 67 |   const shouldMarkItemsComplete = !!lane.data.shouldMarkItemsComplete;
 68 |   const isCompactPrepend = insertionMethod === 'prepend-compact';
 69 |   const shouldPrepend = isCompactPrepend || insertionMethod === 'prepend';
 70 | 
 71 |   const toggleIsCollapsed = useCallback(() => {
 72 |     stateManager.setState((board) => {
 73 |       const collapseState = [...view.getViewState('list-collapse')];
 74 |       collapseState[laneIndex] = !collapseState[laneIndex];
 75 |       view.setViewState('list-collapse', collapseState);
 76 |       return update(board, {
 77 |         data: { settings: { 'list-collapse': { $set: collapseState } } },
 78 |       });
 79 |     });
 80 |   }, [stateManager, laneIndex]);
 81 | 
 82 |   const addItems = useCallback(
 83 |     (items: Item[]) => {
 84 |       boardModifiers[shouldPrepend ? 'prependItems' : 'appendItems'](
 85 |         [...path, lane.children.length - 1],
 86 |         items.map((item) =>
 87 |           update(item, {
 88 |             data: {
 89 |               checked: {
 90 |                 // Mark the item complete if we're moving into a completed lane
 91 |                 $set: shouldMarkItemsComplete,
 92 |               },
 93 |               checkChar: {
 94 |                 $set: shouldMarkItemsComplete ? getTaskStatusDone() : ' ',
 95 |               },
 96 |             },
 97 |           })
 98 |         )
 99 |       );
100 | 
101 |       // TODO: can we find a less brute force way to do this?
102 |       view.getWindow().setTimeout(() => {
103 |         const laneItems = elementRef.current?.getElementsByClassName(c('lane-items'));
104 | 
105 |         if (laneItems.length) {
106 |           animateScrollTo([0, shouldPrepend ? 0 : laneItems[0].scrollHeight], {
107 |             elementToScroll: laneItems[0],
108 |             speed: 200,
109 |             minDuration: 150,
110 |             easing: (x: number) => {
111 |               return x === 1 ? 1 : 1 - Math.pow(2, -10 * x);
112 |             },
113 |           });
114 |         }
115 |       });
116 |     },
117 |     [boardModifiers, path, lane, shouldPrepend]
118 |   );
119 | 
120 |   const DroppableComponent = isStatic ? StaticDroppable : Droppable;
121 |   const SortableComponent = isStatic ? StaticSortable : Sortable;
122 |   const CollapsedDropArea = !isCollapsed || isStatic ? Fragment : Droppable;
123 |   const dropAreaProps: DraggableProps = useMemo(() => {
124 |     if (!isCollapsed || isStatic) return {} as any;
125 |     const data = {
126 |       id: generateInstanceId(),
127 |       type: 'lane',
128 |       accepts: [DataTypes.Item],
129 |       acceptsSort: [DataTypes.Lane],
130 |     };
131 |     return {
132 |       elementRef: elementRef,
133 |       measureRef: measureRef,
134 |       id: data.id,
135 |       index: laneIndex,
136 |       data: data,
137 |     };
138 |   }, [isCollapsed, laneIndex, isStatic]);
139 | 
140 |   return (
141 |     <SortContext.Provider value={lane.data.sorted ?? null}>
142 |       <div
143 |         ref={measureRef}
144 |         className={classcat([
145 |           c('lane-wrapper'),
146 |           {
147 |             'is-sorting': isSorting,
148 |             'collapse-horizontal': isCollapsed && collapseDir === 'horizontal',
149 |             'collapse-vertical': isCollapsed && collapseDir === 'vertical',
150 |           },
151 |         ])}
152 |         style={laneStyles}
153 |       >
154 |         <div
155 |           data-count={lane.children.length}
156 |           ref={elementRef}
157 |           className={classcat([c('lane'), { 'will-prepend': shouldPrepend }])}
158 |         >
159 |           <CollapsedDropArea {...dropAreaProps}>
160 |             <LaneHeader
161 |               bindHandle={bindHandle}
162 |               laneIndex={laneIndex}
163 |               lane={lane}
164 |               setIsItemInputVisible={isCompactPrepend ? setEditState : undefined}
165 |               isCollapsed={isCollapsed}
166 |               toggleIsCollapsed={toggleIsCollapsed}
167 |             />
168 | 
169 |             {!search?.query && !isCollapsed && shouldPrepend && (
170 |               <ItemForm
171 |                 addItems={addItems}
172 |                 hideButton={isCompactPrepend}
173 |                 editState={editState}
174 |                 setEditState={setEditState}
175 |               />
176 |             )}
177 | 
178 |             {!isCollapsed && (
179 |               <DroppableComponent
180 |                 elementRef={elementRef}
181 |                 measureRef={measureRef}
182 |                 id={lane.id}
183 |                 index={laneIndex}
184 |                 data={lane}
185 |               >
186 |                 <ScrollContainer
187 |                   className={classcat([c('lane-items'), c('vertical')])}
188 |                   id={lane.id}
189 |                   index={laneIndex}
190 |                   isStatic={isStatic}
191 |                   triggerTypes={laneAccepts}
192 |                 >
193 |                   <SortableComponent onSortChange={setIsSorting} axis="vertical">
194 |                     <Items
195 |                       items={lane.children}
196 |                       isStatic={isStatic}
197 |                       shouldMarkItemsComplete={shouldMarkItemsComplete}
198 |                     />
199 |                     <SortPlaceholder
200 |                       accepts={laneAccepts}
201 |                       index={lane.children.length}
202 |                       isStatic={isStatic}
203 |                     />
204 |                   </SortableComponent>
205 |                 </ScrollContainer>
206 |               </DroppableComponent>
207 |             )}
208 | 
209 |             {!search?.query && !isCollapsed && !shouldPrepend && (
210 |               <ItemForm addItems={addItems} editState={editState} setEditState={setEditState} />
211 |             )}
212 |           </CollapsedDropArea>
213 |         </div>
214 |       </div>
215 |     </SortContext.Provider>
216 |   );
217 | }
218 | 
219 | export const DraggableLane = memo(DraggableLaneRaw);
220 | 
221 | export interface LanesProps {
222 |   lanes: Lane[];
223 |   collapseDir: 'horizontal' | 'vertical';
224 | }
225 | 
226 | function LanesRaw({ lanes, collapseDir }: LanesProps) {
227 |   const search = useContext(SearchContext);
228 |   const { view } = useContext(KanbanContext);
229 |   const boardView = view.useViewState(frontmatterKey) || 'board';
230 |   const collapseState = view.useViewState('list-collapse') || [];
231 | 
232 |   return (
233 |     <>
234 |       {lanes.map((lane, i) => {
235 |         return (
236 |           <DraggableLane
237 |             collapseDir={collapseDir}
238 |             isCollapsed={(search?.query && !search.lanes.has(lane)) || !!collapseState[i]}
239 |             key={boardView + lane.id}
240 |             lane={lane}
241 |             laneIndex={i}
242 |           />
243 |         );
244 |       })}
245 |     </>
246 |   );
247 | }
248 | 
249 | export const Lanes = memo(LanesRaw);
250 | 


--------------------------------------------------------------------------------
/src/components/Lane/LaneForm.tsx:
--------------------------------------------------------------------------------
  1 | import { EditorView } from '@codemirror/view';
  2 | import { useCallback, useContext, useLayoutEffect, useMemo, useRef, useState } from 'preact/compat';
  3 | import useOnclickOutside from 'react-cool-onclickoutside';
  4 | import { t } from 'src/lang/helpers';
  5 | import { parseLaneTitle } from 'src/parsers/helpers/parser';
  6 | 
  7 | import { MarkdownEditor, allowNewLine } from '../Editor/MarkdownEditor';
  8 | import { KanbanContext } from '../context';
  9 | import { c, generateInstanceId } from '../helpers';
 10 | import { LaneTemplate } from '../types';
 11 | 
 12 | interface LaneFormProps {
 13 |   onNewLane: () => void;
 14 |   closeLaneForm: () => void;
 15 | }
 16 | 
 17 | export function LaneForm({ onNewLane, closeLaneForm }: LaneFormProps) {
 18 |   const [shouldMarkAsComplete, setShouldMarkAsComplete] = useState(false);
 19 |   const editorRef = useRef<EditorView>();
 20 |   const inputRef = useRef<HTMLTextAreaElement>();
 21 |   const clickOutsideRef = useOnclickOutside(() => closeLaneForm(), {
 22 |     ignoreClass: [c('ignore-click-outside'), 'mobile-toolbar', 'suggestion-container'],
 23 |   });
 24 | 
 25 |   const { boardModifiers, stateManager } = useContext(KanbanContext);
 26 | 
 27 |   useLayoutEffect(() => {
 28 |     inputRef.current?.focus();
 29 |   }, []);
 30 | 
 31 |   const createLane = useCallback(
 32 |     (cm: EditorView, title: string) => {
 33 |       boardModifiers.addLane({
 34 |         ...LaneTemplate,
 35 |         id: generateInstanceId(),
 36 |         children: [],
 37 |         data: {
 38 |           ...parseLaneTitle(title),
 39 |           shouldMarkItemsComplete: shouldMarkAsComplete,
 40 |         },
 41 |       });
 42 | 
 43 |       cm.dispatch({
 44 |         changes: {
 45 |           from: 0,
 46 |           to: cm.state.doc.length,
 47 |           insert: '',
 48 |         },
 49 |       });
 50 | 
 51 |       setShouldMarkAsComplete(false);
 52 |       onNewLane();
 53 |     },
 54 |     [onNewLane, setShouldMarkAsComplete, boardModifiers]
 55 |   );
 56 | 
 57 |   const editState = useMemo(() => ({ x: 0, y: 0 }), []);
 58 |   const onEnter = useCallback(
 59 |     (cm: EditorView, mod: boolean, shift: boolean) => {
 60 |       if (!allowNewLine(stateManager, mod, shift)) {
 61 |         createLane(cm, cm.state.doc.toString());
 62 |         return true;
 63 |       }
 64 |     },
 65 |     [createLane]
 66 |   );
 67 |   const onSubmit = useCallback(
 68 |     (cm: EditorView) => createLane(cm, cm.state.doc.toString()),
 69 |     [createLane]
 70 |   );
 71 | 
 72 |   return (
 73 |     <div ref={clickOutsideRef} className={c('lane-form-wrapper')}>
 74 |       <div className={c('lane-input-wrapper')}>
 75 |         <MarkdownEditor
 76 |           className={c('lane-input')}
 77 |           editorRef={editorRef}
 78 |           editState={editState}
 79 |           onEnter={onEnter}
 80 |           onEscape={closeLaneForm}
 81 |           onSubmit={onSubmit}
 82 |         />
 83 |       </div>
 84 |       <div className={c('checkbox-wrapper')}>
 85 |         <div className={c('checkbox-label')}>{t('Mark cards in this list as complete')}</div>
 86 |         <div
 87 |           onClick={() => setShouldMarkAsComplete(!shouldMarkAsComplete)}
 88 |           className={`checkbox-container ${shouldMarkAsComplete ? 'is-enabled' : ''}`}
 89 |         />
 90 |       </div>
 91 |       <div className={c('lane-input-actions')}>
 92 |         <button
 93 |           className={c('lane-action-add')}
 94 |           onClick={() => {
 95 |             if (editorRef.current) {
 96 |               createLane(editorRef.current, editorRef.current.state.doc.toString());
 97 |             }
 98 |           }}
 99 |         >
100 |           {t('Add list')}
101 |         </button>
102 |         <button className={c('lane-action-cancel')} onClick={closeLaneForm}>
103 |           {t('Done')}
104 |         </button>
105 |       </div>
106 |     </div>
107 |   );
108 | }
109 | 


--------------------------------------------------------------------------------
/src/components/Lane/LaneHeader.tsx:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { Menu } from 'obsidian';
  3 | import { memo } from 'preact/compat';
  4 | import { Dispatch, StateUpdater, useCallback, useContext, useEffect, useState } from 'preact/hooks';
  5 | import { useNestedEntityPath } from 'src/dnd/components/Droppable';
  6 | import { t } from 'src/lang/helpers';
  7 | import { parseLaneTitle } from 'src/parsers/helpers/parser';
  8 | 
  9 | import { getDropAction } from '../Editor/helpers';
 10 | import { GripIcon } from '../Icon/GripIcon';
 11 | import { Icon } from '../Icon/Icon';
 12 | import { KanbanContext } from '../context';
 13 | import { c } from '../helpers';
 14 | import { EditState, EditingState, Lane, isEditing } from '../types';
 15 | import { ConfirmAction, useSettingsMenu } from './LaneMenu';
 16 | import { LaneSettings } from './LaneSettings';
 17 | import { LaneLimitCounter, LaneTitle } from './LaneTitle';
 18 | 
 19 | interface LaneHeaderProps {
 20 |   lane: Lane;
 21 |   laneIndex: number;
 22 |   bindHandle: (el: HTMLElement) => void;
 23 |   setIsItemInputVisible?: Dispatch<StateUpdater<EditState>>;
 24 |   isCollapsed: boolean;
 25 |   toggleIsCollapsed: () => void;
 26 | }
 27 | 
 28 | interface LaneButtonProps {
 29 |   settingsMenu: Menu;
 30 |   editState: EditState;
 31 |   setEditState: Dispatch<StateUpdater<EditState>>;
 32 |   setIsItemInputVisible?: Dispatch<StateUpdater<EditState>>;
 33 | }
 34 | 
 35 | function LaneButtons({
 36 |   settingsMenu,
 37 |   editState,
 38 |   setEditState,
 39 |   setIsItemInputVisible,
 40 | }: LaneButtonProps) {
 41 |   const { stateManager } = useContext(KanbanContext);
 42 |   return (
 43 |     <div className={c('lane-settings-button-wrapper')}>
 44 |       {isEditing(editState) ? (
 45 |         <a
 46 |           onClick={() => setEditState(null)}
 47 |           aria-label={t('Close')}
 48 |           className={`${c('lane-settings-button')} is-enabled clickable-icon`}
 49 |         >
 50 |           <Icon name="lucide-x" />
 51 |         </a>
 52 |       ) : (
 53 |         <>
 54 |           {setIsItemInputVisible && (
 55 |             <a
 56 |               aria-label={t('Add a card')}
 57 |               className={`${c('lane-settings-button')} clickable-icon`}
 58 |               onClick={() => setIsItemInputVisible({ x: 0, y: 0 })}
 59 |               onDragOver={(e) => {
 60 |                 if (getDropAction(stateManager, e.dataTransfer)) {
 61 |                   setIsItemInputVisible({ x: 0, y: 0 });
 62 |                 }
 63 |               }}
 64 |             >
 65 |               <Icon name="lucide-plus-circle" />
 66 |             </a>
 67 |           )}
 68 |           <a
 69 |             aria-label={t('More options')}
 70 |             className={`${c('lane-settings-button')} clickable-icon`}
 71 |             onClick={(e) => {
 72 |               settingsMenu.showAtMouseEvent(e);
 73 |             }}
 74 |           >
 75 |             <Icon name="lucide-more-vertical" />
 76 |           </a>
 77 |         </>
 78 |       )}
 79 |     </div>
 80 |   );
 81 | }
 82 | 
 83 | export const LaneHeader = memo(function LaneHeader({
 84 |   lane,
 85 |   laneIndex,
 86 |   bindHandle,
 87 |   setIsItemInputVisible,
 88 |   isCollapsed,
 89 |   toggleIsCollapsed,
 90 | }: LaneHeaderProps) {
 91 |   const [editState, setEditState] = useState<EditState>(EditingState.cancel);
 92 |   const lanePath = useNestedEntityPath(laneIndex);
 93 | 
 94 |   const { boardModifiers } = useContext(KanbanContext);
 95 |   const { settingsMenu, confirmAction, setConfirmAction } = useSettingsMenu({
 96 |     setEditState,
 97 |     path: lanePath,
 98 |     lane,
 99 |   });
100 | 
101 |   useEffect(() => {
102 |     if (lane.data.forceEditMode) {
103 |       setEditState(null);
104 |     }
105 |   }, [lane.data.forceEditMode]);
106 | 
107 |   const onLaneTitleChange = useCallback(
108 |     (str: string) => {
109 |       const { title, maxItems } = parseLaneTitle(str);
110 |       boardModifiers.updateLane(
111 |         lanePath,
112 |         update(lane, {
113 |           data: {
114 |             title: { $set: title },
115 |             maxItems: { $set: maxItems },
116 |           },
117 |         })
118 |       );
119 |     },
120 |     [boardModifiers, lane, lanePath]
121 |   );
122 | 
123 |   const onDoubleClick = useCallback(
124 |     (e: MouseEvent) => {
125 |       !isCollapsed && setEditState({ x: e.clientX, y: e.clientY });
126 |     },
127 |     [isCollapsed, setEditState]
128 |   );
129 | 
130 |   return (
131 |     <>
132 |       <div
133 |         // eslint-disable-next-line react/no-unknown-property
134 |         onDblClick={onDoubleClick}
135 |         className={c('lane-header-wrapper')}
136 |       >
137 |         <div className={c('lane-grip')} ref={bindHandle}>
138 |           <GripIcon />
139 |         </div>
140 | 
141 |         <div onClick={toggleIsCollapsed} className={c('lane-collapse')}>
142 |           <Icon name="chevron-down" />
143 |         </div>
144 | 
145 |         <LaneTitle
146 |           id={lane.id}
147 |           editState={editState}
148 |           maxItems={lane.data.maxItems}
149 |           onChange={onLaneTitleChange}
150 |           setEditState={setEditState}
151 |           title={lane.data.title}
152 |         />
153 | 
154 |         <LaneLimitCounter
155 |           editState={editState}
156 |           itemCount={lane.children.length}
157 |           maxItems={lane.data.maxItems}
158 |         />
159 | 
160 |         <LaneButtons
161 |           editState={editState}
162 |           setEditState={setEditState}
163 |           setIsItemInputVisible={setIsItemInputVisible}
164 |           settingsMenu={settingsMenu}
165 |         />
166 |       </div>
167 | 
168 |       <LaneSettings editState={editState} lane={lane} lanePath={lanePath} />
169 | 
170 |       {confirmAction && (
171 |         <ConfirmAction
172 |           lane={lane}
173 |           action={confirmAction}
174 |           onAction={() => {
175 |             switch (confirmAction) {
176 |               case 'archive':
177 |                 boardModifiers.archiveLane(lanePath);
178 |                 break;
179 |               case 'archive-items':
180 |                 boardModifiers.archiveLaneItems(lanePath);
181 |                 break;
182 |               case 'delete':
183 |                 boardModifiers.deleteEntity(lanePath);
184 |                 break;
185 |             }
186 | 
187 |             setConfirmAction(null);
188 |           }}
189 |           cancel={() => setConfirmAction(null)}
190 |         />
191 |       )}
192 |     </>
193 |   );
194 | });
195 | 


--------------------------------------------------------------------------------
/src/components/Lane/LaneMenu.tsx:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { Menu, Platform } from 'obsidian';
  3 | import { Dispatch, StateUpdater, useContext, useEffect, useMemo, useState } from 'preact/hooks';
  4 | import { Path } from 'src/dnd/types';
  5 | import { defaultSort } from 'src/helpers/util';
  6 | import { t } from 'src/lang/helpers';
  7 | import { lableToName } from 'src/parsers/helpers/inlineMetadata';
  8 | 
  9 | import { anyToString } from '../Item/MetadataTable';
 10 | import { KanbanContext } from '../context';
 11 | import { c, generateInstanceId } from '../helpers';
 12 | import { EditState, Lane, LaneSort, LaneTemplate } from '../types';
 13 | 
 14 | export type LaneAction = 'delete' | 'archive' | 'archive-items' | null;
 15 | 
 16 | const actionLabels = {
 17 |   delete: {
 18 |     description: t('Are you sure you want to delete this list and all its cards?'),
 19 |     confirm: t('Yes, delete list'),
 20 |   },
 21 |   archive: {
 22 |     description: t('Are you sure you want to archive this list and all its cards?'),
 23 |     confirm: t('Yes, archive list'),
 24 |   },
 25 |   'archive-items': {
 26 |     description: t('Are you sure you want to archive all cards in this list?'),
 27 |     confirm: t('Yes, archive cards'),
 28 |   },
 29 | };
 30 | 
 31 | export interface ConfirmActionProps {
 32 |   lane: Lane;
 33 |   action: LaneAction;
 34 |   cancel: () => void;
 35 |   onAction: () => void;
 36 | }
 37 | 
 38 | export function ConfirmAction({ action, cancel, onAction, lane }: ConfirmActionProps) {
 39 |   useEffect(() => {
 40 |     // Immediately execute action if lane is empty
 41 |     if (action && lane.children.length === 0) {
 42 |       onAction();
 43 |     }
 44 |   }, [action, lane.children.length]);
 45 | 
 46 |   if (!action || (action && lane.children.length === 0)) return null;
 47 | 
 48 |   return (
 49 |     <div className={c('action-confirm-wrapper')}>
 50 |       <div className={c('action-confirm-text')}>{actionLabels[action].description}</div>
 51 |       <div>
 52 |         <button onClick={onAction} className={c('confirm-action-button')}>
 53 |           {actionLabels[action].confirm}
 54 |         </button>
 55 |         <button onClick={cancel} className={c('cancel-action-button')}>
 56 |           Cancel
 57 |         </button>
 58 |       </div>
 59 |     </div>
 60 |   );
 61 | }
 62 | 
 63 | export interface UseSettingsMenuParams {
 64 |   setEditState: Dispatch<StateUpdater<EditState>>;
 65 |   path: Path;
 66 |   lane: Lane;
 67 | }
 68 | 
 69 | export function useSettingsMenu({ setEditState, path, lane }: UseSettingsMenuParams) {
 70 |   const { stateManager, boardModifiers } = useContext(KanbanContext);
 71 |   const [confirmAction, setConfirmAction] = useState<LaneAction>(null);
 72 | 
 73 |   const settingsMenu = useMemo(() => {
 74 |     const metadataSortOptions = new Set<string>();
 75 |     let canSortDate = false;
 76 |     let canSortTags = false;
 77 | 
 78 |     lane.children.forEach((item) => {
 79 |       const taskData = item.data.metadata.inlineMetadata;
 80 |       if (taskData) {
 81 |         taskData.forEach((m) => {
 82 |           if (m.key === 'repeat') return;
 83 |           if (!metadataSortOptions.has(m.key)) metadataSortOptions.add(m.key);
 84 |         });
 85 |       }
 86 | 
 87 |       if (!canSortDate && item.data.metadata.date) canSortDate = true;
 88 |       if (!canSortTags && item.data.metadata.tags?.length) canSortTags = true;
 89 |     });
 90 | 
 91 |     const menu = new Menu()
 92 |       .addItem((item) => {
 93 |         item
 94 |           .setIcon('lucide-edit-3')
 95 |           .setTitle(t('Edit list'))
 96 |           .onClick(() => setEditState({ x: 0, y: 0 }));
 97 |       })
 98 |       .addItem((item) => {
 99 |         item
100 |           .setIcon('lucide-archive')
101 |           .setTitle(t('Archive cards'))
102 |           .onClick(() => setConfirmAction('archive-items'));
103 |       })
104 |       .addSeparator()
105 |       .addItem((i) => {
106 |         i.setIcon('arrow-left-to-line')
107 |           .setTitle(t('Insert list before'))
108 |           .onClick(() =>
109 |             boardModifiers.insertLane(path, {
110 |               ...LaneTemplate,
111 |               id: generateInstanceId(),
112 |               children: [],
113 |               data: {
114 |                 title: '',
115 |                 shouldMarkItemsComplete: false,
116 |                 forceEditMode: true,
117 |               },
118 |             })
119 |           );
120 |       })
121 |       .addItem((i) => {
122 |         i.setIcon('arrow-right-to-line')
123 |           .setTitle(t('Insert list after'))
124 |           .onClick(() => {
125 |             const newPath = [...path];
126 | 
127 |             newPath[newPath.length - 1] = newPath[newPath.length - 1] + 1;
128 | 
129 |             boardModifiers.insertLane(newPath, {
130 |               ...LaneTemplate,
131 |               id: generateInstanceId(),
132 |               children: [],
133 |               data: {
134 |                 title: '',
135 |                 shouldMarkItemsComplete: false,
136 |                 forceEditMode: true,
137 |               },
138 |             });
139 |           });
140 |       })
141 |       .addSeparator()
142 |       .addItem((item) => {
143 |         item
144 |           .setIcon('lucide-archive')
145 |           .setTitle(t('Archive list'))
146 |           .onClick(() => setConfirmAction('archive'));
147 |       })
148 |       .addItem((item) => {
149 |         item
150 |           .setIcon('lucide-trash-2')
151 |           .setTitle(t('Delete list'))
152 |           .onClick(() => setConfirmAction('delete'));
153 |       })
154 |       .addSeparator();
155 | 
156 |     const addSortOptions = (menu: Menu) => {
157 |       menu.addItem((item) => {
158 |         item
159 |           .setIcon('arrow-down-up')
160 |           .setTitle(t('Sort by card text'))
161 |           .onClick(() => {
162 |             const children = lane.children.slice();
163 |             const isAsc = lane.data.sorted === LaneSort.TitleAsc;
164 | 
165 |             children.sort((a, b) => {
166 |               if (isAsc) {
167 |                 return b.data.title.localeCompare(a.data.title);
168 |               }
169 | 
170 |               return a.data.title.localeCompare(b.data.title);
171 |             });
172 | 
173 |             boardModifiers.updateLane(
174 |               path,
175 |               update(lane, {
176 |                 children: {
177 |                   $set: children,
178 |                 },
179 |                 data: {
180 |                   sorted: {
181 |                     $set:
182 |                       lane.data.sorted === LaneSort.TitleAsc
183 |                         ? LaneSort.TitleDsc
184 |                         : LaneSort.TitleAsc,
185 |                   },
186 |                 },
187 |               })
188 |             );
189 |           });
190 |       });
191 | 
192 |       if (canSortDate) {
193 |         menu.addItem((item) => {
194 |           item
195 |             .setIcon('arrow-down-up')
196 |             .setTitle(t('Sort by date'))
197 |             .onClick(() => {
198 |               const children = lane.children.slice();
199 |               const mod = lane.data.sorted === LaneSort.DateAsc ? -1 : 1;
200 | 
201 |               children.sort((a, b) => {
202 |                 const aDate: moment.Moment | undefined =
203 |                   a.data.metadata.time || a.data.metadata.date;
204 |                 const bDate: moment.Moment | undefined =
205 |                   b.data.metadata.time || b.data.metadata.date;
206 | 
207 |                 if (aDate && !bDate) return -1 * mod;
208 |                 if (bDate && !aDate) return 1 * mod;
209 |                 if (!aDate && !bDate) return 0;
210 | 
211 |                 return (aDate.isBefore(bDate) ? -1 : 1) * mod;
212 |               });
213 | 
214 |               boardModifiers.updateLane(
215 |                 path,
216 |                 update(lane, {
217 |                   children: {
218 |                     $set: children,
219 |                   },
220 |                   data: {
221 |                     sorted: {
222 |                       $set:
223 |                         lane.data.sorted === LaneSort.DateAsc ? LaneSort.DateDsc : LaneSort.DateAsc,
224 |                     },
225 |                   },
226 |                 })
227 |               );
228 |             });
229 |         });
230 |       }
231 | 
232 |       if (canSortTags) {
233 |         menu.addItem((item) => {
234 |           item
235 |             .setIcon('arrow-down-up')
236 |             .setTitle(t('Sort by tags'))
237 |             .onClick(() => {
238 |               const tagSortOrder = stateManager.getSetting('tag-sort');
239 |               const children = lane.children.slice();
240 |               const desc = lane.data.sorted === LaneSort.TagsAsc ? true : false;
241 | 
242 |               children.sort((a, b) => {
243 |                 const tagsA = a.data.metadata.tags;
244 |                 const tagsB = b.data.metadata.tags;
245 | 
246 |                 if (!tagsA?.length && !tagsB?.length) return 0;
247 |                 if (!tagsA?.length) return 1;
248 |                 if (!tagsB?.length) return -1;
249 | 
250 |                 const aSortOrder =
251 |                   tagSortOrder?.findIndex((sort) => tagsA.includes(sort.tag)) ?? -1;
252 |                 const bSortOrder =
253 |                   tagSortOrder?.findIndex((sort) => tagsB.includes(sort.tag)) ?? -1;
254 | 
255 |                 if (aSortOrder > -1 && bSortOrder < 0) return desc ? 1 : -1;
256 |                 if (bSortOrder > -1 && aSortOrder < 0) return desc ? -1 : 1;
257 |                 if (aSortOrder > -1 && bSortOrder > -1) {
258 |                   return desc ? bSortOrder - aSortOrder : aSortOrder - bSortOrder;
259 |                 }
260 | 
261 |                 if (desc) return defaultSort(tagsB.join(''), tagsA.join(''));
262 |                 return defaultSort(tagsA.join(''), tagsB.join(''));
263 |               });
264 | 
265 |               boardModifiers.updateLane(
266 |                 path,
267 |                 update(lane, {
268 |                   children: {
269 |                     $set: children,
270 |                   },
271 |                   data: {
272 |                     sorted: {
273 |                       $set:
274 |                         lane.data.sorted === LaneSort.TagsAsc ? LaneSort.TagsDsc : LaneSort.TagsAsc,
275 |                     },
276 |                   },
277 |                 })
278 |               );
279 |             });
280 |         });
281 |       }
282 | 
283 |       if (metadataSortOptions.size) {
284 |         metadataSortOptions.forEach((k) => {
285 |           menu.addItem((i) => {
286 |             i.setIcon('arrow-down-up')
287 |               .setTitle(t('Sort by') + ' ' + lableToName(k).toLocaleLowerCase())
288 |               .onClick(() => {
289 |                 const children = lane.children.slice();
290 |                 const desc = lane.data.sorted === k + '-asc' ? true : false;
291 | 
292 |                 children.sort((a, b) => {
293 |                   const valA = a.data.metadata.inlineMetadata?.find((m) => m.key === k);
294 |                   const valB = b.data.metadata.inlineMetadata?.find((m) => m.key === k);
295 | 
296 |                   if (valA === undefined && valB === undefined) return 0;
297 |                   if (valA === undefined) return 1;
298 |                   if (valB === undefined) return -1;
299 | 
300 |                   if (desc) {
301 |                     return defaultSort(
302 |                       anyToString(valB.value, stateManager),
303 |                       anyToString(valA.value, stateManager)
304 |                     );
305 |                   }
306 |                   return defaultSort(
307 |                     anyToString(valA.value, stateManager),
308 |                     anyToString(valB.value, stateManager)
309 |                   );
310 |                 });
311 | 
312 |                 boardModifiers.updateLane(
313 |                   path,
314 |                   update(lane, {
315 |                     children: {
316 |                       $set: children,
317 |                     },
318 |                     data: {
319 |                       sorted: {
320 |                         $set: lane.data.sorted === k + '-asc' ? k + '-desc' : k + '-asc',
321 |                       },
322 |                     },
323 |                   })
324 |                 );
325 |               });
326 |           });
327 |         });
328 |       }
329 |     };
330 | 
331 |     if (Platform.isPhone) {
332 |       addSortOptions(menu);
333 |     } else {
334 |       menu.addItem((item) => {
335 |         const submenu = (item as any).setTitle(t('Sort by')).setIcon('arrow-down-up').setSubmenu();
336 | 
337 |         addSortOptions(submenu);
338 |       });
339 |     }
340 | 
341 |     return menu;
342 |   }, [stateManager, setConfirmAction, path, lane]);
343 | 
344 |   return {
345 |     settingsMenu,
346 |     confirmAction,
347 |     setConfirmAction,
348 |   };
349 | }
350 | 


--------------------------------------------------------------------------------
/src/components/Lane/LaneSettings.tsx:
--------------------------------------------------------------------------------
 1 | import update from 'immutability-helper';
 2 | import { useContext } from 'preact/compat';
 3 | import { Path } from 'src/dnd/types';
 4 | import { t } from 'src/lang/helpers';
 5 | 
 6 | import { KanbanContext } from '../context';
 7 | import { c } from '../helpers';
 8 | import { EditState, Lane, isEditing } from '../types';
 9 | 
10 | export interface LaneSettingsProps {
11 |   lane: Lane;
12 |   lanePath: Path;
13 |   editState: EditState;
14 | }
15 | 
16 | export function LaneSettings({ lane, lanePath, editState }: LaneSettingsProps) {
17 |   const { boardModifiers } = useContext(KanbanContext);
18 | 
19 |   if (!isEditing(editState)) return null;
20 | 
21 |   return (
22 |     <div className={c('lane-setting-wrapper')}>
23 |       <div className={c('checkbox-wrapper')}>
24 |         <div className={c('checkbox-label')}>{t('Mark cards in this list as complete')}</div>
25 |         <div
26 |           onClick={() =>
27 |             boardModifiers.updateLane(
28 |               lanePath,
29 |               update(lane, {
30 |                 data: { $toggle: ['shouldMarkItemsComplete'] },
31 |               })
32 |             )
33 |           }
34 |           className={`checkbox-container ${lane.data.shouldMarkItemsComplete ? 'is-enabled' : ''}`}
35 |         />
36 |       </div>
37 |     </div>
38 |   );
39 | }
40 | 


--------------------------------------------------------------------------------
/src/components/Lane/LaneTitle.tsx:
--------------------------------------------------------------------------------
  1 | import { EditorView, ViewUpdate } from '@codemirror/view';
  2 | import classcat from 'classcat';
  3 | import { Dispatch, StateUpdater, useCallback, useContext, useEffect, useRef } from 'preact/hooks';
  4 | import { laneTitleWithMaxItems } from 'src/helpers';
  5 | 
  6 | import { MarkdownEditor, allowNewLine } from '../Editor/MarkdownEditor';
  7 | import { MarkdownRenderer } from '../MarkdownRenderer/MarkdownRenderer';
  8 | import { KanbanContext } from '../context';
  9 | import { c } from '../helpers';
 10 | import { EditState, EditingState, isEditing } from '../types';
 11 | 
 12 | export interface LaneTitleProps {
 13 |   title: string;
 14 |   maxItems?: number;
 15 |   editState: EditState;
 16 |   setEditState: Dispatch<StateUpdater<EditState>>;
 17 |   onChange: (str: string) => void;
 18 |   id: string;
 19 | }
 20 | 
 21 | export function LaneLimitCounter({
 22 |   maxItems,
 23 |   itemCount,
 24 |   editState,
 25 | }: {
 26 |   maxItems: number;
 27 |   itemCount: number;
 28 |   editState: EditState;
 29 | }) {
 30 |   const { stateManager } = useContext(KanbanContext);
 31 |   const hideCount = stateManager.getSetting('hide-card-count');
 32 | 
 33 |   if (hideCount || isEditing(editState)) return null;
 34 | 
 35 |   return (
 36 |     <div
 37 |       className={classcat([
 38 |         c('lane-title-count'),
 39 |         {
 40 |           'wip-exceeded': maxItems && maxItems < itemCount,
 41 |         },
 42 |       ])}
 43 |     >
 44 |       {itemCount}
 45 |       {maxItems > 0 && (
 46 |         <>
 47 |           <span className={c('lane-title-count-separator')}>/</span>
 48 |           <span className={c('lane-title-count-limit')}>{maxItems}</span>
 49 |         </>
 50 |       )}
 51 |     </div>
 52 |   );
 53 | }
 54 | 
 55 | export function LaneTitle({ maxItems, editState, setEditState, title, onChange }: LaneTitleProps) {
 56 |   const { stateManager } = useContext(KanbanContext);
 57 |   const titleRef = useRef<string | null>(null);
 58 | 
 59 |   useEffect(() => {
 60 |     if (editState === EditingState.complete) {
 61 |       if (titleRef.current !== null) onChange(titleRef.current);
 62 |       titleRef.current = null;
 63 |     } else if (editState === EditingState.cancel && titleRef.current !== null) {
 64 |       titleRef.current = null;
 65 |     }
 66 |   }, [editState]);
 67 | 
 68 |   const onUpdate = useCallback((update: ViewUpdate) => {
 69 |     if (update.docChanged) {
 70 |       titleRef.current = update.state.doc.toString().trim();
 71 |     }
 72 |   }, []);
 73 |   const onEnter = useCallback(
 74 |     (cm: EditorView, mod: boolean, shift: boolean) => {
 75 |       if (!allowNewLine(stateManager, mod, shift)) {
 76 |         setEditState(EditingState.complete);
 77 |         return true;
 78 |       }
 79 |     },
 80 |     [setEditState, stateManager]
 81 |   );
 82 |   const onSubmit = useCallback(() => setEditState(EditingState.complete), [setEditState]);
 83 |   const onEscape = useCallback(() => setEditState(EditingState.cancel), [setEditState]);
 84 | 
 85 |   return (
 86 |     <div className={c('lane-title')}>
 87 |       {isEditing(editState) ? (
 88 |         <MarkdownEditor
 89 |           editState={editState}
 90 |           className={c('lane-input')}
 91 |           onChange={onUpdate}
 92 |           onEnter={onEnter}
 93 |           onEscape={onEscape}
 94 |           onSubmit={onSubmit}
 95 |           value={laneTitleWithMaxItems(title, maxItems)}
 96 |         />
 97 |       ) : (
 98 |         <div className={c('lane-title-text')}>
 99 |           <MarkdownRenderer markdownString={title} />
100 |         </div>
101 |       )}
102 |     </div>
103 |   );
104 | }
105 | 


--------------------------------------------------------------------------------
/src/components/MarkdownRenderer/MarkdownRenderer.tsx:
--------------------------------------------------------------------------------
  1 | /* eslint-disable @typescript-eslint/ban-ts-comment */
  2 | import classcat from 'classcat';
  3 | import Mark from 'mark.js';
  4 | import moment from 'moment';
  5 | import { Component, MarkdownRenderer as ObsidianRenderer, getLinkpath } from 'obsidian';
  6 | import { CSSProperties, memo, useEffect, useRef } from 'preact/compat';
  7 | import { useContext } from 'preact/hooks';
  8 | import { KanbanView } from 'src/KanbanView';
  9 | import { DndManagerContext, EntityManagerContext } from 'src/dnd/components/context';
 10 | import { PromiseCapability } from 'src/helpers/util';
 11 | 
 12 | import { applyCheckboxIndexes } from '../../helpers/renderMarkdown';
 13 | import { IntersectionObserverContext, KanbanContext, SortContext } from '../context';
 14 | import { c, useGetDateColorFn, useGetTagColorFn } from '../helpers';
 15 | import { DateColor, TagColor } from '../types';
 16 | 
 17 | interface MarkdownRendererProps extends HTMLAttributes<HTMLDivElement> {
 18 |   className?: string;
 19 |   markdownString: string;
 20 |   searchQuery?: string;
 21 |   entityId?: string;
 22 | }
 23 | 
 24 | function colorizeTags(wrapperEl: HTMLElement, getTagColor: (tag: string) => TagColor) {
 25 |   if (!wrapperEl) return;
 26 |   const tagEls = wrapperEl.querySelectorAll<HTMLAnchorElement>('a.tag');
 27 |   if (!tagEls?.length) return;
 28 | 
 29 |   tagEls.forEach((a) => {
 30 |     const color = getTagColor(a.getAttr('href'));
 31 |     if (!color) return;
 32 |     a.setCssProps({
 33 |       '--tag-color': color.color,
 34 |       '--tag-background': color.backgroundColor,
 35 |     });
 36 |   });
 37 | }
 38 | 
 39 | function colorizeDates(wrapperEl: HTMLElement, getDateColor: (date: moment.Moment) => DateColor) {
 40 |   if (!wrapperEl) return;
 41 |   const dateEls = wrapperEl.querySelectorAll<HTMLElement>('.' + c('date'));
 42 |   if (!dateEls?.length) return;
 43 |   dateEls.forEach((el) => {
 44 |     const dateStr = el.dataset.date;
 45 |     if (!dateStr) return;
 46 |     const parsed = moment(dateStr);
 47 |     if (!parsed.isValid()) return;
 48 |     const color = getDateColor(parsed);
 49 |     el.toggleClass('has-background', !!color?.backgroundColor);
 50 |     if (!color) return;
 51 |     el.setCssProps({
 52 |       '--date-color': color.color,
 53 |       '--date-background-color': color.backgroundColor,
 54 |     });
 55 |   });
 56 | }
 57 | 
 58 | export class BasicMarkdownRenderer extends Component {
 59 |   containerEl: HTMLElement;
 60 |   wrapperEl: HTMLElement;
 61 |   renderCapability: PromiseCapability;
 62 |   observer: ResizeObserver;
 63 |   isVisible: boolean = false;
 64 |   mark: Mark;
 65 | 
 66 |   lastWidth = -1;
 67 |   lastHeight = -1;
 68 |   lastRefWidth = -1;
 69 |   lastRefHeight = -1;
 70 | 
 71 |   constructor(
 72 |     public view: KanbanView,
 73 |     public markdown: string
 74 |   ) {
 75 |     super();
 76 |     this.containerEl = createDiv(
 77 |       'markdown-preview-view markdown-rendered ' + c('markdown-preview-view')
 78 |     );
 79 |     this.mark = new Mark(this.containerEl);
 80 |     this.renderCapability = new PromiseCapability<void>();
 81 |   }
 82 | 
 83 |   onload() {
 84 |     this.render();
 85 |   }
 86 | 
 87 |   // eslint-disable-next-line react/require-render-return
 88 |   async render() {
 89 |     this.containerEl.empty();
 90 | 
 91 |     await ObsidianRenderer.render(
 92 |       this.view.app,
 93 |       this.markdown,
 94 |       this.containerEl,
 95 |       this.view.file.path,
 96 |       this
 97 |     );
 98 | 
 99 |     this.renderCapability.resolve();
100 |     if (!(this.view as any)?._loaded || !(this as any)._loaded) return;
101 | 
102 |     const { containerEl } = this;
103 | 
104 |     this.resolveLinks();
105 |     applyCheckboxIndexes(containerEl);
106 | 
107 |     this.observer = new ResizeObserver((entries) => {
108 |       if (!entries.length) return;
109 | 
110 |       const entry = entries.first().contentBoxSize[0];
111 |       if (entry.blockSize === 0) return;
112 | 
113 |       if (this.wrapperEl) {
114 |         const rect = this.wrapperEl.getBoundingClientRect();
115 |         if (this.lastRefHeight === -1 || rect.height > 0) {
116 |           this.lastRefHeight = rect.height;
117 |           this.lastRefWidth = rect.width;
118 |         }
119 |       }
120 | 
121 |       this.lastWidth = entry.inlineSize;
122 |       this.lastHeight = entry.blockSize;
123 |     });
124 | 
125 |     containerEl.win.setTimeout(() => {
126 |       this.observer.observe(containerEl, { box: 'border-box' });
127 |     });
128 | 
129 |     containerEl.addEventListener(
130 |       'click',
131 |       (evt) => {
132 |         const { targetNode } = evt;
133 |         if (
134 |           targetNode.instanceOf(HTMLElement) &&
135 |           targetNode.hasClass('task-list-item-checkbox') &&
136 |           !targetNode.closest('.markdown-embed')
137 |         ) {
138 |           evt.preventDefault();
139 |           evt.stopPropagation();
140 |         }
141 |       },
142 |       { capture: true }
143 |     );
144 | 
145 |     containerEl.addEventListener(
146 |       'contextmenu',
147 |       (evt) => {
148 |         const { targetNode } = evt;
149 |         if (targetNode.instanceOf(HTMLElement) && targetNode.hasClass('task-list-item-checkbox')) {
150 |           evt.preventDefault();
151 |           evt.stopPropagation();
152 |         }
153 |       },
154 |       { capture: true }
155 |     );
156 |   }
157 | 
158 |   migrate(el: HTMLElement) {
159 |     const { lastRefHeight, lastRefWidth, containerEl } = this;
160 |     this.wrapperEl = el;
161 |     if (lastRefHeight > 0) {
162 |       el.style.width = `${lastRefWidth}px`;
163 |       el.style.height = `${lastRefHeight}px`;
164 |       el.win.setTimeout(() => {
165 |         el.style.width = '';
166 |         el.style.height = '';
167 |       }, 50);
168 |     }
169 |     if (containerEl.parentElement !== el) {
170 |       el.append(containerEl);
171 |     }
172 | 
173 |     this.mark.unmark();
174 |   }
175 | 
176 |   show() {
177 |     const { wrapperEl, containerEl } = this;
178 |     if (!wrapperEl) return;
179 |     wrapperEl.append(containerEl);
180 |     if (wrapperEl.style.minHeight) wrapperEl.style.minHeight = '';
181 |     this.isVisible = true;
182 |   }
183 | 
184 |   hide() {
185 |     const { containerEl, wrapperEl } = this;
186 |     if (!wrapperEl) return;
187 |     wrapperEl.style.minHeight = this.lastRefHeight + 'px';
188 |     containerEl.detach();
189 |     this.isVisible = false;
190 |   }
191 | 
192 |   set(markdown: string) {
193 |     if ((this as any)._loaded) {
194 |       this.markdown = markdown;
195 |       this.renderCapability = new PromiseCapability<void>();
196 |       this.unload();
197 |       this.load();
198 |     }
199 |   }
200 | 
201 |   resolveLinks() {
202 |     const { containerEl, view } = this;
203 |     const internalLinkEls = containerEl.findAll('a.internal-link');
204 |     for (const internalLinkEl of internalLinkEls) {
205 |       const href = this.getInternalLinkHref(internalLinkEl);
206 |       if (!href) continue;
207 | 
208 |       const path = getLinkpath(href);
209 |       const file = view.app.metadataCache.getFirstLinkpathDest(path, view.file.path);
210 |       internalLinkEl.toggleClass('is-unresolved', !file);
211 |     }
212 |   }
213 | 
214 |   getInternalLinkHref(el: HTMLElement) {
215 |     const href = el.getAttr('data-href') || el.getAttr('href');
216 |     if (!href) return null;
217 |     return href;
218 |   }
219 | }
220 | 
221 | export const MarkdownRenderer = memo(function MarkdownPreviewRenderer({
222 |   entityId,
223 |   className,
224 |   markdownString,
225 |   searchQuery,
226 |   ...divProps
227 | }: MarkdownRendererProps) {
228 |   const { view, stateManager } = useContext(KanbanContext);
229 |   const entityManager = useContext(EntityManagerContext);
230 |   const dndManager = useContext(DndManagerContext);
231 |   const sortContext = useContext(SortContext);
232 |   const intersectionContext = useContext(IntersectionObserverContext);
233 |   const getTagColor = useGetTagColorFn(stateManager);
234 |   const getDateColor = useGetDateColorFn(stateManager);
235 | 
236 |   const renderer = useRef<BasicMarkdownRenderer>();
237 |   const elRef = useRef<HTMLDivElement>();
238 | 
239 |   // Reset virtualization if this entity is a managed entity and has changed sort order
240 |   useEffect(() => {
241 |     if (!entityManager || !entityId || !renderer.current) return;
242 | 
243 |     const observer = entityManager?.scrollParent?.observer;
244 |     if (!observer) return;
245 | 
246 |     observer.unobserve(entityManager.measureNode);
247 |     observer.observe(entityManager.measureNode);
248 |   }, [sortContext]);
249 | 
250 |   // If we have an intersection context (eg, in table view) then use that for virtualization
251 |   useEffect(() => {
252 |     if (!intersectionContext || !elRef.current) return;
253 | 
254 |     intersectionContext.registerHandler(elRef.current, (entry) => {
255 |       if (entry.isIntersecting) renderer.current?.show();
256 |       else renderer.current?.hide();
257 |     });
258 | 
259 |     return () => {
260 |       if (elRef.current) {
261 |         intersectionContext?.unregisterHandler(elRef.current);
262 |       }
263 |     };
264 |   }, []);
265 | 
266 |   useEffect(() => {
267 |     const onVisibilityChange = (isVisible: boolean) => {
268 |       const preview = renderer.current;
269 |       if (!preview || !entityManager?.parent) return;
270 | 
271 |       const { dragManager } = dndManager;
272 |       if (dragManager.dragEntityId === entityManager.entityId) return;
273 |       if (dragManager.dragEntityId === entityManager.parent.entityId) return;
274 | 
275 |       if (preview.isVisible && !isVisible) {
276 |         preview.hide();
277 |       } else if (!preview.isVisible && isVisible) {
278 |         preview.show();
279 |       }
280 |     };
281 | 
282 |     if (entityId && view.previewCache.has(entityId)) {
283 |       const preview = view.previewCache.get(entityId);
284 | 
285 |       renderer.current = preview;
286 |       preview.migrate(elRef.current);
287 | 
288 |       entityManager?.emitter.on('visibility-change', onVisibilityChange);
289 |       return () => entityManager?.emitter.off('visibility-change', onVisibilityChange);
290 |     }
291 | 
292 |     const markdownRenderer = new BasicMarkdownRenderer(view, markdownString);
293 |     markdownRenderer.wrapperEl = elRef.current;
294 | 
295 |     const preview = (renderer.current = view.addChild(markdownRenderer));
296 |     if (entityId) view.previewCache.set(entityId, preview);
297 | 
298 |     elRef.current.empty();
299 |     elRef.current.append(preview.containerEl);
300 |     colorizeTags(elRef.current, getTagColor);
301 |     colorizeDates(elRef.current, getDateColor);
302 | 
303 |     entityManager?.emitter.on('visibility-change', onVisibilityChange);
304 | 
305 |     return () => {
306 |       renderer.current?.renderCapability.resolve();
307 |       entityManager?.emitter.off('visibility-change', onVisibilityChange);
308 |     };
309 |   }, [view, entityId, entityManager]);
310 | 
311 |   // Respond to changes to the markdown string
312 |   useEffect(() => {
313 |     const preview = renderer.current;
314 |     if (!preview || markdownString === preview.markdown) return;
315 | 
316 |     preview.renderCapability.resolve();
317 | 
318 |     preview.set(markdownString);
319 |     preview.renderCapability.promise.then(() => {
320 |       colorizeTags(elRef.current, getTagColor);
321 |       colorizeDates(elRef.current, getDateColor);
322 |     });
323 |   }, [markdownString]);
324 | 
325 |   useEffect(() => {
326 |     if (!renderer.current) return;
327 |     colorizeTags(elRef.current, getTagColor);
328 |     colorizeDates(elRef.current, getDateColor);
329 |   }, [getTagColor, getDateColor]);
330 | 
331 |   useEffect(() => {
332 |     const preview = renderer.current;
333 |     if (!preview) return;
334 |     preview.mark.unmark();
335 |     if (searchQuery && searchQuery.trim()) {
336 |       preview.mark.mark(searchQuery);
337 |     }
338 |   }, [searchQuery]);
339 | 
340 |   useEffect(() => {
341 |     const preview = renderer.current;
342 |     if (elRef.current && preview && preview.wrapperEl !== elRef.current) {
343 |       preview.migrate(elRef.current);
344 |     }
345 |   }, []);
346 | 
347 |   let styles: CSSProperties | undefined = undefined;
348 |   if (!renderer.current && view.previewCache.has(entityId)) {
349 |     const preview = view.previewCache.get(entityId);
350 |     if (preview.lastRefHeight > 0) {
351 |       styles = {
352 |         width: `${preview.lastRefWidth}px`,
353 |         height: `${preview.lastRefHeight}px`,
354 |       };
355 |     }
356 |   }
357 | 
358 |   return (
359 |     <div
360 |       style={styles}
361 |       ref={elRef}
362 |       className={classcat([c('markdown-preview-wrapper'), className])}
363 |       {...divProps}
364 |     />
365 |   );
366 | });
367 | 
368 | export const MarkdownClonedPreviewRenderer = memo(function MarkdownClonedPreviewRenderer({
369 |   entityId,
370 |   className,
371 |   ...divProps
372 | }: MarkdownRendererProps) {
373 |   const { view } = useContext(KanbanContext);
374 |   const elRef = useRef<HTMLDivElement>();
375 |   const preview = view.previewCache.get(entityId);
376 | 
377 |   let styles: CSSProperties | undefined = undefined;
378 |   if (preview && preview.lastRefHeight > 0) {
379 |     styles = {
380 |       width: `${preview.lastRefWidth}px`,
381 |       height: `${preview.lastRefHeight}px`,
382 |     };
383 |   }
384 | 
385 |   return (
386 |     <div
387 |       style={styles}
388 |       ref={(el) => {
389 |         elRef.current = el;
390 |         if (el && preview && el.childElementCount === 0) {
391 |           el.append(preview.containerEl.cloneNode(true));
392 |         }
393 |       }}
394 |       className={classcat([c('markdown-preview-wrapper'), className])}
395 |       {...divProps}
396 |     />
397 |   );
398 | });
399 | 


--------------------------------------------------------------------------------
/src/components/Table/Cells.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import { Menu } from 'obsidian';
  3 | import { JSX, memo, useCallback, useContext, useState } from 'preact/compat';
  4 | import isEqual from 'react-fast-compare';
  5 | import { ExplicitPathContext } from 'src/dnd/components/context';
  6 | import { moveEntity } from 'src/dnd/util/data';
  7 | 
  8 | import { Icon } from '../Icon/Icon';
  9 | import { DateAndTime, RelativeDate } from '../Item/DateAndTime';
 10 | import { ItemCheckbox } from '../Item/ItemCheckbox';
 11 | import { ItemContent, useDatePickers } from '../Item/ItemContent';
 12 | import { useItemMenu } from '../Item/ItemMenu';
 13 | import { MarkdownRenderer } from '../MarkdownRenderer/MarkdownRenderer';
 14 | import { KanbanContext, SearchContext } from '../context';
 15 | import { c, useGetDateColorFn } from '../helpers';
 16 | import { EditState, Item, Lane, isEditing } from '../types';
 17 | import { TableItem } from './types';
 18 | 
 19 | export const DateCell = memo(function DateCell({
 20 |   item,
 21 |   hideDateDisplay,
 22 |   shouldShowRelativeDate,
 23 | }: {
 24 |   item: TableItem;
 25 |   hideDateDisplay: boolean;
 26 |   shouldShowRelativeDate: boolean;
 27 | }) {
 28 |   const { stateManager, filePath } = useContext(KanbanContext);
 29 |   const { onEditDate, onEditTime } = useDatePickers(item.item, item.path);
 30 |   const getDateColor = useGetDateColorFn(stateManager);
 31 | 
 32 |   return (
 33 |     <>
 34 |       {shouldShowRelativeDate ? (
 35 |         <RelativeDate item={item.item} stateManager={stateManager} />
 36 |       ) : null}
 37 |       {!hideDateDisplay ? (
 38 |         <DateAndTime
 39 |           item={item.item}
 40 |           stateManager={stateManager}
 41 |           filePath={filePath ?? ''}
 42 |           onEditDate={onEditDate}
 43 |           onEditTime={onEditTime}
 44 |           getDateColor={getDateColor}
 45 |         />
 46 |       ) : null}
 47 |     </>
 48 |   );
 49 | });
 50 | 
 51 | export const ItemCell = memo(
 52 |   function ItemCell({ item, lane, path }: { item: Item; lane: Lane; path: number[] }) {
 53 |     const { stateManager, boardModifiers } = useContext(KanbanContext);
 54 |     const search = useContext(SearchContext);
 55 |     const [editState, setEditState] = useState<EditState>(null);
 56 |     const shouldMarkItemsComplete = !!lane.data.shouldMarkItemsComplete;
 57 | 
 58 |     const showItemMenu = useItemMenu({
 59 |       boardModifiers,
 60 |       item,
 61 |       setEditState,
 62 |       stateManager,
 63 |       path,
 64 |     });
 65 | 
 66 |     const onContextMenu: JSX.MouseEventHandler<HTMLDivElement> = useCallback(
 67 |       (e) => {
 68 |         if (isEditing(editState)) return;
 69 |         if (
 70 |           e.targetNode.instanceOf(HTMLAnchorElement) &&
 71 |           (e.targetNode.hasClass('internal-link') || e.targetNode.hasClass('external-link'))
 72 |         ) {
 73 |           return;
 74 |         }
 75 | 
 76 |         showItemMenu(e);
 77 |       },
 78 |       [showItemMenu, editState]
 79 |     );
 80 | 
 81 |     const onDoubleClick: JSX.MouseEventHandler<HTMLDivElement> = useCallback((e) => {
 82 |       setEditState({ x: e.clientX, y: e.clientY });
 83 |     }, []);
 84 | 
 85 |     return (
 86 |       <ExplicitPathContext.Provider value={path}>
 87 |         <div
 88 |           onContextMenu={onContextMenu}
 89 |           // eslint-disable-next-line react/no-unknown-property
 90 |           onDblClick={onDoubleClick}
 91 |           className={c('item-content-wrapper')}
 92 |         >
 93 |           <div className={c('item-title-wrapper')}>
 94 |             <ItemCheckbox
 95 |               boardModifiers={boardModifiers}
 96 |               item={item}
 97 |               path={path}
 98 |               shouldMarkItemsComplete={shouldMarkItemsComplete}
 99 |               stateManager={stateManager}
100 |             />
101 |             <ItemContent
102 |               editState={editState}
103 |               item={item}
104 |               setEditState={setEditState}
105 |               showMetadata={false}
106 |               searchQuery={search?.query}
107 |               isStatic={false}
108 |             />
109 |           </div>
110 |         </div>
111 |       </ExplicitPathContext.Provider>
112 |     );
113 |   },
114 |   (prev, next) => {
115 |     return (
116 |       prev.lane.data.shouldMarkItemsComplete === next.lane.data.shouldMarkItemsComplete &&
117 |       isEqual(prev.item, next.item) &&
118 |       isEqual(prev.path, next.path)
119 |     );
120 |   }
121 | );
122 | 
123 | export const LaneCell = memo(function LaneCell({ lane, path }: { lane: Lane; path: number[] }) {
124 |   const { stateManager } = useContext(KanbanContext);
125 |   const search = useContext(SearchContext);
126 |   return (
127 |     <div className={c('cell-flex-wrapper')}>
128 |       <MarkdownRenderer searchQuery={search?.query} markdownString={lane.data.title} />
129 |       <div
130 |         onClick={(e) => {
131 |           const menu = new Menu();
132 |           const lanes = stateManager.state.children;
133 | 
134 |           for (let i = 0, len = lanes.length; i < len; i++) {
135 |             const l = lanes[i];
136 |             menu.addItem((item) =>
137 |               item
138 |                 .setChecked(lane === l)
139 |                 .setTitle(l.data.title)
140 |                 .onClick(() => {
141 |                   if (lane === l) return;
142 |                   stateManager.setState((boardData) => {
143 |                     const target = boardData.children[i];
144 |                     return moveEntity(boardData, path, [i, target.children.length]);
145 |                   });
146 |                 })
147 |             );
148 |           }
149 | 
150 |           menu.showAtMouseEvent(e);
151 |         }}
152 |         className={classcat(['clickable-icon', c('icon-wrapper'), c('lane-menu')])}
153 |       >
154 |         <Icon name="lucide-square-kanban" />
155 |       </div>
156 |     </div>
157 |   );
158 | });
159 | 


--------------------------------------------------------------------------------
/src/components/Table/Table.tsx:
--------------------------------------------------------------------------------
  1 | import {
  2 |   flexRender,
  3 |   getCoreRowModel,
  4 |   getFilteredRowModel,
  5 |   getSortedRowModel,
  6 |   useReactTable,
  7 | } from '@tanstack/react-table';
  8 | import classcat from 'classcat';
  9 | import update from 'immutability-helper';
 10 | import { useEffect, useMemo, useRef } from 'preact/compat';
 11 | import { IntersectionObserverHandler } from 'src/dnd/managers/ScrollManager';
 12 | 
 13 | import { StateManager } from '../../StateManager';
 14 | import { Icon } from '../Icon/Icon';
 15 | import { IntersectionObserverContext } from '../context';
 16 | import { c } from '../helpers';
 17 | import { Board } from '../types';
 18 | import { fuzzyAnyFilter, useTableColumns } from './helpers';
 19 | 
 20 | function useIntersectionObserver() {
 21 |   const observerRef = useRef<IntersectionObserver>();
 22 |   const targetRef = useRef<HTMLElement>();
 23 |   const handlers = useRef<WeakMap<HTMLElement, IntersectionObserverHandler>>(new WeakMap());
 24 |   const queueRef = useRef<HTMLElement[]>([]);
 25 | 
 26 |   useEffect(() => {
 27 |     return () => {
 28 |       observerRef.current?.disconnect();
 29 |       handlers.current = null;
 30 |       queueRef.current.length = 0;
 31 |     };
 32 |   }, []);
 33 | 
 34 |   const bindObserver = (el: HTMLElement) => {
 35 |     if (!el) return;
 36 |     if (targetRef.current === el) return;
 37 |     if (observerRef.current) observerRef.current.disconnect();
 38 | 
 39 |     const style = getComputedStyle(el);
 40 | 
 41 |     observerRef.current = new IntersectionObserver(
 42 |       (entries) => {
 43 |         entries.forEach((entry) => {
 44 |           if (!handlers.current.has(entry.target as HTMLElement)) return;
 45 |           const handler = handlers.current.get(entry.target as HTMLElement);
 46 |           handler(entry);
 47 |         });
 48 |       },
 49 |       {
 50 |         root: el,
 51 |         threshold: 0.01,
 52 |         rootMargin: `${style.paddingTop} 0px ${style.paddingBottom} 0px`,
 53 |       }
 54 |     );
 55 | 
 56 |     targetRef.current = el;
 57 |     queueRef.current.forEach((el) => observerRef.current.observe(el));
 58 |     queueRef.current.length = 0;
 59 |   };
 60 | 
 61 |   const context = useMemo(
 62 |     () => ({
 63 |       registerHandler: (el: HTMLElement, handler: IntersectionObserverHandler) => {
 64 |         if (!el) return;
 65 |         handlers.current.set(el, handler);
 66 |         if (!observerRef.current) {
 67 |           queueRef.current.push(el);
 68 |           return;
 69 |         }
 70 |         observerRef.current.observe(el);
 71 |       },
 72 |       unregisterHandler: (el: HTMLElement) => {
 73 |         if (!el) return;
 74 |         handlers.current?.delete(el);
 75 |         if (queueRef.current?.length) {
 76 |           queueRef.current = queueRef.current.filter((q) => q !== el);
 77 |         }
 78 |         observerRef.current?.unobserve(el);
 79 |       },
 80 |     }),
 81 |     []
 82 |   );
 83 | 
 84 |   return { bindObserver, context };
 85 | }
 86 | 
 87 | export function TableView({
 88 |   boardData,
 89 |   stateManager,
 90 | }: {
 91 |   boardData: Board;
 92 |   stateManager: StateManager;
 93 | }) {
 94 |   const { bindObserver, context } = useIntersectionObserver();
 95 |   const { data, columns, state, setSorting } = useTableColumns(boardData, stateManager);
 96 |   const table = useReactTable({
 97 |     data,
 98 |     columns,
 99 |     state,
100 |     globalFilterFn: fuzzyAnyFilter,
101 |     getColumnCanGlobalFilter: () => true,
102 |     enableColumnResizing: true,
103 |     columnResizeMode: 'onChange',
104 |     // eslint-disable-next-line @typescript-eslint/ban-ts-comment
105 |     // @ts-ignore
106 |     columnResizeDirection: stateManager.app.vault.getConfig('rightToLeft') ? 'rtl' : 'ltr',
107 |     onSortingChange: setSorting,
108 |     getCoreRowModel: getCoreRowModel(),
109 |     getSortedRowModel: getSortedRowModel(),
110 |     getFilteredRowModel: getFilteredRowModel(),
111 |   });
112 |   const tableState = table.getState();
113 | 
114 |   const dbTimer = useRef(-1);
115 |   useEffect(() => {
116 |     if (dbTimer.current === -1) {
117 |       dbTimer.current = 0;
118 |       return;
119 |     }
120 |     activeWindow.clearTimeout(dbTimer.current);
121 |     dbTimer.current = activeWindow.setTimeout(() => {
122 |       if (!stateManager.getAView()) return;
123 |       stateManager.setState((board) => {
124 |         return update(board, {
125 |           data: {
126 |             settings: {
127 |               'table-sizing': {
128 |                 $set: tableState.columnSizing,
129 |               },
130 |             },
131 |           },
132 |         });
133 |       });
134 |     }, 500);
135 |   }, [tableState.columnSizing]);
136 | 
137 |   const tableWidth = table.getCenterTotalSize();
138 |   const tableStyle = useMemo(() => {
139 |     return {
140 |       width: tableWidth,
141 |     };
142 |   }, [tableWidth]);
143 | 
144 |   return (
145 |     <div className={`markdown-rendered ${c('table-wrapper')}`} ref={bindObserver}>
146 |       <IntersectionObserverContext.Provider value={context}>
147 |         <table style={tableStyle}>
148 |           <thead>
149 |             {table.getHeaderGroups().map((headerGroup) => (
150 |               <tr key={headerGroup.id}>
151 |                 {headerGroup.headers.map((header) => {
152 |                   const sort = header.column.getIsSorted();
153 |                   return (
154 |                     <th key={header.id} className="mod-has-icon">
155 |                       <div
156 |                         className={c('table-cell-wrapper')}
157 |                         style={{
158 |                           width: header.getSize(),
159 |                         }}
160 |                       >
161 |                         {header.isPlaceholder ? null : (
162 |                           <div
163 |                             className={c('table-header')}
164 |                             onClick={header.column.getToggleSortingHandler()}
165 |                           >
166 |                             <div>
167 |                               {flexRender(header.column.columnDef.header, header.getContext())}
168 |                             </div>
169 |                             <div className={c('table-header-sort')}>
170 |                               {sort === 'asc' ? (
171 |                                 <Icon name="lucide-chevron-up" />
172 |                               ) : sort === 'desc' ? (
173 |                                 <Icon name="lucide-chevron-down" />
174 |                               ) : (
175 |                                 <Icon name="lucide-chevrons-up-down" />
176 |                               )}
177 |                             </div>
178 |                           </div>
179 |                         )}
180 |                         <div
181 |                           {...{
182 |                             onDoubleClick: () => header.column.resetSize(),
183 |                             onMouseDown: header.getResizeHandler(),
184 |                             onTouchStart: header.getResizeHandler(),
185 |                             className: `resizer ${table.options.columnResizeDirection} ${
186 |                               header.column.getIsResizing() ? 'isResizing' : ''
187 |                             }`,
188 |                           }}
189 |                         />
190 |                       </div>
191 |                     </th>
192 |                   );
193 |                 })}
194 |               </tr>
195 |             ))}
196 |           </thead>
197 |           <tbody>
198 |             {table.getRowModel().rows.map((row) => (
199 |               <tr key={row.id}>
200 |                 {row.getVisibleCells().map((cell) => {
201 |                   return (
202 |                     <td
203 |                       key={cell.id}
204 |                       className={classcat({
205 |                         'mod-has-icon': cell.column.id === 'lane',
206 |                         'mod-search-match': row.columnFiltersMeta[cell.column.id]
207 |                           ? (row.columnFiltersMeta[cell.column.id] as any).itemRank.passed
208 |                           : false,
209 |                       })}
210 |                     >
211 |                       <div
212 |                         className={c('table-cell-wrapper')}
213 |                         style={{
214 |                           width: cell.column.getSize(),
215 |                         }}
216 |                       >
217 |                         {flexRender(cell.column.columnDef.cell, cell.getContext())}
218 |                       </div>
219 |                     </td>
220 |                   );
221 |                 })}
222 |               </tr>
223 |             ))}
224 |           </tbody>
225 |         </table>
226 |       </IntersectionObserverContext.Provider>
227 |     </div>
228 |   );
229 | }
230 | 


--------------------------------------------------------------------------------
/src/components/Table/helpers.tsx:
--------------------------------------------------------------------------------
  1 | import { compareItems, rankItem, rankings } from '@tanstack/match-sorter-utils';
  2 | import {
  3 |   ColumnDef,
  4 |   FilterFn,
  5 |   OnChangeFn,
  6 |   SortingFn,
  7 |   SortingState,
  8 |   createColumnHelper,
  9 | } from '@tanstack/react-table';
 10 | import classcat from 'classcat';
 11 | import moment from 'moment';
 12 | import { useCallback, useContext, useMemo, useRef, useState } from 'preact/hooks';
 13 | import { StateManager } from 'src/StateManager';
 14 | import { c } from 'src/components/helpers';
 15 | import { defaultSort } from 'src/helpers/util';
 16 | import { t } from 'src/lang/helpers';
 17 | import { getDataviewPlugin, lableToName, taskFields } from 'src/parsers/helpers/inlineMetadata';
 18 | 
 19 | import { Tags } from '../Item/ItemContent';
 20 | import { MetadataValue, anyToString } from '../Item/MetadataTable';
 21 | import { SearchContext } from '../context';
 22 | import { Board, Lane } from '../types';
 23 | import { DateCell, ItemCell, LaneCell } from './Cells';
 24 | import { TableData, TableItem } from './types';
 25 | 
 26 | export const columnHelper = createColumnHelper<TableItem>();
 27 | 
 28 | export const fuzzyAnyFilter: FilterFn<TableItem> = (row, columnId, search, addMeta) => {
 29 |   const val = row.getValue(columnId) as any;
 30 | 
 31 |   if (val === null) return false;
 32 | 
 33 |   const stateManager = row.original.stateManager;
 34 |   const str = val.value ? anyToString(val.value, stateManager) : anyToString(val, stateManager);
 35 |   const itemRank = rankItem(str, search, {
 36 |     threshold: rankings.CONTAINS,
 37 |   });
 38 |   addMeta({ itemRank });
 39 |   return itemRank.passed;
 40 | };
 41 | 
 42 | export const fuzzySort: SortingFn<any> = (rowA, rowB, columnId) => {
 43 |   if (!rowA.columnFiltersMeta[columnId] && !rowB.columnFiltersMeta[columnId]) return null;
 44 |   if (!rowA.columnFiltersMeta[columnId]) return -1;
 45 |   if (!rowB.columnFiltersMeta[columnId]) return 1;
 46 | 
 47 |   return compareItems(
 48 |     (rowA.columnFiltersMeta[columnId] as any)?.itemRank,
 49 |     (rowB.columnFiltersMeta[columnId] as any)?.itemRank
 50 |   );
 51 | };
 52 | 
 53 | export function useTableData(board: Board, stateManager: StateManager): TableData {
 54 |   return useMemo<TableData>(() => {
 55 |     const items: TableItem[] = [];
 56 |     const metadata: Set<string> = new Set();
 57 |     const fileMetadata: Set<string> = new Set();
 58 |     const inlineMetadata: Set<string> = new Set();
 59 |     const metadataLabels: Map<string, string> = new Map();
 60 |     const lanes: Lane[] = board?.children || [];
 61 |     const metadataKeys = stateManager.getSetting('metadata-keys');
 62 |     const moveInlineMetadata = stateManager.getSetting('inline-metadata-position') !== 'body';
 63 | 
 64 |     for (let i = 0, len = lanes.length; i < len; i++) {
 65 |       const lane = lanes[i];
 66 |       for (let j = 0, len = lane.children.length; j < len; j++) {
 67 |         const item = lane.children[j];
 68 |         const itemMetadata = item.data.metadata;
 69 |         const itemfileMetadata = itemMetadata.fileMetadata || {};
 70 |         const fileMetaOrder = itemMetadata.fileMetadataOrder || [];
 71 |         const itemInlineMetadata = itemMetadata.inlineMetadata;
 72 | 
 73 |         if (!metadata.has('date') && itemMetadata.date) {
 74 |           metadata.add('date');
 75 |         }
 76 |         if (!metadata.has('tags') && itemMetadata.tags?.length) {
 77 |           metadata.add('tags');
 78 |         }
 79 | 
 80 |         for (const key of fileMetaOrder) {
 81 |           if (!fileMetadata.has(key) && itemfileMetadata[key]) {
 82 |             fileMetadata.add(key);
 83 |             metadataLabels.set(key, itemfileMetadata[key].label || key);
 84 |           }
 85 |         }
 86 | 
 87 |         if (itemInlineMetadata && moveInlineMetadata) {
 88 |           itemInlineMetadata.forEach((m) => {
 89 |             if (!inlineMetadata.has(m.key)) {
 90 |               inlineMetadata.add(m.key);
 91 |               if (!metadataLabels.has(m.key)) {
 92 |                 if (taskFields.has(m.key)) metadataLabels.set(m.key, lableToName(m.key));
 93 |                 else {
 94 |                   const key = metadataKeys.find((k) => k.metadataKey === m.key);
 95 |                   metadataLabels.set(m.key, key?.label || m.key);
 96 |                 }
 97 |               }
 98 |             }
 99 |           });
100 |         }
101 | 
102 |         items.push({ item, lane, path: [i, j], stateManager });
103 |       }
104 |     }
105 | 
106 |     return {
107 |       items,
108 |       metadataLabels,
109 |       metadata: Array.from(metadata),
110 |       fileMetadata: Array.from(fileMetadata),
111 |       inlineMetadata: Array.from(inlineMetadata),
112 |     };
113 |   }, [board]);
114 | }
115 | 
116 | export const baseColumns = (sizing: Record<string, number>): ColumnDef<TableItem, any>[] => [
117 |   columnHelper.accessor((row) => row.item.data.title, {
118 |     id: 'card',
119 |     cell: (info) => {
120 |       const { lane, item, path } = info.row.original;
121 |       return <ItemCell item={item} lane={lane} path={path} />;
122 |     },
123 |     header: () => t('Card'),
124 |     sortingFn: (a, b, id) => {
125 |       const sorted = fuzzySort(a, b, id);
126 |       if (sorted === null) {
127 |         return defaultSort(a.getValue(id), b.getValue(id));
128 |       }
129 |       return sorted;
130 |     },
131 |     size: sizing.card || 272,
132 |   }),
133 |   columnHelper.accessor((row) => row.lane.data.title, {
134 |     id: 'lane',
135 |     cell: (info) => {
136 |       const { lane, path } = info.row.original;
137 |       return <LaneCell lane={lane} path={path} />;
138 |     },
139 |     header: () => t('List'),
140 |     sortingFn: (a, b, id) => {
141 |       const sorted = fuzzySort(a, b, id);
142 |       if (sorted === null) {
143 |         return defaultSort(a.getValue(id), b.getValue(id));
144 |       }
145 |       return sorted;
146 |     },
147 |     size: sizing.lane,
148 |   }),
149 | ];
150 | 
151 | export function useTableColumns(boardData: Board, stateManager: StateManager) {
152 |   const search = useContext(SearchContext);
153 | 
154 |   const [sorting, setSortingRaw] = useState<SortingState>([]);
155 |   const shouldShowRelativeDate = stateManager.useSetting('show-relative-date');
156 |   const moveDates = stateManager.useSetting('move-dates');
157 |   const moveTags = stateManager.useSetting('move-tags');
158 |   const moveInlineMetadata = stateManager.useSetting('inline-metadata-position') !== 'body';
159 |   const moveTaskMetadata = stateManager.useSetting('move-task-metadata');
160 |   const tableSizing = stateManager.useSetting('table-sizing') || {};
161 | 
162 |   const desc = useRef<boolean>(false);
163 |   const setSorting = useCallback<OnChangeFn<SortingState>>(
164 |     (onChange: (old: SortingState) => SortingState) => {
165 |       setSortingRaw((old) => {
166 |         const newState = onChange(old);
167 |         if (newState.length) desc.current = newState[0].desc;
168 |         return newState;
169 |       });
170 |     },
171 |     [setSortingRaw]
172 |   );
173 |   const state = useMemo(() => ({ sorting, globalFilter: search?.query }), [sorting, search?.query]);
174 | 
175 |   const { items, metadata, fileMetadata, inlineMetadata, metadataLabels } = useTableData(
176 |     boardData,
177 |     stateManager
178 |   );
179 | 
180 |   const withMetadata: ColumnDef<TableItem, any>[] = useMemo(() => {
181 |     const columns = [...baseColumns(tableSizing)];
182 |     for (const key of metadata) {
183 |       switch (key) {
184 |         case 'date':
185 |           if (shouldShowRelativeDate || moveDates) {
186 |             columns.push(
187 |               columnHelper.accessor((row) => row.item.data.metadata?.date || null, {
188 |                 header: () => t('Date'),
189 |                 id: 'date',
190 |                 size: tableSizing.date,
191 |                 cell: (info) => {
192 |                   const date = info.getValue();
193 |                   if (!date) return null;
194 |                   return (
195 |                     <DateCell
196 |                       item={info.row.original}
197 |                       shouldShowRelativeDate={shouldShowRelativeDate}
198 |                       hideDateDisplay={!moveDates}
199 |                     />
200 |                   );
201 |                 },
202 |                 sortUndefined: false,
203 |                 sortingFn: (a, b, id) => {
204 |                   const sorted = fuzzySort(a, b, id);
205 |                   if (sorted === null) {
206 |                     const dateA = a.getValue(id) as moment.Moment;
207 |                     const dateB = b.getValue(id) as moment.Moment;
208 | 
209 |                     if (!dateA && !dateB) return 0;
210 |                     if (!dateA) return desc.current ? -1 : 1;
211 |                     if (!dateB) return desc.current ? 1 : -1;
212 | 
213 |                     return dateA.valueOf() - dateB.valueOf();
214 |                   }
215 |                   return sorted;
216 |                 },
217 |                 sortDescFirst: false,
218 |               })
219 |             );
220 |           }
221 |           break;
222 |         case 'tags':
223 |           if (moveTags) {
224 |             columns.push(
225 |               columnHelper.accessor((row) => row.item.data.metadata?.tags || null, {
226 |                 header: () => t('Tags'),
227 |                 id: 'card-tags',
228 |                 size: tableSizing['card-tags'],
229 |                 cell: (info) => {
230 |                   const searchQuery = info.table.getState().globalFilter;
231 |                   const tags = info.getValue();
232 |                   if (!tags?.length) return null;
233 |                   return <Tags tags={tags} searchQuery={searchQuery} />;
234 |                 },
235 |                 sortUndefined: false,
236 |                 sortingFn: (a, b, id) => {
237 |                   const sorted = fuzzySort(a, b, id);
238 |                   if (sorted === null) {
239 |                     const tagsA = a.getValue<string[] | undefined>(id);
240 |                     const tagsB = b.getValue<string[] | undefined>(id);
241 | 
242 |                     if (!tagsA?.length && !tagsB?.length) return 0;
243 |                     if (!tagsA?.length) return desc.current ? -1 : 1;
244 |                     if (!tagsB?.length) return desc.current ? 1 : -1;
245 | 
246 |                     const tagSortOrder = stateManager.getSetting('tag-sort');
247 |                     const aSortOrder =
248 |                       tagSortOrder?.findIndex((sort) => tagsA.includes(sort.tag)) ?? -1;
249 |                     const bSortOrder =
250 |                       tagSortOrder?.findIndex((sort) => tagsB.includes(sort.tag)) ?? -1;
251 | 
252 |                     if (aSortOrder > -1 && bSortOrder < 0) return -1;
253 |                     if (bSortOrder > -1 && aSortOrder < 0) return 1;
254 |                     if (aSortOrder > -1 && bSortOrder > -1) {
255 |                       return aSortOrder - bSortOrder;
256 |                     }
257 | 
258 |                     return defaultSort(tagsA.join(''), tagsB.join(''));
259 |                   }
260 |                   return sorted;
261 |                 },
262 |                 sortDescFirst: false,
263 |               })
264 |             );
265 |           }
266 |           break;
267 |       }
268 |     }
269 | 
270 |     return columns;
271 |   }, [shouldShowRelativeDate, moveDates, moveTags, ...metadata]);
272 | 
273 |   const withInlineMetadata = useMemo(() => {
274 |     const columns = [...withMetadata];
275 |     for (const key of inlineMetadata) {
276 |       columns.push(
277 |         columnHelper.accessor(
278 |           (row) => {
279 |             const data = row.item.data.metadata.inlineMetadata?.find((m) => m.key === key);
280 |             if (data) return data;
281 |             return null;
282 |           },
283 |           {
284 |             id: key,
285 |             header: metadataLabels.get(key) ?? key,
286 |             cell: (info) => {
287 |               const m = info.getValue();
288 |               if (!m) return null;
289 | 
290 |               const isTaskMetadata = taskFields.has(m.key);
291 |               if (!moveTaskMetadata && isTaskMetadata) return null;
292 |               if (!moveInlineMetadata && !isTaskMetadata) return null;
293 | 
294 |               const isEmoji = m.wrapping === 'emoji-shorthand';
295 |               const val = getDataviewPlugin()?.api?.parse(m.value) ?? m.value;
296 |               const isEmojiPriority = isEmoji && m.key === 'priority';
297 |               const isDate = !!val?.ts;
298 | 
299 |               return (
300 |                 <span
301 |                   className={classcat([
302 |                     c('item-task-inline-metadata-item'),
303 |                     m.key.replace(/[^a-z0-9]/g, '-'),
304 |                     {
305 |                       'is-task-metadata': isTaskMetadata,
306 |                       'is-emoji': isEmoji,
307 |                       'is-date': isDate,
308 |                     },
309 |                   ])}
310 |                 >
311 |                   {!isEmojiPriority && (
312 |                     <span className={c('item-task-inline-metadata-item-value')}>
313 |                       <MetadataValue
314 |                         searchQuery={search?.query}
315 |                         data={{
316 |                           value: val,
317 |                           label: '',
318 |                           metadataKey: m.key,
319 |                           shouldHideLabel: false,
320 |                           containsMarkdown: false,
321 |                         }}
322 |                       />
323 |                     </span>
324 |                   )}
325 |                 </span>
326 |               );
327 |             },
328 |             sortDescFirst: false,
329 |             sortingFn: (a, b, id) => {
330 |               const valA = a.getValue(id) as any;
331 |               const valB = b.getValue(id) as any;
332 | 
333 |               if (valA === null && valB === null) return 0;
334 |               if (valA === null) return desc.current ? -1 : 1;
335 |               if (valB === null) return desc.current ? 1 : -1;
336 | 
337 |               const sorted = fuzzySort(a, b, id);
338 |               if (sorted === null) {
339 |                 return defaultSort(
340 |                   anyToString(valA.value, stateManager),
341 |                   anyToString(valB.value, stateManager)
342 |                 );
343 |               }
344 |               return sorted;
345 |             },
346 |           }
347 |         )
348 |       );
349 |     }
350 |     return columns;
351 |   }, [withMetadata, ...inlineMetadata, ...metadataLabels.values()]);
352 | 
353 |   const withFileMetadata = useMemo(() => {
354 |     const columns = [...withInlineMetadata];
355 |     for (const key of fileMetadata) {
356 |       columns.push(
357 |         columnHelper.accessor(
358 |           (row) => {
359 |             const metadata = row.item.data.metadata?.fileMetadata;
360 |             if (metadata && metadata[key]) {
361 |               return metadata[key];
362 |             }
363 |             return null;
364 |           },
365 |           {
366 |             id: key,
367 |             header: metadataLabels.get(key) ?? key,
368 |             cell: (info) => {
369 |               const val = info.getValue();
370 |               if (!val) return null;
371 |               const searchQuery = info.table.getState().globalFilter;
372 |               if (key === 'tags') {
373 |                 return <Tags searchQuery={searchQuery} tags={val.value as string[]} alwaysShow />;
374 |               }
375 |               return <MetadataValue data={val} searchQuery={searchQuery} />;
376 |             },
377 |             sortDescFirst: false,
378 |             sortingFn: (a, b, id) => {
379 |               const valA = a.getValue(id) as any;
380 |               const valB = b.getValue(id) as any;
381 | 
382 |               if (!valA?.value && !valB?.value) return 0;
383 |               if (!valA?.value) return desc.current ? -1 : 1;
384 |               if (!valB?.value) return desc.current ? 1 : -1;
385 | 
386 |               const sorted = fuzzySort(a, b, id);
387 |               if (sorted === null) {
388 |                 if (id === 'tags') {
389 |                   const tagSortOrder = stateManager.getSetting('tag-sort');
390 |                   const aSortOrder =
391 |                     tagSortOrder?.findIndex((sort) => valA.value.includes(sort.tag)) ?? -1;
392 |                   const bSortOrder =
393 |                     tagSortOrder?.findIndex((sort) => valB.value.includes(sort.tag)) ?? -1;
394 | 
395 |                   if (aSortOrder > -1 && bSortOrder < 0) return -1;
396 |                   if (bSortOrder > -1 && aSortOrder < 0) return 1;
397 |                   if (aSortOrder > -1 && bSortOrder > -1) {
398 |                     return aSortOrder - bSortOrder;
399 |                   }
400 |                 }
401 | 
402 |                 return defaultSort(
403 |                   anyToString(valA.value, stateManager),
404 |                   anyToString(valB.value, stateManager)
405 |                 );
406 |               }
407 |               return sorted;
408 |             },
409 |           }
410 |         )
411 |       );
412 |     }
413 |     return columns;
414 |   }, [withInlineMetadata, ...fileMetadata, ...metadataLabels.values()]);
415 | 
416 |   return { data: items, columns: withFileMetadata, state, setSorting };
417 | }
418 | 


--------------------------------------------------------------------------------
/src/components/Table/types.ts:
--------------------------------------------------------------------------------
 1 | import { StateManager } from '../../StateManager';
 2 | import { Path } from '../../dnd/types';
 3 | import { Item, Lane } from '../types';
 4 | 
 5 | export interface TableItem {
 6 |   item: Item;
 7 |   lane: Lane;
 8 |   path: Path;
 9 |   stateManager: StateManager;
10 | }
11 | 
12 | export interface TableData {
13 |   items: TableItem[];
14 |   metadata: string[];
15 |   fileMetadata: string[];
16 |   inlineMetadata: string[];
17 |   metadataLabels: Map<string, string>;
18 | }
19 | 


--------------------------------------------------------------------------------
/src/components/context.ts:
--------------------------------------------------------------------------------
 1 | import { createContext } from 'preact/compat';
 2 | import { KanbanView } from 'src/KanbanView';
 3 | import { StateManager } from 'src/StateManager';
 4 | import { IntersectionObserverHandler } from 'src/dnd/managers/ScrollManager';
 5 | 
 6 | import { BoardModifiers } from '../helpers/boardModifiers';
 7 | import { Item, Lane, LaneSort } from './types';
 8 | 
 9 | export interface KanbanContextProps {
10 |   filePath?: string;
11 |   stateManager: StateManager;
12 |   boardModifiers: BoardModifiers;
13 |   view: KanbanView;
14 | }
15 | 
16 | export const KanbanContext = createContext<KanbanContextProps>(null);
17 | 
18 | export interface SearchContextProps {
19 |   query: string;
20 |   items: Set<Item>;
21 |   lanes: Set<Lane>;
22 |   search: (query: string, immediate?: boolean) => void;
23 | }
24 | 
25 | export const SearchContext = createContext<SearchContextProps | null>(null);
26 | export const SortContext = createContext<LaneSort | string | null>(null);
27 | export const IntersectionObserverContext = createContext<{
28 |   registerHandler: (el: HTMLElement, handler: IntersectionObserverHandler) => void;
29 |   unregisterHandler: (el: HTMLElement) => void;
30 | } | null>(null);
31 | 


--------------------------------------------------------------------------------
/src/components/helpers.ts:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { App, MarkdownView, TFile, moment } from 'obsidian';
  3 | import Preact, { Dispatch, RefObject, useEffect } from 'preact/compat';
  4 | import { StateUpdater, useMemo } from 'preact/hooks';
  5 | import { StateManager } from 'src/StateManager';
  6 | import { Path } from 'src/dnd/types';
  7 | import { getEntityFromPath } from 'src/dnd/util/data';
  8 | import {
  9 |   InlineField,
 10 |   getTaskStatusDone,
 11 |   getTaskStatusPreDone,
 12 |   toggleTask,
 13 | } from 'src/parsers/helpers/inlineMetadata';
 14 | 
 15 | import { SearchContextProps } from './context';
 16 | import { Board, DataKey, DateColor, Item, Lane, PageData, TagColor } from './types';
 17 | 
 18 | export const baseClassName = 'kanban-plugin';
 19 | 
 20 | export function noop() {}
 21 | 
 22 | const classCache = new Map<string, string>();
 23 | export function c(className: string) {
 24 |   if (classCache.has(className)) return classCache.get(className);
 25 |   const cls = `${baseClassName}__${className}`;
 26 |   classCache.set(className, cls);
 27 |   return cls;
 28 | }
 29 | 
 30 | export function generateInstanceId(len: number = 9): string {
 31 |   return Math.random()
 32 |     .toString(36)
 33 |     .slice(2, 2 + len);
 34 | }
 35 | 
 36 | export function maybeCompleteForMove(
 37 |   sourceStateManager: StateManager,
 38 |   sourceBoard: Board,
 39 |   sourcePath: Path,
 40 |   destinationStateManager: StateManager,
 41 |   destinationBoard: Board,
 42 |   destinationPath: Path,
 43 |   item: Item
 44 | ): { next: Item; replacement?: Item } {
 45 |   const sourceParent = getEntityFromPath(sourceBoard, sourcePath.slice(0, -1));
 46 |   const destinationParent = getEntityFromPath(destinationBoard, destinationPath.slice(0, -1));
 47 | 
 48 |   const oldShouldComplete = sourceParent?.data?.shouldMarkItemsComplete;
 49 |   const newShouldComplete = destinationParent?.data?.shouldMarkItemsComplete;
 50 | 
 51 |   // If neither the old or new lane set it complete, leave it alone
 52 |   if (!oldShouldComplete && !newShouldComplete) return { next: item };
 53 | 
 54 |   const isComplete = item.data.checked && item.data.checkChar === getTaskStatusDone();
 55 | 
 56 |   // If it already matches the new lane, leave it alone
 57 |   if (newShouldComplete === isComplete) return { next: item };
 58 | 
 59 |   if (newShouldComplete) {
 60 |     item = update(item, { data: { checkChar: { $set: getTaskStatusPreDone() } } });
 61 |   }
 62 | 
 63 |   const updates = toggleTask(item, destinationStateManager.file);
 64 | 
 65 |   if (updates) {
 66 |     const [itemStrings, checkChars, thisIndex] = updates;
 67 |     let next: Item;
 68 |     let replacement: Item;
 69 | 
 70 |     itemStrings.forEach((str, i) => {
 71 |       if (i === thisIndex) {
 72 |         next = destinationStateManager.getNewItem(str, checkChars[i]);
 73 |       } else {
 74 |         replacement = destinationStateManager.getNewItem(str, checkChars[i]);
 75 |       }
 76 |     });
 77 | 
 78 |     return { next, replacement };
 79 |   }
 80 | 
 81 |   // It's different, update it
 82 |   return {
 83 |     next: update(item, {
 84 |       data: {
 85 |         checked: {
 86 |           $set: newShouldComplete,
 87 |         },
 88 |         checkChar: {
 89 |           $set: newShouldComplete ? getTaskStatusDone() : ' ',
 90 |         },
 91 |       },
 92 |     }),
 93 |   };
 94 | }
 95 | 
 96 | export function useIMEInputProps() {
 97 |   const isComposingRef = Preact.useRef<boolean>(false);
 98 | 
 99 |   return {
100 |     // Note: these are lowercased because we use preact
101 |     // See: https://github.com/preactjs/preact/issues/3003
102 |     oncompositionstart: () => {
103 |       isComposingRef.current = true;
104 |     },
105 |     oncompositionend: () => {
106 |       isComposingRef.current = false;
107 |     },
108 |     getShouldIMEBlockAction: () => {
109 |       return isComposingRef.current;
110 |     },
111 |   };
112 | }
113 | 
114 | export const templaterDetectRegex = /<%/;
115 | 
116 | export async function applyTemplate(stateManager: StateManager, templatePath?: string) {
117 |   const templateFile = templatePath
118 |     ? stateManager.app.vault.getAbstractFileByPath(templatePath)
119 |     : null;
120 | 
121 |   if (templateFile && templateFile instanceof TFile) {
122 |     const activeView = app.workspace.getActiveViewOfType(MarkdownView);
123 | 
124 |     try {
125 |       // Force the view to source mode, if needed
126 |       if (activeView?.getMode() !== 'source') {
127 |         await activeView.setState(
128 |           {
129 |             ...activeView.getState(),
130 |             mode: 'source',
131 |           },
132 |           { history: false }
133 |         );
134 |       }
135 | 
136 |       const { templatesEnabled, templaterEnabled, templatesPlugin, templaterPlugin } =
137 |         getTemplatePlugins(stateManager.app);
138 | 
139 |       const templateContent = await stateManager.app.vault.read(templateFile);
140 | 
141 |       // If both plugins are enabled, attempt to detect templater first
142 |       if (templatesEnabled && templaterEnabled) {
143 |         if (templaterDetectRegex.test(templateContent)) {
144 |           return await templaterPlugin.append_template_to_active_file(templateFile);
145 |         }
146 | 
147 |         return await templatesPlugin.instance.insertTemplate(templateFile);
148 |       }
149 | 
150 |       if (templatesEnabled) {
151 |         return await templatesPlugin.instance.insertTemplate(templateFile);
152 |       }
153 | 
154 |       if (templaterEnabled) {
155 |         return await templaterPlugin.append_template_to_active_file(templateFile);
156 |       }
157 | 
158 |       // No template plugins enabled so we can just append the template to the doc
159 |       await stateManager.app.vault.modify(
160 |         stateManager.app.workspace.getActiveFile(),
161 |         templateContent
162 |       );
163 |     } catch (e) {
164 |       console.error(e);
165 |       stateManager.setError(e);
166 |     }
167 |   }
168 | }
169 | 
170 | export function getDefaultDateFormat(app: App) {
171 |   const internalPlugins = (app as any).internalPlugins.plugins;
172 |   const dailyNotesEnabled = internalPlugins['daily-notes']?.enabled;
173 |   const dailyNotesValue = internalPlugins['daily-notes']?.instance.options.format;
174 |   const nlDatesValue = (app as any).plugins.plugins['nldates-obsidian']?.settings.format;
175 |   const templatesEnabled = internalPlugins.templates?.enabled;
176 |   const templatesValue = internalPlugins.templates?.instance.options.dateFormat;
177 | 
178 |   return (
179 |     (dailyNotesEnabled && dailyNotesValue) ||
180 |     nlDatesValue ||
181 |     (templatesEnabled && templatesValue) ||
182 |     'YYYY-MM-DD'
183 |   );
184 | }
185 | 
186 | export function getDefaultTimeFormat(app: App) {
187 |   const internalPlugins = (app as any).internalPlugins.plugins;
188 |   const nlDatesValue = (app as any).plugins.plugins['nldates-obsidian']?.settings.timeFormat;
189 |   const templatesEnabled = internalPlugins.templates?.enabled;
190 |   const templatesValue = internalPlugins.templates?.instance.options.timeFormat;
191 | 
192 |   return nlDatesValue || (templatesEnabled && templatesValue) || 'HH:mm';
193 | }
194 | 
195 | const reRegExChar = /[\\^$.*+?()[\]{}|]/g;
196 | const reHasRegExChar = RegExp(reRegExChar.source);
197 | 
198 | export function escapeRegExpStr(str: string) {
199 |   return str && reHasRegExChar.test(str) ? str.replace(reRegExChar, '\\$&') : str || '';
200 | }
201 | 
202 | export function getTemplatePlugins(app: App) {
203 |   const templatesPlugin = (app as any).internalPlugins.plugins.templates;
204 |   const templatesEnabled = templatesPlugin.enabled;
205 |   const templaterPlugin = (app as any).plugins.plugins['templater-obsidian'];
206 |   const templaterEnabled = (app as any).plugins.enabledPlugins.has('templater-obsidian');
207 |   const templaterEmptyFileTemplate =
208 |     templaterPlugin &&
209 |     (this.app as any).plugins.plugins['templater-obsidian'].settings?.empty_file_template;
210 | 
211 |   const templateFolder = templatesEnabled
212 |     ? templatesPlugin.instance.options.folder
213 |     : templaterPlugin
214 |       ? templaterPlugin.settings.template_folder
215 |       : undefined;
216 | 
217 |   return {
218 |     templatesPlugin,
219 |     templatesEnabled,
220 |     templaterPlugin: templaterPlugin?.templater,
221 |     templaterEnabled,
222 |     templaterEmptyFileTemplate,
223 |     templateFolder,
224 |   };
225 | }
226 | 
227 | export function getTagColorFn(tagColors: TagColor[]) {
228 |   const tagMap = (tagColors || []).reduce<Record<string, TagColor>>((total, current) => {
229 |     if (!current.tagKey) return total;
230 |     total[current.tagKey] = current;
231 |     return total;
232 |   }, {});
233 | 
234 |   return (tag: string) => {
235 |     if (tagMap[tag]) return tagMap[tag];
236 |     return null;
237 |   };
238 | }
239 | 
240 | export function useGetTagColorFn(stateManager: StateManager): (tag: string) => TagColor {
241 |   const tagColors = stateManager.useSetting('tag-colors');
242 |   return useMemo(() => getTagColorFn(tagColors), [tagColors]);
243 | }
244 | 
245 | export function getDateColorFn(dateColors: DateColor[]) {
246 |   const orders = (dateColors || []).map<[moment.Moment | 'today' | 'before' | 'after', DateColor]>(
247 |     (c) => {
248 |       if (c.isToday) {
249 |         return ['today', c];
250 |       }
251 | 
252 |       if (c.isBefore) {
253 |         return ['before', c];
254 |       }
255 | 
256 |       if (c.isAfter) {
257 |         return ['after', c];
258 |       }
259 | 
260 |       const modifier = c.direction === 'after' ? 1 : -1;
261 |       const date = moment();
262 | 
263 |       date.add(c.distance * modifier, c.unit);
264 | 
265 |       return [date, c];
266 |     }
267 |   );
268 | 
269 |   const now = moment();
270 |   orders.sort((a, b) => {
271 |     if (a[0] === 'today') {
272 |       return typeof b[0] === 'string' ? -1 : b[0].isSame(now, 'day') ? 1 : -1;
273 |     }
274 |     if (b[0] === 'today') {
275 |       return typeof a[0] === 'string' ? 1 : a[0].isSame(now, 'day') ? -1 : 1;
276 |     }
277 | 
278 |     if (a[0] === 'after') return 1;
279 |     if (a[0] === 'before') return 1;
280 |     if (b[0] === 'after') return -1;
281 |     if (b[0] === 'before') return -1;
282 | 
283 |     return a[0].isBefore(b[0]) ? -1 : 1;
284 |   });
285 | 
286 |   return (date: moment.Moment) => {
287 |     const now = moment();
288 |     const result = orders.find((o) => {
289 |       const key = o[1];
290 |       if (key.isToday) return date.isSame(now, 'day');
291 |       if (key.isAfter) return date.isAfter(now);
292 |       if (key.isBefore) return date.isBefore(now);
293 | 
294 |       let granularity: moment.unitOfTime.StartOf = 'days';
295 | 
296 |       if (key.unit === 'hours') {
297 |         granularity = 'hours';
298 |       }
299 | 
300 |       if (key.direction === 'before') {
301 |         return date.isBetween(o[0], now, granularity, '[]');
302 |       }
303 | 
304 |       return date.isBetween(now, o[0], granularity, '[]');
305 |     });
306 | 
307 |     if (result) {
308 |       return result[1];
309 |     }
310 | 
311 |     return null;
312 |   };
313 | }
314 | 
315 | export function useGetDateColorFn(
316 |   stateManager: StateManager
317 | ): (date: moment.Moment) => DateColor | null {
318 |   const dateColors = stateManager.useSetting('date-colors');
319 |   return useMemo(() => getDateColorFn(dateColors), [dateColors]);
320 | }
321 | 
322 | export function parseMetadataWithOptions(data: InlineField, metadataKeys: DataKey[]): PageData {
323 |   const options = metadataKeys.find((opts) => opts.metadataKey === data.key);
324 | 
325 |   return options
326 |     ? {
327 |         ...options,
328 |         value: data.value,
329 |       }
330 |     : {
331 |         containsMarkdown: false,
332 |         label: data.key,
333 |         metadataKey: data.key,
334 |         shouldHideLabel: false,
335 |         value: data.value,
336 |       };
337 | }
338 | 
339 | export function useOnMount(refs: RefObject<HTMLElement>[], cb: () => void, onUnmount?: () => void) {
340 |   useEffect(() => {
341 |     let complete = 0;
342 |     let unmounted = false;
343 |     const onDone = () => {
344 |       if (unmounted) return;
345 |       if (++complete === refs.length) {
346 |         cb();
347 |       }
348 |     };
349 |     for (const ref of refs) ref.current?.onNodeInserted(onDone, true);
350 |     return () => {
351 |       unmounted = true;
352 |       onUnmount();
353 |     };
354 |   }, []);
355 | }
356 | 
357 | export function useSearchValue(
358 |   board: Board,
359 |   query: string,
360 |   setSearchQuery: Dispatch<StateUpdater<string>>,
361 |   setDebouncedSearchQuery: Dispatch<StateUpdater<string>>,
362 |   setIsSearching: Dispatch<StateUpdater<boolean>>
363 | ) {
364 |   return useMemo<SearchContextProps>(() => {
365 |     query = query.trim().toLocaleLowerCase();
366 | 
367 |     const lanes = new Set<Lane>();
368 |     const items = new Set<Item>();
369 | 
370 |     if (query) {
371 |       board.children.forEach((lane) => {
372 |         let laneMatched = false;
373 |         lane.children.forEach((item) => {
374 |           if (item.data.titleSearch.includes(query)) {
375 |             laneMatched = true;
376 |             items.add(item);
377 |           }
378 |         });
379 |         if (laneMatched) lanes.add(lane);
380 |       });
381 |     }
382 | 
383 |     return {
384 |       lanes,
385 |       items,
386 |       query,
387 |       search: (query, immediate) => {
388 |         if (!query) {
389 |           setIsSearching(false);
390 |           setSearchQuery('');
391 |           setDebouncedSearchQuery('');
392 |         }
393 |         setIsSearching(true);
394 |         if (immediate) {
395 |           setSearchQuery(query);
396 |           setDebouncedSearchQuery(query);
397 |         } else {
398 |           setSearchQuery(query);
399 |         }
400 |       },
401 |     };
402 |   }, [board, query, setSearchQuery, setDebouncedSearchQuery]);
403 | }
404 | 


--------------------------------------------------------------------------------
/src/components/types.ts:
--------------------------------------------------------------------------------
  1 | import { TFile } from 'obsidian';
  2 | import { KanbanSettings } from 'src/Settings';
  3 | import { Nestable } from 'src/dnd/types';
  4 | import { InlineField } from 'src/parsers/helpers/inlineMetadata';
  5 | import { FileAccessor } from 'src/parsers/helpers/parser';
  6 | 
  7 | export enum LaneSort {
  8 |   TitleAsc,
  9 |   TitleDsc,
 10 |   DateAsc,
 11 |   DateDsc,
 12 |   TagsAsc,
 13 |   TagsDsc,
 14 | }
 15 | 
 16 | export interface LaneData {
 17 |   shouldMarkItemsComplete?: boolean;
 18 |   title: string;
 19 |   maxItems?: number;
 20 |   dom?: HTMLDivElement;
 21 |   forceEditMode?: boolean;
 22 |   sorted?: LaneSort | string;
 23 | }
 24 | 
 25 | export interface DataKey {
 26 |   metadataKey: string;
 27 |   label: string;
 28 |   shouldHideLabel: boolean;
 29 |   containsMarkdown: boolean;
 30 | }
 31 | 
 32 | export interface TagColor {
 33 |   tagKey: string;
 34 |   color: string;
 35 |   backgroundColor: string;
 36 | }
 37 | 
 38 | export interface TagSort {
 39 |   tag: string;
 40 | }
 41 | 
 42 | export interface DateColor {
 43 |   isToday?: boolean;
 44 |   isBefore?: boolean;
 45 |   isAfter?: boolean;
 46 |   distance?: number;
 47 |   unit?: 'hours' | 'days' | 'weeks' | 'months';
 48 |   direction?: 'before' | 'after';
 49 |   color?: string;
 50 |   backgroundColor?: string;
 51 | }
 52 | 
 53 | export type PageDataValue =
 54 |   | string
 55 |   | number
 56 |   | Array<string | number>
 57 |   | { [k: string]: PageDataValue };
 58 | 
 59 | export interface PageData extends DataKey {
 60 |   value: PageDataValue;
 61 | }
 62 | 
 63 | export interface FileMetadata {
 64 |   [k: string]: PageData;
 65 | }
 66 | 
 67 | export interface ItemMetadata {
 68 |   dateStr?: string;
 69 |   date?: moment.Moment;
 70 |   timeStr?: string;
 71 |   time?: moment.Moment;
 72 |   tags?: string[];
 73 |   fileAccessor?: FileAccessor;
 74 |   file?: TFile | null;
 75 |   fileMetadata?: FileMetadata;
 76 |   fileMetadataOrder?: string[];
 77 |   inlineMetadata?: InlineField[];
 78 | }
 79 | 
 80 | export interface ItemData {
 81 |   blockId?: string;
 82 |   checked: boolean;
 83 |   checkChar: string;
 84 |   title: string;
 85 |   titleRaw: string;
 86 |   titleSearch: string;
 87 |   titleSearchRaw: string;
 88 |   metadata: ItemMetadata;
 89 |   forceEditMode?: boolean;
 90 | }
 91 | 
 92 | export interface ErrorReport {
 93 |   description: string;
 94 |   stack: string;
 95 | }
 96 | 
 97 | export interface BoardData {
 98 |   isSearching: boolean;
 99 |   settings: KanbanSettings;
100 |   frontmatter: Record<string, number | string | Array<number | string>>;
101 |   archive: Item[];
102 |   errors: ErrorReport[];
103 | }
104 | 
105 | export type Item = Nestable<ItemData>;
106 | export type Lane = Nestable<LaneData, Item>;
107 | export type Board = Nestable<BoardData, Lane>;
108 | export type MetadataSetting = Nestable<DataKey>;
109 | export type TagColorSetting = Nestable<TagColor>;
110 | export type TagSortSetting = Nestable<TagSort>;
111 | export type DateColorSetting = Nestable<DateColor>;
112 | 
113 | export const DataTypes = {
114 |   Item: 'item',
115 |   Lane: 'lane',
116 |   Board: 'board',
117 |   MetadataSetting: 'metadata-setting',
118 |   TagColorSetting: 'tag-color',
119 |   TagSortSetting: 'tag-sort',
120 |   DateColorSetting: 'date-color',
121 | };
122 | 
123 | export const ItemTemplate = {
124 |   accepts: [DataTypes.Item],
125 |   type: DataTypes.Item,
126 |   children: [] as any[],
127 | };
128 | 
129 | export const LaneTemplate = {
130 |   accepts: [DataTypes.Lane],
131 |   type: DataTypes.Lane,
132 | };
133 | 
134 | export const BoardTemplate = {
135 |   accepts: [] as string[],
136 |   type: DataTypes.Board,
137 | };
138 | 
139 | export const MetadataSettingTemplate = {
140 |   accepts: [DataTypes.MetadataSetting],
141 |   type: DataTypes.MetadataSetting,
142 |   children: [] as any[],
143 | };
144 | 
145 | export const TagSortSettingTemplate = {
146 |   accepts: [DataTypes.TagSortSetting],
147 |   type: DataTypes.TagSortSetting,
148 |   children: [] as any[],
149 | };
150 | 
151 | // TODO: all this is unecessary because these aren't sortable
152 | export const TagColorSettingTemplate = {
153 |   accepts: [] as string[],
154 |   type: DataTypes.TagColorSetting,
155 |   children: [] as any[],
156 | };
157 | 
158 | // TODO: all this is unecessary because these aren't sortable
159 | export const DateColorSettingTemplate = {
160 |   accepts: [] as string[],
161 |   type: DataTypes.DateColorSetting,
162 |   children: [] as any[],
163 | };
164 | 
165 | export interface EditCoordinates {
166 |   x: number;
167 |   y: number;
168 | }
169 | 
170 | export enum EditingState {
171 |   cancel,
172 |   complete,
173 | }
174 | 
175 | export type EditState = EditCoordinates | EditingState;
176 | 
177 | export function isEditing(state: EditState): state is EditCoordinates {
178 |   if (state === null) return false;
179 |   if (typeof state === 'number') return false;
180 |   return true;
181 | }
182 | 


--------------------------------------------------------------------------------
/src/dnd/components/DndContext.tsx:
--------------------------------------------------------------------------------
 1 | import { useEffect, useMemo, useRef } from 'preact/compat';
 2 | 
 3 | import { DndManager } from '../managers/DndManager';
 4 | import { Entity, WithChildren } from '../types';
 5 | import { DndScrollState } from './ScrollStateContext';
 6 | import { DndManagerContext } from './context';
 7 | 
 8 | interface DndContextProps extends WithChildren {
 9 |   win: Window;
10 |   onDrop(dragEntity: Entity, dropEntity: Entity): void;
11 | }
12 | 
13 | export function DndContext({ win, children, onDrop }: DndContextProps) {
14 |   const onDropRef = useRef(onDrop);
15 | 
16 |   onDropRef.current = onDrop;
17 | 
18 |   const dndManager = useMemo(() => {
19 |     return new DndManager(win, (dragEntity: Entity, dropEntity: Entity) => {
20 |       return onDropRef.current(dragEntity, dropEntity);
21 |     });
22 |   }, []);
23 | 
24 |   useEffect(() => {
25 |     return () => {
26 |       dndManager.destroy();
27 |     };
28 |   }, [dndManager]);
29 | 
30 |   return (
31 |     <DndManagerContext.Provider value={dndManager}>
32 |       <DndScrollState>{children}</DndScrollState>
33 |     </DndManagerContext.Provider>
34 |   );
35 | }
36 | 


--------------------------------------------------------------------------------
/src/dnd/components/DragOverlay.tsx:
--------------------------------------------------------------------------------
  1 | import { JSX } from 'preact';
  2 | import { CSSProperties, createPortal, useContext, useEffect, useState } from 'preact/compat';
  3 | 
  4 | import { DragEventData } from '../managers/DragManager';
  5 | import { Coordinates, Entity, Hitbox } from '../types';
  6 | import { getDropDuration, transforms, transitions } from '../util/animation';
  7 | import { emptyHitbox } from '../util/hitbox';
  8 | import { DndManagerContext } from './context';
  9 | 
 10 | export interface DragOverlayProps {
 11 |   children(entity: Entity, styles: JSX.CSSProperties): JSX.Element;
 12 | }
 13 | 
 14 | function getDragOverlayStyles(
 15 |   position: Coordinates,
 16 |   origin: Coordinates,
 17 |   originHitbox: Hitbox,
 18 |   margin: Hitbox,
 19 |   transition?: string,
 20 |   transform?: string
 21 | ): CSSProperties {
 22 |   const adjustedHitbox = [
 23 |     originHitbox[0] - margin[0],
 24 |     originHitbox[1] - margin[1],
 25 |     originHitbox[2] + margin[2],
 26 |     originHitbox[3] + margin[3],
 27 |   ];
 28 | 
 29 |   return {
 30 |     transform:
 31 |       transform ||
 32 |       `translate3d(${position.x - origin.x + adjustedHitbox[0]}px, ${
 33 |         position.y - origin.y + adjustedHitbox[1]
 34 |       }px, 0px)`,
 35 |     width: `${adjustedHitbox[2] - adjustedHitbox[0]}px`,
 36 |     height: `${adjustedHitbox[3] - adjustedHitbox[1]}px`,
 37 |     transition,
 38 |   };
 39 | }
 40 | 
 41 | export function DragOverlay({ children }: DragOverlayProps) {
 42 |   const dndManager = useContext(DndManagerContext);
 43 | 
 44 |   const [dragEntity, setDragEntity] = useState<Entity | undefined>();
 45 |   const [styles, setStyles] = useState<CSSProperties | undefined>();
 46 | 
 47 |   useEffect(() => {
 48 |     if (!dndManager) return;
 49 | 
 50 |     let dragOriginHitbox: Hitbox = emptyHitbox;
 51 | 
 52 |     const dragStart = ({
 53 |       dragEntity,
 54 |       dragOrigin,
 55 |       dragPosition,
 56 |       dragEntityMargin,
 57 |     }: DragEventData) => {
 58 |       if (!dragEntity || !dragPosition || !dragOrigin) {
 59 |         return;
 60 |       }
 61 |       dragOriginHitbox = dragEntity.getHitbox();
 62 |       setDragEntity(dragEntity);
 63 |       setStyles(getDragOverlayStyles(dragPosition, dragOrigin, dragOriginHitbox, dragEntityMargin));
 64 |     };
 65 | 
 66 |     const dragMove = ({ dragOrigin, dragPosition, dragEntityMargin }: DragEventData) => {
 67 |       if (!dragPosition || !dragOrigin) {
 68 |         return;
 69 |       }
 70 |       setStyles(getDragOverlayStyles(dragPosition, dragOrigin, dragOriginHitbox, dragEntityMargin));
 71 |     };
 72 | 
 73 |     const dragEnd = ({
 74 |       dragOrigin,
 75 |       primaryIntersection,
 76 |       dragPosition,
 77 |       dragEntityMargin,
 78 |     }: DragEventData) => {
 79 |       if (primaryIntersection && dragPosition && dragOrigin) {
 80 |         const dropHitbox = primaryIntersection.getHitbox();
 81 |         const dropDestination = {
 82 |           x: dropHitbox[0],
 83 |           y: dropHitbox[1],
 84 |         };
 85 |         const dropDuration = getDropDuration({
 86 |           position: dragPosition,
 87 |           destination: dropDestination,
 88 |         });
 89 | 
 90 |         const transition = transitions.drop(dropDuration);
 91 |         const transform = transforms.drop(dropDestination);
 92 | 
 93 |         setStyles(
 94 |           getDragOverlayStyles(
 95 |             dragPosition,
 96 |             dragOrigin,
 97 |             dragOriginHitbox,
 98 |             dragEntityMargin,
 99 |             transition,
100 |             transform
101 |           )
102 |         );
103 | 
104 |         activeWindow.setTimeout(() => {
105 |           setDragEntity(undefined);
106 |           setStyles(undefined);
107 |         }, dropDuration);
108 |       } else {
109 |         setDragEntity(undefined);
110 |         setStyles(undefined);
111 |       }
112 |     };
113 | 
114 |     const { emitter } = dndManager.dragManager;
115 |     emitter.on('dragStart', dragStart);
116 |     emitter.on('dragMove', dragMove);
117 |     emitter.on('dragEnd', dragEnd);
118 | 
119 |     return () => {
120 |       emitter.off('dragStart', dragStart);
121 |       emitter.off('dragMove', dragMove);
122 |       emitter.off('dragEnd', dragEnd);
123 |     };
124 |   }, [dndManager]);
125 | 
126 |   if (!dragEntity || !styles) {
127 |     return null;
128 |   }
129 | 
130 |   return createPortal(children(dragEntity, styles), dragEntity.getData().win.document.body);
131 | }
132 | 
133 | export function useIsAnythingDragging() {
134 |   const dndManager = useContext(DndManagerContext);
135 |   const [isDragging, setIsDragging] = useState(false);
136 | 
137 |   useEffect(() => {
138 |     const onDragStart = () => setIsDragging(true);
139 |     const onDragEnd = ({ primaryIntersection, dragPosition }: DragEventData) => {
140 |       const dropHitbox = primaryIntersection?.getHitbox() || [0, 0];
141 |       const dropDestination = {
142 |         x: dropHitbox[0],
143 |         y: dropHitbox[1],
144 |       };
145 |       const dropDuration = getDropDuration({
146 |         position: dragPosition || dropDestination,
147 |         destination: dropDestination,
148 |       });
149 | 
150 |       activeWindow.setTimeout(() => setIsDragging(false), dropDuration);
151 |     };
152 | 
153 |     const { emitter } = dndManager.dragManager;
154 | 
155 |     emitter.on('dragStart', onDragStart);
156 |     emitter.on('dragEnd', onDragEnd);
157 | 
158 |     return () => {
159 |       emitter.off('dragStart', onDragStart);
160 |       emitter.off('dragEnd', onDragEnd);
161 |     };
162 |   }, [dndManager]);
163 | 
164 |   return isDragging;
165 | }
166 | 


--------------------------------------------------------------------------------
/src/dnd/components/Droppable.tsx:
--------------------------------------------------------------------------------
  1 | import { RefObject, memo, useContext, useMemo, useRef } from 'preact/compat';
  2 | import { useOnMount } from 'src/components/helpers';
  3 | 
  4 | import { EntityManager } from '../managers/EntityManager';
  5 | import { EntityData, WithChildren } from '../types';
  6 | import {
  7 |   DndManagerContext,
  8 |   EntityManagerContext,
  9 |   ExplicitPathContext,
 10 |   ScopeIdContext,
 11 |   ScrollManagerContext,
 12 |   SortManagerContext,
 13 | } from './context';
 14 | 
 15 | export interface DraggableProps extends WithChildren {
 16 |   id: string;
 17 |   index: number;
 18 |   elementRef: RefObject<HTMLElement | null>;
 19 |   measureRef: RefObject<HTMLElement | null>;
 20 |   data: EntityData;
 21 | }
 22 | 
 23 | export function StaticDroppable(props: DraggableProps) {
 24 |   return <>{props.children}</>;
 25 | }
 26 | 
 27 | export const Droppable = memo(function Droppable({
 28 |   id,
 29 |   index,
 30 |   elementRef,
 31 |   measureRef,
 32 |   children,
 33 |   data,
 34 | }: DraggableProps) {
 35 |   const dndManager = useContext(DndManagerContext);
 36 |   const sortManager = useContext(SortManagerContext);
 37 |   const scopeId = useContext(ScopeIdContext);
 38 |   const parentEntityManager = useContext(EntityManagerContext);
 39 |   const parentScrollManager = useContext(ScrollManagerContext);
 40 |   const dataRef = useRef(data);
 41 |   const managerRef = useRef<EntityManager>();
 42 | 
 43 |   dataRef.current = data;
 44 | 
 45 |   const entityManager = useMemo(() => {
 46 |     if (dndManager) {
 47 |       if (managerRef.current) {
 48 |         managerRef.current.destroy();
 49 |       }
 50 | 
 51 |       const manager = new EntityManager(
 52 |         dndManager,
 53 |         scopeId,
 54 |         id,
 55 |         index,
 56 |         parentEntityManager,
 57 |         parentScrollManager,
 58 |         sortManager,
 59 |         dataRef
 60 |       );
 61 | 
 62 |       if (elementRef.current && measureRef.current) {
 63 |         manager.initNodes(elementRef.current, measureRef.current);
 64 |       }
 65 | 
 66 |       managerRef.current = manager;
 67 | 
 68 |       return manager;
 69 |     }
 70 | 
 71 |     return null;
 72 |   }, [
 73 |     id,
 74 |     index,
 75 | 
 76 |     //
 77 |     dndManager,
 78 |     scopeId,
 79 |     parentEntityManager,
 80 |     parentScrollManager,
 81 |     sortManager,
 82 |   ]);
 83 | 
 84 |   useOnMount(
 85 |     [elementRef, measureRef],
 86 |     () => {
 87 |       managerRef.current?.initNodes(elementRef.current, measureRef.current);
 88 |     },
 89 |     () => {
 90 |       managerRef.current?.destroy();
 91 |     }
 92 |   );
 93 | 
 94 |   if (!entityManager) {
 95 |     return null;
 96 |   }
 97 | 
 98 |   return (
 99 |     <EntityManagerContext.Provider value={entityManager}>{children}</EntityManagerContext.Provider>
100 |   );
101 | });
102 | 
103 | export function useNestedEntityPath(selfIndex?: number) {
104 |   const entityManager = useContext(EntityManagerContext);
105 |   const explicitPath = useContext(ExplicitPathContext);
106 |   const currentPath = explicitPath ?? entityManager?.getPath() ?? [];
107 | 
108 |   if (selfIndex !== undefined) {
109 |     currentPath.push(selfIndex);
110 |   }
111 | 
112 |   return useMemo(() => currentPath, currentPath);
113 | }
114 | 


--------------------------------------------------------------------------------
/src/dnd/components/Scope.tsx:
--------------------------------------------------------------------------------
 1 | import Preact from 'preact/compat';
 2 | import { generateInstanceId } from 'src/components/helpers';
 3 | 
 4 | import { WithChildren } from '../types';
 5 | import { ScopeIdContext, ScrollStateContext } from './context';
 6 | 
 7 | interface ScopeProps extends WithChildren {
 8 |   id?: string;
 9 | }
10 | 
11 | export function DndScope({ id, children }: ScopeProps) {
12 |   const scrollStateManager = Preact.useContext(ScrollStateContext);
13 |   const scopeId = Preact.useMemo(() => id || generateInstanceId(), [id]);
14 | 
15 |   Preact.useEffect(() => {
16 |     return () => {
17 |       scrollStateManager.unmountScope(id);
18 |     };
19 |   }, [id]);
20 | 
21 |   return <ScopeIdContext.Provider value={scopeId}>{children}</ScopeIdContext.Provider>;
22 | }
23 | 


--------------------------------------------------------------------------------
/src/dnd/components/ScrollContainer.tsx:
--------------------------------------------------------------------------------
 1 | import classcat from 'classcat';
 2 | import { ComponentChildren } from 'preact';
 3 | import { c } from 'src/components/helpers';
 4 | 
 5 | import { useStoredScrollState } from './ScrollStateContext';
 6 | import { Scrollable } from './Scrollable';
 7 | 
 8 | interface ScrollContainerProps {
 9 |   children?: ComponentChildren;
10 |   className?: string;
11 |   triggerTypes: string[];
12 |   isStatic?: boolean;
13 |   id: string;
14 |   index?: number;
15 | }
16 | 
17 | export function ScrollContainer({
18 |   className,
19 |   children,
20 |   triggerTypes,
21 |   isStatic,
22 |   id,
23 |   index,
24 | }: ScrollContainerProps) {
25 |   const { setRef, scrollRef } = useStoredScrollState(id, index);
26 | 
27 |   return (
28 |     <div ref={setRef} className={classcat([className, c('scroll-container')])}>
29 |       {isStatic ? (
30 |         children
31 |       ) : (
32 |         <Scrollable scrollRef={scrollRef} triggerTypes={triggerTypes}>
33 |           {children}
34 |         </Scrollable>
35 |       )}
36 |     </div>
37 |   );
38 | }
39 | 


--------------------------------------------------------------------------------
/src/dnd/components/ScrollStateContext.tsx:
--------------------------------------------------------------------------------
 1 | import Preact from 'preact/compat';
 2 | 
 3 | import { ScrollStateManager } from '../managers/ScrollStateManager';
 4 | import { WithChildren } from '../types';
 5 | import { rafThrottle } from '../util/animation';
 6 | import { ScopeIdContext, ScrollStateContext } from './context';
 7 | 
 8 | export function DndScrollState({ children }: WithChildren) {
 9 |   const manager = Preact.useMemo(() => {
10 |     return new ScrollStateManager();
11 |   }, []);
12 | 
13 |   return <ScrollStateContext.Provider value={manager}>{children}</ScrollStateContext.Provider>;
14 | }
15 | 
16 | export function useStoredScrollState(id: string, index: number | undefined) {
17 |   const scopeId = Preact.useContext(ScopeIdContext);
18 |   const scrollRef = Preact.useRef<HTMLDivElement>(null);
19 |   const scrollStateManager = Preact.useContext(ScrollStateContext);
20 | 
21 |   const setRef = (el: HTMLDivElement) => {
22 |     scrollRef.current = el;
23 | 
24 |     if (scrollRef.current) {
25 |       el.win.requestAnimationFrame(() => {
26 |         const state = scrollStateManager.getScrollState(id);
27 | 
28 |         if (state && (state.x !== 0 || state.y !== 0)) {
29 |           scrollRef.current.scrollLeft = state.x;
30 |           scrollRef.current.scrollTop = state.y;
31 |         }
32 |       });
33 |     }
34 |   };
35 | 
36 |   Preact.useEffect(() => {
37 |     const el = scrollRef.current;
38 | 
39 |     if (!el) return;
40 | 
41 |     const onScroll = rafThrottle(el.win, (e: Event) => {
42 |       const target = e.target as HTMLElement;
43 | 
44 |       scrollStateManager.setScrollState(scopeId, id, {
45 |         x: target.scrollLeft,
46 |         y: target.scrollTop,
47 |       });
48 |     });
49 | 
50 |     el.addEventListener('scroll', onScroll);
51 | 
52 |     return () => {
53 |       el.removeEventListener('scroll', onScroll);
54 |     };
55 |   }, [scrollStateManager, id, index]);
56 | 
57 |   return { setRef, scrollRef };
58 | }
59 | 


--------------------------------------------------------------------------------
/src/dnd/components/Scrollable.tsx:
--------------------------------------------------------------------------------
 1 | import { RefObject, useContext, useMemo, useRef } from 'preact/compat';
 2 | import { useOnMount } from 'src/components/helpers';
 3 | 
 4 | import { ScrollManager } from '../managers/ScrollManager';
 5 | import { WithChildren } from '../types';
 6 | import { DndManagerContext, ScopeIdContext, ScrollManagerContext } from './context';
 7 | 
 8 | interface ScrollContextProps extends WithChildren {
 9 |   scrollRef: RefObject<HTMLElement | null>;
10 |   triggerTypes?: string[];
11 | }
12 | 
13 | export function Scrollable({ scrollRef, triggerTypes, children }: ScrollContextProps) {
14 |   const dndManager = useContext(DndManagerContext);
15 |   const scopeId = useContext(ScopeIdContext);
16 |   const parentScrollManager = useContext(ScrollManagerContext);
17 | 
18 |   const managerRef = useRef<ScrollManager>();
19 | 
20 |   const scrollManager = useMemo(() => {
21 |     if (dndManager) {
22 |       if (managerRef.current) {
23 |         managerRef.current.destroy();
24 |       }
25 | 
26 |       const manager = new ScrollManager(
27 |         dndManager,
28 |         scopeId,
29 |         triggerTypes || ([] as string[]),
30 |         parentScrollManager
31 |       );
32 | 
33 |       managerRef.current = manager;
34 | 
35 |       return manager;
36 |     }
37 | 
38 |     return null;
39 |   }, [dndManager, scopeId, scrollRef, triggerTypes, parentScrollManager]);
40 | 
41 |   useOnMount(
42 |     [scrollRef],
43 |     () => managerRef.current?.initNodes(scrollRef.current),
44 |     () => managerRef.current?.destroy()
45 |   );
46 | 
47 |   if (!scrollManager) {
48 |     return null;
49 |   }
50 | 
51 |   return (
52 |     <ScrollManagerContext.Provider value={scrollManager}>{children}</ScrollManagerContext.Provider>
53 |   );
54 | }
55 | 


--------------------------------------------------------------------------------
/src/dnd/components/SortPlaceholder.tsx:
--------------------------------------------------------------------------------
 1 | import classcat from 'classcat';
 2 | import { useMemo, useRef } from 'preact/compat';
 3 | import { c, generateInstanceId } from 'src/components/helpers';
 4 | 
 5 | import { EntityData, WithChildren } from '../types';
 6 | import { Droppable } from './Droppable';
 7 | 
 8 | export interface SortPlaceholderProps extends WithChildren {
 9 |   index: number;
10 |   accepts: string[];
11 |   className?: string;
12 |   isStatic?: boolean;
13 | }
14 | 
15 | export function SortPlaceholder({
16 |   index,
17 |   accepts,
18 |   className,
19 |   isStatic,
20 |   children,
21 | }: SortPlaceholderProps) {
22 |   const elementRef = useRef<HTMLDivElement>(null);
23 |   const measureRef = useRef<HTMLDivElement>(null);
24 | 
25 |   const data = useMemo<EntityData>(() => {
26 |     return {
27 |       id: generateInstanceId(),
28 |       type: 'placeholder',
29 |       accepts,
30 |     };
31 |   }, accepts);
32 | 
33 |   return (
34 |     <div ref={measureRef} className={classcat([className, c('placeholder')])}>
35 |       <div ref={elementRef}>
36 |         {!isStatic ? (
37 |           <Droppable
38 |             elementRef={elementRef}
39 |             measureRef={measureRef}
40 |             id={data.id}
41 |             index={index}
42 |             data={data}
43 |           >
44 |             {children}
45 |           </Droppable>
46 |         ) : (
47 |           children
48 |         )}
49 |       </div>
50 |     </div>
51 |   );
52 | }
53 | 


--------------------------------------------------------------------------------
/src/dnd/components/Sortable.tsx:
--------------------------------------------------------------------------------
 1 | import { useContext, useEffect, useMemo, useRef, useState } from 'preact/hooks';
 2 | 
 3 | import { SortManager } from '../managers/SortManager';
 4 | import { Axis, WithChildren } from '../types';
 5 | import { DndManagerContext, SortManagerContext } from './context';
 6 | 
 7 | interface SortableProps extends WithChildren {
 8 |   axis: Axis;
 9 |   onSortChange?: (isSorting: boolean) => void;
10 | }
11 | 
12 | export function StaticSortable(props: SortableProps) {
13 |   return <>{props.children}</>;
14 | }
15 | 
16 | export function Sortable({ axis, children, onSortChange }: SortableProps) {
17 |   const dndManager = useContext(DndManagerContext);
18 |   const managerRef = useRef<SortManager>();
19 |   const sortManager = useMemo(() => {
20 |     if (dndManager) {
21 |       if (managerRef.current) {
22 |         managerRef.current.destroy();
23 |       }
24 | 
25 |       const manager = new SortManager(dndManager, axis, onSortChange);
26 | 
27 |       managerRef.current = manager;
28 | 
29 |       return manager;
30 |     }
31 | 
32 |     return null;
33 |   }, [dndManager, axis, onSortChange]);
34 | 
35 |   useEffect(() => {
36 |     return () => managerRef.current?.destroy();
37 |   }, []);
38 | 
39 |   if (!sortManager) {
40 |     return null;
41 |   }
42 | 
43 |   return <SortManagerContext.Provider value={sortManager}>{children}</SortManagerContext.Provider>;
44 | }
45 | 
46 | export function useIsSorting() {
47 |   const sortManager = useContext(SortManagerContext);
48 |   const [isSorting, setIsSorting] = useState(false);
49 | 
50 |   useEffect(() => {
51 |     sortManager.addSortNotifier(setIsSorting);
52 |     return () => sortManager.removeSortNotifier(setIsSorting);
53 |   }, [sortManager]);
54 | 
55 |   return isSorting;
56 | }
57 | 


--------------------------------------------------------------------------------
/src/dnd/components/context.ts:
--------------------------------------------------------------------------------
 1 | import Preact from 'preact/compat';
 2 | 
 3 | import { DndManager } from '../managers/DndManager';
 4 | import { EntityManager } from '../managers/EntityManager';
 5 | import { ScrollManager } from '../managers/ScrollManager';
 6 | import { ScrollStateManager } from '../managers/ScrollStateManager';
 7 | import { SortManager } from '../managers/SortManager';
 8 | 
 9 | export const DndManagerContext = Preact.createContext<DndManager | null>(null);
10 | 
11 | export const ScopeIdContext = Preact.createContext<string>('');
12 | 
13 | export const ScrollManagerContext = Preact.createContext<ScrollManager | null>(null);
14 | 
15 | export const ScrollStateContext = Preact.createContext<ScrollStateManager>(
16 |   new ScrollStateManager()
17 | );
18 | 
19 | export const SortManagerContext = Preact.createContext<SortManager | null>(null);
20 | 
21 | export const EntityManagerContext = Preact.createContext<EntityManager | null>(null);
22 | 
23 | export const ExplicitPathContext = Preact.createContext<number[]>(null);
24 | 


--------------------------------------------------------------------------------
/src/dnd/managers/DndManager.ts:
--------------------------------------------------------------------------------
 1 | import EventEmitter from 'eventemitter3';
 2 | import { debounce } from 'obsidian';
 3 | 
 4 | import { Entity } from '../types';
 5 | import { getParentWindow } from '../util/getWindow';
 6 | import { DragManager } from './DragManager';
 7 | 
 8 | export type DropHandler = (dragEntity: Entity, dropEntity: Entity) => void;
 9 | 
10 | export class DndManager {
11 |   win: Window;
12 |   emitter: EventEmitter;
13 |   hitboxEntities: Map<string, Entity>;
14 |   scrollEntities: Map<string, Entity>;
15 |   resizeObserver: ResizeObserver;
16 |   dragManager: DragManager;
17 |   onDrop: DropHandler;
18 | 
19 |   constructor(win: Window, onDrop: DropHandler) {
20 |     this.win = win;
21 |     this.emitter = new EventEmitter();
22 |     this.hitboxEntities = new Map();
23 |     this.scrollEntities = new Map();
24 |     this.onDrop = onDrop;
25 | 
26 |     this.resizeObserver = new ResizeObserver(debounce(this.handleResize, 100, true));
27 |     this.dragManager = new DragManager(win, this.emitter, this.hitboxEntities, this.scrollEntities);
28 |   }
29 | 
30 |   destroy() {
31 |     this.resizeObserver.disconnect();
32 |   }
33 | 
34 |   scrollResizeDebounce = 0;
35 |   handleResize: ResizeObserverCallback = (entries) => {
36 |     let thisDidResize = false;
37 |     entries.forEach((e) => {
38 |       const win = getParentWindow(e.target);
39 | 
40 |       if (this.win !== win) return;
41 | 
42 |       thisDidResize = true;
43 | 
44 |       if ((e.target as HTMLElement).dataset.scrollid) {
45 |         this.win.clearTimeout(this.scrollResizeDebounce);
46 | 
47 |         this.scrollResizeDebounce = this.win.setTimeout(() => {
48 |           if (this.emitter.listenerCount('scrollResize')) {
49 |             this.emitter.emit('scrollResize', null);
50 |           }
51 |         }, 50);
52 |       }
53 |     });
54 | 
55 |     if (!thisDidResize) return;
56 | 
57 |     this.hitboxEntities.forEach((entity) => {
58 |       entity.recalcInitial();
59 |     });
60 | 
61 |     this.scrollEntities.forEach((entity) => {
62 |       entity.recalcInitial();
63 |     });
64 |   };
65 | 
66 |   observeResize(element: HTMLElement) {
67 |     if (!element.instanceOf(HTMLElement)) return;
68 |     this.resizeObserver.observe(element, { box: 'border-box' });
69 |   }
70 | 
71 |   unobserveResize(element: HTMLElement) {
72 |     if (!element.instanceOf(HTMLElement)) return;
73 |     this.resizeObserver.unobserve(element);
74 |   }
75 | 
76 |   registerHitboxEntity(id: string, entity: Entity, win: Window) {
77 |     if (win !== this.win) return;
78 |     this.hitboxEntities.set(id, entity);
79 |   }
80 | 
81 |   registerScrollEntity(id: string, entity: Entity, win: Window) {
82 |     if (win !== this.win) return;
83 |     this.scrollEntities.set(id, entity);
84 |   }
85 | 
86 |   unregisterHitboxEntity(id: string, win: Window) {
87 |     if (win !== this.win) return;
88 |     this.hitboxEntities.delete(id);
89 |   }
90 | 
91 |   unregisterScrollEntity(id: string, win: Window) {
92 |     if (win !== this.win) return;
93 |     this.scrollEntities.delete(id);
94 |   }
95 | }
96 | 


--------------------------------------------------------------------------------
/src/dnd/managers/DragManager.ts:
--------------------------------------------------------------------------------
  1 | import boxIntersect from 'box-intersect';
  2 | import EventEmitter from 'eventemitter3';
  3 | import { RefObject, useCallback, useContext, useRef } from 'preact/compat';
  4 | import { StateManager } from 'src/StateManager';
  5 | import { handleDragOrPaste } from 'src/components/Item/helpers';
  6 | 
  7 | import { DndManagerContext } from '../components/context';
  8 | import { Coordinates, Entity, Hitbox, Side } from '../types';
  9 | import { rafThrottle } from '../util/animation';
 10 | import { createHTMLDndEntity } from '../util/createHTMLDndEntity';
 11 | import {
 12 |   adjustHitboxForMovement,
 13 |   distanceBetween,
 14 |   getBestIntersect,
 15 |   getScrollIntersection,
 16 | } from '../util/hitbox';
 17 | 
 18 | export interface DragEventData {
 19 |   dragEntity?: Entity;
 20 |   dragEntityId?: string;
 21 |   dragEntityMargin?: Hitbox;
 22 |   dragOrigin?: Coordinates;
 23 |   dragOriginHitbox?: Hitbox;
 24 |   dragPosition?: Coordinates;
 25 |   primaryIntersection?: Entity;
 26 |   scrollIntersections?: [Entity, number][];
 27 | }
 28 | 
 29 | export interface ScrollEventData extends DragEventData {
 30 |   scrollEntity: Entity;
 31 |   scrollEntityId: string;
 32 |   scrollEntitySide: Side;
 33 |   scrollStrength: number;
 34 | }
 35 | 
 36 | export class DragManager {
 37 |   win: Window;
 38 |   emitter: EventEmitter;
 39 |   hitboxEntities: Map<string, Entity>;
 40 |   scrollEntities: Map<string, Entity>;
 41 | 
 42 |   dragEntity?: Entity;
 43 |   dragEntityId?: string;
 44 |   dragEntityMargin?: Hitbox;
 45 |   dragOrigin?: Coordinates;
 46 |   dragOriginHitbox?: Hitbox;
 47 |   dragPosition?: Coordinates;
 48 | 
 49 |   primaryIntersection?: Entity;
 50 |   scrollIntersection?: [Entity, number];
 51 | 
 52 |   isHTMLDragging: boolean = false;
 53 |   dragOverTimeout: number = 0;
 54 | 
 55 |   constructor(
 56 |     win: Window,
 57 |     emitter: EventEmitter,
 58 |     hitboxEntities: Map<string, Entity>,
 59 |     scrollEntities: Map<string, Entity>
 60 |   ) {
 61 |     this.win = win;
 62 |     this.hitboxEntities = hitboxEntities;
 63 |     this.scrollEntities = scrollEntities;
 64 |     this.emitter = emitter;
 65 |   }
 66 | 
 67 |   getDragEventData() {
 68 |     return {
 69 |       dragEntity: this.dragEntity,
 70 |       dragEntityId: this.dragEntityId,
 71 |       dragEntityMargin: this.dragEntityMargin,
 72 |       dragOrigin: this.dragOrigin,
 73 |       dragOriginHitbox: this.dragOriginHitbox,
 74 |       dragPosition: this.dragPosition,
 75 |       primaryIntersection: this.primaryIntersection,
 76 |       scrollIntersection: this.scrollIntersection,
 77 |     };
 78 |   }
 79 | 
 80 |   dragStart(e: PointerEvent, referenceElement?: HTMLElement) {
 81 |     const id =
 82 |       referenceElement?.dataset.hitboxid || (e.currentTarget as HTMLElement).dataset.hitboxid;
 83 | 
 84 |     if (!id) return;
 85 | 
 86 |     const styles = getComputedStyle(referenceElement || (e.currentTarget as HTMLElement));
 87 | 
 88 |     this.dragEntityId = id;
 89 |     this.dragOrigin = { x: e.pageX, y: e.pageY };
 90 |     this.dragPosition = { x: e.pageX, y: e.pageY };
 91 |     this.dragEntity = this.hitboxEntities.get(id);
 92 |     this.dragOriginHitbox = this.dragEntity?.getHitbox();
 93 |     this.dragEntityMargin = [
 94 |       parseFloat(styles.marginLeft) || 0,
 95 |       parseFloat(styles.marginTop) || 0,
 96 |       parseFloat(styles.marginRight) || 0,
 97 |       parseFloat(styles.marginBottom) || 0,
 98 |     ];
 99 | 
100 |     this.emitter.emit('dragStart', this.getDragEventData());
101 |   }
102 | 
103 |   dragStartHTML(e: DragEvent, viewId: string) {
104 |     this.isHTMLDragging = true;
105 |     const entity = createHTMLDndEntity(e.pageX, e.pageY, [], viewId, e.view);
106 | 
107 |     this.dragEntityId = entity.entityId;
108 |     this.dragOrigin = { x: e.pageX, y: e.pageY };
109 |     this.dragPosition = { x: e.pageX, y: e.pageY };
110 |     this.dragEntity = entity;
111 |     this.dragOriginHitbox = entity.getHitbox();
112 |     this.dragEntityMargin = [0, 0, 0, 0];
113 | 
114 |     this.emitter.emit('dragStart', this.getDragEventData());
115 |   }
116 | 
117 |   dragMove(e: PointerEvent) {
118 |     this.dragPosition = { x: e.pageX, y: e.pageY };
119 |     this.emitter.emit('dragMove', this.getDragEventData());
120 |     this.calculateDragIntersect();
121 |   }
122 | 
123 |   dragMoveHTML(e: DragEvent) {
124 |     this.dragPosition = { x: e.pageX, y: e.pageY };
125 |     this.emitter.emit('dragMove', this.getDragEventData());
126 |     this.calculateDragIntersect();
127 |   }
128 | 
129 |   // eslint-disable-next-line @typescript-eslint/no-unused-vars
130 |   dragEnd(e: PointerEvent) {
131 |     this.emitter.emit('dragEnd', this.getDragEventData());
132 |     this.dragEntityMargin = undefined;
133 |     this.dragEntity = undefined;
134 |     this.dragEntityId = undefined;
135 |     this.dragOrigin = undefined;
136 |     this.dragOriginHitbox = undefined;
137 |     this.dragPosition = undefined;
138 |     this.scrollIntersection = undefined;
139 |     this.primaryIntersection = undefined;
140 |   }
141 | 
142 |   dragEndHTML(e: DragEvent, viewId: string, content: string[], isLeave?: boolean) {
143 |     this.isHTMLDragging = false;
144 |     if (!isLeave) {
145 |       this.dragEntity = createHTMLDndEntity(e.pageX, e.pageY, content, viewId, e.view);
146 |       this.emitter.emit('dragEnd', this.getDragEventData());
147 |     }
148 | 
149 |     this.dragEntityMargin = undefined;
150 |     this.dragEntity = undefined;
151 |     this.dragEntityId = undefined;
152 |     this.dragOrigin = undefined;
153 |     this.dragOriginHitbox = undefined;
154 |     this.dragPosition = undefined;
155 |     this.scrollIntersection = undefined;
156 |     this.primaryIntersection = undefined;
157 | 
158 |     if (isLeave) {
159 |       this.emitter.emit('dragEnd', this.getDragEventData());
160 |     }
161 |   }
162 | 
163 |   onHTMLDragLeave(callback: () => void) {
164 |     this.win.clearTimeout(this.dragOverTimeout);
165 |     this.dragOverTimeout = this.win.setTimeout(callback, 351);
166 |   }
167 | 
168 |   calculateDragIntersect() {
169 |     if (!this.dragEntity || !this.dragPosition || !this.dragOrigin || !this.dragOriginHitbox) {
170 |       return;
171 |     }
172 | 
173 |     const { type, win } = this.dragEntity.getData();
174 | 
175 |     const hitboxEntities: Entity[] = [];
176 |     const hitboxHitboxes: Hitbox[] = [];
177 |     const scrollEntities: Entity[] = [];
178 |     const scrollHitboxes: Hitbox[] = [];
179 | 
180 |     this.hitboxEntities.forEach((entity) => {
181 |       const data = entity.getData();
182 | 
183 |       if (win === data.win && (data.accepts.includes(type) || data.acceptsSort?.includes(type))) {
184 |         hitboxEntities.push(entity);
185 |         hitboxHitboxes.push(entity.getHitbox());
186 |       }
187 |     });
188 | 
189 |     this.scrollEntities.forEach((entity) => {
190 |       const data = entity.getData();
191 | 
192 |       if (win === data.win && data.accepts.includes(type)) {
193 |         scrollEntities.push(entity);
194 |         scrollHitboxes.push(entity.getHitbox());
195 |       }
196 |     });
197 | 
198 |     if (hitboxEntities.length === 0 && scrollEntities.length === 0) {
199 |       return;
200 |     }
201 | 
202 |     const dragHitbox = adjustHitboxForMovement(
203 |       this.dragOriginHitbox,
204 |       this.dragOrigin,
205 |       this.dragPosition
206 |     );
207 | 
208 |     const isScrolling = this.handleScrollIntersect(
209 |       dragHitbox,
210 |       this.dragEntity,
211 |       scrollHitboxes,
212 |       scrollEntities
213 |     );
214 | 
215 |     if (!isScrolling) {
216 |       this.handleHitboxIntersect(dragHitbox, this.dragEntity, hitboxHitboxes, hitboxEntities);
217 |     }
218 |   }
219 | 
220 |   handleScrollIntersect(
221 |     dragHitbox: Hitbox,
222 |     dragEntity: Entity,
223 |     hitboxes: Hitbox[],
224 |     hitboxEntities: Entity[]
225 |   ) {
226 |     const scrollHits: Entity[] = boxIntersect([dragHitbox], hitboxes).map(
227 |       (match) => hitboxEntities[match[1]]
228 |     );
229 | 
230 |     const scrollIntersection = getScrollIntersection(scrollHits, dragHitbox, dragEntity);
231 | 
232 |     if (
233 |       this.scrollIntersection &&
234 |       (!scrollIntersection || scrollIntersection[0] !== this.scrollIntersection[0])
235 |     ) {
236 |       const [scrollEntity, scrollStrength] = this.scrollIntersection;
237 |       const scrollEntityData = scrollEntity.getData();
238 |       const scrollEntityId = scrollEntity.entityId;
239 |       const scrollEntitySide = scrollEntityData.side;
240 | 
241 |       this.emitter.emit(
242 |         'endDragScroll',
243 |         {
244 |           ...this.getDragEventData(),
245 |           scrollEntity,
246 |           scrollEntityId,
247 |           scrollEntitySide,
248 |           scrollStrength,
249 |         },
250 |         scrollEntityId
251 |       );
252 | 
253 |       this.scrollIntersection = undefined;
254 |     }
255 | 
256 |     if (
257 |       scrollIntersection &&
258 |       (!this.scrollIntersection || this.scrollIntersection[0] !== scrollIntersection[0])
259 |     ) {
260 |       const [scrollEntity, scrollStrength] = scrollIntersection;
261 |       const scrollEntityData = scrollEntity.getData();
262 |       const scrollEntityId = scrollEntity.entityId;
263 |       const scrollEntitySide = scrollEntityData.side;
264 | 
265 |       this.emitter.emit(
266 |         'beginDragScroll',
267 |         {
268 |           ...this.getDragEventData(),
269 |           scrollEntity,
270 |           scrollEntityId,
271 |           scrollEntitySide,
272 |           scrollStrength,
273 |         },
274 |         scrollEntityId
275 |       );
276 | 
277 |       this.scrollIntersection = scrollIntersection;
278 |     } else if (
279 |       scrollIntersection &&
280 |       this.scrollIntersection &&
281 |       scrollIntersection[0] === this.scrollIntersection[0]
282 |     ) {
283 |       const [scrollEntity, scrollStrength] = scrollIntersection;
284 |       const scrollEntityData = scrollEntity.getData();
285 |       const scrollEntityId = scrollEntity.entityId;
286 |       const scrollEntitySide = scrollEntityData.side;
287 | 
288 |       this.emitter.emit(
289 |         'updateDragScroll',
290 |         {
291 |           ...this.getDragEventData(),
292 |           scrollEntity,
293 |           scrollEntityId,
294 |           scrollEntitySide,
295 |           scrollStrength,
296 |         },
297 |         scrollEntityId
298 |       );
299 | 
300 |       this.scrollIntersection = scrollIntersection;
301 |     }
302 | 
303 |     return !!scrollIntersection;
304 |   }
305 | 
306 |   handleHitboxIntersect(
307 |     dragHitbox: Hitbox,
308 |     dragEntity: Entity,
309 |     hitboxes: Hitbox[],
310 |     hitboxEntities: Entity[]
311 |   ) {
312 |     const hits: Entity[] = boxIntersect([dragHitbox], hitboxes).map(
313 |       (match) => hitboxEntities[match[1]]
314 |     );
315 | 
316 |     const primaryIntersection = getBestIntersect(hits, dragHitbox, dragEntity);
317 | 
318 |     if (this.primaryIntersection && this.primaryIntersection !== primaryIntersection) {
319 |       this.emitter.emit('dragLeave', this.getDragEventData(), this.primaryIntersection.entityId);
320 |       this.primaryIntersection = undefined;
321 |     }
322 | 
323 |     if (primaryIntersection && this.primaryIntersection !== primaryIntersection) {
324 |       this.emitter.emit(
325 |         'dragEnter',
326 |         {
327 |           ...this.getDragEventData(),
328 |           primaryIntersection,
329 |         },
330 |         primaryIntersection.entityId
331 |       );
332 |       this.primaryIntersection = primaryIntersection;
333 |     }
334 |   }
335 | }
336 | 
337 | const cancelEvent = (e: TouchEvent) => {
338 |   e.preventDefault();
339 |   e.stopPropagation();
340 | };
341 | 
342 | export function useDragHandle(
343 |   droppableElement: RefObject<HTMLElement | null>,
344 |   handleElement: RefObject<HTMLElement | null>
345 | ) {
346 |   const dndManager = useContext(DndManagerContext);
347 |   const unbind = useRef(() => {});
348 | 
349 |   return useCallback((el: HTMLElement) => {
350 |     if (handleElement.current !== el) {
351 |       unbind.current();
352 |       unbind.current = () => {};
353 |     }
354 |     if (!el) return;
355 | 
356 |     const handle = el;
357 |     const onPointerDown = (e: PointerEvent) => {
358 |       if (e.defaultPrevented || !dndManager || !droppableElement.current) return;
359 |       const droppable = droppableElement.current;
360 | 
361 |       let node = e.targetNode;
362 |       while (node) {
363 |         if (node.instanceOf(HTMLElement) && node.dataset.ignoreDrag) {
364 |           return;
365 |         }
366 |         node = node.parentElement;
367 |       }
368 | 
369 |       // We only care about left mouse / touch contact
370 |       // https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#determining_button_states
371 |       if (e.button !== 0 && e.buttons !== 1) {
372 |         return;
373 |       }
374 | 
375 |       const win = e.view;
376 |       const isTouchEvent = ['pen', 'touch'].includes(e.pointerType);
377 |       const pointerId = e.pointerId;
378 | 
379 |       if (!isTouchEvent) {
380 |         e.stopPropagation();
381 |         e.preventDefault();
382 |       }
383 | 
384 |       const initialEvent = e;
385 |       const initialPosition: Coordinates = {
386 |         x: e.pageX,
387 |         y: e.pageY,
388 |       };
389 | 
390 |       let isDragging = false;
391 |       let longPressTimeout = 0;
392 | 
393 |       if (isTouchEvent) {
394 |         win.addEventListener('contextmenu', cancelEvent, true);
395 | 
396 |         longPressTimeout = win.setTimeout(() => {
397 |           dndManager.dragManager.dragStart(initialEvent, droppable);
398 |           isDragging = true;
399 |           win.addEventListener('touchmove', cancelEvent, {
400 |             passive: false,
401 |           });
402 |         }, 500);
403 |       }
404 | 
405 |       const onMove = rafThrottle(win, (e: PointerEvent) => {
406 |         if (e.pointerId !== pointerId) return;
407 |         if (isTouchEvent) {
408 |           if (!isDragging) {
409 |             if (
410 |               distanceBetween(initialPosition, {
411 |                 x: e.pageX,
412 |                 y: e.pageY,
413 |               }) > 5
414 |             ) {
415 |               win.clearTimeout(longPressTimeout);
416 |               win.removeEventListener('touchmove', cancelEvent);
417 |               win.removeEventListener('contextmenu', cancelEvent, true);
418 |               win.removeEventListener('pointermove', onMove);
419 |               win.removeEventListener('pointerup', onEnd);
420 |               win.removeEventListener('pointercancel', onEnd);
421 |             }
422 |           } else {
423 |             dndManager.dragManager.dragMove(e);
424 |           }
425 |         } else {
426 |           if (!isDragging) {
427 |             if (
428 |               distanceBetween(initialPosition, {
429 |                 x: e.pageX,
430 |                 y: e.pageY,
431 |               }) > 5
432 |             ) {
433 |               dndManager.dragManager.dragStart(initialEvent, droppable);
434 |               isDragging = true;
435 |             }
436 |           } else {
437 |             dndManager.dragManager.dragMove(e);
438 |           }
439 |         }
440 |       });
441 | 
442 |       const onEnd = (e: PointerEvent) => {
443 |         if (e.pointerId !== pointerId) return;
444 |         win.clearTimeout(longPressTimeout);
445 |         isDragging = false;
446 | 
447 |         dndManager.dragManager.dragEnd(e);
448 | 
449 |         win.removeEventListener('pointermove', onMove);
450 |         win.removeEventListener('pointerup', onEnd);
451 |         win.removeEventListener('pointercancel', onEnd);
452 | 
453 |         if (isTouchEvent) {
454 |           win.removeEventListener('contextmenu', cancelEvent, true);
455 |           win.removeEventListener('touchmove', cancelEvent);
456 |         }
457 |       };
458 | 
459 |       win.addEventListener('pointermove', onMove);
460 |       win.addEventListener('pointerup', onEnd);
461 |       win.addEventListener('pointercancel', onEnd);
462 |     };
463 | 
464 |     const swallowTouchEvent = (e: TouchEvent) => {
465 |       e.stopPropagation();
466 |     };
467 | 
468 |     handle.addEventListener('pointerdown', onPointerDown);
469 |     handle.addEventListener('touchstart', swallowTouchEvent);
470 | 
471 |     return () => {
472 |       handle.removeEventListener('pointerdown', onPointerDown);
473 |       handle.removeEventListener('touchstart', swallowTouchEvent);
474 |     };
475 |   }, []);
476 | }
477 | 
478 | export function createHTMLDndHandlers(stateManager: StateManager) {
479 |   const dndManager = useContext(DndManagerContext);
480 |   const onDragOver = useCallback(
481 |     (e: DragEvent) => {
482 |       if (dndManager.dragManager.isHTMLDragging) {
483 |         e.preventDefault();
484 |         dndManager.dragManager.dragMoveHTML(e);
485 |       } else {
486 |         dndManager.dragManager.dragStartHTML(e, stateManager.getAView().id);
487 |       }
488 | 
489 |       dndManager.dragManager.onHTMLDragLeave(() => {
490 |         dndManager.dragManager.dragEndHTML(e, stateManager.getAView().id, [], true);
491 |       });
492 |     },
493 |     [dndManager, stateManager]
494 |   );
495 | 
496 |   const onDrop = useCallback(
497 |     async (e: DragEvent) => {
498 |       dndManager.dragManager.dragEndHTML(
499 |         e,
500 |         stateManager.getAView().id,
501 |         await handleDragOrPaste(stateManager, e, activeWindow as Window & typeof globalThis),
502 |         false
503 |       );
504 |     },
505 |     [dndManager, stateManager]
506 |   );
507 | 
508 |   return {
509 |     onDragOver,
510 |     onDrop,
511 |   };
512 | }
513 | 


--------------------------------------------------------------------------------
/src/dnd/managers/EntityManager.ts:
--------------------------------------------------------------------------------
  1 | import EventEmitter from 'eventemitter3';
  2 | import { RefObject } from 'preact/compat';
  3 | import { generateInstanceId } from 'src/components/helpers';
  4 | 
  5 | import { Entity, EntityData, Path, initialScrollShift, initialScrollState } from '../types';
  6 | import { getParentWindow } from '../util/getWindow';
  7 | import { adjustHitbox, calculateHitbox, emptyDomRect } from '../util/hitbox';
  8 | import { DndManager } from './DndManager';
  9 | import { ScrollManager } from './ScrollManager';
 10 | import { SortManager } from './SortManager';
 11 | 
 12 | interface Child {
 13 |   manager: EntityManager;
 14 |   entity: Entity;
 15 | }
 16 | 
 17 | export class EntityManager {
 18 |   children: Map<string, Child>;
 19 |   dndManager: DndManager;
 20 |   entityNode: HTMLElement;
 21 |   measureNode: HTMLElement;
 22 |   getEntityData: () => EntityData;
 23 |   index: number;
 24 |   parent: EntityManager | null;
 25 |   scrollParent: ScrollManager | null;
 26 |   sortManager: SortManager | null;
 27 |   isVisible: boolean = false;
 28 |   mounted: boolean = false;
 29 | 
 30 |   id: string;
 31 |   instanceId: string;
 32 |   entityId: string;
 33 |   scopeId: string;
 34 |   emitter: EventEmitter;
 35 | 
 36 |   constructor(
 37 |     dndManager: DndManager,
 38 |     scopeId: string,
 39 |     id: string,
 40 |     index: number,
 41 |     parent: EntityManager | null,
 42 |     scrollParent: ScrollManager | null,
 43 |     sortManager: SortManager | null,
 44 |     data: RefObject<EntityData>
 45 |   ) {
 46 |     this.id = id;
 47 |     this.instanceId = generateInstanceId();
 48 |     this.scopeId = scopeId;
 49 |     this.entityId = `${scopeId}-${id}`;
 50 |     this.emitter = new EventEmitter();
 51 | 
 52 |     this.dndManager = dndManager;
 53 |     this.index = index;
 54 |     this.children = new Map();
 55 |     this.parent = parent;
 56 |     this.scrollParent = scrollParent;
 57 |     this.getEntityData = () => data.current;
 58 |     this.sortManager = sortManager;
 59 |   }
 60 | 
 61 |   initNodes(entityNode: HTMLElement, measureNode: HTMLElement) {
 62 |     this.mounted = true;
 63 |     this.entityNode = entityNode;
 64 |     this.measureNode = measureNode;
 65 | 
 66 |     measureNode.dataset.hitboxid = this.entityId;
 67 |     this.sortManager?.registerSortable(
 68 |       this.entityId,
 69 |       this.getEntity(emptyDomRect),
 70 |       entityNode,
 71 |       measureNode
 72 |     );
 73 | 
 74 |     if (this.scrollParent) {
 75 |       this.scrollParent.registerObserverHandler(this.entityId, measureNode, (entry) => {
 76 |         const win = getParentWindow(entry.target);
 77 | 
 78 |         if (entry.isIntersecting) {
 79 |           const entity = this.getEntity(entry.boundingClientRect);
 80 |           this.parent?.children.set(this.entityId, {
 81 |             entity,
 82 |             manager: this,
 83 |           });
 84 | 
 85 |           this.dndManager.observeResize(measureNode);
 86 | 
 87 |           if (!this.parent || this.parent.isVisible) {
 88 |             this.dndManager.registerHitboxEntity(this.entityId, entity, win);
 89 |             this.children.forEach((child, childId) => {
 90 |               this.dndManager.registerHitboxEntity(childId, child.entity, win);
 91 |             });
 92 |             this.setVisibility(true);
 93 |           }
 94 |         } else {
 95 |           this.dndManager.unregisterHitboxEntity(this.entityId, win);
 96 |           this.children.forEach((_, childId) => {
 97 |             this.dndManager.unregisterHitboxEntity(childId, win);
 98 |           });
 99 |           this.parent?.children.delete(this.entityId);
100 |           this.dndManager.unobserveResize(measureNode);
101 |           this.setVisibility(false);
102 |         }
103 |       });
104 |     } else {
105 |       const entity = this.getEntity(measureNode.getBoundingClientRect());
106 |       this.dndManager.observeResize(measureNode);
107 |       this.dndManager.registerHitboxEntity(this.entityId, entity, getParentWindow(entityNode));
108 |       this.parent?.children.set(this.entityId, {
109 |         entity,
110 |         manager: this,
111 |       });
112 |       this.setVisibility(true);
113 |     }
114 |   }
115 | 
116 |   setVisibility(isVisible: boolean) {
117 |     this.emitter.emit('visibility-change', isVisible);
118 |     this.isVisible = isVisible;
119 |     this.children.forEach((child) => {
120 |       child.manager.setVisibility(isVisible);
121 |     });
122 |   }
123 | 
124 |   destroy() {
125 |     if (!this.mounted) return;
126 |     this.mounted = true;
127 |     this.dndManager.unobserveResize(this.measureNode);
128 |     this.sortManager?.unregisterSortable(this.entityId);
129 |     this.scrollParent?.unregisterObserverHandler(this.entityId, this.measureNode);
130 |     if (this.entityNode) {
131 |       this.dndManager.unregisterHitboxEntity(this.entityId, getParentWindow(this.entityNode));
132 |     }
133 |     this.parent?.children.delete(this.entityId);
134 |   }
135 | 
136 |   getPath(): Path {
137 |     return [...(this.parent?.getPath() || []), this.index];
138 |   }
139 | 
140 |   getEntity(rect: DOMRectReadOnly): Entity {
141 |     const manager = this;
142 |     return {
143 |       scopeId: this.scopeId,
144 |       entityId: this.entityId,
145 |       initial: calculateHitbox(
146 |         rect,
147 |         manager.scrollParent?.scrollState || initialScrollState,
148 |         manager.scrollParent?.getScrollShift() || initialScrollShift,
149 |         null
150 |       ),
151 |       getParentScrollState() {
152 |         return manager.scrollParent?.scrollState || initialScrollState;
153 |       },
154 |       getParentScrollShift() {
155 |         return manager.scrollParent?.getScrollShift() || initialScrollShift;
156 |       },
157 |       recalcInitial() {
158 |         this.initial = calculateHitbox(
159 |           manager.measureNode.getBoundingClientRect(),
160 |           manager.scrollParent?.scrollState || initialScrollState,
161 |           manager.scrollParent?.getScrollShift() || initialScrollShift,
162 |           null
163 |         );
164 |       },
165 |       getHitbox() {
166 |         return adjustHitbox(
167 |           this.initial[0],
168 |           this.initial[1],
169 |           this.initial[2],
170 |           this.initial[3],
171 |           this.getParentScrollState(),
172 |           this.getParentScrollShift()
173 |         );
174 |       },
175 |       getPath() {
176 |         return manager.getPath();
177 |       },
178 |       getData() {
179 |         return {
180 |           ...manager.getEntityData(),
181 |           sortAxis: manager.sortManager?.axis,
182 |           win: getParentWindow(manager.measureNode),
183 |         };
184 |       },
185 |     };
186 |   }
187 | }
188 | 


--------------------------------------------------------------------------------
/src/dnd/managers/ScrollManager.ts:
--------------------------------------------------------------------------------
  1 | import { generateInstanceId } from 'src/components/helpers';
  2 | 
  3 | import {
  4 |   CoordinateShift,
  5 |   Entity,
  6 |   Path,
  7 |   ScrollState,
  8 |   Side,
  9 |   initialScrollShift,
 10 |   initialScrollState,
 11 | } from '../types';
 12 | import { getParentWindow } from '../util/getWindow';
 13 | import {
 14 |   adjustHitbox,
 15 |   calculateScrollHitbox,
 16 |   getElementScrollOffsets,
 17 |   numberOrZero,
 18 | } from '../util/hitbox';
 19 | import { DndManager } from './DndManager';
 20 | import { ScrollEventData } from './DragManager';
 21 | 
 22 | export type IntersectionObserverHandler = (entry: IntersectionObserverEntry) => void;
 23 | 
 24 | export const scrollContainerEntityType = 'scroll-container';
 25 | 
 26 | const scrollStrengthModifier = 8;
 27 | 
 28 | const sides: Side[] = ['top', 'right', 'bottom', 'left'];
 29 | 
 30 | export class ScrollManager {
 31 |   dndManager: DndManager;
 32 |   instanceId: string;
 33 |   scopeId: string;
 34 |   triggerTypes: string[];
 35 |   scrollState: ScrollState;
 36 |   scrollEl: HTMLElement;
 37 |   parent: ScrollManager | null;
 38 | 
 39 |   observer: IntersectionObserver;
 40 |   observerHandlers: Map<string, IntersectionObserverHandler>;
 41 | 
 42 |   top: Entity;
 43 |   right: Entity;
 44 |   bottom: Entity;
 45 |   left: Entity;
 46 | 
 47 |   scrollFrame: number = 0;
 48 |   activeScroll: Map<Side, number>;
 49 | 
 50 |   constructor(
 51 |     dndManager: DndManager,
 52 |     scopeId: string,
 53 |     triggerTypes: string[],
 54 |     parent: ScrollManager | null
 55 |   ) {
 56 |     this.dndManager = dndManager;
 57 |     this.instanceId = generateInstanceId();
 58 |     this.scopeId = scopeId;
 59 |     this.triggerTypes = triggerTypes;
 60 |     this.scrollState = initialScrollState;
 61 |     this.parent = parent;
 62 |     this.activeScroll = new Map();
 63 |     this.observerHandlers = new Map();
 64 |   }
 65 | 
 66 |   initNodes(scrollEl: HTMLElement) {
 67 |     this.scrollEl = scrollEl;
 68 |     this.scrollEl.dataset.hitboxid = this.instanceId;
 69 |     this.scrollEl.dataset.scrollid = this.instanceId;
 70 | 
 71 |     this.top = this.createScrollEntity('top');
 72 |     this.right = this.createScrollEntity('right');
 73 |     this.bottom = this.createScrollEntity('bottom');
 74 |     this.left = this.createScrollEntity('left');
 75 | 
 76 |     this.bindScrollHandlers();
 77 | 
 78 |     this.observer = new IntersectionObserver(
 79 |       (entries) => {
 80 |         entries.forEach((entry) => {
 81 |           const targetId = (entry.target as HTMLElement).dataset?.hitboxid;
 82 | 
 83 |           if (targetId && this.observerHandlers.has(targetId)) {
 84 |             const handler = this.observerHandlers.get(targetId);
 85 |             handler && handler(entry);
 86 |           }
 87 |         });
 88 |       },
 89 |       {
 90 |         root: scrollEl,
 91 |         threshold: 0.1,
 92 |       }
 93 |     );
 94 | 
 95 |     const { observerQueue } = this;
 96 |     this.observerQueue = [];
 97 | 
 98 |     observerQueue.forEach(([id, element, handler]) => {
 99 |       this.observerHandlers.set(id, handler);
100 |       this.observer.observe(element);
101 |     });
102 | 
103 |     this.scrollEl.addEventListener('scroll', this.onScroll, {
104 |       passive: true,
105 |       capture: false,
106 |     });
107 | 
108 |     this.dndManager.emitter.on('scrollResize', this.onScroll);
109 | 
110 |     this.scrollEl.win.setTimeout(() => this.onScroll());
111 |     this.dndManager.observeResize(this.scrollEl);
112 | 
113 |     if (this.parent) {
114 |       this.parent.registerObserverHandler(this.instanceId, this.scrollEl, (entry) => {
115 |         if (entry.isIntersecting) {
116 |           this.handleEntityRegistration();
117 |         } else {
118 |           this.handleEntityUnregistration();
119 |         }
120 |       });
121 |     } else {
122 |       this.handleEntityRegistration();
123 |     }
124 |   }
125 | 
126 |   destroy() {
127 |     if (!this.scrollEl && !this.observer) return;
128 | 
129 |     this.observerQueue.length = 0;
130 |     this.handleEntityUnregistration();
131 |     this.observer.disconnect();
132 |     this.unbindScrollHandlers();
133 |     this.scrollEl.removeEventListener('scroll', this.onScroll);
134 |     this.dndManager.emitter.off('scrollResize', this.onScroll);
135 |     this.parent?.unregisterObserverHandler(this.instanceId, this.scrollEl);
136 |     this.dndManager.unobserveResize(this.scrollEl);
137 |   }
138 | 
139 |   handleEntityRegistration() {
140 |     sides.forEach((side) => {
141 |       const win = getParentWindow(this.scrollEl);
142 |       const id = this.getId(side);
143 | 
144 |       const hasId = this.dndManager.scrollEntities.has(id);
145 |       const isDoneScrolling = this.isDoneScrolling(side);
146 | 
147 |       if (!isDoneScrolling && !hasId) {
148 |         this.dndManager.registerScrollEntity(id, this[side], win);
149 |       } else if (isDoneScrolling && hasId) {
150 |         this.dndManager.unregisterScrollEntity(id, win);
151 |       }
152 |     });
153 |   }
154 | 
155 |   handleEntityUnregistration() {
156 |     sides.forEach((side) => {
157 |       const win = getParentWindow(this.scrollEl);
158 |       const id = this.getId(side);
159 |       this.dndManager.unregisterScrollEntity(id, win);
160 |     });
161 |   }
162 | 
163 |   observerQueue: [string, HTMLElement, IntersectionObserverHandler][] = [];
164 | 
165 |   registerObserverHandler(id: string, element: HTMLElement, handler: IntersectionObserverHandler) {
166 |     if (!this.observer) {
167 |       this.observerQueue.push([id, element, handler]);
168 |     } else {
169 |       this.observerHandlers.set(id, handler);
170 |       this.observer.observe(element);
171 |     }
172 |   }
173 | 
174 |   unregisterObserverHandler(id: string, element: HTMLElement) {
175 |     if (!this.observer) {
176 |       this.observerQueue = this.observerQueue.filter((q) => q[0] !== id);
177 |     } else {
178 |       this.observerHandlers.delete(id);
179 |       this.observer.unobserve(element);
180 |     }
181 |   }
182 | 
183 |   bindScrollHandlers() {
184 |     sides.forEach((side) => {
185 |       const id = this.getId(side);
186 |       this.dndManager.dragManager.emitter.on('beginDragScroll', this.handleBeginDragScroll, id);
187 |       this.dndManager.dragManager.emitter.on('updateDragScroll', this.handleUpdateDragScroll, id);
188 |       this.dndManager.dragManager.emitter.on('endDragScroll', this.handleEndDragScroll, id);
189 |       this.dndManager.dragManager.emitter.on('dragEnd', this.onDragEnd);
190 |     });
191 |   }
192 | 
193 |   unbindScrollHandlers() {
194 |     sides.forEach((side) => {
195 |       const id = this.getId(side);
196 |       this.dndManager.dragManager.emitter.off('beginDragScroll', this.handleBeginDragScroll, id);
197 |       this.dndManager.dragManager.emitter.off('updateDragScroll', this.handleUpdateDragScroll, id);
198 |       this.dndManager.dragManager.emitter.off('endDragScroll', this.handleEndDragScroll, id);
199 |       this.dndManager.dragManager.emitter.off('dragEnd', this.onDragEnd);
200 |     });
201 |   }
202 | 
203 |   onScroll = () => {
204 |     if (this.activeScroll.size === 0) {
205 |       this.scrollState = getElementScrollOffsets(this.scrollEl);
206 |       this.handleEntityRegistration();
207 |     }
208 |   };
209 | 
210 |   onDragEnd = () => {
211 |     this.activeScroll.clear();
212 |   };
213 | 
214 |   handleBeginDragScroll = ({ scrollEntitySide, scrollStrength }: ScrollEventData) => {
215 |     if (this.isDoneScrolling(scrollEntitySide)) return;
216 | 
217 |     this.activeScroll.set(scrollEntitySide, scrollStrength);
218 |     this.handleDragScroll();
219 |   };
220 | 
221 |   handleUpdateDragScroll = ({ scrollEntitySide, scrollStrength }: ScrollEventData) => {
222 |     if (this.isDoneScrolling(scrollEntitySide)) return;
223 | 
224 |     this.activeScroll.set(scrollEntitySide, scrollStrength);
225 |   };
226 | 
227 |   handleEndDragScroll = ({ scrollEntitySide }: ScrollEventData) => {
228 |     this.activeScroll.delete(scrollEntitySide);
229 |   };
230 | 
231 |   isDoneScrolling(side: Side) {
232 |     switch (side) {
233 |       case 'top':
234 |         return this.scrollState.y === 0;
235 |       case 'right':
236 |         return this.scrollState.x === this.scrollState.maxX;
237 |       case 'bottom':
238 |         return this.scrollState.y === this.scrollState.maxY;
239 |       case 'left':
240 |         return this.scrollState.x === 0;
241 |     }
242 |   }
243 | 
244 |   handleDragScroll() {
245 |     if (this.activeScroll.size === 0) {
246 |       return;
247 |     }
248 | 
249 |     this.scrollEl.win.requestAnimationFrame(() => {
250 |       const scrollBy = {
251 |         left: 0,
252 |         top: 0,
253 |       };
254 | 
255 |       this.activeScroll.forEach((strength, side) => {
256 |         if (this.isDoneScrolling(side)) {
257 |           return this.activeScroll.delete(side);
258 |         }
259 | 
260 |         const scrollKey = ['left', 'right'].includes(side) ? 'left' : 'top';
261 |         const shouldIncreaseScroll = ['right', 'bottom'].includes(side);
262 | 
263 |         scrollBy[scrollKey] = shouldIncreaseScroll
264 |           ? Math.max(scrollStrengthModifier - (scrollStrengthModifier * strength) / 35, 0)
265 |           : Math.min(-scrollStrengthModifier + (scrollStrengthModifier * strength) / 35, 0);
266 |       });
267 | 
268 |       this.scrollEl.scrollBy(scrollBy);
269 |       this.scrollState = getElementScrollOffsets(this.scrollEl);
270 |       this.handleEntityRegistration();
271 |       this.handleDragScroll();
272 |     });
273 |   }
274 | 
275 |   getId(side: Side) {
276 |     return `${this.instanceId}-${side}`;
277 |   }
278 | 
279 |   getPath(side?: Side): Path {
280 |     switch (side) {
281 |       case 'right':
282 |         return [...(this.parent?.getPath() || []), 1];
283 |       case 'bottom':
284 |         return [...(this.parent?.getPath() || []), 2];
285 |       case 'left':
286 |         return [...(this.parent?.getPath() || []), 3];
287 |     }
288 | 
289 |     // top
290 |     return [...(this.parent?.getPath() || []), 0];
291 |   }
292 | 
293 |   getScrollShift(): CoordinateShift {
294 |     const parentShift = this.parent?.getScrollShift();
295 | 
296 |     return {
297 |       x: numberOrZero(this.parent?.scrollState.x) + numberOrZero(parentShift?.x),
298 |       y: numberOrZero(this.parent?.scrollState.y) + numberOrZero(parentShift?.y),
299 |     };
300 |   }
301 | 
302 |   createScrollEntity(side: Side): Entity {
303 |     const manager = this;
304 | 
305 |     return {
306 |       scopeId: this.scopeId,
307 |       entityId: manager.getId(side),
308 |       initial: calculateScrollHitbox(
309 |         this.scrollEl.getBoundingClientRect(),
310 |         this.parent?.scrollState || initialScrollState,
311 |         this.parent?.getScrollShift() || initialScrollShift,
312 |         side
313 |       ),
314 |       getParentScrollState() {
315 |         return manager.parent?.scrollState || initialScrollState;
316 |       },
317 |       getParentScrollShift() {
318 |         return manager.parent?.getScrollShift() || initialScrollShift;
319 |       },
320 |       recalcInitial() {
321 |         this.initial = calculateScrollHitbox(
322 |           manager.scrollEl.getBoundingClientRect(),
323 |           manager.parent?.scrollState || initialScrollState,
324 |           manager.parent?.getScrollShift() || initialScrollShift,
325 |           side
326 |         );
327 |       },
328 |       getHitbox() {
329 |         return adjustHitbox(
330 |           this.initial[0],
331 |           this.initial[1],
332 |           this.initial[2],
333 |           this.initial[3],
334 |           this.getParentScrollState(),
335 |           this.getParentScrollShift()
336 |         );
337 |       },
338 |       getPath() {
339 |         return manager.getPath(side);
340 |       },
341 |       getData() {
342 |         return {
343 |           id: manager.getId(side),
344 |           type: scrollContainerEntityType,
345 |           side: side,
346 |           accepts: manager.triggerTypes || [],
347 |           scrollContainer: manager.scrollEl,
348 |           win: getParentWindow(manager.scrollEl),
349 |         };
350 |       },
351 |     };
352 |   }
353 | }
354 | 


--------------------------------------------------------------------------------
/src/dnd/managers/ScrollStateManager.ts:
--------------------------------------------------------------------------------
 1 | import { CoordinateShift, initialScrollState } from '../types';
 2 | 
 3 | export class ScrollStateManager {
 4 |   scrollStates: Map<string, CoordinateShift>;
 5 |   idScopes: Map<string, Set<string>>;
 6 | 
 7 |   constructor() {
 8 |     this.scrollStates = new Map();
 9 |     this.idScopes = new Map();
10 |   }
11 | 
12 |   setScrollState(scopeId: string, id: string, state: CoordinateShift) {
13 |     this.scrollStates.set(id, state);
14 | 
15 |     if (this.idScopes.has(id)) {
16 |       const scopes = this.idScopes.get(id);
17 | 
18 |       if (!scopes.has(scopeId)) {
19 |         scopes.add(scopeId);
20 |       }
21 |     } else {
22 |       this.idScopes.set(id, new Set([scopeId]));
23 |     }
24 |   }
25 | 
26 |   getScrollState(id: string): CoordinateShift {
27 |     if (this.scrollStates.has(id)) {
28 |       return this.scrollStates.get(id);
29 |     }
30 | 
31 |     return initialScrollState;
32 |   }
33 | 
34 |   unmountScope(scopeId: string) {
35 |     const toRemove: string[] = [];
36 | 
37 |     this.idScopes.forEach((scopes, id) => {
38 |       if (scopes.has(scopeId)) {
39 |         scopes.delete(scopeId);
40 |         if (scopes.size === 0) {
41 |           toRemove.push(id);
42 |         }
43 |       }
44 |     });
45 | 
46 |     toRemove.forEach((id) => {
47 |       this.idScopes.delete(id);
48 |       this.scrollStates.delete(id);
49 |     });
50 |   }
51 | }
52 | 


--------------------------------------------------------------------------------
/src/dnd/managers/SortManager.ts:
--------------------------------------------------------------------------------
  1 | import { generateInstanceId } from 'src/components/helpers';
  2 | 
  3 | import { Axis, Entity } from '../types';
  4 | import { getDropDuration, removeStyle, setStyle, transitions } from '../util/animation';
  5 | import { getHitboxDimensions } from '../util/hitbox';
  6 | import { SiblingDirection, getSiblingDirection } from '../util/path';
  7 | import { DndManager } from './DndManager';
  8 | import { DragEventData } from './DragManager';
  9 | 
 10 | type EntityAndElement = [Entity, HTMLElement, HTMLElement];
 11 | 
 12 | interface Dimensions {
 13 |   width: number;
 14 |   height: number;
 15 | }
 16 | 
 17 | const emptyDimensions: Dimensions = {
 18 |   width: 0,
 19 |   height: 0,
 20 | };
 21 | 
 22 | export const dragLeaveDebounceLength = 100;
 23 | 
 24 | export class SortManager {
 25 |   dndManager: DndManager;
 26 |   sortables: Map<string, EntityAndElement>;
 27 |   shifted: Set<string>;
 28 |   hidden: Set<string>;
 29 |   isSorting: boolean;
 30 |   isPlaceholderActive: boolean;
 31 |   axis: Axis;
 32 |   placeholder: EntityAndElement | null;
 33 |   instanceId: string;
 34 | 
 35 |   sortListeners: Array<(isSorting: boolean) => void>;
 36 | 
 37 |   constructor(dndManager: DndManager, axis: Axis, onSortChange?: (isSorting: boolean) => void) {
 38 |     this.instanceId = generateInstanceId();
 39 |     this.dndManager = dndManager;
 40 |     this.sortables = new Map();
 41 |     this.shifted = new Set();
 42 |     this.hidden = new Set();
 43 |     this.isSorting = false;
 44 |     this.axis = axis;
 45 |     this.placeholder = null;
 46 |     this.sortListeners = onSortChange ? [onSortChange] : [];
 47 | 
 48 |     dndManager.dragManager.emitter.on('dragStart', this.handleDragStart);
 49 |     dndManager.dragManager.emitter.on('dragEnd', this.handleDragEnd);
 50 |     dndManager.dragManager.emitter.on('dragEnter', this.handleDragEnter);
 51 |     dndManager.dragManager.emitter.on('dragLeave', this.handleDragLeave);
 52 |   }
 53 | 
 54 |   destroy() {
 55 |     this.dndManager.win.clearTimeout(this.dragLeaveTimeout);
 56 |     this.dndManager.win.clearTimeout(this.dragEndTimeout);
 57 | 
 58 |     this.dndManager.dragManager.emitter.off('dragStart', this.handleDragStart);
 59 |     this.dndManager.dragManager.emitter.off('dragEnd', this.handleDragEnd);
 60 |     this.dndManager.dragManager.emitter.off('dragEnter', this.handleDragEnter);
 61 |     this.dndManager.dragManager.emitter.off('dragLeave', this.handleDragLeave);
 62 |   }
 63 | 
 64 |   registerSortable(id: string, entity: Entity, el: HTMLElement, measureEl: HTMLElement) {
 65 |     const type = entity.getData().type;
 66 | 
 67 |     this.sortables.set(id, [entity, el, measureEl]);
 68 | 
 69 |     if (type === 'placeholder') {
 70 |       this.placeholder = [entity, el, measureEl];
 71 |       measureEl.dataset.axis = this.axis;
 72 |       setStyle(measureEl, 'transition', transitions.none);
 73 |     } else {
 74 |       setStyle(el, 'transition', transitions.none);
 75 |     }
 76 |   }
 77 | 
 78 |   unregisterSortable(id: string) {
 79 |     this.sortables.delete(id);
 80 |   }
 81 | 
 82 |   hitboxDimensions = emptyDimensions;
 83 | 
 84 |   handleDragStart = ({ dragEntity, dragEntityMargin, dragOriginHitbox }: DragEventData) => {
 85 |     const id = dragEntity?.entityId;
 86 |     const haveDragEntity = id ? this.sortables.has(id) : null;
 87 | 
 88 |     if (!dragEntity || !haveDragEntity || !dragOriginHitbox) {
 89 |       return;
 90 |     }
 91 | 
 92 |     this.setSortState(true);
 93 |     this.hitboxDimensions = getHitboxDimensions(dragOriginHitbox, dragEntityMargin);
 94 |     this.activatePlaceholder(this.hitboxDimensions, transitions.none);
 95 | 
 96 |     this.sortables.forEach(([entity, el, measureEl]) => {
 97 |       const siblingDirection = getSiblingDirection(dragEntity.getPath(), entity.getPath());
 98 |       const entityId = entity.entityId;
 99 | 
100 |       if (siblingDirection === SiblingDirection.Self) {
101 |         this.hidden.add(entityId);
102 |         return this.hideDraggingEntity(measureEl);
103 |       }
104 | 
105 |       if (siblingDirection === SiblingDirection.After) {
106 |         if (!this.shifted.has(entityId)) {
107 |           this.shifted.add(entityId);
108 |         }
109 | 
110 |         this.shiftEl(el, transitions.none, this.hitboxDimensions);
111 |       }
112 |     });
113 |   };
114 | 
115 |   resetSelf({
116 |     maintainHidden,
117 |     maintainPlaceholder,
118 |     shiftTransition,
119 |     placeholderTransition,
120 |   }: {
121 |     maintainHidden?: boolean;
122 |     maintainPlaceholder?: boolean;
123 |     shiftTransition?: string;
124 |     placeholderTransition?: string;
125 |   }) {
126 |     if (this.isSorting) {
127 |       this.setSortState(false);
128 |     }
129 | 
130 |     if (this.isPlaceholderActive && !maintainPlaceholder) {
131 |       this.deactivatePlaceholder(placeholderTransition);
132 |     }
133 | 
134 |     if (this.shifted.size > 0) {
135 |       this.shifted.forEach((entityId) => {
136 |         if (this.sortables.has(entityId)) {
137 |           const [, el] = this.sortables.get(entityId);
138 |           this.resetEl(el, shiftTransition);
139 |         }
140 |       });
141 | 
142 |       this.shifted.clear();
143 |     }
144 | 
145 |     if (!maintainHidden && this.hidden.size > 0) {
146 |       this.hidden.forEach((entityId) => {
147 |         if (this.sortables.has(entityId)) {
148 |           const [, , measure] = this.sortables.get(entityId);
149 |           this.resetEl(measure, shiftTransition);
150 |         }
151 |       });
152 | 
153 |       this.hidden.clear();
154 |     }
155 |   }
156 | 
157 |   private dragEndTimeout = 0;
158 |   handleDragEnd = ({
159 |     primaryIntersection,
160 |     dragPosition,
161 |     dragOriginHitbox,
162 |     dragEntity,
163 |   }: DragEventData) => {
164 |     const resetDroparea = () => {
165 |       if (primaryIntersection && dragEntity) {
166 |         const { acceptsSort } = primaryIntersection.getData();
167 |         const inDroparea = acceptsSort && !acceptsSort.includes(dragEntity.getData().type);
168 |         if (inDroparea) {
169 |           const sortable = this.sortables.get(primaryIntersection.entityId);
170 |           if (sortable) sortable[2].removeClass('is-dropping');
171 |         }
172 |       }
173 |     };
174 | 
175 |     if (!this.isSorting || !dragPosition || !dragOriginHitbox || !dragEntity) {
176 |       resetDroparea();
177 | 
178 |       if (!primaryIntersection && dragEntity && this.sortables.has(dragEntity.entityId)) {
179 |         return this.resetSelf({ maintainHidden: false });
180 |       }
181 | 
182 |       if (primaryIntersection && dragEntity) {
183 |         const dropHitbox = primaryIntersection?.getHitbox() || dragOriginHitbox;
184 |         const dropDuration = getDropDuration({
185 |           position: dragPosition,
186 |           destination: {
187 |             x: dropHitbox[0],
188 |             y: dropHitbox[1],
189 |           },
190 |         });
191 | 
192 |         return this.dndManager.win.setTimeout(() => {
193 |           this.resetSelf({ maintainHidden: false });
194 |         }, dropDuration);
195 |       }
196 | 
197 |       return this.resetSelf({ maintainHidden: true });
198 |     }
199 | 
200 |     const { win } = this.dndManager;
201 |     win.clearTimeout(this.dragEnterTimeout);
202 |     win.clearTimeout(this.dragLeaveTimeout);
203 |     win.clearTimeout(this.dragEndTimeout);
204 | 
205 |     const dropHitbox = primaryIntersection?.getHitbox() || dragOriginHitbox;
206 |     const dropDuration =
207 |       dragEntity.scopeId === 'htmldnd'
208 |         ? 0
209 |         : getDropDuration({
210 |             position: dragPosition,
211 |             destination: {
212 |               x: dropHitbox[0],
213 |               y: dropHitbox[1],
214 |             },
215 |           });
216 | 
217 |     this.dragEndTimeout = win.setTimeout(() => {
218 |       const dragEntityId = dragEntity.entityId.split(':::').pop();
219 |       const primaryIntersectionId = primaryIntersection?.entityId.split(':::').pop();
220 | 
221 |       resetDroparea();
222 | 
223 |       if (
224 |         primaryIntersection &&
225 |         this.sortables.has(primaryIntersection.entityId) &&
226 |         primaryIntersectionId !== dragEntityId
227 |       ) {
228 |         this.dndManager.onDrop(dragEntity, primaryIntersection);
229 |       }
230 | 
231 |       this.resetSelf({
232 |         maintainHidden: false,
233 |         shiftTransition: transitions.none,
234 |         placeholderTransition: transitions.none,
235 |       });
236 |     }, dropDuration);
237 | 
238 |     this.hitboxDimensions = emptyDimensions;
239 |   };
240 | 
241 |   private dragEnterTimeout = 0;
242 |   handleDragEnter = ({
243 |     dragEntity,
244 |     dragEntityMargin,
245 |     dragOriginHitbox,
246 |     primaryIntersection,
247 |   }: DragEventData) => {
248 |     const id = primaryIntersection?.entityId;
249 |     const haveSortable = id ? this.sortables.has(id) : null;
250 | 
251 |     if (!dragEntity || !primaryIntersection || !haveSortable || !dragOriginHitbox) {
252 |       if (!haveSortable && this.isSorting) {
253 |         this.resetSelf({ maintainHidden: true, maintainPlaceholder: true });
254 |       }
255 | 
256 |       return;
257 |     }
258 | 
259 |     if (dragEntity.entityId === primaryIntersection.entityId) {
260 |       return;
261 |     }
262 | 
263 |     const { win } = this.dndManager;
264 | 
265 |     win.clearTimeout(this.dragLeaveTimeout);
266 |     win.clearTimeout(this.dragEnterTimeout);
267 | 
268 |     this.dragEnterTimeout = win.setTimeout(() => {
269 |       const dims = (this.hitboxDimensions = getHitboxDimensions(
270 |         dragOriginHitbox,
271 |         dragEntityMargin
272 |       ));
273 |       this.setSortState(true);
274 |       this.activatePlaceholder(dims, transitions.placeholder);
275 | 
276 |       const { acceptsSort } = primaryIntersection.getData();
277 |       const inDroparea = acceptsSort && !acceptsSort.includes(dragEntity.getData().type);
278 | 
279 |       if (inDroparea) {
280 |         const sortable = this.sortables.get(primaryIntersection.entityId);
281 |         if (sortable) sortable[2].addClass('is-dropping');
282 | 
283 |         this.sortables.forEach(([entity, el]) => {
284 |           const entityId = entity.entityId;
285 |           if (this.shifted.has(entityId)) {
286 |             this.shifted.delete(entityId);
287 |             this.resetEl(el);
288 |           }
289 |         });
290 |         return;
291 |       }
292 | 
293 |       this.sortables.forEach(([entity, el]) => {
294 |         const siblingDirection = getSiblingDirection(
295 |           primaryIntersection.getPath(),
296 |           entity.getPath()
297 |         );
298 | 
299 |         const entityId = entity.entityId;
300 | 
301 |         if (
302 |           !this.hidden.has(entityId) &&
303 |           (siblingDirection === SiblingDirection.Self ||
304 |             siblingDirection === SiblingDirection.After)
305 |         ) {
306 |           if (!this.shifted.has(entityId)) {
307 |             this.shifted.add(entityId);
308 |             this.shiftEl(el, transitions.outOfTheWay, dims);
309 |           }
310 |         } else if (this.shifted.has(entityId)) {
311 |           this.shifted.delete(entityId);
312 |           this.resetEl(el);
313 |         }
314 |       });
315 |     }, 10);
316 |   };
317 | 
318 |   private dragLeaveTimeout = 0;
319 |   handleDragLeave = ({ dragEntity, primaryIntersection }: DragEventData) => {
320 |     if (!this.isSorting) return;
321 | 
322 |     const { acceptsSort } = primaryIntersection.getData();
323 |     const inDroparea = acceptsSort && !acceptsSort.includes(dragEntity.getData().type);
324 |     if (inDroparea) {
325 |       const sortable = this.sortables.get(primaryIntersection.entityId);
326 |       if (sortable) sortable[2].removeClass('is-dropping');
327 |     }
328 | 
329 |     const { win } = this.dndManager;
330 |     win.clearTimeout(this.dragLeaveTimeout);
331 |     win.clearTimeout(this.dragEnterTimeout);
332 |     this.dragLeaveTimeout = win.setTimeout(() => {
333 |       this.resetSelf({ maintainHidden: true, maintainPlaceholder: true });
334 |     }, dragLeaveDebounceLength);
335 | 
336 |     this.hitboxDimensions = emptyDimensions;
337 |   };
338 | 
339 |   activatePlaceholder(dimensions: { width: number; height: number }, transition: string) {
340 |     if (this.placeholder) {
341 |       const isHorizontal = this.axis === 'horizontal';
342 |       const [, , measure] = this.placeholder;
343 | 
344 |       setStyle(measure, 'transition', transition);
345 |       setStyle(
346 |         measure,
347 |         isHorizontal ? 'width' : 'height',
348 |         `${isHorizontal ? dimensions.width : dimensions.height}px`
349 |       );
350 | 
351 |       this.isPlaceholderActive = true;
352 |     }
353 |   }
354 | 
355 |   deactivatePlaceholder(transition: string = transitions.placeholder) {
356 |     if (this.placeholder) {
357 |       const [, , measure] = this.placeholder;
358 | 
359 |       setStyle(measure, 'transition', transition);
360 |       removeStyle(measure, 'width');
361 |       removeStyle(measure, 'height');
362 | 
363 |       this.isPlaceholderActive = false;
364 |     }
365 |   }
366 | 
367 |   hideDraggingEntity(el: HTMLElement) {
368 |     setStyle(el, 'display', 'none');
369 |   }
370 | 
371 |   shiftEl(el: HTMLElement, transition: string, dimensions: { width: number; height: number }) {
372 |     const shift =
373 |       this.axis === 'horizontal'
374 |         ? `translate3d(${dimensions.width}px, 0, 0)`
375 |         : `translate3d(0, ${dimensions.height}px, 0)`;
376 | 
377 |     setStyle(el, 'transition', transition);
378 |     setStyle(el, 'transform', shift);
379 |   }
380 | 
381 |   resetEl(el: HTMLElement, transition: string = transitions.outOfTheWay) {
382 |     setStyle(el, 'transition', transition);
383 |     setStyle(el, 'transform', 'translate3d(0, 0, 0)');
384 |     removeStyle(el, 'display');
385 |   }
386 | 
387 |   addSortNotifier(fn: (isSorting: boolean) => void) {
388 |     this.sortListeners.push(fn);
389 |   }
390 | 
391 |   removeSortNotifier(fn: (isSorting: boolean) => void) {
392 |     this.sortListeners = this.sortListeners.filter((listener) => listener !== fn);
393 |   }
394 | 
395 |   setSortState(isSorting: boolean) {
396 |     if (this.isSorting !== isSorting) {
397 |       this.isSorting = isSorting;
398 |       this.sortListeners.forEach((fn) => fn(isSorting));
399 |     }
400 |   }
401 | }
402 | 


--------------------------------------------------------------------------------
/src/dnd/types.ts:
--------------------------------------------------------------------------------
 1 | import { ComponentChildren } from 'preact';
 2 | 
 3 | export type Axis = 'horizontal' | 'vertical';
 4 | export type Side = 'top' | 'right' | 'bottom' | 'left';
 5 | export type Path = number[];
 6 | 
 7 | export interface NestableProps {
 8 |   id: string;
 9 |   type: string;
10 |   accepts: string[];
11 | }
12 | 
13 | export interface Nestable<D = any, T = any> extends NestableProps {
14 |   children: T[];
15 |   data: D;
16 | }
17 | 
18 | // [minX, minY, maxX, maxY]
19 | export type Hitbox = [number, number, number, number];
20 | 
21 | export interface Coordinates {
22 |   x: number;
23 |   y: number;
24 | }
25 | 
26 | export type CoordinateShift = Coordinates;
27 | 
28 | export interface ScrollState extends Coordinates {
29 |   maxX: number;
30 |   maxY: number;
31 | }
32 | 
33 | export interface EntityData {
34 |   type: string;
35 |   id: string;
36 |   accepts: string[];
37 |   acceptsSort?: string[];
38 |   sortAxis?: Axis;
39 |   [k: string]: any;
40 | }
41 | 
42 | export interface ScopedEntityData extends EntityData {
43 |   win: Window;
44 | }
45 | 
46 | export interface Entity {
47 |   getPath(): Path;
48 |   getHitbox(): Hitbox;
49 |   getData(): ScopedEntityData;
50 |   recalcInitial(): void;
51 |   getParentScrollState(): ScrollState;
52 |   getParentScrollShift(): CoordinateShift;
53 | 
54 |   scopeId: string;
55 |   entityId: string;
56 |   initial: Hitbox;
57 | }
58 | 
59 | export interface WithChildren {
60 |   children?: ComponentChildren;
61 | }
62 | 
63 | export const initialScrollState: ScrollState = {
64 |   x: 0,
65 |   y: 0,
66 |   maxX: 0,
67 |   maxY: 0,
68 | };
69 | 
70 | export const initialScrollShift: CoordinateShift = {
71 |   x: 0,
72 |   y: 0,
73 | };
74 | 


--------------------------------------------------------------------------------
/src/dnd/util/animation.ts:
--------------------------------------------------------------------------------
  1 | import { Coordinates } from '../types';
  2 | import { distanceBetween } from './hitbox';
  3 | 
  4 | type ThrottledFn<T extends any[]> = {
  5 |   (...args: T): void;
  6 |   cancel: () => void;
  7 | };
  8 | 
  9 | /**
 10 |  * Throttle a function so it only executes once per animation frame
 11 |  *
 12 |  * @param fn The function to throttle
 13 |  * @returns a wrapped function trottled by requestAnimationFrame
 14 |  */
 15 | export function rafThrottle<T extends any[]>(
 16 |   win: Window,
 17 |   fn: (...args: T) => void
 18 | ): ThrottledFn<T> {
 19 |   let lastArgs: T;
 20 |   let frameId: number;
 21 | 
 22 |   const wrapperFn: ThrottledFn<T> = (...args: T) => {
 23 |     lastArgs = args;
 24 |     if (frameId) return;
 25 |     frameId = win.requestAnimationFrame(() => {
 26 |       frameId = null;
 27 |       fn(...lastArgs);
 28 |     });
 29 |   };
 30 | 
 31 |   wrapperFn.cancel = () => {
 32 |     if (!frameId) return;
 33 |     win.cancelAnimationFrame(frameId);
 34 |     frameId = null;
 35 |   };
 36 | 
 37 |   return wrapperFn;
 38 | }
 39 | 
 40 | export const curves = {
 41 |   outOfTheWay: 'cubic-bezier(0.2, 0, 0, 1)',
 42 |   drop: 'cubic-bezier(.2,1,.1,1)',
 43 | };
 44 | 
 45 | export const combine = {
 46 |   opacity: {
 47 |     // while dropping: fade out totally
 48 |     drop: 0,
 49 |     // while dragging: fade out partially
 50 |     combining: 700,
 51 |   },
 52 |   scale: {
 53 |     drop: 750,
 54 |   },
 55 | };
 56 | 
 57 | export const timings = {
 58 |   outOfTheWay: 200,
 59 |   minDropTime: 330,
 60 |   maxDropTime: 550,
 61 | };
 62 | 
 63 | const outOfTheWayTiming: string = `${timings.outOfTheWay}ms ${curves.outOfTheWay}`;
 64 | export const placeholderTransitionDelayTime: number = 100;
 65 | 
 66 | export const transitions = {
 67 |   none: `none`,
 68 |   fluid: `opacity ${outOfTheWayTiming}`,
 69 |   snap: `transform ${outOfTheWayTiming}, opacity ${outOfTheWayTiming}`,
 70 |   drop: (duration: number): string => {
 71 |     const timing: string = `${duration}ms ${curves.drop}`;
 72 |     return `transform ${timing}, opacity ${timing}`;
 73 |   },
 74 |   outOfTheWay: `transform ${outOfTheWayTiming}`,
 75 |   placeholder: `height ${outOfTheWayTiming}, width ${outOfTheWayTiming}, margin ${outOfTheWayTiming}, border-color ${outOfTheWayTiming}`,
 76 | };
 77 | 
 78 | export const isEqual = (point1: Coordinates, point2: Coordinates): boolean =>
 79 |   point1.x === point2.x && point1.y === point2.y;
 80 | 
 81 | export const origin: Coordinates = { x: 0, y: 0 };
 82 | 
 83 | const moveTo = (offset: Coordinates): string | undefined =>
 84 |   isEqual(offset, origin) ? undefined : `translate(${offset.x}px, ${offset.y}px)`;
 85 | 
 86 | export const transforms = {
 87 |   moveTo,
 88 |   drop: (offset: Coordinates) => {
 89 |     return moveTo(offset);
 90 |   },
 91 | };
 92 | 
 93 | const dropTimeRange: number = timings.maxDropTime - timings.minDropTime;
 94 | const maxDropTimeAtDistance: number = 1500;
 95 | // will bring a time lower - which makes it faster
 96 | const cancelDropModifier: number = 0.6;
 97 | 
 98 | export function getDropDuration({
 99 |   position,
100 |   destination,
101 |   isCancel,
102 | }: {
103 |   position: Coordinates;
104 |   destination: Coordinates;
105 |   isCancel?: boolean;
106 | }): number {
107 |   const distance: number = distanceBetween(position, destination);
108 |   // even if there is no distance to travel, we might still need to animate opacity
109 |   if (distance <= 0) {
110 |     return timings.minDropTime;
111 |   }
112 | 
113 |   if (distance >= maxDropTimeAtDistance) {
114 |     return timings.maxDropTime;
115 |   }
116 | 
117 |   // * range from:
118 |   // 0px = 0.33s
119 |   // 1500px and over = 0.55s
120 |   // * If reason === 'CANCEL' then speeding up the animation
121 |   // * round to 2 decimal points
122 | 
123 |   const percentage: number = distance / maxDropTimeAtDistance;
124 |   const duration: number = timings.minDropTime + dropTimeRange * percentage;
125 | 
126 |   const withDuration: number = isCancel ? duration * cancelDropModifier : duration;
127 | 
128 |   return Math.round(withDuration);
129 | }
130 | 
131 | export function setStyle(el: HTMLElement, property: string, value: string) {
132 |   if (el.style.getPropertyValue(property) !== value) {
133 |     el.style.setProperty(property, value);
134 |   }
135 | }
136 | 
137 | export function removeStyle(el: HTMLElement, property: string) {
138 |   if (el.style.getPropertyValue(property)) {
139 |     el.style.removeProperty(property);
140 |   }
141 | }
142 | 


--------------------------------------------------------------------------------
/src/dnd/util/createHTMLDndEntity.ts:
--------------------------------------------------------------------------------
 1 | import { generateInstanceId } from 'src/components/helpers';
 2 | import { DataTypes } from 'src/components/types';
 3 | 
 4 | import { Entity, initialScrollShift, initialScrollState } from '../types';
 5 | 
 6 | export function createHTMLDndEntity(
 7 |   x: number,
 8 |   y: number,
 9 |   content: string[],
10 |   viewId: string,
11 |   win: Window
12 | ): Entity {
13 |   const scopeId = 'htmldnd';
14 |   const id = generateInstanceId();
15 | 
16 |   const minX = x - 75;
17 |   const maxX = x + 75;
18 |   const minY = y - 25;
19 |   const maxY = y + 25;
20 | 
21 |   return {
22 |     scopeId: scopeId,
23 |     entityId: `${scopeId}-${id}`,
24 |     initial: [minX, minY, maxX, maxY],
25 |     getParentScrollState() {
26 |       return initialScrollState;
27 |     },
28 |     getParentScrollShift() {
29 |       return initialScrollShift;
30 |     },
31 |     recalcInitial() {},
32 |     getHitbox() {
33 |       return this.initial;
34 |     },
35 |     getPath() {
36 |       return [];
37 |     },
38 |     getData() {
39 |       return {
40 |         viewId,
41 |         type: DataTypes.Item,
42 |         id,
43 |         content,
44 |         accepts: [],
45 |         win,
46 |       };
47 |     },
48 |   };
49 | }
50 | 


--------------------------------------------------------------------------------
/src/dnd/util/data.ts:
--------------------------------------------------------------------------------
  1 | import merge from 'deepmerge';
  2 | import update, { Spec } from 'immutability-helper';
  3 | import { isPlainObject } from 'is-plain-object';
  4 | 
  5 | import { Nestable, Path } from '../types';
  6 | import { SiblingDirection, getSiblingDirection } from './path';
  7 | 
  8 | export function getEntityFromPath(root: Nestable, path: Path): Nestable {
  9 |   const step = path.length ? path[0] : null;
 10 | 
 11 |   if (step !== null && root.children && root.children[step]) {
 12 |     return getEntityFromPath(root.children[step], path.slice(1));
 13 |   }
 14 | 
 15 |   return root;
 16 | }
 17 | 
 18 | export function buildUpdateMutation(path: Path, mutation: Spec<Nestable>) {
 19 |   let pathedMutation: Spec<Nestable> = mutation;
 20 | 
 21 |   for (let i = path.length - 1; i >= 0; i--) {
 22 |     pathedMutation = {
 23 |       children: {
 24 |         [path[i]]: pathedMutation,
 25 |       },
 26 |     };
 27 |   }
 28 | 
 29 |   return pathedMutation;
 30 | }
 31 | 
 32 | export function buildUpdateParentMutation(path: Path, mutation: Spec<Nestable>) {
 33 |   let pathedMutation: Spec<Nestable> = mutation;
 34 | 
 35 |   for (let i = path.length - 2; i >= 0; i--) {
 36 |     pathedMutation = {
 37 |       children: {
 38 |         [path[i]]: pathedMutation,
 39 |       },
 40 |     };
 41 |   }
 42 | 
 43 |   return pathedMutation;
 44 | }
 45 | 
 46 | export function buildRemoveMutation(path: Path, replacement?: Nestable) {
 47 |   const val: Spec<any, any> = replacement ? [path.last(), 1, replacement] : [path.last(), 1];
 48 |   return buildUpdateParentMutation(path, {
 49 |     children: {
 50 |       $splice: [val],
 51 |     },
 52 |   });
 53 | }
 54 | 
 55 | export function buildInsertMutation(
 56 |   destination: Path,
 57 |   entities: Nestable[],
 58 |   destinationModifier: number = 0
 59 | ) {
 60 |   return buildUpdateParentMutation(destination, {
 61 |     children: {
 62 |       $splice: [[destination.last() + destinationModifier, 0, ...entities]],
 63 |     },
 64 |   });
 65 | }
 66 | 
 67 | export function buildAppendMutation(destination: Path, entities: Nestable[]) {
 68 |   return buildUpdateParentMutation(destination, {
 69 |     children: {
 70 |       $push: entities,
 71 |     },
 72 |   });
 73 | }
 74 | 
 75 | export function buildPrependMutation(destination: Path, entities: Nestable[]) {
 76 |   return buildUpdateParentMutation(destination, {
 77 |     children: {
 78 |       $unshift: entities,
 79 |     },
 80 |   });
 81 | }
 82 | 
 83 | export function moveEntity(
 84 |   root: Nestable,
 85 |   source: Path,
 86 |   destination: Path,
 87 |   transform?: (entity: Nestable) => Nestable | Nestable[],
 88 |   replace?: (entity: Nestable) => Nestable
 89 | ) {
 90 |   const entity = transform
 91 |     ? transform(getEntityFromPath(root, source))
 92 |     : getEntityFromPath(root, source);
 93 |   const siblingDirection = getSiblingDirection(source, destination);
 94 | 
 95 |   const destinationModifier = siblingDirection === SiblingDirection.After ? -1 : 0;
 96 | 
 97 |   const replacement = replace?.(getEntityFromPath(root, source));
 98 |   const removeMutation = buildRemoveMutation(source, replacement);
 99 |   const insertMutation = buildInsertMutation(
100 |     destination,
101 |     Array.isArray(entity) ? entity : [entity],
102 |     destinationModifier
103 |   );
104 | 
105 |   const mutation = merge<Spec<Nestable>>(removeMutation, insertMutation, {
106 |     isMergeableObject: (val) => {
107 |       return isPlainObject(val) || Array.isArray(val);
108 |     },
109 |   });
110 | 
111 |   const newBoard = update(root, mutation);
112 | 
113 |   return newBoard;
114 | }
115 | 
116 | export function removeEntity(root: Nestable, target: Path, replacement?: Nestable) {
117 |   return update(root, buildRemoveMutation(target, replacement));
118 | }
119 | 
120 | export function insertEntity(root: Nestable, destination: Path, entities: Nestable[]) {
121 |   return update(root, buildInsertMutation(destination, entities));
122 | }
123 | 
124 | export function appendEntities(root: Nestable, destination: Path, entities: Nestable[]) {
125 |   return update(root, buildAppendMutation(destination, entities));
126 | }
127 | 
128 | export function prependEntities(root: Nestable, destination: Path, entities: Nestable[]) {
129 |   return update(root, buildPrependMutation(destination, entities));
130 | }
131 | 
132 | export function updateEntity(root: Nestable, path: Path, mutation: Spec<Nestable>) {
133 |   return update(root, buildUpdateMutation(path, mutation));
134 | }
135 | 
136 | export function updateParentEntity(root: Nestable, path: Path, mutation: Spec<Nestable>) {
137 |   return update(root, buildUpdateParentMutation(path, mutation));
138 | }
139 | 


--------------------------------------------------------------------------------
/src/dnd/util/getWindow.ts:
--------------------------------------------------------------------------------
1 | export function getParentWindow(el: Element) {
2 |   return el.win;
3 | }
4 | 
5 | export function getParentBodyElement(el: Element) {
6 |   return el.doc.body;
7 | }
8 | 


--------------------------------------------------------------------------------
/src/dnd/util/hitbox.ts:
--------------------------------------------------------------------------------
  1 | import { CoordinateShift, Coordinates, Entity, Hitbox, ScrollState, Side } from '../types';
  2 | 
  3 | export const emptyDomRect: DOMRectReadOnly = {
  4 |   bottom: 0,
  5 |   height: 0,
  6 |   left: 0,
  7 |   right: 0,
  8 |   top: 0,
  9 |   width: 0,
 10 |   x: 0,
 11 |   y: 0,
 12 |   toJSON() {},
 13 | };
 14 | 
 15 | export const emptyHitbox: Hitbox = [0, 0, 0, 0];
 16 | 
 17 | export function numberOrZero(n?: number) {
 18 |   return n === undefined ? 0 : n;
 19 | }
 20 | 
 21 | export function noop() {}
 22 | 
 23 | export function calculateHitbox(
 24 |   rect: DOMRectReadOnly,
 25 |   scroll: ScrollState | null,
 26 |   scrollShift: CoordinateShift | null,
 27 |   manualShift: CoordinateShift | null
 28 | ): Hitbox {
 29 |   return [
 30 |     // minx
 31 |     rect.left +
 32 |       numberOrZero(scroll?.x) +
 33 |       numberOrZero(scrollShift?.x) -
 34 |       numberOrZero(manualShift?.x),
 35 |     // miny
 36 |     rect.top +
 37 |       numberOrZero(scroll?.y) +
 38 |       numberOrZero(scrollShift?.y) -
 39 |       numberOrZero(manualShift?.y),
 40 | 
 41 |     // maxx
 42 |     rect.left +
 43 |       rect.width +
 44 |       numberOrZero(scroll?.x) +
 45 |       numberOrZero(scrollShift?.x) -
 46 |       numberOrZero(manualShift?.x),
 47 |     // maxy
 48 |     rect.top +
 49 |       rect.height +
 50 |       numberOrZero(scroll?.y) +
 51 |       numberOrZero(scrollShift?.y) -
 52 |       numberOrZero(manualShift?.y),
 53 |   ];
 54 | }
 55 | 
 56 | export function calculateScrollHitbox(
 57 |   rect: DOMRectReadOnly,
 58 |   scroll: ScrollState | null,
 59 |   scrollShift: CoordinateShift | null,
 60 |   side: Side
 61 | ): Hitbox {
 62 |   const hitbox = calculateHitbox(rect, scroll, scrollShift, null);
 63 | 
 64 |   if (side === 'top') {
 65 |     hitbox[3] = hitbox[1] + 35;
 66 |     return hitbox;
 67 |   }
 68 | 
 69 |   if (side === 'right') {
 70 |     hitbox[0] = hitbox[0] + rect.width - 35;
 71 |     return hitbox;
 72 |   }
 73 | 
 74 |   if (side === 'bottom') {
 75 |     hitbox[1] = hitbox[1] + rect.height - 35;
 76 |     return hitbox;
 77 |   }
 78 | 
 79 |   // left
 80 |   hitbox[2] = hitbox[0] + 35;
 81 |   return hitbox;
 82 | }
 83 | 
 84 | export function adjustHitbox(
 85 |   minX: number,
 86 |   minY: number,
 87 |   maxX: number,
 88 |   maxY: number,
 89 |   scroll: ScrollState | null,
 90 |   scrollShift: CoordinateShift | null
 91 | ): Hitbox {
 92 |   return [
 93 |     minX - numberOrZero(scroll?.x) - numberOrZero(scrollShift?.x),
 94 |     minY - numberOrZero(scroll?.y) - numberOrZero(scrollShift?.y),
 95 |     maxX - numberOrZero(scroll?.x) - numberOrZero(scrollShift?.x),
 96 |     maxY - numberOrZero(scroll?.y) - numberOrZero(scrollShift?.y),
 97 |   ];
 98 | }
 99 | 
100 | export const getMaxValueIndex = (array: number[]) =>
101 |   getValueIndex(array, (value, tracked) => value > tracked);
102 | 
103 | export const getMinValueIndex = (array: number[]) =>
104 |   getValueIndex(array, (value, tracked) => value < tracked);
105 | 
106 | export function getValueIndex(
107 |   array: number[],
108 |   comparator: (value: number, tracked: number) => boolean
109 | ) {
110 |   if (array.length === 0) {
111 |     return -1;
112 |   }
113 | 
114 |   let tracked = array[0];
115 |   let index = 0;
116 | 
117 |   for (let i = 1; i < array.length; i++) {
118 |     if (comparator(array[i], tracked)) {
119 |       index = i;
120 |       tracked = array[i];
121 |     }
122 |   }
123 | 
124 |   return index;
125 | }
126 | 
127 | function getIntersectionRatio(hitboxA: Hitbox, hitboxB: Hitbox): number {
128 |   const aWidth = hitboxA[2] - hitboxA[0];
129 |   const bWidth = hitboxB[2] - hitboxB[0];
130 |   const aHeight = hitboxA[3] - hitboxA[1];
131 |   const bHeight = hitboxB[3] - hitboxB[1];
132 |   const top = Math.max(hitboxB[1], hitboxA[1]);
133 |   const left = Math.max(hitboxB[0], hitboxA[0]);
134 |   const right = Math.min(hitboxB[2], hitboxA[2]);
135 |   const bottom = Math.min(hitboxB[3], hitboxA[3]);
136 |   const width = right - left;
137 |   const height = bottom - top;
138 | 
139 |   if (left < right && top < bottom) {
140 |     const targetArea = bWidth * bHeight;
141 |     const entryArea = aWidth * aHeight;
142 |     const intersectionArea = width * height;
143 |     const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
144 | 
145 |     return Number(intersectionRatio.toFixed(4));
146 |   }
147 | 
148 |   return 0;
149 | }
150 | 
151 | export function rectIntersection(entities: Entity[], target: Hitbox) {
152 |   const intersections = entities.map((entity) => getIntersectionRatio(entity.getHitbox(), target));
153 | 
154 |   const maxValueIndex = getMaxValueIndex(intersections);
155 | 
156 |   if (intersections[maxValueIndex] <= 0) {
157 |     return null;
158 |   }
159 | 
160 |   return entities[maxValueIndex] ? entities[maxValueIndex] : null;
161 | }
162 | 
163 | export function getScrollIntersection(
164 |   entities: Entity[],
165 |   target: Hitbox,
166 |   dragEntity: Entity
167 | ): [Entity, number] {
168 |   const primary = getBestIntersect(entities, target, dragEntity);
169 | 
170 |   if (!primary) return null;
171 | 
172 |   const side = primary.getData().side as Side;
173 |   const hitbox = primary.getHitbox();
174 | 
175 |   let targetIndex = 0;
176 |   let hitboxIndex = 0;
177 | 
178 |   if (side === 'left') {
179 |     targetIndex = 0;
180 |     hitboxIndex = 2;
181 |   } else if (side === 'right') {
182 |     targetIndex = 2;
183 |     hitboxIndex = 0;
184 |   } else if (side === 'top') {
185 |     targetIndex = 1;
186 |     hitboxIndex = 3;
187 |   } else if (side === 'bottom') {
188 |     targetIndex = 3;
189 |     hitboxIndex = 1;
190 |   }
191 | 
192 |   const distance = Math.abs(target[targetIndex] - hitbox[hitboxIndex]);
193 |   const max = Math.abs(hitbox[targetIndex] - hitbox[hitboxIndex]);
194 | 
195 |   return [primary, max - distance];
196 | }
197 | 
198 | /**
199 |  * Returns the coordinates of the corners of a given rectangle:
200 |  * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]
201 |  */
202 | function cornersOfRectangle(hitbox: Hitbox): Coordinates[] {
203 |   return [
204 |     {
205 |       x: hitbox[0],
206 |       y: hitbox[1],
207 |     },
208 |     {
209 |       x: hitbox[2],
210 |       y: hitbox[1],
211 |     },
212 |     {
213 |       x: hitbox[0],
214 |       y: hitbox[3],
215 |     },
216 |     {
217 |       x: hitbox[2],
218 |       y: hitbox[3],
219 |     },
220 |   ];
221 | }
222 | 
223 | export function distanceBetween(p1: Coordinates, p2: Coordinates) {
224 |   return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
225 | }
226 | 
227 | export function closestCorners(entities: Entity[], target: Hitbox) {
228 |   const corners = cornersOfRectangle(target);
229 | 
230 |   const distances = entities.map((entity) => {
231 |     const entryCorners = cornersOfRectangle(entity.getHitbox());
232 |     const distances = corners.reduce((accumulator, corner, index) => {
233 |       return accumulator + distanceBetween(entryCorners[index], corner);
234 |     }, 0);
235 | 
236 |     return Number((distances / 4).toFixed(4));
237 |   });
238 | 
239 |   const minValueIndex = getMinValueIndex(distances);
240 | 
241 |   return entities[minValueIndex] ? entities[minValueIndex] : null;
242 | }
243 | 
244 | /**
245 |  * Returns the coordinates of the center of a given ClientRect
246 |  */
247 | function centerOfRectangle(hitbox: Hitbox): Coordinates {
248 |   return {
249 |     x: (hitbox[0] + hitbox[2]) / 2,
250 |     y: (hitbox[1] + hitbox[2]) / 2,
251 |   };
252 | }
253 | 
254 | /**
255 |  * Returns the closest rectangle from an array of rectangles to the center of a given
256 |  * rectangle.
257 |  */
258 | export function closestCenter(entities: Entity[], target: Hitbox) {
259 |   const centerRect = centerOfRectangle(target);
260 |   const distances = entities.map((entity) =>
261 |     distanceBetween(centerOfRectangle(entity.getHitbox()), centerRect)
262 |   );
263 | 
264 |   const minValueIndex = getMinValueIndex(distances);
265 | 
266 |   return entities[minValueIndex] ? entities[minValueIndex] : null;
267 | }
268 | 
269 | export function getBestIntersect(
270 |   hits: Entity[],
271 |   dragHitbox: Hitbox,
272 |   dragEntity: Entity
273 | ): Entity | null {
274 |   const dragTopLeft = cornersOfRectangle(dragHitbox)[0];
275 |   const dragCenter = centerOfRectangle(dragHitbox);
276 |   const dragId = dragEntity.entityId;
277 |   const distances = hits.map((entity) => {
278 |     if (entity.entityId === dragId) {
279 |       return Infinity;
280 |     }
281 | 
282 |     const data = entity.getData();
283 |     const isDropArea = data.acceptsSort;
284 |     const entityHitbox = entity.getHitbox();
285 |     const entityCenter = centerOfRectangle(entityHitbox);
286 | 
287 |     if (isDropArea && !isDropArea.contains(dragEntity.getData().type)) {
288 |       return distanceBetween(dragCenter, entityCenter);
289 |     }
290 | 
291 |     const entityTopLeft = cornersOfRectangle(entityHitbox)[0];
292 |     const axis = data.sortAxis === 'horizontal' ? 'x' : 'y';
293 | 
294 |     const modifier = entityCenter[axis] > dragTopLeft[axis] ? 1000 : 0;
295 | 
296 |     return distanceBetween(entityTopLeft, dragTopLeft) + modifier;
297 |   });
298 | 
299 |   const minValueIndex = getMinValueIndex(distances);
300 | 
301 |   return hits[minValueIndex] ? hits[minValueIndex] : null;
302 | }
303 | 
304 | export function getElementScrollOffsets(element: HTMLElement): ScrollState {
305 |   const { scrollLeft, scrollTop, scrollWidth, scrollHeight, offsetWidth, offsetHeight } = element;
306 | 
307 |   const x = scrollLeft;
308 |   const y = scrollTop;
309 |   const maxX = scrollWidth - offsetWidth;
310 |   const maxY = scrollHeight - offsetHeight;
311 | 
312 |   return {
313 |     x,
314 |     y,
315 |     maxX: Math.max(maxX, 0),
316 |     maxY: Math.max(maxY, 0),
317 |   };
318 | }
319 | 
320 | export function adjustHitboxForMovement(
321 |   hitbox: Hitbox,
322 |   origin: Coordinates,
323 |   position: Coordinates
324 | ): Hitbox {
325 |   const xShift = Math.trunc((position.x - origin.x) * 100) / 100;
326 |   const yShift = Math.trunc((position.y - origin.y) * 100) / 100;
327 | 
328 |   return [hitbox[0] + xShift, hitbox[1] + yShift, hitbox[2] + xShift, hitbox[3] + yShift];
329 | }
330 | 
331 | export function getScrollIntersectionDiff(
332 |   prev: [Entity, number][],
333 |   next: [Entity, number][]
334 | ): {
335 |   add: [Entity, number][];
336 |   update: [Entity, number][];
337 |   remove: [Entity, number][];
338 | } {
339 |   const add: [Entity, number][] = [];
340 |   const remove: [Entity, number][] = [];
341 |   const update: [Entity, number][] = [];
342 | 
343 |   const inPrev: Record<string, [Entity, number]> = {};
344 |   const inNext: Record<string, [Entity, number]> = {};
345 | 
346 |   prev.forEach((intersection) => {
347 |     inPrev[intersection[0].entityId] = intersection;
348 |   });
349 | 
350 |   next.forEach((intersection) => {
351 |     const id = intersection[0].entityId;
352 | 
353 |     if (!inPrev[id]) {
354 |       add.push(intersection);
355 |     } else if (inPrev[id][1] !== intersection[1]) {
356 |       update.push(intersection);
357 |     }
358 | 
359 |     inNext[id] = intersection;
360 |   });
361 | 
362 |   prev.forEach((intersection) => {
363 |     if (!inNext[intersection[0].entityId]) {
364 |       remove.push(intersection);
365 |     }
366 |   });
367 | 
368 |   return {
369 |     add,
370 |     update,
371 |     remove,
372 |   };
373 | }
374 | 
375 | export function getHitboxDimensions(hitbox: Hitbox, margin: Hitbox = [0, 0, 0, 0]) {
376 |   const minX = hitbox[0] - margin[0];
377 |   const minY = hitbox[1] - margin[1];
378 |   const maxX = hitbox[2] + margin[2];
379 |   const maxY = hitbox[3] + margin[3];
380 | 
381 |   const height = maxY - minY;
382 |   const width = maxX - minX;
383 | 
384 |   return { width, height };
385 | }
386 | 


--------------------------------------------------------------------------------
/src/dnd/util/path.ts:
--------------------------------------------------------------------------------
 1 | import { Path } from '../types';
 2 | 
 3 | export function isNextSibling(source: Path, sib: Path): boolean {
 4 |   if (source.length !== sib.length) {
 5 |     return false;
 6 |   }
 7 | 
 8 |   return source.every((step, i, arr) => {
 9 |     if (i === arr.length - 1) {
10 |       return step === sib[i] - 1;
11 |     }
12 | 
13 |     return step === sib[i];
14 |   });
15 | }
16 | 
17 | export function areSiblings(source: Path, sib: Path): boolean {
18 |   if (source.length !== sib.length) {
19 |     return false;
20 |   }
21 | 
22 |   return source.every((step, i, arr) => {
23 |     if (i === arr.length - 1) {
24 |       return step !== sib[i];
25 |     }
26 | 
27 |     return step === sib[i];
28 |   });
29 | }
30 | 
31 | export function isSamePath(source: Path, sib: Path): boolean {
32 |   return source.length === sib.length && source.every((step, i) => step === sib[i]);
33 | }
34 | 
35 | export enum SiblingDirection {
36 |   Before,
37 |   After,
38 |   Self,
39 |   NotSiblings,
40 | }
41 | 
42 | export function getSiblingDirection(source: Path, sib: Path): SiblingDirection {
43 |   if (isSamePath(source, sib)) {
44 |     return SiblingDirection.Self;
45 |   }
46 | 
47 |   if (!areSiblings(source, sib)) {
48 |     return SiblingDirection.NotSiblings;
49 |   }
50 | 
51 |   const lastIndex = source.length - 1;
52 | 
53 |   if (source[lastIndex] < sib[lastIndex]) {
54 |     return SiblingDirection.After;
55 |   }
56 | 
57 |   return SiblingDirection.Before;
58 | }
59 | 


--------------------------------------------------------------------------------
/src/helpers.ts:
--------------------------------------------------------------------------------
 1 | import { App, TFile } from 'obsidian';
 2 | import { getDailyNoteSettings, getDateFromFile } from 'obsidian-daily-notes-interface';
 3 | 
 4 | import { frontmatterKey } from './parsers/common';
 5 | 
 6 | export function gotoNextDailyNote(app: App, file: TFile) {
 7 |   const date = getDateFromFile(file as any, 'day');
 8 | 
 9 |   if (!date || !date.isValid()) {
10 |     return;
11 |   }
12 | 
13 |   const dailyNotePlugin = (app as any).internalPlugins.plugins['daily-notes'].instance;
14 | 
15 |   dailyNotePlugin.gotoNextExisting(date);
16 | }
17 | 
18 | export function gotoPrevDailyNote(app: App, file: TFile) {
19 |   const date = getDateFromFile(file as any, 'day');
20 | 
21 |   if (!date || !date.isValid()) {
22 |     return;
23 |   }
24 | 
25 |   const dailyNotePlugin = (app as any).internalPlugins.plugins['daily-notes'].instance;
26 | 
27 |   dailyNotePlugin.gotoPreviousExisting(date);
28 | }
29 | 
30 | export function buildLinkToDailyNote(app: App, dateStr: string) {
31 |   const dailyNoteSettings = getDailyNoteSettings();
32 |   const shouldUseMarkdownLinks = !!(app.vault as any).getConfig('useMarkdownLinks');
33 | 
34 |   if (shouldUseMarkdownLinks) {
35 |     return `[${dateStr}](${
36 |       dailyNoteSettings.folder ? `${encodeURIComponent(dailyNoteSettings.folder)}/` : ''
37 |     }${encodeURIComponent(dateStr)}.md)`;
38 |   }
39 | 
40 |   return `[[${dateStr}]]`;
41 | }
42 | 
43 | export function hasFrontmatterKeyRaw(data: string) {
44 |   if (!data) return false;
45 | 
46 |   const match = data.match(/---\s+([\w\W]+?)\s+---/);
47 | 
48 |   if (!match) {
49 |     return false;
50 |   }
51 | 
52 |   if (!match[1].contains(frontmatterKey)) {
53 |     return false;
54 |   }
55 | 
56 |   return true;
57 | }
58 | 
59 | export function hasFrontmatterKey(file: TFile) {
60 |   if (!file) return false;
61 |   const cache = app.metadataCache.getFileCache(file);
62 |   return !!cache?.frontmatter?.[frontmatterKey];
63 | }
64 | 
65 | export function laneTitleWithMaxItems(title: string, maxItems?: number) {
66 |   if (!maxItems) return title;
67 |   return `${title} (${maxItems})`;
68 | }
69 | 


--------------------------------------------------------------------------------
/src/helpers/boardModifiers.ts:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { moment } from 'obsidian';
  3 | import { KanbanView } from 'src/KanbanView';
  4 | import { StateManager } from 'src/StateManager';
  5 | import { Path } from 'src/dnd/types';
  6 | import {
  7 |   appendEntities,
  8 |   getEntityFromPath,
  9 |   insertEntity,
 10 |   moveEntity,
 11 |   prependEntities,
 12 |   removeEntity,
 13 |   updateEntity,
 14 |   updateParentEntity,
 15 | } from 'src/dnd/util/data';
 16 | 
 17 | import { generateInstanceId } from '../components/helpers';
 18 | import { Board, DataTypes, Item, Lane } from '../components/types';
 19 | 
 20 | export interface BoardModifiers {
 21 |   appendItems: (path: Path, items: Item[]) => void;
 22 |   prependItems: (path: Path, items: Item[]) => void;
 23 |   insertItems: (path: Path, items: Item[]) => void;
 24 |   replaceItem: (path: Path, items: Item[]) => void;
 25 |   splitItem: (path: Path, items: Item[]) => void;
 26 |   moveItemToTop: (path: Path) => void;
 27 |   moveItemToBottom: (path: Path) => void;
 28 |   addLane: (lane: Lane) => void;
 29 |   insertLane: (path: Path, lane: Lane) => void;
 30 |   updateLane: (path: Path, lane: Lane) => void;
 31 |   archiveLane: (path: Path) => void;
 32 |   archiveLaneItems: (path: Path) => void;
 33 |   deleteEntity: (path: Path) => void;
 34 |   updateItem: (path: Path, item: Item) => void;
 35 |   archiveItem: (path: Path) => void;
 36 |   duplicateEntity: (path: Path) => void;
 37 | }
 38 | 
 39 | export function getBoardModifiers(view: KanbanView, stateManager: StateManager): BoardModifiers {
 40 |   const appendArchiveDate = (item: Item) => {
 41 |     const archiveDateFormat = stateManager.getSetting('archive-date-format');
 42 |     const archiveDateSeparator = stateManager.getSetting('archive-date-separator');
 43 |     const archiveDateAfterTitle = stateManager.getSetting('append-archive-date');
 44 | 
 45 |     const newTitle = [moment().format(archiveDateFormat)];
 46 | 
 47 |     if (archiveDateSeparator) newTitle.push(archiveDateSeparator);
 48 | 
 49 |     newTitle.push(item.data.titleRaw);
 50 | 
 51 |     if (archiveDateAfterTitle) newTitle.reverse();
 52 | 
 53 |     const titleRaw = newTitle.join(' ');
 54 |     return stateManager.updateItemContent(item, titleRaw);
 55 |   };
 56 | 
 57 |   return {
 58 |     appendItems: (path: Path, items: Item[]) => {
 59 |       stateManager.setState((boardData) => appendEntities(boardData, path, items));
 60 |     },
 61 | 
 62 |     prependItems: (path: Path, items: Item[]) => {
 63 |       stateManager.setState((boardData) => prependEntities(boardData, path, items));
 64 |     },
 65 | 
 66 |     insertItems: (path: Path, items: Item[]) => {
 67 |       stateManager.setState((boardData) => insertEntity(boardData, path, items));
 68 |     },
 69 | 
 70 |     replaceItem: (path: Path, items: Item[]) => {
 71 |       stateManager.setState((boardData) =>
 72 |         insertEntity(removeEntity(boardData, path), path, items)
 73 |       );
 74 |     },
 75 | 
 76 |     splitItem: (path: Path, items: Item[]) => {
 77 |       stateManager.setState((boardData) => {
 78 |         return insertEntity(removeEntity(boardData, path), path, items);
 79 |       });
 80 |     },
 81 | 
 82 |     moveItemToTop: (path: Path) => {
 83 |       stateManager.setState((boardData) => moveEntity(boardData, path, [path[0], 0]));
 84 |     },
 85 | 
 86 |     moveItemToBottom: (path: Path) => {
 87 |       stateManager.setState((boardData) => {
 88 |         const laneIndex = path[0];
 89 |         const lane = boardData.children[laneIndex];
 90 |         return moveEntity(boardData, path, [laneIndex, lane.children.length]);
 91 |       });
 92 |     },
 93 | 
 94 |     addLane: (lane: Lane) => {
 95 |       stateManager.setState((boardData) => {
 96 |         const collapseState = view.getViewState('list-collapse') || [];
 97 |         const op = (collapseState: boolean[]) => {
 98 |           const newState = [...collapseState];
 99 |           newState.push(false);
100 |           return newState;
101 |         };
102 | 
103 |         view.setViewState('list-collapse', undefined, op);
104 |         return update<Board>(appendEntities(boardData, [], [lane]), {
105 |           data: { settings: { 'list-collapse': { $set: op(collapseState) } } },
106 |         });
107 |       });
108 |     },
109 | 
110 |     insertLane: (path: Path, lane: Lane) => {
111 |       stateManager.setState((boardData) => {
112 |         const collapseState = view.getViewState('list-collapse');
113 |         const op = (collapseState: boolean[]) => {
114 |           const newState = [...collapseState];
115 |           newState.splice(path.last(), 0, false);
116 |           return newState;
117 |         };
118 | 
119 |         view.setViewState('list-collapse', undefined, op);
120 | 
121 |         return update<Board>(insertEntity(boardData, path, [lane]), {
122 |           data: { settings: { 'list-collapse': { $set: op(collapseState) } } },
123 |         });
124 |       });
125 |     },
126 | 
127 |     updateLane: (path: Path, lane: Lane) => {
128 |       stateManager.setState((boardData) =>
129 |         updateParentEntity(boardData, path, {
130 |           children: {
131 |             [path[path.length - 1]]: {
132 |               $set: lane,
133 |             },
134 |           },
135 |         })
136 |       );
137 |     },
138 | 
139 |     archiveLane: (path: Path) => {
140 |       stateManager.setState((boardData) => {
141 |         const lane = getEntityFromPath(boardData, path);
142 |         const items = lane.children;
143 | 
144 |         try {
145 |           const collapseState = view.getViewState('list-collapse');
146 |           const op = (collapseState: boolean[]) => {
147 |             const newState = [...collapseState];
148 |             newState.splice(path.last(), 1);
149 |             return newState;
150 |           };
151 |           view.setViewState('list-collapse', undefined, op);
152 | 
153 |           return update<Board>(removeEntity(boardData, path), {
154 |             data: {
155 |               settings: { 'list-collapse': { $set: op(collapseState) } },
156 |               archive: {
157 |                 $unshift: stateManager.getSetting('archive-with-date')
158 |                   ? items.map(appendArchiveDate)
159 |                   : items,
160 |               },
161 |             },
162 |           });
163 |         } catch (e) {
164 |           stateManager.setError(e);
165 |           return boardData;
166 |         }
167 |       });
168 |     },
169 | 
170 |     archiveLaneItems: (path: Path) => {
171 |       stateManager.setState((boardData) => {
172 |         const lane = getEntityFromPath(boardData, path);
173 |         const items = lane.children;
174 | 
175 |         try {
176 |           return update(
177 |             updateEntity(boardData, path, {
178 |               children: {
179 |                 $set: [],
180 |               },
181 |             }),
182 |             {
183 |               data: {
184 |                 archive: {
185 |                   $unshift: stateManager.getSetting('archive-with-date')
186 |                     ? items.map(appendArchiveDate)
187 |                     : items,
188 |                 },
189 |               },
190 |             }
191 |           );
192 |         } catch (e) {
193 |           stateManager.setError(e);
194 |           return boardData;
195 |         }
196 |       });
197 |     },
198 | 
199 |     deleteEntity: (path: Path) => {
200 |       stateManager.setState((boardData) => {
201 |         const entity = getEntityFromPath(boardData, path);
202 | 
203 |         if (entity.type === DataTypes.Lane) {
204 |           const collapseState = view.getViewState('list-collapse');
205 |           const op = (collapseState: boolean[]) => {
206 |             const newState = [...collapseState];
207 |             newState.splice(path.last(), 1);
208 |             return newState;
209 |           };
210 |           view.setViewState('list-collapse', undefined, op);
211 | 
212 |           return update<Board>(removeEntity(boardData, path), {
213 |             data: { settings: { 'list-collapse': { $set: op(collapseState) } } },
214 |           });
215 |         }
216 | 
217 |         return removeEntity(boardData, path);
218 |       });
219 |     },
220 | 
221 |     updateItem: (path: Path, item: Item) => {
222 |       stateManager.setState((boardData) => {
223 |         return updateParentEntity(boardData, path, {
224 |           children: {
225 |             [path[path.length - 1]]: {
226 |               $set: item,
227 |             },
228 |           },
229 |         });
230 |       });
231 |     },
232 | 
233 |     archiveItem: (path: Path) => {
234 |       stateManager.setState((boardData) => {
235 |         const item = getEntityFromPath(boardData, path);
236 |         try {
237 |           return update(removeEntity(boardData, path), {
238 |             data: {
239 |               archive: {
240 |                 $push: [
241 |                   stateManager.getSetting('archive-with-date') ? appendArchiveDate(item) : item,
242 |                 ],
243 |               },
244 |             },
245 |           });
246 |         } catch (e) {
247 |           stateManager.setError(e);
248 |           return boardData;
249 |         }
250 |       });
251 |     },
252 | 
253 |     duplicateEntity: (path: Path) => {
254 |       stateManager.setState((boardData) => {
255 |         const entity = getEntityFromPath(boardData, path);
256 |         const entityWithNewID = update(entity, {
257 |           id: {
258 |             $set: generateInstanceId(),
259 |           },
260 |         });
261 | 
262 |         if (entity.type === DataTypes.Lane) {
263 |           const collapseState = view.getViewState('list-collapse');
264 |           const op = (collapseState: boolean[]) => {
265 |             const newState = [...collapseState];
266 |             newState.splice(path.last(), 0, collapseState[path.last()]);
267 |             return newState;
268 |           };
269 |           view.setViewState('list-collapse', undefined, op);
270 | 
271 |           return update<Board>(insertEntity(boardData, path, [entityWithNewID]), {
272 |             data: { settings: { 'list-collapse': { $set: op(collapseState) } } },
273 |           });
274 |         }
275 | 
276 |         return insertEntity(boardData, path, [entityWithNewID]);
277 |       });
278 |     },
279 |   };
280 | }
281 | 


--------------------------------------------------------------------------------
/src/helpers/patch.ts:
--------------------------------------------------------------------------------
  1 | import { isPlainObject } from 'is-plain-object';
  2 | import moment from 'moment';
  3 | import { getAPI } from 'obsidian-dataview';
  4 | 
  5 | type Key = string | number;
  6 | type Diffable = Record<Key, any> | any[];
  7 | type OpPath = Array<Key>;
  8 | 
  9 | const REMOVE = 'remove';
 10 | const REPLACE = 'replace';
 11 | const ADD = 'add';
 12 | 
 13 | export interface Op {
 14 |   op: 'remove' | 'replace' | 'add';
 15 |   path: OpPath;
 16 |   value?: any;
 17 | }
 18 | 
 19 | interface Diff {
 20 |   remove: Op[];
 21 |   replace: Op[];
 22 |   add: Op[];
 23 | }
 24 | 
 25 | type SkipFn = (k: OpPath, val?: any) => boolean;
 26 | type ToStringFn = (val: any) => string;
 27 | 
 28 | function isDiffable(obj: any): obj is Diffable {
 29 |   if (!obj) return false;
 30 |   if (isPlainObject(obj) || Array.isArray(obj)) return true;
 31 | 
 32 |   const dv = getAPI();
 33 |   if (!moment.isMoment(obj) && dv?.value.isObject(obj)) return true;
 34 | 
 35 |   return false;
 36 | }
 37 | 
 38 | export function diff(
 39 |   obj1: Diffable,
 40 |   obj2: Diffable,
 41 |   skip: SkipFn = () => false,
 42 |   toString: ToStringFn = (val) => String(val)
 43 | ): Op[] {
 44 |   if (!isDiffable(obj1) || !isDiffable(obj2)) {
 45 |     throw new Error('both arguments must be objects or arrays');
 46 |   }
 47 | 
 48 |   const diffs: Diff = getDiff(
 49 |     obj1,
 50 |     obj2,
 51 |     [],
 52 |     [],
 53 |     { remove: [], replace: [], add: [] },
 54 |     skip,
 55 |     toString
 56 |   );
 57 | 
 58 |   // reverse removes since we want to maintain indexes
 59 |   return diffs.remove.reverse().concat(diffs.replace).concat(diffs.add);
 60 | }
 61 | 
 62 | function getDiff(
 63 |   obj1: Diffable,
 64 |   obj2: Diffable,
 65 |   basePath: OpPath,
 66 |   basePathForRemoves: OpPath,
 67 |   diffs: Diff,
 68 |   skip: SkipFn,
 69 |   toString: ToStringFn
 70 | ) {
 71 |   if (!isDiffable(obj1) || !isDiffable(obj2)) return diffs;
 72 | 
 73 |   const obj1Keys = Object.keys(obj1);
 74 |   const obj2Keys = Object.keys(obj2);
 75 |   const obj2KeysLength = obj2Keys.length;
 76 |   const lengthDelta = obj1.length - obj2.length;
 77 | 
 78 |   let path: OpPath;
 79 | 
 80 |   if (trimFromRight(obj1, obj2)) {
 81 |     for (const k of obj1Keys) {
 82 |       const key = Array.isArray(obj1) ? Number(k) : k;
 83 |       if (!(key in obj2)) {
 84 |         path = basePathForRemoves.concat(key);
 85 |         if (skip(path)) continue;
 86 |         diffs.remove.push({
 87 |           op: REMOVE,
 88 |           path,
 89 |         });
 90 |       }
 91 |     }
 92 | 
 93 |     for (const k of obj2Keys) {
 94 |       const key = Array.isArray(obj2) ? Number(k) : k;
 95 |       pushReplaces(
 96 |         key,
 97 |         obj1,
 98 |         obj2,
 99 |         basePath.concat(key),
100 |         basePath.concat(key),
101 |         diffs,
102 |         skip,
103 |         toString
104 |       );
105 |     }
106 |   } else {
107 |     // trim from left, objects are both arrays
108 |     for (let i = 0; i < lengthDelta; i++) {
109 |       path = basePathForRemoves.concat(i);
110 |       if (skip(path)) continue;
111 |       diffs.remove.push({
112 |         op: REMOVE,
113 |         path,
114 |       });
115 |     }
116 | 
117 |     // now make a copy of obj1 with excess elements left trimmed and see if there any replaces
118 |     const obj1Trimmed = obj1.slice(lengthDelta);
119 |     for (let i = 0; i < obj2KeysLength; i++) {
120 |       pushReplaces(
121 |         i,
122 |         obj1Trimmed,
123 |         obj2,
124 |         basePath.concat(i),
125 |         // since list of removes are reversed before presenting result,
126 |         // we need to ignore existing parent removes when doing nested removes
127 |         basePath.concat(i + lengthDelta),
128 |         diffs,
129 |         skip,
130 |         toString
131 |       );
132 |     }
133 |   }
134 | 
135 |   return diffs;
136 | }
137 | 
138 | function pushReplaces(
139 |   key: any,
140 |   obj1: Diffable,
141 |   obj2: Diffable,
142 |   path: OpPath,
143 |   pathForRemoves: OpPath,
144 |   diffs: Diff,
145 |   skip: SkipFn,
146 |   toString: ToStringFn
147 | ) {
148 |   const obj1AtKey = obj1[key];
149 |   const obj2AtKey = obj2[key];
150 | 
151 |   if (skip(path, obj2AtKey)) return;
152 | 
153 |   if (!(key in obj1) && key in obj2) {
154 |     diffs.add.push({ op: ADD, path, value: obj2AtKey });
155 |   } else if (obj1AtKey !== obj2AtKey) {
156 |     if (
157 |       Object(obj1AtKey) !== obj1AtKey ||
158 |       Object(obj2AtKey) !== obj2AtKey ||
159 |       differentTypes(obj1AtKey, obj2AtKey)
160 |     ) {
161 |       diffs.replace.push({ op: REPLACE, path, value: obj2AtKey });
162 |     } else {
163 |       if (
164 |         !isDiffable(obj1AtKey) &&
165 |         !isDiffable(obj2AtKey) &&
166 |         toString(obj1AtKey) !== toString(obj2AtKey)
167 |       ) {
168 |         diffs.replace.push({ op: REPLACE, path, value: obj2AtKey });
169 |       } else {
170 |         getDiff(obj1[key], obj2[key], path, pathForRemoves, diffs, skip, toString);
171 |       }
172 |     }
173 |   }
174 | }
175 | 
176 | function differentTypes(a: any, b: any) {
177 |   return Object.prototype.toString.call(a) !== Object.prototype.toString.call(b);
178 | }
179 | 
180 | function trimFromRight(obj1: Record<string, any>, obj2: Record<string, any>) {
181 |   const lengthDelta = obj1.length - obj2.length;
182 | 
183 |   if (Array.isArray(obj1) && Array.isArray(obj2) && lengthDelta > 0) {
184 |     let leftMatches = 0;
185 |     let rightMatches = 0;
186 |     for (let i = 0; i < obj2.length; i++) {
187 |       if (String(obj1[i]) === String(obj2[i])) {
188 |         leftMatches++;
189 |       } else {
190 |         break;
191 |       }
192 |     }
193 | 
194 |     for (let j = obj2.length; j > 0; j--) {
195 |       if (String(obj1[j + lengthDelta]) === String(obj2[j])) {
196 |         rightMatches++;
197 |       } else {
198 |         break;
199 |       }
200 |     }
201 | 
202 |     // bias to trim right becase it requires less index shifting
203 |     return leftMatches >= rightMatches;
204 |   }
205 | 
206 |   return true;
207 | }
208 | 
209 | export function diffApply(obj: Diffable, diff: Op[]) {
210 |   if (!isDiffable(obj)) {
211 |     throw new Error('base object must be an object or an array');
212 |   }
213 | 
214 |   if (!Array.isArray(diff)) {
215 |     throw new Error('diff must be an array');
216 |   }
217 | 
218 |   if (Array.isArray(obj)) obj = obj.slice();
219 |   else obj = { ...obj };
220 | 
221 |   for (const thisDiff of diff) {
222 |     const thisOp = thisDiff.op;
223 |     const thisPath = thisDiff.path;
224 |     const pathCopy = thisPath.slice();
225 |     const lastProp: any = pathCopy.pop();
226 |     let subObject = obj;
227 | 
228 |     prototypeCheck(lastProp);
229 |     if (lastProp == null) return false;
230 | 
231 |     let thisProp: any;
232 |     while ((thisProp = pathCopy.shift()) !== null) {
233 |       if (thisProp === undefined) break;
234 | 
235 |       prototypeCheck(thisProp);
236 |       if (!(thisProp in subObject)) {
237 |         subObject = subObject[thisProp] = {};
238 |       } else if (Array.isArray(subObject[thisProp])) {
239 |         subObject = subObject[thisProp] = subObject[thisProp].slice();
240 |       } else if (isPlainObject(subObject[thisProp])) {
241 |         subObject = subObject[thisProp] = { ...subObject[thisProp] };
242 |       } else {
243 |         subObject = subObject[thisProp];
244 |       }
245 |     }
246 | 
247 |     if (thisOp === REMOVE || thisOp === REPLACE) {
248 |       const path = thisDiff.path;
249 |       if (!Object.prototype.hasOwnProperty.call(subObject, lastProp)) {
250 |         throw new Error(['expected to find property', path, 'in object', obj].join(' '));
251 |       }
252 |     }
253 | 
254 |     if (thisOp === REMOVE && typeof lastProp === 'number') {
255 |       Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];
256 |     }
257 | 
258 |     if (thisOp === REPLACE || thisOp === ADD) {
259 |       subObject[lastProp] = thisDiff.value;
260 |     }
261 |   }
262 | 
263 |   return obj;
264 | }
265 | 
266 | function prototypeCheck(prop?: string | number) {
267 |   // coercion is intentional to catch prop values like `['__proto__']`
268 |   if (prop === '__proto__' || prop === 'constructor' || prop === 'prototype') {
269 |     throw new Error('setting of prototype values not supported');
270 |   }
271 | }
272 | 


--------------------------------------------------------------------------------
/src/helpers/renderMarkdown.ts:
--------------------------------------------------------------------------------
  1 | import { Keymap, Menu } from 'obsidian';
  2 | import { KanbanView } from 'src/KanbanView';
  3 | 
  4 | const noBreakSpace = /\u00A0/g;
  5 | 
  6 | interface NormalizedPath {
  7 |   root: string;
  8 |   subpath: string;
  9 |   alias: string;
 10 | }
 11 | 
 12 | export function getNormalizedPath(path: string): NormalizedPath {
 13 |   const stripped = path.replace(noBreakSpace, ' ').normalize('NFC');
 14 | 
 15 |   // split on first occurance of '|'
 16 |   // "root#subpath##subsubpath|alias with |# chars"
 17 |   //             0            ^        1
 18 |   const splitOnAlias = stripped.split(/\|(.*)/);
 19 | 
 20 |   // split on first occurance of '#' (in substring)
 21 |   // "root#subpath##subsubpath"
 22 |   //   0  ^        1
 23 |   const splitOnHash = splitOnAlias[0].split(/#(.*)/);
 24 | 
 25 |   return {
 26 |     root: splitOnHash[0],
 27 |     subpath: splitOnHash[1] ? '#' + splitOnHash[1] : '',
 28 |     alias: splitOnAlias[1] || '',
 29 |   };
 30 | }
 31 | 
 32 | export function applyCheckboxIndexes(dom: HTMLElement) {
 33 |   const checkboxes = dom.querySelectorAll('.task-list-item-checkbox');
 34 | 
 35 |   checkboxes.forEach((el, i) => {
 36 |     (el as HTMLElement).dataset.checkboxIndex = i.toString();
 37 |   });
 38 | }
 39 | 
 40 | export function bindMarkdownEvents(view: KanbanView) {
 41 |   const { contentEl, app } = view;
 42 | 
 43 |   const parseLink = (el: HTMLElement) => {
 44 |     const href = el.getAttr('data-href') || el.getAttr('href');
 45 |     if (!href) return null;
 46 | 
 47 |     return {
 48 |       href,
 49 |       displayText: el.getText().trim(),
 50 |     };
 51 |   };
 52 | 
 53 |   const onLinkClick = (evt: MouseEvent, targetEl: HTMLElement) => {
 54 |     if (evt.button !== 0 && evt.button !== 1) return;
 55 | 
 56 |     const link = parseLink(targetEl);
 57 |     if (!link) return;
 58 | 
 59 |     evt.preventDefault();
 60 |     app.workspace.openLinkText(link.href, view.file.path, Keymap.isModEvent(evt));
 61 |   };
 62 | 
 63 |   contentEl.on('click', 'a.internal-link', onLinkClick);
 64 |   contentEl.on('auxclick', 'a.internal-link', onLinkClick);
 65 |   contentEl.on('dragstart', 'a.internal-link', (evt: DragEvent) => {
 66 |     evt.preventDefault();
 67 |   });
 68 |   contentEl.on('contextmenu', 'a.internal-link', (evt: PointerEvent, targetEl: HTMLElement) => {
 69 |     const link = parseLink(targetEl);
 70 |     if (!link) return;
 71 | 
 72 |     const menu = new Menu();
 73 |     (menu as any).addSections(['title', 'open', 'action', 'view', 'info', '', 'danger']);
 74 |     (app.workspace as any).handleLinkContextMenu(menu, link.href, view.file.path);
 75 |     menu.showAtMouseEvent(evt);
 76 |   });
 77 |   contentEl.on('mouseover', 'a.internal-link', (evt: MouseEvent, targetEl: HTMLElement) => {
 78 |     const link = parseLink(targetEl);
 79 |     if (!link) return;
 80 |     app.workspace.trigger('hover-link', {
 81 |       event: evt,
 82 |       source: 'preview',
 83 |       hoverParent: view,
 84 |       targetEl,
 85 |       linktext: link.href,
 86 |       sourcePath: view.file.path,
 87 |     });
 88 |   });
 89 |   contentEl.on('click', 'a.external-link', (evt: MouseEvent, targetEl: HTMLElement) => {
 90 |     const link = parseLink(targetEl);
 91 |     if (!link) return;
 92 | 
 93 |     evt.preventDefault();
 94 | 
 95 |     if (!link.href || link.href.contains(' ')) return;
 96 |     try {
 97 |       new URL(link.href);
 98 |     } catch (e) {
 99 |       return;
100 |     }
101 | 
102 |     const paneType = Keymap.isModEvent(evt);
103 |     const clickTarget = typeof paneType === 'boolean' ? '' : paneType;
104 |     window.open(link.href, clickTarget);
105 |   });
106 |   contentEl.on('contextmenu', 'a.external-link', (evt: PointerEvent, targetEl: HTMLElement) => {
107 |     const link = parseLink(targetEl);
108 |     if (!link) return;
109 | 
110 |     const menu = new Menu();
111 |     (menu as any).addSections([
112 |       'title',
113 |       'open',
114 |       'selection',
115 |       'clipboard',
116 |       'action',
117 |       'view',
118 |       'info',
119 |       '',
120 |       'danger',
121 |     ]);
122 |     (app.workspace as any).handleExternalLinkContextMenu(menu, link.href);
123 |     menu.showAtMouseEvent(evt);
124 |   });
125 |   contentEl.on('click', 'a.tag', (evt: MouseEvent, targetEl: HTMLElement) => {
126 |     if (evt.button !== 0) return;
127 | 
128 |     const tag = targetEl.getText();
129 |     const searchPlugin = (app as any).internalPlugins.getPluginById('global-search');
130 |     const stateManager = view.plugin.getStateManager(view.file);
131 |     const tagAction = stateManager.getSetting('tag-action');
132 | 
133 |     if (tagAction === 'kanban') {
134 |       view.emitter.emit('hotkey', { commandId: 'editor:open-search', data: tag });
135 |     } else if (searchPlugin) {
136 |       searchPlugin.instance.openGlobalSearch(`tag:${tag}`);
137 |     }
138 |   });
139 | }
140 | 


--------------------------------------------------------------------------------
/src/helpers/util.ts:
--------------------------------------------------------------------------------
 1 | const { compare } = new Intl.Collator(undefined, {
 2 |   usage: 'sort',
 3 |   sensitivity: 'base',
 4 |   numeric: true,
 5 | });
 6 | 
 7 | export const defaultSort = compare;
 8 | 
 9 | export class PromiseCapability<T = void> {
10 |   promise: Promise<T>;
11 | 
12 |   resolve: (data: T) => void;
13 |   reject: (reason?: any) => void;
14 | 
15 |   settled = false;
16 | 
17 |   constructor() {
18 |     this.promise = new Promise((resolve, reject) => {
19 |       this.resolve = (data) => {
20 |         this.settled = true;
21 |         resolve(data);
22 |       };
23 | 
24 |       this.reject = (reason) => {
25 |         this.settled = true;
26 |         reject(reason);
27 |       };
28 |     });
29 |   }
30 | }
31 | 
32 | type QAble = () => Promise<any>;
33 | 
34 | export class PromiseQueue {
35 |   queue: Array<QAble> = [];
36 |   isRunning: boolean = false;
37 | 
38 |   constructor(public onComplete: () => void) {}
39 | 
40 |   clear() {
41 |     this.queue.length = 0;
42 |     this.isRunning = false;
43 |   }
44 | 
45 |   add(item: QAble) {
46 |     this.queue.push(item);
47 | 
48 |     if (!this.isRunning) {
49 |       this.run();
50 |     }
51 |   }
52 | 
53 |   async run() {
54 |     this.isRunning = true;
55 | 
56 |     const { queue } = this;
57 |     let intervalStart = performance.now();
58 | 
59 |     while (queue.length) {
60 |       const item = queue.splice(0, 5);
61 | 
62 |       try {
63 |         await Promise.all(item.map((item) => item()));
64 |       } catch (e) {
65 |         console.error(e);
66 |       }
67 | 
68 |       if (!this.isRunning) return;
69 | 
70 |       const now = performance.now();
71 |       if (now - intervalStart > 50) {
72 |         await new Promise((res) => activeWindow.setTimeout(res));
73 |         intervalStart = now;
74 |       }
75 |     }
76 | 
77 |     this.isRunning = false;
78 |     this.onComplete();
79 |   }
80 | }
81 | 


--------------------------------------------------------------------------------
/src/lang/helpers.ts:
--------------------------------------------------------------------------------
 1 | import ar from './locale/ar';
 2 | import cz from './locale/cz';
 3 | import da from './locale/da';
 4 | import de from './locale/de';
 5 | import en, { Lang } from './locale/en';
 6 | import es from './locale/es';
 7 | import fr from './locale/fr';
 8 | import hi from './locale/hi';
 9 | import id from './locale/id';
10 | import it from './locale/it';
11 | import ja from './locale/ja';
12 | import ko from './locale/ko';
13 | import nl from './locale/nl';
14 | import no from './locale/no';
15 | import pl from './locale/pl';
16 | import pt from './locale/pt';
17 | import ptBR from './locale/pt-br';
18 | import ro from './locale/ro';
19 | import ru from './locale/ru';
20 | import sq from './locale/sq';
21 | import tr from './locale/tr';
22 | import uk from './locale/tr';
23 | import zhCN from './locale/zh-cn';
24 | import zhTW from './locale/zh-tw';
25 | 
26 | const localeMap: { [k: string]: Partial<Lang> } = {
27 |   ar,
28 |   cz,
29 |   da,
30 |   de,
31 |   en,
32 |   es,
33 |   fr,
34 |   hi,
35 |   id,
36 |   it,
37 |   ja,
38 |   ko,
39 |   nl,
40 |   no,
41 |   pl,
42 |   'pt-BR': ptBR,
43 |   pt,
44 |   ro,
45 |   ru,
46 |   sq,
47 |   tr,
48 |   uk,
49 |   'zh-TW': zhTW,
50 |   zh: zhCN,
51 | };
52 | 
53 | const lang = window.localStorage.getItem('language');
54 | const locale = localeMap[lang || 'en'];
55 | 
56 | export function t(str: keyof typeof en): string {
57 |   if (!locale) {
58 |     console.error('Error: kanban locale not found', lang);
59 |   }
60 | 
61 |   return (locale && locale[str]) || en[str];
62 | }
63 | 


--------------------------------------------------------------------------------
/src/lang/locale/ar.ts:
--------------------------------------------------------------------------------
1 | // العربية
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/cz.ts:
--------------------------------------------------------------------------------
1 | // čeština
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/da.ts:
--------------------------------------------------------------------------------
1 | // Dansk
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/de.ts:
--------------------------------------------------------------------------------
  1 | // Deutsch
  2 | import { Lang } from './en';
  3 | 
  4 | const lang: Partial<Lang> = {
  5 |   // main.ts
  6 |   'Open as kanban board': 'Öffne als Kanban-Board',
  7 |   'Create new board': 'Erstelle ein neues Board',
  8 |   'Archive completed cards in active board': 'Archiviere fertiggestellte Karten im aktiven Board',
  9 |   'Error: current file is not a Kanban board':
 10 |     'Fehler: Momentan geöffnete Datei ist kein Kanban-Board',
 11 |   'Convert empty note to Kanban': 'Konvertiere leere Notiz in ein Kanban-Board',
 12 |   'Error: cannot create Kanban, the current note is not empty':
 13 |     'Fehler: Kanban konnte nicht erstellt werden, momentan geöffnete Datei ist nicht leer',
 14 |   'New kanban board': 'Neues Kanban-Board',
 15 |   'Untitled Kanban': 'Unbenanntes Kanban',
 16 |   'Toggle between Kanban and markdown mode': 'Wechsle zwischen Kanban und Markdown Modus',
 17 | 
 18 |   // KanbanView.tsx
 19 |   'Open as markdown': 'Öffne als Markdown',
 20 |   'Open board settings': 'Öffne Board-Einstellungen',
 21 |   'Archive completed cards': 'Archiviere fertiggestellte Karten',
 22 |   'Something went wrong': 'Etwas ist schief gelaufen',
 23 |   'You may wish to open as markdown and inspect or edit the file.':
 24 |     'Du kannst die Datei im Markdown Modus öffnen und überprüfen oder bearbeiten.',
 25 |   'Are you sure you want to archive all completed cards on this board?':
 26 |     'Bist du dir sicher, dass du alle fertiggestellten Karten des Boards archivieren möchtest?',
 27 | 
 28 |   // parser.ts
 29 |   Complete: 'Fertiggestellt',
 30 |   Archive: 'Archiv',
 31 |   'Invalid Kanban file: problems parsing frontmatter':
 32 |     'Fehlerhafte Kanban Datei: Probleme beim Parsen des Frontmatters',
 33 |   "I don't know how to interpret this line:":
 34 |     'Ich weiß nicht, wie ich diese Zeile interpretieren soll:',
 35 |   Untitled: 'Unbenannt', // auto-created column
 36 | 
 37 |   // settingHelpers.ts
 38 |   'Note: No template plugins are currently enabled.':
 39 |     'Beachte: Keine Template-Plugins sind derzeit aktiviert.',
 40 |   default: 'Standard',
 41 |   'Search...': 'Suche...',
 42 | 
 43 |   // Settings.ts
 44 |   'These settings will take precedence over the default Kanban board settings.':
 45 |     'Diese Einstellung wird Vorrang vor der standard Kanban-Board Einstellung haben. ',
 46 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 47 |     'Stelle standard Kanban-Board Einstellungen ein. Einstellungen können auf einer Board-für-Board Basis überschrieben werden.',
 48 |   'Note template': 'Notiz Vorlage',
 49 |   'This template will be used when creating new notes from Kanban cards.':
 50 |     'Diese Vorlage wird beim Erstellen neuer Notizen aus Kanban-Karten verwendet.',
 51 |   'No template': 'Keine Vorlage',
 52 |   'Note folder': 'Notiz Ordner',
 53 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 54 |     'Notizen, welche aus einer Kanban-Karte erstellt wurden, werden in diesem Ordner platziert. Falls leer, werden die Einstellungen des Vaults verwendet.',
 55 |   'Default folder': 'Standard Ordner',
 56 |   'Maximum number of archived cards': 'Maximale Anzahl archivierter Karten.',
 57 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 58 |     'Archivierte Karten können im Markdown-Modus betrachtet werden. Diese Einstellung wird alte Karten löschen, sobald das Limit erreicht wird. Eine Einstellung von -1 setzt das Archiv auf eine unendliche Größe.',
 59 |   'Display card checkbox': 'Zeige Karten Checkbox',
 60 |   'When toggled, a checkbox will be displayed with each card':
 61 |     'Wenn aktiviert, wird eine Checkbox mit jeder Karte angezeigt.',
 62 |   'Reset to default': 'Zurücksetzen',
 63 |   'Date & Time': 'Datum & Uhrzeit',
 64 |   'Date trigger': 'Datums Auslöser',
 65 |   'When this is typed, it will trigger the date selector':
 66 |     'Wenn dies eingegeben wird, dann wird die Datumsauswahl angezeigt',
 67 |   'Time trigger': 'Uhrzeit Auslöser',
 68 |   'When this is typed, it will trigger the time selector':
 69 |     'Wenn dies eingegeben wird, dann wird die Uhrzeitsauswahl angezeigt',
 70 |   'Date format': 'Format des Datums',
 71 |   'This format will be used when saving dates in markdown.':
 72 |     'Dieses Format wird verwendet, wenn ein Datum in Markdown gespeichert wird.',
 73 |   'For more syntax, refer to': 'Für mehr Syntax Informationen siehe',
 74 |   'format reference': 'Formatvorlage',
 75 |   'Your current syntax looks like this': 'Dein momentanes Format sieht so aus',
 76 |   'Time format': 'Format der Uhrzeit',
 77 |   'Date display format': 'Format der Datums Anzeige',
 78 |   'This format will be used when displaying dates in Kanban cards.':
 79 |     'Dieses Format wird verwendet, wenn ein Datum in einer Kanban-Karte angezeigt wird.',
 80 |   'Show relative date': 'Zeige relatives Datum',
 81 |   'Link dates to daily notes': 'Verbinde Daten zu Daily Notes',
 82 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 83 |     'Wenn aktiviert, werden Daten mit Daily Notes verbunden. Zum Beispiel [[26.4.2021]]',
 84 |   'Add date and time to archived cards': 'Füge Datum und Uhrzeit zu archivierten Notizen hinzu',
 85 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
 86 |     'Wenn aktiviert, wird das momentane Datum und die momentane Zeit am Anfang einer Karte hinzugefügt, wenn sie archiviert wird. Zum Beispiel: - [ ] 14.05.2021 10:00 Mein Karten Titel',
 87 |   'Archive date/time separator': 'Datum/Uhrzeit Trenner für das Archiv',
 88 |   'This will be used to separate the archived date/time from the title':
 89 |     'Dies wird verwendet, um das Datum und die Uhrzeit archivierter Karten vom Titel zu trennen',
 90 |   'Archive date/time format': 'Format des Datums und der Uhrzeit für das Archiv',
 91 |   'Kanban Plugin': 'Kanban Erweiterung',
 92 |   'New line trigger': 'Taste für neue Zeile', //No exact translation, but makes sense in App
 93 |   'Shift + Enter': 'Umschalttaste + Enter',
 94 |   Enter: 'Enter',
 95 |   'Prepend / append new cards': 'Neue Karten voranfügen / anhängen',
 96 |   'This setting controls whether new cards are added to the beginning or end of the list.':
 97 |     'Diese Einstellung gibt an ob neue Karten am Anfang oder am Ende einer Liste hinzugefügt werden.',
 98 |   Prepend: 'Voranfügen',
 99 |   Append: 'Anhängen',
100 |   'Linked Page Metadata': 'Metadaten für verknüpfte (verlinkte) Notizen',
101 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
102 |     'Zeigen Sie Metadaten für die erste Notiz an, die innerhalb einer Karte verknüpft ist. Geben Sie an, welche Metadatenschlüssel unten angezeigt werden sollen. Ein optionales Label kann hinzugefügt werden, es kann aber auch vollständig ausgeblendet werden.',
103 | 
104 |   // MetadataSettings.tsx
105 |   'Metadata key': 'Metadatenschlüssel',
106 |   'Display label': 'Anzeigelabel',
107 |   'Hide label': 'Label ausblenden',
108 |   'Drag to rearrange': 'Zum Neuanordnen ziehen',
109 |   Delete: 'Löschen',
110 |   'Add key': 'Schlüssel hinzufügen',
111 |   'Field contains markdown': 'Feld beinhaltet Markdown',
112 | 
113 |   // components/Item/Item.tsx
114 |   'More options': 'Mehr optionen',
115 |   Cancel: 'Abbrechen',
116 | 
117 |   // components/Item/ItemContent.tsx
118 |   today: 'heute',
119 |   yesterday: 'gestern',
120 |   tomorrow: 'morgen',
121 |   'Change date': 'Verändere Datum',
122 |   'Change time': 'Verändere Uhrzeit',
123 | 
124 |   // components/Item/ItemForm.tsx
125 |   'Card title...': 'Karten Titel...',
126 |   'Add card': 'Karte hinzufügen',
127 |   'Add a card': 'Füge eine Karte hinzu',
128 | 
129 |   // components/Item/ItemMenu.ts
130 |   'Edit card': 'Karte editieren',
131 |   'New note from card': 'Neue Notiz aus Karte erstellen',
132 |   'Archive card': 'Karte archivieren',
133 |   'Delete card': 'Karte löschen',
134 |   'Edit date': 'Datum editieren',
135 |   'Add date': 'Datum hinzufügen',
136 |   'Remove date': 'Datum entfernen',
137 |   'Edit time': 'Karte editieren',
138 |   'Add time': 'Uhrzeit hinzufügen',
139 |   'Remove time': 'Uhrzeit entfernen',
140 |   'Duplicate card': 'Karte duplizieren',
141 | 
142 |   // components/Lane/LaneForm.tsx
143 |   'Enter list title...': 'Listen Titel eingeben..',
144 |   'Mark cards in this list as complete': 'Markiere Karten in dieser Liste als fertiggestellt',
145 |   'Add list': 'Liste hinzufügen',
146 |   'Add a list': 'Füge eine Liste hinzu',
147 | 
148 |   // components/Lane/LaneHeader.tsx
149 |   'Move list': 'Liste verschieben',
150 |   Close: 'Schließen',
151 | 
152 |   // components/Lane/LaneMenu.tsx
153 |   'Are you sure you want to delete this list and all its cards?':
154 |     'Bist du dir sicher, dass du diese Liste und alle ihre Karten löschen möchtest?',
155 |   'Yes, delete list': 'Ja, lösche diese Liste',
156 |   'Are you sure you want to archive this list and all its cards?':
157 |     'Bist du dir sicher, dass du diese Liste und alle ihre Karten archivieren möchtest?',
158 |   'Yes, archive list': 'Ja, archiviere diese Liste',
159 |   'Are you sure you want to archive all cards in this list?':
160 |     'Bist du dir sicher, dass du alle Karten in dieser Liste archivieren möchtest?',
161 |   'Yes, archive cards': 'Ja, archiviere Karten',
162 |   'Edit list': 'Editiere Liste',
163 |   'Archive cards': 'Archiviere Karten',
164 |   'Archive list': 'Archiviere List',
165 |   'Delete list': 'Lösche Liste',
166 | };
167 | 
168 | export default lang;
169 | 


--------------------------------------------------------------------------------
/src/lang/locale/en.ts:
--------------------------------------------------------------------------------
  1 | // English
  2 | 
  3 | const en = {
  4 |   // main.ts
  5 |   'Open as kanban board': 'Open as kanban board',
  6 |   'Create new board': 'Create new board',
  7 |   'Archive completed cards in active board': 'Archive completed cards in active board',
  8 |   'Error: current file is not a Kanban board': 'Error: current file is not a Kanban board',
  9 |   'Convert empty note to Kanban': 'Convert empty note to Kanban',
 10 |   'Error: cannot create Kanban, the current note is not empty':
 11 |     'Error: cannot create Kanban, the current note is not empty',
 12 |   'New kanban board': 'New kanban board',
 13 |   'Untitled Kanban': 'Untitled Kanban',
 14 |   'Toggle between Kanban and markdown mode': 'Toggle between Kanban and markdown mode',
 15 | 
 16 |   'View as board': 'View as board',
 17 |   'View as list': 'View as list',
 18 |   'View as table': 'View as table',
 19 |   'Board view': 'Board view',
 20 | 
 21 |   // KanbanView.tsx
 22 |   'Open as markdown': 'Open as markdown',
 23 |   'Open board settings': 'Open board settings',
 24 |   'Archive completed cards': 'Archive completed cards',
 25 |   'Something went wrong': 'Something went wrong',
 26 |   'You may wish to open as markdown and inspect or edit the file.':
 27 |     'You may wish to open as markdown and inspect or edit the file.',
 28 |   'Are you sure you want to archive all completed cards on this board?':
 29 |     'Are you sure you want to archive all completed cards on this board?',
 30 | 
 31 |   // parser.ts
 32 |   Complete: 'Complete',
 33 |   Archive: 'Archive',
 34 |   'Invalid Kanban file: problems parsing frontmatter':
 35 |     'Invalid Kanban file: problems parsing frontmatter',
 36 |   "I don't know how to interpret this line:": "I don't know how to interpret this line:",
 37 |   Untitled: 'Untitled', // auto-created column
 38 | 
 39 |   // settingHelpers.ts
 40 |   'Note: No template plugins are currently enabled.':
 41 |     'Note: No template plugins are currently enabled.',
 42 |   default: 'default',
 43 |   'Search...': 'Search...',
 44 | 
 45 |   // Settings.ts
 46 |   'New line trigger': 'New line trigger',
 47 |   'Select whether Enter or Shift+Enter creates a new line. The opposite of what you choose will create and complete editing of cards and lists.':
 48 |     'Select whether Enter or Shift+Enter creates a new line. The opposite of what you choose will create and complete editing of cards and lists.',
 49 |   'Shift + Enter': 'Shift + Enter',
 50 |   Enter: 'Enter',
 51 |   'Prepend / append new cards': 'Prepend / append new cards',
 52 |   'This setting controls whether new cards are added to the beginning or end of the list.':
 53 |     'This setting controls whether new cards are added to the beginning or end of the list.',
 54 |   Prepend: 'Prepend',
 55 |   'Prepend (compact)': 'Prepend (compact)',
 56 |   Append: 'Append',
 57 |   'These settings will take precedence over the default Kanban board settings.':
 58 |     'These settings will take precedence over the default Kanban board settings.',
 59 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 60 |     'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.',
 61 |   'Note template': 'Note template',
 62 |   'This template will be used when creating new notes from Kanban cards.':
 63 |     'This template will be used when creating new notes from Kanban cards.',
 64 |   'No template': 'No template',
 65 |   'Note folder': 'Note folder',
 66 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 67 |     'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.',
 68 |   'Default folder': 'Default folder',
 69 |   'List width': 'List width',
 70 |   'Expand lists to full width in list view': 'Expand lists to full width in list view',
 71 |   'Enter a number to set the list width in pixels.':
 72 |     'Enter a number to set the list width in pixels.',
 73 |   'Maximum number of archived cards': 'Maximum number of archived cards',
 74 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 75 |     "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.",
 76 |   'Display card checkbox': 'Display card checkbox',
 77 |   'When toggled, a checkbox will be displayed with each card':
 78 |     'When toggled, a checkbox will be displayed with each card',
 79 |   'Reset to default': 'Reset to default',
 80 |   'Date & Time': 'Date & Time',
 81 |   'Date trigger': 'Date trigger',
 82 |   'When this is typed, it will trigger the date selector':
 83 |     'When this is typed, it will trigger the date selector',
 84 |   'Time trigger': 'Time trigger',
 85 |   'When this is typed, it will trigger the time selector':
 86 |     'When this is typed, it will trigger the time selector',
 87 |   'Date format': 'Date format',
 88 |   'This format will be used when saving dates in markdown.':
 89 |     'This format will be used when saving dates in markdown.',
 90 |   'For more syntax, refer to': 'For more syntax, refer to',
 91 |   'format reference': 'format reference',
 92 |   'Your current syntax looks like this': 'Your current syntax looks like this',
 93 |   'Time format': 'Time format',
 94 |   'Date display format': 'Date display format',
 95 |   'This format will be used when displaying dates in Kanban cards.':
 96 |     'This format will be used when displaying dates in Kanban cards.',
 97 |   'Show relative date': 'Show relative date',
 98 |   "When toggled, cards will display the distance between today and the card's date. eg. 'In 3 days', 'A month ago'. Relative dates will not be shown for dates from the Tasks and Dataview plugins.":
 99 |     "When toggled, cards will display the distance between today and the card's date. eg. 'In 3 days', 'A month ago'. Relative dates will not be shown for dates from the Tasks and Dataview plugins.",
100 | 
101 |   'Move dates to card footer': 'Move dates to card footer',
102 |   "When toggled, dates will be displayed in the card's footer instead of the card's body.":
103 |     "When toggled, dates will be displayed in the card's footer instead of the card's body.",
104 |   'Move tags to card footer': 'Move tags to card footer',
105 |   "When toggled, tags will be displayed in the card's footer instead of the card's body.":
106 |     "When toggled, tags will be displayed in the card's footer instead of the card's body.",
107 |   'Move task data to card footer': 'Move task data to card footer',
108 |   "When toggled, task data (from the Tasks plugin) will be displayed in the card's footer instead of the card's body.":
109 |     "When toggled, task data (from the Tasks plugin) will be displayed in the card's footer instead of the card's body.",
110 |   'Inline metadata position': 'Inline metadata position',
111 |   'Controls where the inline metadata (from the Dataview plugin) will be displayed.':
112 |     'Controls where the inline metadata (from the Dataview plugin) will be displayed.',
113 |   'Card body': 'Card body',
114 |   'Card footer': 'Card footer',
115 |   'Merge with linked page metadata': 'Merge with linked page metadata',
116 | 
117 |   'Hide card counts in list titles': 'Hide card counts in list titles',
118 |   'When toggled, card counts are hidden from the list title':
119 |     'When toggled, card counts are hidden from the list title',
120 |   'Link dates to daily notes': 'Link dates to daily notes',
121 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
122 |     'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]',
123 |   'Add date and time to archived cards': 'Add date and time to archived cards',
124 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
125 |     'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title',
126 |   'Add archive date/time after card title': 'Add archive date/time after card title',
127 |   'When toggled, the archived date/time will be added after the card title, e.g.- [ ] My card title 2021-05-14 10:00am. By default, it is inserted before the title.':
128 |     'When toggled, the archived date/time will be added after the card title, e.g.- [ ] My card title 2021-05-14 10:00am. By default, it is inserted before the title.',
129 |   'Archive date/time separator': 'Archive date/time separator',
130 |   'This will be used to separate the archived date/time from the title':
131 |     'This will be used to separate the archived date/time from the title',
132 |   'Archive date/time format': 'Archive date/time format',
133 |   'Kanban Plugin': 'Kanban Plugin',
134 |   'Tag click action': 'Tag click action',
135 |   'Search Kanban Board': 'Search Kanban Board',
136 |   'Search Obsidian Vault': 'Search Obsidian Vault',
137 |   'This setting controls whether clicking the tags displayed below the card title opens the Obsidian search or the Kanban board search.':
138 |     'This setting controls whether clicking the tags displayed below the card title opens the Obsidian search or the Kanban board search.',
139 |   'Tag colors': 'Tag colors',
140 |   'Set colors for tags displayed in cards.': 'Set colors for tags displayed in cards.',
141 |   'Linked Page Metadata': 'Linked Page Metadata',
142 |   'Inline Metadata': 'Inline Metadata',
143 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
144 |     'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.',
145 |   'Board Header Buttons': 'Board Header Buttons',
146 |   'Calendar: first day of week': 'Calendar: first day of week',
147 |   'Override which day is used as the start of the week':
148 |     'Override which day is used as the start of the week',
149 |   Sunday: 'Sunday',
150 |   Monday: 'Monday',
151 |   Tuesday: 'Tuesday',
152 |   Wednesday: 'Wednesday',
153 |   Thursday: 'Thursday',
154 |   Friday: 'Friday',
155 |   Saturday: 'Saturday',
156 |   'Background color': 'Background color',
157 |   Tag: 'Tag',
158 |   'Text color': 'Text color',
159 |   'Date is': 'Date is',
160 |   Today: 'Today',
161 |   'After now': 'After now',
162 |   'Before now': 'Before now',
163 |   'Between now and': 'Between now and',
164 |   'Display date colors': 'Display date colors',
165 |   'Set colors for dates displayed in cards based on the rules below.':
166 |     'Set colors for dates displayed in cards based on the rules below.',
167 |   'Add date color': 'Add date color',
168 | 
169 |   // MetadataSettings.tsx
170 |   'Metadata key': 'Metadata key',
171 |   'Display label': 'Display label',
172 |   'Hide label': 'Hide label',
173 |   'Drag to rearrange': 'Drag to rearrange',
174 |   Delete: 'Delete',
175 |   'Add key': 'Add key',
176 |   'Add tag': 'Add tag',
177 |   'Field contains markdown': 'Field contains markdown',
178 |   'Tag sort order': 'Tag sort order',
179 |   'Set an explicit sort order for the specified tags.':
180 |     'Set an explicit sort order for the specified tags.',
181 | 
182 |   // TagColorSettings.tsx
183 |   'Add tag color': 'Add tag color',
184 | 
185 |   // components/Table.tsx
186 |   List: 'List',
187 |   Card: 'Card',
188 |   Date: 'Date',
189 |   Tags: 'Tags',
190 | 
191 |   Priority: 'Priority',
192 |   Start: 'Start',
193 |   Created: 'Created',
194 |   Scheduled: 'Scheduled',
195 |   Due: 'Due',
196 |   Cancelled: 'Cancelled',
197 |   Recurrence: 'Recurrence',
198 |   'Depends on': 'Depends on',
199 |   ID: 'ID',
200 | 
201 |   // components/Item/Item.tsx
202 |   'More options': 'More options',
203 |   Cancel: 'Cancel',
204 |   Done: 'Done',
205 |   Save: 'Save',
206 | 
207 |   // components/Item/ItemContent.tsx
208 |   today: 'today',
209 |   yesterday: 'yesterday',
210 |   tomorrow: 'tomorrow',
211 |   'Change date': 'Change date',
212 |   'Change time': 'Change time',
213 | 
214 |   // components/Item/ItemForm.tsx
215 |   'Card title...': 'Card title...',
216 |   'Add card': 'Add card',
217 |   'Add a card': 'Add a card',
218 | 
219 |   // components/Item/ItemMenu.ts
220 |   'Edit card': 'Edit card',
221 |   'New note from card': 'New note from card',
222 |   'Archive card': 'Archive card',
223 |   'Delete card': 'Delete card',
224 |   'Edit date': 'Edit date',
225 |   'Add date': 'Add date',
226 |   'Remove date': 'Remove date',
227 |   'Edit time': 'Edit time',
228 |   'Add time': 'Add time',
229 |   'Remove time': 'Remove time',
230 |   'Duplicate card': 'Duplicate card',
231 |   'Split card': 'Split card',
232 |   'Copy link to card': 'Copy link to card',
233 |   'Insert card before': 'Insert card before',
234 |   'Insert card after': 'Insert card after',
235 |   'Add label': 'Add label',
236 |   'Move to top': 'Move to top',
237 |   'Move to bottom': 'Move to bottom',
238 |   'Move to list': 'Move to list',
239 | 
240 |   // components/Lane/LaneForm.tsx
241 |   'Enter list title...': 'Enter list title...',
242 |   'Mark cards in this list as complete': 'Mark cards in this list as complete',
243 |   'Add list': 'Add list',
244 |   'Add a list': 'Add a list',
245 | 
246 |   // components/Lane/LaneHeader.tsx
247 |   'Move list': 'Move list',
248 |   Close: 'Close',
249 | 
250 |   // components/Lane/LaneMenu.tsx
251 |   'Are you sure you want to delete this list and all its cards?':
252 |     'Are you sure you want to delete this list and all its cards?',
253 |   'Yes, delete list': 'Yes, delete list',
254 |   'Are you sure you want to archive this list and all its cards?':
255 |     'Are you sure you want to archive this list and all its cards?',
256 |   'Yes, archive list': 'Yes, archive list',
257 |   'Are you sure you want to archive all cards in this list?':
258 |     'Are you sure you want to archive all cards in this list?',
259 |   'Yes, archive cards': 'Yes, archive cards',
260 |   'Edit list': 'Edit list',
261 |   'Archive cards': 'Archive cards',
262 |   'Archive list': 'Archive list',
263 |   'Delete list': 'Delete list',
264 |   'Insert list before': 'Insert list before',
265 |   'Insert list after': 'Insert list after',
266 |   'Sort by card text': 'Sort by card text',
267 |   'Sort by date': 'Sort by date',
268 |   'Sort by tags': 'Sort by tags',
269 |   'Sort by': 'Sort by',
270 | 
271 |   // components/helpers/renderMarkdown.ts
272 |   'Unable to find': 'Unable to find',
273 |   'Open in default app': 'Open in default app',
274 | 
275 |   // components/Editor/MarkdownEditor.tsx
276 |   Submit: 'Submit',
277 | };
278 | 
279 | export type Lang = typeof en;
280 | export default en;
281 | 


--------------------------------------------------------------------------------
/src/lang/locale/es.ts:
--------------------------------------------------------------------------------
1 | // Español
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/fr.ts:
--------------------------------------------------------------------------------
1 | // français
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/hi.ts:
--------------------------------------------------------------------------------
1 | // हिन्दी
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/id.ts:
--------------------------------------------------------------------------------
1 | // Bahasa Indonesia
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/it.ts:
--------------------------------------------------------------------------------
  1 | // Italiano
  2 | import { Lang } from './en';
  3 | 
  4 | const lang: Partial<Lang> = {
  5 |   // main.ts
  6 |   'Open as kanban board': 'Apri come bacheca Kanban',
  7 |   'Create new board': 'Crea nuova bacheca',
  8 |   'Archive completed cards in active board': 'Archivia schede completate nella bacheca attiva',
  9 |   'Error: current file is not a Kanban board': 'Errore: il file corrente non è una bacheca Kanban',
 10 |   'Convert empty note to Kanban': 'Converti nota vuota in Kanban',
 11 |   'Error: cannot create Kanban, the current note is not empty':
 12 |     'Errore: Impossibile creare Kanban, la nota corrente non è vuota',
 13 |   'New kanban board': 'Nuova bacheca Kanban',
 14 |   'Untitled Kanban': 'Kanban senza titolo',
 15 | 
 16 |   // KanbanView.tsx
 17 |   'Open as markdown': 'Apri come markdown',
 18 |   'Open board settings': 'Apri impostazioni bacheca',
 19 |   'Archive completed cards': 'Archivia schede completate',
 20 | 
 21 |   // parser.ts
 22 |   Complete: 'Completato',
 23 |   Archive: 'Archivio',
 24 | 
 25 |   // settingHelpers.ts
 26 |   'Note: No template plugins are currently enabled.':
 27 |     'Nota: Nessun plugin dei modelli attualmente abilitato.',
 28 |   default: 'predefinito',
 29 |   'Search...': 'Ricerca...',
 30 | 
 31 |   // Settings.ts
 32 |   'These settings will take precedence over the default Kanban board settings.':
 33 |     'Queste impostazioni avranno la precedenza sulle impostazioni predefinite della bacheca Kanban.',
 34 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 35 |     'Impostazioni predefinite della bacheca Kanban. Le impostazioni possono essere sovrascritte per ogni bacheca.',
 36 |   'Note template': 'Nota modello',
 37 |   'This template will be used when creating new notes from Kanban cards.':
 38 |     'Questo modello verrà utilizzato durante la creazione di nuove note dalle schede Kanban.',
 39 |   'No template': 'Nessun modello',
 40 |   'Note folder': 'Cartella delle note',
 41 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 42 |     'Le note create dalle schede Kanban verranno inserite in questa cartella. Se vuota, verranno inserite nella posizione predefinita del vault.',
 43 |   'Default folder': 'Cartella predefinita',
 44 |   'Maximum number of archived cards': 'Numero massimo di schede archiviate',
 45 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 46 |     'Le schede archiviate possono essere visualizzate in modalità Markdown. Le vecchie schede verranno rimosse una volta raggiunto il limite. Impostando il valore -1 il numero di schede archiviate sarà illimitato.',
 47 |   'Display card checkbox': 'Mostra casella di controllo',
 48 |   'When toggled, a checkbox will be displayed with each card':
 49 |     'Se attiva, verrà visualizzata una casella di controllo per ogni scheda',
 50 |   'Reset to default': 'Ripristina predefiniti',
 51 |   'Date & Time': 'Data e ora',
 52 |   'Date trigger': 'Selettore data',
 53 |   'When this is typed, it will trigger the date selector':
 54 |     'Digitando questo, verrà attivato il selettore della data',
 55 |   'Time trigger': 'Selettore ora',
 56 |   'When this is typed, it will trigger the time selector':
 57 |     "Digitando questo, verrà attivato il selettore dell'ora",
 58 |   'Date format': 'Formato data',
 59 |   'This format will be used when saving dates in markdown.':
 60 |     'Formato utilizzato per il salvataggio delle date in Markdown.',
 61 |   'For more syntax, refer to': 'Per maggiori informazioni, vedere',
 62 |   'format reference': 'formato di riferimento',
 63 |   'Your current syntax looks like this': 'Formato corrente',
 64 |   'Time format': 'Formato ora',
 65 |   'Date display format': 'Formato visualizzazione data',
 66 |   'This format will be used when displaying dates in Kanban cards.':
 67 |     'Formato utilizzato per visualizzare le date nelle schede Kanban.',
 68 |   'Show relative date': 'Mostra data relativa',
 69 |   'Link dates to daily notes': 'Collega date alle Note del giorno',
 70 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 71 |     'Se attiva, le date verranno collegate alle Note del giorno. Eg. [[2021-04-26]]',
 72 |   'Add date and time to archived cards': 'Aggiungi data e ora alle schede archiviate',
 73 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
 74 |     "Se attiva, la data e l'ora corrente verranno aggiunte all'inizio della scheda quando viene archiviata. Eg. - [ ] 2021-05-14 10:00am Mia scheda",
 75 |   'Archive date/time separator': "Separatore data/ora dell'archivio",
 76 |   'This will be used to separate the archived date/time from the title':
 77 |     "Verrà usato per separare data e ora dell'archiviazione dal titolo",
 78 |   'Archive date/time format': "Formato data/ora dell'archivio",
 79 |   'Kanban Plugin': 'Plugin Kanban',
 80 | 
 81 |   // components/Item/Item.tsx
 82 |   'More options': 'Altre opzioni',
 83 |   Cancel: 'Annulla',
 84 | 
 85 |   // components/Item/ItemContent.tsx
 86 |   today: 'oggi',
 87 |   yesterday: 'ieri',
 88 |   tomorrow: 'domani',
 89 |   'Change date': 'Modifica data',
 90 |   'Change time': 'Modifica ora',
 91 | 
 92 |   // components/Item/ItemForm.tsx
 93 |   'Card title...': 'Titolo elemento...',
 94 |   'Add card': 'Aggiungi elemento',
 95 |   'Add a card': "Aggiungi un'altra scheda",
 96 | 
 97 |   // components/Item/ItemMenu.ts
 98 |   'Edit card': 'Modifica scheda',
 99 |   'New note from card': 'Nuova nota da scheda',
100 |   'Archive card': 'Archivia scheda',
101 |   'Delete card': 'Elimina scheda',
102 |   'Edit date': 'Modifica data',
103 |   'Add date': 'Aggiungi data',
104 |   'Remove date': 'Rimuovi data',
105 |   'Edit time': 'Modifica ora',
106 |   'Add time': 'Aggiungi ora',
107 |   'Remove time': 'Rimuovi ora',
108 | 
109 |   // components/Lane/LaneForm.tsx
110 |   'Enter list title...': 'Inserisci titolo lista...',
111 |   'Mark cards in this list as complete': 'Segna elementi della lista come completati',
112 |   'Add list': 'Aggiungi lista',
113 |   'Add a list': "Aggiungi un'altra lista",
114 | 
115 |   // components/Lane/LaneHeader.tsx
116 |   'Move list': 'Sposta lista',
117 |   Close: 'Chiudi',
118 | 
119 |   // components/Lane/LaneMenu.tsx
120 |   'Are you sure you want to delete this list and all its cards?':
121 |     'Cancellare questa lista e tutte le sue schede?',
122 |   'Yes, delete list': 'Cancella lista',
123 |   'Are you sure you want to archive this list and all its cards?':
124 |     'Archiviare questa lista e tutte le sue schede?',
125 |   'Yes, archive list': 'Archivia lista',
126 |   'Are you sure you want to archive all cards in this list?':
127 |     'Archiviare tutte le schede in questa lista?',
128 |   'Yes, archive cards': 'Archivia schede',
129 |   'Edit list': 'Modifica lista',
130 |   'Archive cards': 'Archivia schede',
131 |   'Archive list': 'Archivia lista',
132 |   'Delete list': 'Cancella lista',
133 | };
134 | 
135 | export default lang;
136 | 


--------------------------------------------------------------------------------
/src/lang/locale/ja.ts:
--------------------------------------------------------------------------------
  1 | // 日本語
  2 | import { Lang } from './en';
  3 | 
  4 | const lang: Partial<Lang> = {
  5 |   // main.ts
  6 |   'Open as kanban board': 'カンバンボードとして開く',
  7 |   'Create new board': 'カンバンボードを新規作成',
  8 |   'Archive completed cards in active board': 'アクティブボードの完了したカードをアーカイブ',
  9 |   'Error: current file is not a Kanban board':
 10 |     'エラー: 現在のファイルはカンバンボードではありません',
 11 |   'Convert empty note to Kanban': '空のノートをカンバンに変換',
 12 |   'Error: cannot create Kanban, the current note is not empty':
 13 |     'エラー: 現在開いているノートは空であり、カンバンを作成できません',
 14 |   'New kanban board': '新規カンバンボード',
 15 |   'Untitled Kanban': '無題のカンバン',
 16 |   'Toggle between Kanban and markdown mode': 'カンバンとマークダウンのモードを切り替える',
 17 | 
 18 |   // KanbanView.tsx
 19 |   'Open as markdown': 'マークダウンとして開く',
 20 |   'Open board settings': 'ボード設定を開く',
 21 |   'Archive completed cards': '完了したカードをアーカイブ',
 22 |   'Something went wrong': 'エラーが発生しました',
 23 |   'You may wish to open as markdown and inspect or edit the file.':
 24 |     'マークダウンとしてファイルを開いて調査するか編集することをおすすめします。',
 25 |   'Are you sure you want to archive all completed cards on this board?':
 26 |     'このボードに含まれるすべての完了したカードをアーカイブしますか？',
 27 | 
 28 |   // parser.ts
 29 |   Complete: '完了',
 30 |   Archive: 'アーカイブ',
 31 |   'Invalid Kanban file: problems parsing frontmatter':
 32 |     '無効なカンバンファイル: フロントマターのパースに問題があります',
 33 |   "I don't know how to interpret this line:": 'この行をどう解釈すればよいか分かりません',
 34 |   Untitled: '無題', // auto-created column
 35 | 
 36 |   // settingHelpers.ts
 37 |   'Note: No template plugins are currently enabled.':
 38 |     'ノート:  現在、テンプレートのプラグインが無効化されています',
 39 |   default: 'デフォルト',
 40 |   'Search...': '検索…',
 41 | 
 42 |   // Settings.ts
 43 |   'New line trigger': '改行トリガー',
 44 |   'Shift + Enter': 'Shift + Enter',
 45 |   Enter: 'Enter',
 46 |   'Prepend / append new cards': '先頭または末尾に新規カードを追加する',
 47 |   'This setting controls whether new cards are added to the beginning or end of the list.':
 48 |     'この設定によって新規カードをリストの先頭または末尾に追加するかを決めます。',
 49 |   Prepend: '先頭に追加',
 50 |   'Prepend (compact)': '先頭に追加(コンパクト)',
 51 |   Append: '末尾に追加',
 52 |   'These settings will take precedence over the default Kanban board settings.':
 53 |     'これらの設定はデフォルトのカンバン設定より優先されます。',
 54 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 55 |     'デフォルトのカンバンボード設定をセットします。この設定はボード毎に上書きできます。',
 56 |   'Note template': 'ノートテンプレート',
 57 |   'This template will be used when creating new notes from Kanban cards.':
 58 |     'このテンプレートはカンバンカードからノートを新規作成した際に使用されます。',
 59 |   'No template': 'テンプレートがありません',
 60 |   'Note folder': 'ノートフォルダ',
 61 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 62 |     'カンバンカードから作成されたノートはこのフォルダ内に置かれます。ブランクの場合には、この保管庫のデフォルトロケーションに置かれます。',
 63 |   'Default folder': 'デフォルトフォルダ',
 64 |   'Maximum number of archived cards': 'アーカイブされたカードの最大数',
 65 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 66 |     'アーカイブされたカードはマークダウンモードで閲覧できます。この設定により指定されたアーカイブの限界数まで達した際には古いカードを削除します。この値を-1に設定するとボードのアーカイブ限界を無限にします。',
 67 |   'Display card checkbox': 'カードのチェックボックスを表示',
 68 |   'When toggled, a checkbox will be displayed with each card':
 69 |     '有効化すると各カードのチェックボックスが表示されます。',
 70 |   'Reset to default': 'デフォルトにリセット',
 71 |   'Date & Time': '日付と時間',
 72 |   'Date trigger': '日付トリガー',
 73 |   'When this is typed, it will trigger the date selector':
 74 |     'この設定に入力された文字列で日付セレクターをトリガーします。',
 75 |   'Time trigger': '時間トリガー',
 76 |   'When this is typed, it will trigger the time selector':
 77 |     'この設定に入力された文字列で時間セレクターをトリガーします。',
 78 |   'Date format': '日付フォーマット',
 79 |   'This format will be used when saving dates in markdown.':
 80 |     'このフォーマットはマークダウンで日付が保存される際に使用されます。',
 81 |   'For more syntax, refer to': 'シンタックスについてはこちらを参照:',
 82 |   'format reference': 'フォーマットリファレンス',
 83 |   'Your current syntax looks like this': '現在のシンタックスは次のように見えます',
 84 |   'Time format': '時間フォーマット',
 85 |   'Date display format': '日付表示フォーマット',
 86 |   'This format will be used when displaying dates in Kanban cards.':
 87 |     'このフォーマットはカンバンカード内にて日付の表示に使用されます。',
 88 |   'Show relative date': '相対日付を表示',
 89 |   'Link dates to daily notes': 'デイリーノートに日付をリンク',
 90 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 91 |     '有効化すると日付がデイリーノートにリンクされます。 例: [[2021-04-26]]',
 92 |   'Add date and time to archived cards': 'アーカイブされたカードに日付と時間を追加',
 93 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
 94 |     '有効化するとカードがアーカイブされた際に現在の日付と時間がカードの最初に追記されるようになります。例: - [ ] 2021-05-14 10:00am カードタイトル',
 95 |   'Archive date/time separator': '日付・時間セパレーターをアーカイブ',
 96 |   'This will be used to separate the archived date/time from the title':
 97 |     'これはアーカイブされた日付・時間をタイトルから分離するのに使用されます。',
 98 |   'Archive date/time format': '日付・時間フォーマットをアーカイブ',
 99 |   'Kanban Plugin': 'カンバンプラグイン',
100 |   'Linked Page Metadata': 'リンクされたページのメタデータ',
101 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
102 |     'カード内でリンクされている最初のノートのメタデータを表示します。下に表示するメタデータのキーを指定してください。オプションとしてラベルの付与が可能であり、ラベルは完全に非表示にすることができます。',
103 |   'Board Header Buttons': 'ボードのヘッダーボタン',
104 |   'Calendar: first day of week': 'カレンダー: 週の始まり',
105 |   'Override which day is used as the start of the week':
106 |     '週の始まりとして使用する曜日を変更します。',
107 |   Sunday: '日曜日',
108 |   Monday: '月曜日',
109 |   Tuesday: '火曜日',
110 |   Wednesday: '水曜日',
111 |   Thursday: '木曜日',
112 |   Friday: '金曜日',
113 |   Saturday: '土曜日',
114 | 
115 |   // MetadataSettings.tsx
116 |   'Metadata key': 'メタデータのキー',
117 |   'Display label': 'ラベルを表示',
118 |   'Hide label': 'ラベルを隠す',
119 |   'Drag to rearrange': 'ドラッグして並べ替える',
120 |   Delete: '削除',
121 |   'Add key': 'キーを追加',
122 |   'Field contains markdown': 'フィールドにマークダウンを含みます',
123 | 
124 |   // components/Item/Item.tsx
125 |   'More options': '他のオプション',
126 |   Cancel: 'キャンセル',
127 | 
128 |   // components/Item/ItemContent.tsx
129 |   today: '今日',
130 |   yesterday: '昨日',
131 |   tomorrow: '明日',
132 |   'Change date': '日付を変更',
133 |   'Change time': '時間を変更',
134 | 
135 |   // components/Item/ItemForm.tsx
136 |   'Card title...': 'カードタイトル…',
137 |   'Add card': 'カードを追加',
138 |   'Add a card': 'カードを追加',
139 | 
140 |   // components/Item/ItemMenu.ts
141 |   'Edit card': 'カードを編集',
142 |   'New note from card': 'カードからノートを新規作成',
143 |   'Archive card': 'カードをアーカイブ',
144 |   'Delete card': 'カードを削除',
145 |   'Edit date': '日付を編集',
146 |   'Add date': '日付を追加',
147 |   'Remove date': '日付を削除',
148 |   'Edit time': '時間を編集',
149 |   'Add time': '時間を追加',
150 |   'Remove time': '時間を削除',
151 |   'Duplicate card': 'カードを複製',
152 |   'Split card': 'カードを分割',
153 |   'Copy link to card': 'カードへのリンクをコピー',
154 | 
155 |   // components/Lane/LaneForm.tsx
156 |   'Enter list title...': 'リストタイトルを編集…',
157 |   'Mark cards in this list as complete': 'このリストに含まれるカードを完了としてマークする',
158 |   'Add list': 'リストを追加',
159 |   'Add a list': 'リストを追加',
160 | 
161 |   // components/Lane/LaneHeader.tsx
162 |   'Move list': 'リストを移動',
163 |   Close: '閉じる',
164 | 
165 |   // components/Lane/LaneMenu.tsx
166 |   'Are you sure you want to delete this list and all its cards?':
167 |     'このリストと含まれるすべてのカードを削除しますか？',
168 |   'Yes, delete list': 'はい、リストを削除します',
169 |   'Are you sure you want to archive this list and all its cards?':
170 |     'このリストと含まれるすべてのカードをアーカイブしますか？',
171 |   'Yes, archive list': 'はい、リストをアーカイブします',
172 |   'Are you sure you want to archive all cards in this list?':
173 |     'このリストに含まれるすべてのカードをアーカイブしますか？',
174 |   'Yes, archive cards': 'はい、カードをアーカイブします',
175 |   'Edit list': 'リストを編集',
176 |   'Archive cards': 'カードをアーカイブ',
177 |   'Archive list': 'リストをアーカイブ',
178 |   'Delete list': 'リストを削除',
179 | 
180 |   // components/helpers/renderMarkdown.ts
181 |   'Unable to find': '見つかりません',
182 |   'Open in default app': 'デフォルトアプリで開く',
183 | };
184 | 
185 | export default lang;
186 | 


--------------------------------------------------------------------------------
/src/lang/locale/ko.ts:
--------------------------------------------------------------------------------
  1 | // 한국어
  2 | import { Lang } from './en';
  3 | 
  4 | const lang: Partial<Lang> = {
  5 |   // main.ts
  6 |   'Open as kanban board': '칸반 보드로 열기',
  7 |   'Create new board': '새 보드 만들기',
  8 |   'Archive completed cards in active board': '활성 보드에서 완료된 카드 보관',
  9 |   'Error: current file is not a Kanban board': '에러: 현재 파일은 칸반 보드가 아닙니다.',
 10 |   'Convert empty note to Kanban': '빈 노트를 칸반 보드로 변환',
 11 |   'Error: cannot create Kanban, the current note is not empty':
 12 |     '에러: 칸반을 생성할 수 없습니다. 현재 노트가 비어있지 않습니다.',
 13 |   'New kanban board': '새 보드 만들기',
 14 |   'Untitled Kanban': '이름 없는 보드',
 15 |   'Toggle between Kanban and markdown mode': '칸반 모드와 마크다운 모드 전환',
 16 | 
 17 |   // KanbanView.tsx
 18 |   'Open as markdown': '마크다운으로 열기',
 19 |   'Open board settings': '보드 설정 열기',
 20 |   'Archive completed cards': '완료된 카드 보관',
 21 |   'Something went wrong': '알 수 없는 문제가 발생했습니다.',
 22 |   'You may wish to open as markdown and inspect or edit the file.':
 23 |     '마크다운으로 열어 파일을 검사하거나 편집할 수 있습니다.',
 24 |   'Are you sure you want to archive all completed cards on this board?':
 25 |     '정말 이 보드의 모든 완료된 카드를 보관하시겠습니까?',
 26 | 
 27 |   // parser.ts
 28 |   Complete: '완료됨',
 29 |   Archive: '보관됨',
 30 |   'Invalid Kanban file: problems parsing frontmatter':
 31 |     '잘못된 칸반 파일: 프론트매터 파싱 문제가 발생했습니다.',
 32 |   "I don't know how to interpret this line:": '이 줄을 해석할 수 없습니다:',
 33 |   Untitled: '제목 없음', // auto-created column
 34 | 
 35 |   // settingHelpers.ts
 36 |   'Note: No template plugins are currently enabled.':
 37 |     '노트: 현재 템플릿 플러그인이 활성화되어 있지 않습니다.',
 38 |   default: '기본',
 39 |   'Search...': '검색하기...',
 40 | 
 41 |   // Settings.ts
 42 |   'New line trigger': '새 줄 만들기',
 43 |   'Select whether Enter or Shift+Enter creates a new line. The opposite of what you choose will create and complete editing of cards and lists.':
 44 |     'Enter 또는 Shift + Enter 중 어느 단축키로 새 줄로 넘어갈지 선택합니다. 선택하지 않은 단축키 (만약 Enter를 선택했다면 Shift + Enter) 는 진행중인 카드 또는 목록의 생성 및 수정을 완료합니다.',
 45 |   'Shift + Enter': 'Shift + Enter',
 46 |   Enter: 'Enter',
 47 |   'Prepend / append new cards': '새로운 카드를 추가할 위치',
 48 |   'This setting controls whether new cards are added to the beginning or end of the list.':
 49 |     '새로운 카드를 추가하는 버튼이 맨 위에 추가될지 맨 아래에 추가될지 설정합니다.',
 50 |   Prepend: '상단',
 51 |   'Prepend (compact)': '상단 (작은 버튼)',
 52 |   Append: '하단',
 53 |   'These settings will take precedence over the default Kanban board settings.':
 54 |     '이 설정은 기본 칸반 보드 설정보다 우선합니다.',
 55 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 56 |     '기본 칸반 보드 설정을 설정합니다. 설정은 보드별로 재정의할 수 있습니다.',
 57 |   'Note template': '노트 템플릿',
 58 |   'This template will be used when creating new notes from Kanban cards.':
 59 |     '이 템플릿은 칸반 카드에서 새 노트를 만들 때 사용됩니다.',
 60 |   'No template': '템플릿 없음',
 61 |   'Note folder': '노트 폴더',
 62 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 63 |     '카드에서 만든 노트는 이 폴더에 저장됩니다. 만약 비어있다면, 기본 위치에 저장됩니다.',
 64 |   'Default folder': '기본 폴더',
 65 |   'List width': '목록 너비',
 66 |   'Enter a number to set the list width in pixels.': '픽셀 단위로 목록의 너비를 설정합니다.',
 67 |   'Maximum number of archived cards': '보관된 카드의 최대 수',
 68 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 69 |     '보관된 카드는 마크다운 모드에서 볼 수 있습니다. 이 설정은 한도에 도달하면 이전 카드를 제거하기 시작합니다. 이 값을 -1로 설정하면 보관함이 무한정으로 커질 수 있습니다.',
 70 |   'Display card checkbox': '카드에 체크박스 표시',
 71 |   'When toggled, a checkbox will be displayed with each card':
 72 |     '활성화하면 각 카드에 체크박스가 표시됩니다.',
 73 |   'Reset to default': '기본값으로 초기화',
 74 |   'Date & Time': '날짜 및 시간',
 75 |   'Date trigger': '날짜 선택기 트리거',
 76 |   'When this is typed, it will trigger the date selector':
 77 |     '이 텍스트를 입력하면 날짜 선택기가 표시됩니다.',
 78 |   'Time trigger': '시간 선택기 트리거',
 79 |   'When this is typed, it will trigger the time selector':
 80 |     '이 텍스트를 입력하면 시간 선택기가 표시됩니다.',
 81 |   'Date format': '날짜 형식',
 82 |   'This format will be used when saving dates in markdown.':
 83 |     '이 형식은 마크다운에서 날짜를 저장할 때 사용됩니다.',
 84 |   'For more syntax, refer to': '자세한 문법은 다음을 참조하세요.',
 85 |   'format reference': '형식 참조',
 86 |   'Your current syntax looks like this': '현재 문법은 다음과 같습니다.',
 87 |   'Time format': '시간 형식',
 88 |   'Date display format': '날짜 표시 형식',
 89 |   'This format will be used when displaying dates in Kanban cards.':
 90 |     '이 형식은 카반 보드에서 날짜를 표시할때 사용됩니다.',
 91 |   'Show relative date': '날짜를 상대적으로 표시',
 92 |   'Hide card counts in list titles': '목록 제목에 카드 수 표시 숨기기',
 93 |   'When toggled, card counts are hidden from the list title':
 94 |     '활성화하면 목록 제목에 총 카드 수가 표시되지 않습니다.',
 95 |   'Link dates to daily notes': '일일 노트에 날짜 연결',
 96 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 97 |     '활성화하면 날짜가 일일 노트에 연결됩니다. 예: [[2021-04-26]]',
 98 |   'Add date and time to archived cards': '보관된 카드에 날짜와 시간 추가',
 99 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
100 |     '활성화하면 카드가 보관될 때 현재 날짜와 시간이 카드 제목에 추가됩니다. 예: - [ ] 2021-05-14 10:00am 내 카드 제목',
101 |   'Add archive date/time after card title': '카드 제목 뒤에 보관된 날짜/시간 추가',
102 |   'When toggled, the archived date/time will be added after the card title, e.g.- [ ] My card title 2021-05-14 10:00am. By default, it is inserted before the title.':
103 |     '활성화하면 카드 제목 뒤에 보관된 날짜/시간이 추가됩니다. 예: - [ ] 내 카드 제목 2021-05-14 10:00am. 기본적으로 제목 앞에 삽입됩니다.',
104 |   'Archive date/time separator': '보관될 카드의 날짜/시간 구분자',
105 |   'This will be used to separate the archived date/time from the title':
106 |     '이 구분자는 카드 제목과 보관된 날짜/시간을 구분하는데 사용됩니다.',
107 |   'Archive date/time format': '보관된 카드의 날짜/시간 형식',
108 |   'Kanban Plugin': '칸반 플러그인',
109 |   'Tag colors': '태그 색상 표시',
110 |   'Set colors for tags displayed in cards.': '카드 제목 아래에 표시되는 태그의 색상을 설정합니다.',
111 |   'Linked Page Metadata': '링크된 페이지 메타데이터',
112 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
113 |     '카드 내에서 첫 번째로 링크된 노트의 메타데이터를 표시합니다. 아래에 표시할 메타데이터 키를 지정합니다. 선택적으로 레이블을 제공할 수 있으며, 레이블을 완전히 숨길 수 있습니다.',
114 |   'Board Header Buttons': '보드 헤더 버튼',
115 |   'Calendar: first day of week': '달력: 첫 번째 요일',
116 |   'Override which day is used as the start of the week':
117 |     '한 주의 시작으로 사용되는 요일을 재정의합니다.',
118 |   Sunday: '일요일',
119 |   Monday: '월요일',
120 |   Tuesday: '화요일',
121 |   Wednesday: '수요일',
122 |   Thursday: '목요일',
123 |   Friday: '금요일',
124 |   Saturday: '토요일',
125 |   'Background color': '배경 색상',
126 |   Tag: '태그',
127 |   'Text color': '글자 색상',
128 |   'Date is': '날짜는',
129 |   Today: '오늘',
130 |   'After now': '이후',
131 |   'Before now': '이전',
132 |   'Between now and': '과의 사이',
133 |   'Display date colors': '날짜 색상 표시',
134 |   'Set colors for dates displayed in cards based on the rules below.':
135 |     '아래 카드에 표시된 날짜의 색상을 아래의 규칙에 따라 설정하세요.',
136 |   'Add date color': '날짜 색상 추가',
137 | 
138 |   // MetadataSettings.tsx
139 |   'Metadata key': '메타데이터 키',
140 |   'Display label': '표시될 라벨',
141 |   'Hide label': '라벨 숨기기',
142 |   'Drag to rearrange': '드래그하여 재정렬',
143 |   Delete: '삭제',
144 |   'Add key': '키 추가',
145 |   'Field contains markdown': '필드에 마크다운이 포함되어 있습니다.',
146 | 
147 |   // TagColorSettings.tsx
148 |   'Add tag color': '태그 색상 추가',
149 | 
150 |   // components/Item/Item.tsx
151 |   'More options': '더 많은 옵션',
152 |   Cancel: '취소',
153 | 
154 |   // components/Item/ItemContent.tsx
155 |   today: '오늘',
156 |   yesterday: '어제',
157 |   tomorrow: '내일',
158 |   'Change date': '날짜 변경',
159 |   'Change time': '시간 변경',
160 | 
161 |   // components/Item/ItemForm.tsx
162 |   'Card title...': '카드 제목...',
163 |   'Add card': '카드 추가',
164 |   'Add a card': '카드 추가',
165 | 
166 |   // components/Item/ItemMenu.ts
167 |   'Edit card': '카드 수정',
168 |   'New note from card': '카드에서 새 노트 만들기',
169 |   'Archive card': '카드 보관',
170 |   'Delete card': '카드 삭제',
171 |   'Edit date': '날짜 수정',
172 |   'Add date': '날짜 추가',
173 |   'Remove date': '날짜 삭제',
174 |   'Edit time': '시간 수정',
175 |   'Add time': '시간 추가',
176 |   'Remove time': '시간 삭제',
177 |   'Duplicate card': '카드 복제',
178 |   'Split card': '카드 분할',
179 |   'Copy link to card': '카드 링크 복사',
180 |   'Insert card before': '카드 위에 삽입',
181 |   'Insert card after': '카드 아래에 삽입',
182 |   'Add label': '라벨 추가',
183 |   'Move to top': '맨 위로 이동',
184 |   'Move to bottom': '맨 아래로 이동',
185 | 
186 |   // components/Lane/LaneForm.tsx
187 |   'Enter list title...': '목록 제목 입력...',
188 |   'Mark cards in this list as complete': '이 목록의 카드를 완료됨으로 표시',
189 |   'Add list': '목록 추가',
190 |   'Add a list': '목록 추가',
191 | 
192 |   // components/Lane/LaneHeader.tsx
193 |   'Move list': '목록 이동',
194 |   Close: '닫기',
195 | 
196 |   // components/Lane/LaneMenu.tsx
197 |   'Are you sure you want to delete this list and all its cards?':
198 |     '정말로 이 목록과 그 안의 모든 카드를 삭제하시겠습니까?',
199 |   'Yes, delete list': '네, 목록을 삭제합니다.',
200 |   'Are you sure you want to archive this list and all its cards?':
201 |     '정말로 이 목록과 그 안의 모든 카드를 보관하시겠습니까?',
202 |   'Yes, archive list': '네, 모두 보관합니다.',
203 |   'Are you sure you want to archive all cards in this list?':
204 |     '정말로 이 목록의 모든 카드를 보관하시겠습니까?',
205 |   'Yes, archive cards': '네, 모두 보관합니다.',
206 |   'Edit list': '목록 수정',
207 |   'Archive cards': '카드 보관',
208 |   'Archive list': '목록 보관',
209 |   'Delete list': '목록 삭제',
210 |   'Insert list before': '목록을 왼쪽에 생성',
211 |   'Insert list after': '목록을 오른쪽에 생성',
212 |   'Sort by card text': '내용으로 정렬',
213 |   'Sort by date': '날짜순으로 정렬',
214 | 
215 |   // components/helpers/renderMarkdown.ts
216 |   'Unable to find': '찾을 수 없습니다.',
217 |   'Open in default app': '기본 앱으로 열기',
218 | 
219 |   // components/Editor/MarkdownEditor.tsx
220 |   Submit: '확인',
221 | };
222 | 
223 | export default lang;
224 | 


--------------------------------------------------------------------------------
/src/lang/locale/nl.ts:
--------------------------------------------------------------------------------
1 | // Nederlands
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/no.ts:
--------------------------------------------------------------------------------
1 | // Norsk
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/pl.ts:
--------------------------------------------------------------------------------
1 | // język polski
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/pt-br.ts:
--------------------------------------------------------------------------------
  1 | // Português do Brasil
  2 | // Brazilian Portuguese
  3 | import { Lang } from './en';
  4 | 
  5 | const lang: Partial<Lang> = {
  6 |   // main.ts
  7 |   'Create new board': 'Criar um novo quadro',
  8 |   'Archive completed cards in active board': 'Arquivar cartões concluídos no quadro ativo',
  9 |   'Error: current file is not a Kanban board': 'Erro: o arquivo atual não é um quadro Kanban',
 10 |   'Convert empty note to Kanban': 'Converter nota vazia em Kanban',
 11 |   'Error: cannot create Kanban, the current note is not empty':
 12 |     'Erro: não é possível criar o quadro Kanban, a nota atual não está vazia',
 13 |   'Untitled Kanban': 'Kanban sem título',
 14 |   'Toggle between Kanban and markdown mode': 'Alternar entre os modos Kanban e Markdown',
 15 | 
 16 |   // KanbanView.tsx
 17 |   'Open as markdown': 'Abrir como markdown',
 18 |   'Open board settings': 'Abrir configurações do quadro Kanban',
 19 |   'Archive completed cards': 'Arquivar cartões concluídos',
 20 | 
 21 |   // parser.ts
 22 |   Complete: 'Concluído',
 23 |   Archive: 'Arquivado',
 24 | 
 25 |   // settingHelpers.ts
 26 |   'Note: No template plugins are currently enabled.':
 27 |     'Nota: Não há plug-ins de modelo habilitados no momento.',
 28 |   default: 'padrão',
 29 |   'Search...': 'Pesquisar...',
 30 | 
 31 |   // Settings.ts
 32 |   'These settings will take precedence over the default Kanban board settings.':
 33 |     'Essas configurações sobrescreverão as configurações padrão do quadro Kanban',
 34 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 35 |     'Defina as configurações padrão do quadro Kanban. Cada quadro Kanban pode ter sua própria configuração.',
 36 |   'Note template': 'Modelo de nota',
 37 |   'This template will be used when creating new notes from Kanban cards.':
 38 |     'Este modelo será usado quando uma nova nota Kanban for criada.',
 39 |   'No template': 'Sem modelo',
 40 |   'Note folder': 'Pasta de notas',
 41 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 42 |     'As notas criadas pelos links dos cartões Kanban serão colocadas nesta pasta. Se estiver em branco, serão colocadas no local configurado como padrão deste cofre.',
 43 |   'Default folder': 'Pasta padrão',
 44 |   'Maximum number of archived cards': 'Quantidade máxima de cartões arquivados',
 45 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 46 |     'Os cartões arquivados podem ser vistos no modo Markdown. Esta configuração excluirá os cartões antigos assim que o limite for atingido. Inserir o valor -1 retira o limite para cartões arquivados.',
 47 |   'Display card checkbox': 'Exibe uma caixa de seleção do cartão',
 48 |   'When toggled, a checkbox will be displayed with each card':
 49 |     'Quando ativada, uma caixa de seleção será exibida em cada cartão.',
 50 |   'Reset to default': 'Redefinir configurações padrão',
 51 |   'Date & Time': 'Data e Hora',
 52 |   'Date trigger': 'Gatilho de data',
 53 |   'When this is typed, it will trigger the date selector':
 54 |     'Quando este caractere é digitado, o seletor de data é exibido.',
 55 |   'Time trigger': 'Gatilho de hora',
 56 |   'When this is typed, it will trigger the time selector':
 57 |     'Quando este caractere é digitado, o seletor de hora é exibido.',
 58 |   'Date format': 'Formado da data',
 59 |   'This format will be used when saving dates in markdown.':
 60 |     'Este formato será usado quando datas forem armazenadas no Markdown.',
 61 |   'For more syntax, refer to': 'Para mais informações sobre esta sintaxe, consulte os',
 62 |   'format reference': 'modelos de formato.',
 63 |   'Your current syntax looks like this': 'Sua atual sintaxe está assim',
 64 |   'Time format': 'Formato da hora',
 65 |   'Date display format': 'Formato de exibição da data',
 66 |   'This format will be used when displaying dates in Kanban cards.':
 67 |     'Este será o formato das datas exibido nos cartões do Kanban.',
 68 |   'Show relative date': 'Exibir datas relativas',
 69 |   'Link dates to daily notes': 'Vincular datas a notas diárias',
 70 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 71 |     'Ao ativar, as datas serão vinculadas às notas diárias. Ex.: [[2021-04-26]]',
 72 |   'Add date and time to archived cards': 'Adicionar data e hora aos cartões arquivados',
 73 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
 74 |     'Quando ativada, a data e a hora atuais serão adicionadas ao início de um cartão quando ele for arquivado. Ex.: - [] 2021-05-14 10:00 Título do meu cartão',
 75 |   'Archive date/time separator': 'Separador de data/hora do arquivo',
 76 |   'This will be used to separate the archived date/time from the title':
 77 |     'Isso será usado para separar a data/hora arquivada do título.',
 78 |   'Archive date/time format': 'Formato de data/hora do arquivo',
 79 |   'Kanban Plugin': 'Plugin Kanban',
 80 |   'Linked Page Metadata': "Metadados de páginas 'lincadas'",
 81 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
 82 |     "Exibe metadados para a primeira nota 'lincada' em um cartão. Especifique abaixo quais metadados serão exibidos. Um rótulo opcional pode ser fornecido e os rótulos podem ser ocultados completamente.",
 83 | 
 84 |   // MetadataSettings.tsx
 85 |   'Metadata key': 'Metadado',
 86 |   'Display label': 'Descrição personalizada',
 87 |   'Hide label': 'Ocultar',
 88 |   'Drag to rearrange': 'Arraste para reorganizar',
 89 |   Delete: 'Excluir',
 90 |   'Add key': 'Adicionar metadado',
 91 | 
 92 |   // components/Item/Item.tsx
 93 |   'More options': 'Mais opções',
 94 |   Cancel: 'Cancelar',
 95 | 
 96 |   // components/Item/ItemContent.tsx
 97 |   today: 'hoje',
 98 |   yesterday: 'ontem',
 99 |   tomorrow: 'amanhã',
100 |   'Change date': 'Alterar data',
101 |   'Change time': 'Mudar hora',
102 | 
103 |   // components/Item/ItemForm.tsx
104 |   'Card title...': 'Título do item...',
105 |   'Add card': 'Adicionar Item',
106 |   'Add a card': 'Adicione um cartão',
107 | 
108 |   // components/Item/ItemMenu.ts
109 |   'Edit card': 'Editar cartão',
110 |   'New note from card': 'Nova nota do cartão',
111 |   'Archive card': 'Arquivar cartão',
112 |   'Delete card': 'Excluir cartão',
113 |   'Edit date': 'Editar data',
114 |   'Add date': 'Adicionar data',
115 |   'Remove date': 'Remover data',
116 |   'Edit time': 'Editar hora',
117 |   'Add time': 'Adicionar hora',
118 |   'Remove time': 'Remover hora',
119 |   'Duplicate card': 'Duplicate card',
120 | 
121 |   // components/Lane/LaneForm.tsx
122 |   'Enter list title...': 'Insira o título da lista...',
123 |   'Mark cards in this list as complete': 'Marcar os itens nesta lista como concluídos',
124 |   'Add list': 'Adicionar lista',
125 |   'Add a list': 'Adicionar uma lista',
126 | 
127 |   // components/Lane/LaneHeader.tsx
128 |   'Move list': 'Mover lista',
129 |   Close: 'Fechar',
130 | 
131 |   // components/Lane/LaneMenu.tsx
132 |   'Are you sure you want to delete this list and all its cards?':
133 |     'Tem certeza de que deseja excluir esta lista e todos os seus cartões?',
134 |   'Yes, delete list': 'Sim, excluir esta lista',
135 |   'Are you sure you want to archive this list and all its cards?':
136 |     'Tem certeza de que deseja arquivar esta lista e todos os seus cartões?',
137 |   'Yes, archive list': 'Sim, arquivar esta lista',
138 |   'Are you sure you want to archive all cards in this list?':
139 |     'Tem certeza de que deseja arquivar todos os cartões desta lista?',
140 |   'Yes, archive cards': 'Sim, arquivar cartões',
141 |   'Edit list': 'Editar lista',
142 |   'Archive cards': 'Arquivar cartões',
143 |   'Archive list': 'Arquivar lista',
144 |   'Delete list': 'Excluir lista',
145 | };
146 | 
147 | export default lang;
148 | 


--------------------------------------------------------------------------------
/src/lang/locale/pt.ts:
--------------------------------------------------------------------------------
1 | // Português
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/ro.ts:
--------------------------------------------------------------------------------
1 | // Română
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/ru.ts:
--------------------------------------------------------------------------------
  1 | // русский
  2 | import { Lang } from './en';
  3 | 
  4 | const lang: Partial<Lang> = {
  5 |   // main.ts
  6 |   'Open as kanban board': 'Открыть как Kanban-доску',
  7 |   'Create new board': 'Создать новую доску',
  8 |   'Archive completed cards in active board': 'Архивировать завершённые карточки в активной доске',
  9 |   'Error: current file is not a Kanban board': 'Ошибка: текущий файл не является Kanban-доской',
 10 |   'Convert empty note to Kanban': 'Конвертировать пустую заметку в Kanban',
 11 |   'Error: cannot create Kanban, the current note is not empty':
 12 |     'Ошибка: невозможно создать Kanban, текущая заметка не пуста',
 13 |   'New kanban board': 'Новая Kanban-доска',
 14 |   'Untitled Kanban': 'Безымянная Kanban-доска',
 15 |   'Toggle between Kanban and markdown mode': 'Переключиться между Kanban и markdown режимами',
 16 | 
 17 |   // KanbanView.tsx
 18 |   'Open as markdown': 'Открыть как markdown',
 19 |   'Open board settings': 'Открыть настройки доски',
 20 |   'Archive completed cards': 'Архивировать завершённые карточки',
 21 |   'Something went wrong': 'Что-то пошло не так',
 22 |   'You may wish to open as markdown and inspect or edit the file.':
 23 |     'Вы можете открыть файл как markdown и проверить или отредактировать его.',
 24 |   'Are you sure you want to archive all completed cards on this board?':
 25 |     'Вы уверены, что хотите архивировать все завершёённые карточки в этой доске?',
 26 | 
 27 |   // parser.ts
 28 |   Complete: 'Выполнено',
 29 |   Archive: 'Архивировать',
 30 |   'Invalid Kanban file: problems parsing frontmatter':
 31 |     'Неверный файл Kanban: не удаётся парсинг frontmatter',
 32 |   "I don't know how to interpret this line:": 'Я не знаю, как интерпретировать эту строку:',
 33 |   Untitled: 'Без имени', // auto-created column
 34 | 
 35 |   // settingHelpers.ts
 36 |   'Note: No template plugins are currently enabled.':
 37 |     'Примечание: В настоящее время ни один плагин шаблона не включен.',
 38 |   default: 'по умолчанию',
 39 |   'Search...': 'Найти...',
 40 | 
 41 |   // Settings.ts
 42 |   'New line trigger': 'Триггер новой строки',
 43 |   'Select whether Enter or Shift+Enter creates a new line. The opposite of what you choose will create and complete editing of cards and lists.':
 44 |     'Выберите, будет ли создаваться новая строка с помощью Enter или Shift+Enter. Противоположность тому, что вы выберете, позволит создать и завершить редактирование карточек и списков.',
 45 |   'Shift + Enter': 'Shift + Enter',
 46 |   Enter: 'Enter',
 47 |   'Prepend / append new cards': 'Положение новых карточек',
 48 |   'This setting controls whether new cards are added to the beginning or end of the list.':
 49 |     'Эта настройка управляет положением новых карточек, в начале или в конце списка.',
 50 |   Prepend: 'В начале',
 51 |   'Prepend (compact)': 'В начале (компактно)',
 52 |   Append: 'В конце',
 53 |   'These settings will take precedence over the default Kanban board settings.':
 54 |     'Эти настройки будут иметь приоритет над настройками доски Kanban по умолчанию.',
 55 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 56 |     'Установите настройки доски Kanban по умолчанию. Настройки можно переопределить для каждой доски.',
 57 |   'Note template': 'Шаблон заметки',
 58 |   'This template will be used when creating new notes from Kanban cards.':
 59 |     'Этот шаблон будет использоваться при создании новых заметок из карточек Kanban.',
 60 |   'No template': 'Нет шаблона',
 61 |   'Note folder': 'Директория заметок',
 62 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 63 |     'В эту папку будут помещены заметки, созданные из карточек Kanban. Если поле пустое, они будут помещены в папку по умолчанию для этого хранилища.',
 64 |   'Default folder': 'Директория по умолчанию',
 65 |   'List width': 'Ширина списка',
 66 |   'Enter a number to set the list width in pixels.':
 67 |     'Введите число, чтобы установить ширину списка в пикселях.',
 68 |   'Maximum number of archived cards': 'Максимальное количество архивированных карточек',
 69 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 70 |     'Архивированные карточки можно просмотреть в режиме markdown. Эта настройка начнет удалять старые карточки после достижения лимита. Установка этого значения на -1 позволит архиву доски расти бесконечно.',
 71 |   'Display card checkbox': 'Показывать флажок карточки',
 72 |   'When toggled, a checkbox will be displayed with each card':
 73 |     'Когда включено, для каждой карточки будет показан флажок',
 74 |   'Reset to default': 'Сбросить настройки',
 75 |   'Date & Time': 'Дата и время',
 76 |   'Date trigger': 'Триггер даты',
 77 |   'When this is typed, it will trigger the date selector': 'Ввод активирует выбор даты',
 78 |   'Time trigger': 'Триггер времени',
 79 |   'When this is typed, it will trigger the time selector': 'Ввод активирует выбор времени',
 80 |   'Date format': 'Формат даты',
 81 |   'This format will be used when saving dates in markdown.':
 82 |     'Этот формат будет использован при сохранении дат в markdown.',
 83 |   'For more syntax, refer to': 'Полный синтаксис смотрите на',
 84 |   'format reference': 'справка по формату',
 85 |   'Your current syntax looks like this': 'Ваш текущий синтаксис выглядит так',
 86 |   'Time format': 'Формат времени',
 87 |   'Date display format': 'Формат показа даты',
 88 |   'This format will be used when displaying dates in Kanban cards.':
 89 |     'Этот формат будет использован при показе дат в Kanban-карточках.',
 90 |   'Show relative date': 'Показывать относительную дату',
 91 |   'Hide card counts in list titles': 'Скрыть счётчики карточек в заголовках списка',
 92 |   'When toggled, card counts are hidden from the list title':
 93 |     'Когда включено, счётчики карточек скрыты в заголовках списка',
 94 |   'Link dates to daily notes': 'Связывать даты с ежедневными заметками',
 95 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 96 |     'Когда включено, даты будут указывать на ежедневные заметки. Например, [[2021-04-26]]',
 97 |   'Add date and time to archived cards': 'Добавлять дату и время к архивированным карточкам',
 98 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
 99 |     'Когда включено, текущие дата и время будут добавлены к заголовку карточки, когда она заархивирована. Например, - [ ] 2021-05-14 10:00am Мой заголовок карточки',
100 |   'Add archive date/time after card title':
101 |     'Добавлять дату/время архивирования после заголовка карточки',
102 |   'When toggled, the archived date/time will be added after the card title, e.g.- [ ] My card title 2021-05-14 10:00am. By default, it is inserted before the title.':
103 |     'Когда включено, дата и время архивирования будет добавлено после заголовка карточки, например, - [ ] Мой заголовок карточки 2021-05-14 10:00am. По умолчанию добавление производится перед заголовком.',
104 |   'Archive date/time separator': 'Разделитель даты/времени архивирования',
105 |   'This will be used to separate the archived date/time from the title':
106 |     'Будет использоваться для отделения даты/времени архивирования от заголовка',
107 |   'Archive date/time format': 'Формат даты/времени архивирования',
108 |   'Kanban Plugin': 'Плагин Kanban',
109 |   'Tag colors': 'Показывать цвета меток',
110 |   'Set colors for tags displayed in cards.': 'Установить цвета для меток под заголовками карточек.',
111 |   'Linked Page Metadata': 'Метаданные связанных страниц',
112 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
113 |     'Отображение метаданных для первой заметки, связанной с карточкой. Ниже укажите, какие ключи метаданных отображать. Можно указать дополнительную метку, либо скрыть метки полностью.',
114 |   'Board Header Buttons': 'Кнопки заголовка доски',
115 |   'Calendar: first day of week': 'Календарь: первый день недели',
116 |   'Override which day is used as the start of the week':
117 |     'Укажите, какой день должен использоваться как начало недели',
118 |   Sunday: 'Воскресенье',
119 |   Monday: 'Понедельник',
120 |   Tuesday: 'Вторник',
121 |   Wednesday: 'Среда',
122 |   Thursday: 'Четверг',
123 |   Friday: 'Пятница',
124 |   Saturday: 'Суббота',
125 |   'Background color': 'Цвет фона',
126 |   Tag: 'Метка',
127 |   'Text color': 'Цвет текста',
128 |   'Date is': 'Дата',
129 |   Today: 'Сегодня',
130 |   'After now': 'После текущего момента',
131 |   'Before now': 'До текущего момента',
132 |   'Between now and': 'Между сейчас и',
133 |   'Display date colors': 'Показывать цвета даты',
134 |   'Set colors for dates displayed in cards based on the rules below.':
135 |     'Установить цвета для даты, отображаемой под карточкой, базируясь на правилах ниже',
136 |   'Add date color': 'Добавить цвет даты',
137 | 
138 |   // MetadataSettings.tsx
139 |   'Metadata key': 'Ключ метаданных',
140 |   'Display label': 'Показать ярылк',
141 |   'Hide label': 'Спрятать ярлык',
142 |   'Drag to rearrange': 'Потяните, чтобы переупорядочить',
143 |   Delete: 'Удалить',
144 |   'Add key': 'Добавить ключ',
145 |   'Field contains markdown': 'Поле содержит markdown',
146 | 
147 |   // TagColorSettings.tsx
148 |   'Add tag color': 'Добавить цвет метки',
149 | 
150 |   // components/Item/Item.tsx
151 |   'More options': 'Больше настроек',
152 |   Cancel: 'Отмена',
153 | 
154 |   // components/Item/ItemContent.tsx
155 |   today: 'сегодня',
156 |   yesterday: 'вчера',
157 |   tomorrow: 'завтра',
158 |   'Change date': 'Изменить дату',
159 |   'Change time': 'Изменить время',
160 | 
161 |   // components/Item/ItemForm.tsx
162 |   'Card title...': 'Заголовок карточки...',
163 |   'Add card': 'Добавить карточку',
164 |   'Add a card': 'Добавить карточку',
165 | 
166 |   // components/Item/ItemMenu.ts
167 |   'Edit card': 'Редактировать карточку',
168 |   'New note from card': 'Новая заметка из карточки',
169 |   'Archive card': 'Архивировать карточку',
170 |   'Delete card': 'Удалить карточку',
171 |   'Edit date': 'Редактировать дату',
172 |   'Add date': 'Добавить дату',
173 |   'Remove date': 'Удалить дату',
174 |   'Edit time': 'Редактировать время',
175 |   'Add time': 'Добавить время',
176 |   'Remove time': 'Удалить время',
177 |   'Duplicate card': 'Дублировать карточку',
178 |   'Split card': 'Разделить карточку',
179 |   'Copy link to card': 'Скопировать ссылку на карточку',
180 |   'Insert card before': 'Вставить карточку до',
181 |   'Insert card after': 'Вставить карточку после',
182 |   'Add label': 'Добавить ярлык',
183 |   'Move to top': 'Переместить вверх',
184 |   'Move to bottom': 'Переместить вниз',
185 | 
186 |   // components/Lane/LaneForm.tsx
187 |   'Enter list title...': 'Введите заголовок списка...',
188 |   'Mark cards in this list as complete': 'Отметить карточки в этом списке как завершённые',
189 |   'Add list': 'Добавить список',
190 |   'Add a list': 'Добавить список',
191 | 
192 |   // components/Lane/LaneHeader.tsx
193 |   'Move list': 'Переместить список',
194 |   Close: 'Закрыть',
195 | 
196 |   // components/Lane/LaneMenu.tsx
197 |   'Are you sure you want to delete this list and all its cards?':
198 |     'Вы уверены, что хотите удалить этот список и все его карточки?',
199 |   'Yes, delete list': 'Да, удалить список',
200 |   'Are you sure you want to archive this list and all its cards?':
201 |     'Вы уверены, что хотите архивировать этот список и все его карточки?',
202 |   'Yes, archive list': 'Да, архивировать список',
203 |   'Are you sure you want to archive all cards in this list?':
204 |     'Вы уверены, что хотите архивировать все карточки в этом списке?',
205 |   'Yes, archive cards': 'Да, архивировать карточки',
206 |   'Edit list': 'Редактировать список',
207 |   'Archive cards': 'Архивировать карточки',
208 |   'Archive list': 'Архивировать список',
209 |   'Delete list': 'Удалить список',
210 |   'Insert list before': 'Вставить список до',
211 |   'Insert list after': 'Вставить список после',
212 |   'Sort by card text': 'Сортировать по тексту карточки',
213 |   'Sort by date': 'Сортировать по дате',
214 | 
215 |   // components/helpers/renderMarkdown.ts
216 |   'Unable to find': 'Невозможно найти',
217 |   'Open in default app': 'Открыть в приложении по умолчанию',
218 | 
219 |   // components/Editor/MarkdownEditor.tsx
220 |   Submit: 'Сохранить',
221 | };
222 | 
223 | export default lang;
224 | 


--------------------------------------------------------------------------------
/src/lang/locale/sq.ts:
--------------------------------------------------------------------------------
1 | // Shqip
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/tr.ts:
--------------------------------------------------------------------------------
1 | // Türkçe
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/uk.ts:
--------------------------------------------------------------------------------
1 | // Український
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/lang/locale/zh-cn.ts:
--------------------------------------------------------------------------------
  1 | // 简体中文
  2 | import { Lang } from './en';
  3 | 
  4 | const lang: Partial<Lang> = {
  5 |   // main.ts
  6 |   'Open as kanban board': '打开为看板',
  7 |   'Create new board': '创建新看板',
  8 |   'Archive completed cards in active board': '在当前看板中归档已完成卡片',
  9 |   'Error: current file is not a Kanban board': '错误：当前文件不是看板文件',
 10 |   'Convert empty note to Kanban': '转换空白笔记为看板',
 11 |   'Error: cannot create Kanban, the current note is not empty':
 12 |     '错误：无法转换当前文件，当前笔记不是空白笔记',
 13 |   'New kanban board': '新看板',
 14 |   'Untitled Kanban': '未命名看板',
 15 |   'Toggle between Kanban and markdown mode': '在看板和 Markdown 模式之间进行切换',
 16 | 
 17 |   // KanbanView.tsx
 18 |   'Open as markdown': '打开为 Markdown 文件',
 19 |   'Open board settings': '打开看板设置',
 20 |   'Archive completed cards': '归档已完成卡片',
 21 |   'Something went wrong': '出了点问题',
 22 |   'You may wish to open as markdown and inspect or edit the file.':
 23 |     '你可能希望以 Markdown 方式打开，并检查或编辑该文件。',
 24 |   'Are you sure you want to archive all completed cards on this board?':
 25 |     '你确定要将这个板块上所有已完成的卡片归档吗？',
 26 | 
 27 |   // parser.ts
 28 |   Complete: '完成',
 29 |   Archive: '归档',
 30 |   'Invalid Kanban file: problems parsing frontmatter':
 31 |     '无效的看板文件：解析 frontmatter 时出现问题',
 32 |   "I don't know how to interpret this line:": '我不知道如何解读这句话：',
 33 |   Untitled: '未命名', // auto-created column
 34 | 
 35 |   // settingHelpers.ts
 36 |   'Note: No template plugins are currently enabled.': '注意：当前没有启用模板插件',
 37 |   default: '默认',
 38 |   'Search...': '搜索……',
 39 | 
 40 |   // Settings.ts
 41 |   'New line trigger': '换行触发器',
 42 |   'Select whether Enter or Shift+Enter creates a new line. The opposite of what you choose will create and complete editing of cards and lists.':
 43 |     '选择 Enter 或是 Shift+Enter 来创建新行, 未选用的快捷键将被用于创建卡片和列，以及完成卡片、列的编辑。',
 44 |   'Shift + Enter': 'Shift + Enter',
 45 |   Enter: 'Enter',
 46 |   'Prepend / append new cards': '追加新卡片',
 47 |   'This setting controls whether new cards are added to the beginning or end of the list.':
 48 |     '设置新卡片追加到列头部或尾部。',
 49 |   Prepend: '头部',
 50 |   'Prepend (compact)': '头部 (紧凑)',
 51 |   Append: '尾部',
 52 |   'These settings will take precedence over the default Kanban board settings.':
 53 |     '当前看板设置将会覆盖默认的看板设置。',
 54 |   'Set the default Kanban board settings. Settings can be overridden on a board-by-board basis.':
 55 |     '更改默认的看板设置。为每个看板单独进行设置将覆盖默认设置。',
 56 |   'Note template': '笔记模板',
 57 |   'This template will be used when creating new notes from Kanban cards.':
 58 |     '从看板卡片创建新笔记时会使用该模板。',
 59 |   'No template': '没有模板',
 60 |   'Note folder': '笔记存放位置',
 61 |   'Notes created from Kanban cards will be placed in this folder. If blank, they will be placed in the default location for this vault.':
 62 |     '从看板卡片创建的笔记会放置到该文件夹中。如果为空，笔记将会放置到 Obsidian 的默认文件存放位置。',
 63 |   'Default folder': '默认文件夹',
 64 |   'List width': '列宽',
 65 |   'Enter a number to set the list width in pixels.': '输入一个像素值来设置列的宽度',
 66 |   'Maximum number of archived cards': '单个看板内已归档卡片的最大数量',
 67 |   "Archived cards can be viewed in markdown mode. This setting will begin removing old cards once the limit is reached. Setting this value to -1 will allow a board's archive to grow infinitely.":
 68 |     '已归档卡片可以在 Markdown 模式下查看。该设置将使已归档卡片在达到最大数量时删除旧卡。设置为 -1 可以永久保留所有归档卡片。',
 69 |   'Display card checkbox': '展示卡片复选框',
 70 |   'When toggled, a checkbox will be displayed with each card': '打开时，复选框会出现在每张卡片上',
 71 |   'Reset to default': '还原初始设置',
 72 |   'Date & Time': '日期和时间',
 73 |   'Date trigger': '日期触发指令',
 74 |   'When this is typed, it will trigger the date selector':
 75 |     '当在看板卡片中输入这个时，会触发一个日期选择器',
 76 |   'Time trigger': '时间触发指令',
 77 |   'When this is typed, it will trigger the time selector':
 78 |     '当在看板卡片中输入这个时，会触发一个时间选择器',
 79 |   'Date format': '日期格式',
 80 |   'This format will be used when saving dates in markdown.':
 81 |     '这个格式会在日期保存到 Markdown 格式时使用。',
 82 |   'For more syntax, refer to': '更多格式，请查看',
 83 |   'format reference': '格式参考',
 84 |   'Your current syntax looks like this': '你当前设置的格式会是',
 85 |   'Time format': '时间格式',
 86 |   'Date display format': '日期展示格式',
 87 |   'This format will be used when displaying dates in Kanban cards.': '看板卡片会以该格式展示日期。',
 88 |   'Show relative date': '展示相对日期',
 89 |   'Hide card counts in list titles': '在列标题上隐藏卡片计数',
 90 |   'When toggled, card counts are hidden from the list title': '打开时，列标题上的卡片计数将隐藏',
 91 |   'Link dates to daily notes': '链接日期到日记',
 92 |   'When toggled, dates will link to daily notes. Eg. [[2021-04-26]]':
 93 |     '打开时，日期会自动链接到日记页面，例如[[2021-04-26]]',
 94 |   'Add date and time to archived cards': '添加日期和时间到归档卡片',
 95 |   'When toggled, the current date and time will be added to the card title when it is archived. Eg. - [ ] 2021-05-14 10:00am My card title':
 96 |     '打开时，当前日期和时间会被添加到归档卡片的 frontmatter 上，例如“- [ ] 2021-05-14 10:00am 我的卡片标题”',
 97 |   'Archive date/time separator': '归档日期或时间分隔符Archive date/time separator',
 98 |   'This will be used to separate the archived date/time from the title':
 99 |     '用于分隔标题与归档卡片的日期或时间',
100 |   'Archive date/time format': '归档日期或时间格式',
101 |   'Kanban Plugin': '看板插件',
102 |   'Linked Page Metadata': '连接的页面元数据',
103 |   'Display metadata for the first note linked within a card. Specify which metadata keys to display below. An optional label can be provided, and labels can be hidden altogether.':
104 |     '展示卡片中第一个连接所对应的笔记元数据。请在下方指定哪些元数据可以展示。你可以选择展示哪些标志，所有标志都可以被隐藏。',
105 |   'Board Header Buttons': '板头按钮',
106 |   'Calendar: first day of week': '日历：一周的第一天',
107 |   'Override which day is used as the start of the week': '设置哪一天作为一周的开始',
108 |   Sunday: '周日',
109 |   Monday: '周一',
110 |   Tuesday: '周二',
111 |   Wednesday: '周三',
112 |   Thursday: '周四',
113 |   Friday: '周五',
114 |   Saturday: '周六',
115 | 
116 |   // MetadataSettings.tsx
117 |   'Metadata key': '元数据参数名',
118 |   'Display label': '展示标志',
119 |   'Hide label': '隐藏标志',
120 |   'Drag to rearrange': '拖动以重排顺序',
121 |   Delete: '删除',
122 |   'Add key': '添加参数名',
123 |   'Field contains markdown': '字段包含 Markdown',
124 | 
125 |   // components/Item/Item.tsx
126 |   'More options': '更多选项',
127 |   Cancel: '取消',
128 | 
129 |   // components/Item/ItemContent.tsx
130 |   today: '今天',
131 |   yesterday: '昨天',
132 |   tomorrow: '明天',
133 |   'Change date': '更改日期',
134 |   'Change time': '更改时间',
135 | 
136 |   // components/Item/ItemForm.tsx
137 |   'Card title...': '卡片标题……',
138 |   'Add card': '添加',
139 |   'Add a card': '添加卡片',
140 | 
141 |   // components/Item/ItemMenu.ts
142 |   'Edit card': '编辑卡片',
143 |   'New note from card': '从卡片新建笔记',
144 |   'Archive card': '归档卡片',
145 |   'Delete card': '删除卡片',
146 |   'Edit date': '编辑日期',
147 |   'Add date': '添加日期',
148 |   'Remove date': '移除日期',
149 |   'Edit time': '编辑时间',
150 |   'Add time': '添加时间',
151 |   'Remove time': '移除时间',
152 |   'Duplicate card': '复制卡片',
153 |   'Split card': '分离卡片',
154 |   'Copy link to card': '复制链接至卡片',
155 |   'Insert card before': '在上方插入卡片',
156 |   'Insert card after': '在下方插入卡片',
157 |   'Move to top': '移到顶部',
158 |   'Move to bottom': '移至底部',
159 | 
160 |   // components/Lane/LaneForm.tsx
161 |   'Enter list title...': '输入新的列标题……',
162 |   'Mark cards in this list as complete': '将该列设置为完成列',
163 |   'Add list': '添加',
164 |   'Add a list': '添加列',
165 | 
166 |   // components/Lane/LaneHeader.tsx
167 |   'Move list': '移动列',
168 |   Close: '关闭',
169 | 
170 |   // components/Lane/LaneMenu.tsx
171 |   'Are you sure you want to delete this list and all its cards?':
172 |     '你确定你要删除整列以及该列下所有卡片吗？',
173 |   'Yes, delete list': '是，删除列',
174 |   'Are you sure you want to archive this list and all its cards?':
175 |     '你确定你要归档整列以及该列下所有卡片吗？',
176 |   'Yes, archive list': '是, 归档列',
177 |   'Are you sure you want to archive all cards in this list?': '你确认你要归档当前列的所有卡片吗？',
178 |   'Yes, archive cards': '是，归档所有卡片',
179 |   'Edit list': '编辑列',
180 |   'Archive cards': '归档卡片',
181 |   'Archive list': '归档列',
182 |   'Delete list': '删除列',
183 |   'Insert list before': '在上方插入列',
184 |   'Insert list after': '在下方插入列',
185 |   'Sort by card text': '以卡片文本排序',
186 |   'Sort by date': '以日期排序',
187 | 
188 |   // components/helpers/renderMarkdown.ts
189 |   'Unable to find': '无法找到',
190 |   'Open in default app': '在默认应用中打开',
191 | 
192 |   // components/Editor/MarkdownEditor.tsx
193 |   Submit: '提交',
194 | };
195 | 
196 | export default lang;
197 | 


--------------------------------------------------------------------------------
/src/lang/locale/zh-tw.ts:
--------------------------------------------------------------------------------
1 | // 繁體中文
2 | import { Lang } from './en';
3 | 
4 | const lang: Partial<Lang> = {};
5 | 
6 | export default lang;
7 | 


--------------------------------------------------------------------------------
/src/main.ts:
--------------------------------------------------------------------------------
  1 | import { around } from 'monkey-around';
  2 | import {
  3 |   MarkdownView,
  4 |   Platform,
  5 |   Plugin,
  6 |   TFile,
  7 |   TFolder,
  8 |   ViewState,
  9 |   WorkspaceLeaf,
 10 |   debounce,
 11 | } from 'obsidian';
 12 | import { render, unmountComponentAtNode, useEffect, useState } from 'preact/compat';
 13 | 
 14 | import { createApp } from './DragDropApp';
 15 | import { KanbanView, kanbanIcon, kanbanViewType } from './KanbanView';
 16 | import { KanbanSettings, KanbanSettingsTab } from './Settings';
 17 | import { StateManager } from './StateManager';
 18 | import { DateSuggest, TimeSuggest } from './components/Editor/suggest';
 19 | import { getParentWindow } from './dnd/util/getWindow';
 20 | import { hasFrontmatterKey } from './helpers';
 21 | import { t } from './lang/helpers';
 22 | import { basicFrontmatter, frontmatterKey } from './parsers/common';
 23 | 
 24 | interface WindowRegistry {
 25 |   viewMap: Map<string, KanbanView>;
 26 |   viewStateReceivers: Array<(views: KanbanView[]) => void>;
 27 |   appRoot: HTMLElement;
 28 | }
 29 | 
 30 | function getEditorClass(app: any) {
 31 |   const md = app.embedRegistry.embedByExtension.md(
 32 |     { app: app, containerEl: createDiv(), state: {} },
 33 |     null,
 34 |     ''
 35 |   );
 36 | 
 37 |   md.load();
 38 |   md.editable = true;
 39 |   md.showEditor();
 40 | 
 41 |   const MarkdownEditor = Object.getPrototypeOf(Object.getPrototypeOf(md.editMode)).constructor;
 42 | 
 43 |   md.unload();
 44 | 
 45 |   return MarkdownEditor;
 46 | }
 47 | 
 48 | export default class KanbanPlugin extends Plugin {
 49 |   settingsTab: KanbanSettingsTab;
 50 |   settings: KanbanSettings = {};
 51 | 
 52 |   // leafid => view mode
 53 |   kanbanFileModes: Record<string, string> = {};
 54 |   stateManagers: Map<TFile, StateManager> = new Map();
 55 | 
 56 |   windowRegistry: Map<Window, WindowRegistry> = new Map();
 57 | 
 58 |   _loaded: boolean = false;
 59 | 
 60 |   isShiftPressed: boolean = false;
 61 | 
 62 |   async loadSettings() {
 63 |     this.settings = Object.assign({}, await this.loadData());
 64 |   }
 65 | 
 66 |   async saveSettings() {
 67 |     await this.saveData(this.settings);
 68 |   }
 69 | 
 70 |   unload(): void {
 71 |     super.unload();
 72 |     Promise.all(
 73 |       this.app.workspace.getLeavesOfType(kanbanViewType).map((leaf) => {
 74 |         this.kanbanFileModes[(leaf as any).id] = 'markdown';
 75 |         return this.setMarkdownView(leaf);
 76 |       })
 77 |     );
 78 |   }
 79 | 
 80 |   onunload() {
 81 |     this.MarkdownEditor = null;
 82 |     this.windowRegistry.forEach((reg, win) => {
 83 |       reg.viewStateReceivers.forEach((fn) => fn([]));
 84 |       this.unmount(win);
 85 |     });
 86 | 
 87 |     this.unmount(window);
 88 | 
 89 |     this.stateManagers.clear();
 90 |     this.windowRegistry.clear();
 91 |     this.kanbanFileModes = {};
 92 | 
 93 |     (this.app.workspace as any).unregisterHoverLinkSource(frontmatterKey);
 94 |   }
 95 | 
 96 |   MarkdownEditor: any;
 97 | 
 98 |   async onload() {
 99 |     await this.loadSettings();
100 | 
101 |     this.MarkdownEditor = getEditorClass(this.app);
102 | 
103 |     this.registerEditorSuggest(new TimeSuggest(this.app, this));
104 |     this.registerEditorSuggest(new DateSuggest(this.app, this));
105 | 
106 |     this.registerEvent(
107 |       this.app.workspace.on('window-open', (_: any, win: Window) => {
108 |         this.mount(win);
109 |       })
110 |     );
111 | 
112 |     this.registerEvent(
113 |       this.app.workspace.on('window-close', (_: any, win: Window) => {
114 |         this.unmount(win);
115 |       })
116 |     );
117 | 
118 |     this.settingsTab = new KanbanSettingsTab(this, {
119 |       onSettingsChange: async (newSettings) => {
120 |         this.settings = newSettings;
121 |         await this.saveSettings();
122 | 
123 |         // Force a complete re-render when settings change
124 |         this.stateManagers.forEach((stateManager) => {
125 |           stateManager.forceRefresh();
126 |         });
127 |       },
128 |     });
129 | 
130 |     this.addSettingTab(this.settingsTab);
131 | 
132 |     this.registerView(kanbanViewType, (leaf) => new KanbanView(leaf, this));
133 |     this.registerMonkeyPatches();
134 |     this.registerCommands();
135 |     this.registerEvents();
136 | 
137 |     // Mount an empty component to start; views will be added as we go
138 |     this.mount(window);
139 | 
140 |     (this.app.workspace as any).floatingSplit?.children?.forEach((c: any) => {
141 |       this.mount(c.win);
142 |     });
143 | 
144 |     this.registerDomEvent(window, 'keydown', this.handleShift);
145 |     this.registerDomEvent(window, 'keyup', this.handleShift);
146 | 
147 |     this.addRibbonIcon(kanbanIcon, t('Create new board'), () => {
148 |       this.newKanban();
149 |     });
150 |   }
151 | 
152 |   handleShift = (e: KeyboardEvent) => {
153 |     this.isShiftPressed = e.shiftKey;
154 |   };
155 | 
156 |   getKanbanViews(win: Window) {
157 |     const reg = this.windowRegistry.get(win);
158 | 
159 |     if (reg) {
160 |       return Array.from(reg.viewMap.values());
161 |     }
162 | 
163 |     return [];
164 |   }
165 | 
166 |   getKanbanView(id: string, win: Window) {
167 |     const reg = this.windowRegistry.get(win);
168 | 
169 |     if (reg?.viewMap.has(id)) {
170 |       return reg.viewMap.get(id);
171 |     }
172 | 
173 |     for (const reg of this.windowRegistry.values()) {
174 |       if (reg.viewMap.has(id)) {
175 |         return reg.viewMap.get(id);
176 |       }
177 |     }
178 | 
179 |     return null;
180 |   }
181 | 
182 |   getStateManager(file: TFile) {
183 |     return this.stateManagers.get(file);
184 |   }
185 | 
186 |   getStateManagerFromViewID(id: string, win: Window) {
187 |     const view = this.getKanbanView(id, win);
188 | 
189 |     if (!view) {
190 |       return null;
191 |     }
192 | 
193 |     return this.stateManagers.get(view.file);
194 |   }
195 | 
196 |   useKanbanViews(win: Window): KanbanView[] {
197 |     const [state, setState] = useState(this.getKanbanViews(win));
198 | 
199 |     useEffect(() => {
200 |       const reg = this.windowRegistry.get(win);
201 | 
202 |       reg?.viewStateReceivers.push(setState);
203 | 
204 |       return () => {
205 |         reg?.viewStateReceivers.remove(setState);
206 |       };
207 |     }, [win]);
208 | 
209 |     return state;
210 |   }
211 | 
212 |   addView(view: KanbanView, data: string, shouldParseData: boolean) {
213 |     const win = view.getWindow();
214 |     const reg = this.windowRegistry.get(win);
215 | 
216 |     if (!reg) return;
217 |     if (!reg.viewMap.has(view.id)) {
218 |       reg.viewMap.set(view.id, view);
219 |     }
220 | 
221 |     const file = view.file;
222 | 
223 |     if (this.stateManagers.has(file)) {
224 |       this.stateManagers.get(file).registerView(view, data, shouldParseData);
225 |     } else {
226 |       this.stateManagers.set(
227 |         file,
228 |         new StateManager(
229 |           this.app,
230 |           view,
231 |           data,
232 |           () => this.stateManagers.delete(file),
233 |           () => this.settings
234 |         )
235 |       );
236 |     }
237 | 
238 |     reg.viewStateReceivers.forEach((fn) => fn(this.getKanbanViews(win)));
239 |   }
240 | 
241 |   removeView(view: KanbanView) {
242 |     const entry = Array.from(this.windowRegistry.entries()).find(([, reg]) => {
243 |       return reg.viewMap.has(view.id);
244 |     }, []);
245 | 
246 |     if (!entry) return;
247 | 
248 |     const [win, reg] = entry;
249 |     const file = view.file;
250 | 
251 |     if (reg.viewMap.has(view.id)) {
252 |       reg.viewMap.delete(view.id);
253 |     }
254 | 
255 |     if (this.stateManagers.has(file)) {
256 |       this.stateManagers.get(file).unregisterView(view);
257 |       reg.viewStateReceivers.forEach((fn) => fn(this.getKanbanViews(win)));
258 |     }
259 |   }
260 | 
261 |   handleViewFileRename(view: KanbanView, oldPath: string) {
262 |     const win = view.getWindow();
263 |     if (!this.windowRegistry.has(win)) {
264 |       return;
265 |     }
266 | 
267 |     const reg = this.windowRegistry.get(win);
268 |     const oldId = `${(view.leaf as any).id}:::${oldPath}`;
269 | 
270 |     if (reg.viewMap.has(oldId)) {
271 |       reg.viewMap.delete(oldId);
272 |     }
273 | 
274 |     if (!reg.viewMap.has(view.id)) {
275 |       reg.viewMap.set(view.id, view);
276 |     }
277 | 
278 |     if (view.isPrimary) {
279 |       this.getStateManager(view.file).softRefresh();
280 |     }
281 |   }
282 | 
283 |   mount(win: Window) {
284 |     if (this.windowRegistry.has(win)) {
285 |       return;
286 |     }
287 | 
288 |     const el = win.document.body.createDiv();
289 | 
290 |     this.windowRegistry.set(win, {
291 |       viewMap: new Map(),
292 |       viewStateReceivers: [],
293 |       appRoot: el,
294 |     });
295 | 
296 |     render(createApp(win, this), el);
297 |   }
298 | 
299 |   unmount(win: Window) {
300 |     if (!this.windowRegistry.has(win)) {
301 |       return;
302 |     }
303 | 
304 |     const reg = this.windowRegistry.get(win);
305 | 
306 |     for (const view of reg.viewMap.values()) {
307 |       this.removeView(view);
308 |     }
309 | 
310 |     unmountComponentAtNode(reg.appRoot);
311 | 
312 |     reg.appRoot.remove();
313 |     reg.viewMap.clear();
314 |     reg.viewStateReceivers.length = 0;
315 |     reg.appRoot = null;
316 | 
317 |     this.windowRegistry.delete(win);
318 |   }
319 | 
320 |   async setMarkdownView(leaf: WorkspaceLeaf, focus: boolean = true) {
321 |     await leaf.setViewState(
322 |       {
323 |         type: 'markdown',
324 |         state: leaf.view.getState(),
325 |         popstate: true,
326 |       } as ViewState,
327 |       { focus }
328 |     );
329 |   }
330 | 
331 |   async setKanbanView(leaf: WorkspaceLeaf) {
332 |     await leaf.setViewState({
333 |       type: kanbanViewType,
334 |       state: leaf.view.getState(),
335 |       popstate: true,
336 |     } as ViewState);
337 |   }
338 | 
339 |   async newKanban(folder?: TFolder) {
340 |     const targetFolder = folder
341 |       ? folder
342 |       : this.app.fileManager.getNewFileParent(app.workspace.getActiveFile()?.path || '');
343 | 
344 |     try {
345 |       const kanban: TFile = await (app.fileManager as any).createNewMarkdownFile(
346 |         targetFolder,
347 |         t('Untitled Kanban')
348 |       );
349 | 
350 |       await this.app.vault.modify(kanban, basicFrontmatter);
351 |       await this.app.workspace.getLeaf().setViewState({
352 |         type: kanbanViewType,
353 |         state: { file: kanban.path },
354 |       });
355 |     } catch (e) {
356 |       console.error('Error creating kanban board:', e);
357 |     }
358 |   }
359 | 
360 |   registerEvents() {
361 |     this.registerEvent(
362 |       this.app.workspace.on('file-menu', (menu, file, source, leaf) => {
363 |         if (source === 'link-context-menu') return;
364 | 
365 |         const fileIsFile = file instanceof TFile;
366 |         const fileIsFolder = file instanceof TFolder;
367 |         const leafIsMarkdown = leaf?.view instanceof MarkdownView;
368 |         const leafIsKanban = leaf?.view instanceof KanbanView;
369 | 
370 |         // Add a menu item to the folder context menu to create a board
371 |         if (fileIsFolder) {
372 |           menu.addItem((item) => {
373 |             item
374 |               .setSection('action-primary')
375 |               .setTitle(t('New kanban board'))
376 |               .setIcon(kanbanIcon)
377 |               .onClick(() => this.newKanban(file));
378 |           });
379 |           return;
380 |         }
381 | 
382 |         if (
383 |           !Platform.isMobile &&
384 |           fileIsFile &&
385 |           leaf &&
386 |           source === 'sidebar-context-menu' &&
387 |           hasFrontmatterKey(file)
388 |         ) {
389 |           const views = this.getKanbanViews(getParentWindow(leaf.view.containerEl));
390 |           let haveKanbanView = false;
391 | 
392 |           for (const view of views) {
393 |             if (view.file === file) {
394 |               view.onPaneMenu(menu, 'more-options', false);
395 |               haveKanbanView = true;
396 |               break;
397 |             }
398 |           }
399 | 
400 |           if (!haveKanbanView) {
401 |             menu.addItem((item) => {
402 |               item
403 |                 .setTitle(t('Open as kanban board'))
404 |                 .setIcon(kanbanIcon)
405 |                 .setSection('pane')
406 |                 .onClick(() => {
407 |                   this.kanbanFileModes[(leaf as any).id || file.path] = kanbanViewType;
408 |                   this.setKanbanView(leaf);
409 |                 });
410 |             });
411 | 
412 |             return;
413 |           }
414 |         }
415 | 
416 |         if (
417 |           leafIsMarkdown &&
418 |           fileIsFile &&
419 |           ['more-options', 'pane-more-options', 'tab-header'].includes(source) &&
420 |           hasFrontmatterKey(file)
421 |         ) {
422 |           menu.addItem((item) => {
423 |             item
424 |               .setTitle(t('Open as kanban board'))
425 |               .setIcon(kanbanIcon)
426 |               .setSection('pane')
427 |               .onClick(() => {
428 |                 this.kanbanFileModes[(leaf as any).id || file.path] = kanbanViewType;
429 |                 this.setKanbanView(leaf);
430 |               });
431 |           });
432 |         }
433 | 
434 |         if (fileIsFile && leafIsKanban) {
435 |           if (['pane-more-options', 'tab-header'].includes(source)) {
436 |             menu.addItem((item) => {
437 |               item
438 |                 .setTitle(t('Open as markdown'))
439 |                 .setIcon(kanbanIcon)
440 |                 .setSection('pane')
441 |                 .onClick(() => {
442 |                   this.kanbanFileModes[(leaf as any).id || file.path] = 'markdown';
443 |                   this.setMarkdownView(leaf);
444 |                 });
445 |             });
446 |           }
447 | 
448 |           if (Platform.isMobile) {
449 |             const stateManager = this.stateManagers.get(file);
450 |             const kanbanView = leaf.view as KanbanView;
451 |             const boardView =
452 |               kanbanView.viewSettings[frontmatterKey] || stateManager.getSetting(frontmatterKey);
453 | 
454 |             menu
455 |               .addItem((item) => {
456 |                 item
457 |                   .setTitle(t('Add a list'))
458 |                   .setIcon('lucide-plus-circle')
459 |                   .setSection('pane')
460 |                   .onClick(() => {
461 |                     kanbanView.emitter.emit('showLaneForm', undefined);
462 |                   });
463 |               })
464 |               .addItem((item) => {
465 |                 item
466 |                   .setTitle(t('Archive completed cards'))
467 |                   .setIcon('lucide-archive')
468 |                   .setSection('pane')
469 |                   .onClick(() => {
470 |                     stateManager.archiveCompletedCards();
471 |                   });
472 |               })
473 |               .addItem((item) => {
474 |                 item
475 |                   .setTitle(t('Archive completed cards'))
476 |                   .setIcon('lucide-archive')
477 |                   .setSection('pane')
478 |                   .onClick(() => {
479 |                     const stateManager = this.stateManagers.get(file);
480 |                     stateManager.archiveCompletedCards();
481 |                   });
482 |               })
483 |               .addItem((item) =>
484 |                 item
485 |                   .setTitle(t('View as board'))
486 |                   .setSection('pane')
487 |                   .setIcon('lucide-trello')
488 |                   .setChecked(boardView === 'basic' || boardView === 'board')
489 |                   .onClick(() => kanbanView.setView('board'))
490 |               )
491 |               .addItem((item) =>
492 |                 item
493 |                   .setTitle(t('View as table'))
494 |                   .setSection('pane')
495 |                   .setIcon('lucide-table')
496 |                   .setChecked(boardView === 'table')
497 |                   .onClick(() => kanbanView.setView('table'))
498 |               )
499 |               .addItem((item) =>
500 |                 item
501 |                   .setTitle(t('View as list'))
502 |                   .setSection('pane')
503 |                   .setIcon('lucide-server')
504 |                   .setChecked(boardView === 'list')
505 |                   .onClick(() => kanbanView.setView('list'))
506 |               )
507 |               .addItem((item) =>
508 |                 item
509 |                   .setTitle(t('Open board settings'))
510 |                   .setSection('pane')
511 |                   .setIcon('lucide-settings')
512 |                   .onClick(() => kanbanView.getBoardSettings())
513 |               );
514 |           }
515 |         }
516 |       })
517 |     );
518 | 
519 |     this.registerEvent(
520 |       app.vault.on('rename', (file, oldPath) => {
521 |         const kanbanLeaves = app.workspace.getLeavesOfType(kanbanViewType);
522 | 
523 |         kanbanLeaves.forEach((leaf) => {
524 |           (leaf.view as KanbanView).handleRename(file.path, oldPath);
525 |         });
526 |       })
527 |     );
528 | 
529 |     const notifyFileChange = debounce(
530 |       (file: TFile) => {
531 |         this.stateManagers.forEach((manager) => {
532 |           if (manager.file !== file) {
533 |             manager.onFileMetadataChange();
534 |           }
535 |         });
536 |       },
537 |       2000,
538 |       true
539 |     );
540 | 
541 |     this.registerEvent(
542 |       app.vault.on('modify', (file) => {
543 |         if (file instanceof TFile) {
544 |           notifyFileChange(file);
545 |         }
546 |       })
547 |     );
548 | 
549 |     this.registerEvent(
550 |       app.metadataCache.on('changed', (file) => {
551 |         notifyFileChange(file);
552 |       })
553 |     );
554 | 
555 |     this.registerEvent(
556 |       (app as any).metadataCache.on('dataview:metadata-change', (_: any, file: TFile) => {
557 |         notifyFileChange(file);
558 |       })
559 |     );
560 | 
561 |     this.registerEvent(
562 |       (app as any).metadataCache.on('dataview:api-ready', () => {
563 |         this.stateManagers.forEach((manager) => {
564 |           manager.forceRefresh();
565 |         });
566 |       })
567 |     );
568 | 
569 |     (app.workspace as any).registerHoverLinkSource(frontmatterKey, {
570 |       display: 'Kanban',
571 |       defaultMod: true,
572 |     });
573 |   }
574 | 
575 |   registerCommands() {
576 |     this.addCommand({
577 |       id: 'create-new-kanban-board',
578 |       name: t('Create new board'),
579 |       callback: () => this.newKanban(),
580 |     });
581 | 
582 |     this.addCommand({
583 |       id: 'archive-completed-cards',
584 |       name: t('Archive completed cards in active board'),
585 |       checkCallback: (checking) => {
586 |         const activeView = app.workspace.getActiveViewOfType(KanbanView);
587 | 
588 |         if (!activeView) return false;
589 |         if (checking) return true;
590 | 
591 |         this.stateManagers.get(activeView.file).archiveCompletedCards();
592 |       },
593 |     });
594 | 
595 |     this.addCommand({
596 |       id: 'toggle-kanban-view',
597 |       name: t('Toggle between Kanban and markdown mode'),
598 |       checkCallback: (checking) => {
599 |         const activeFile = app.workspace.getActiveFile();
600 | 
601 |         if (!activeFile) return false;
602 | 
603 |         const fileCache = app.metadataCache.getFileCache(activeFile);
604 |         const fileIsKanban = !!fileCache?.frontmatter && !!fileCache.frontmatter[frontmatterKey];
605 | 
606 |         if (checking) {
607 |           return fileIsKanban;
608 |         }
609 | 
610 |         const activeView = app.workspace.getActiveViewOfType(KanbanView);
611 | 
612 |         if (activeView) {
613 |           this.kanbanFileModes[(activeView.leaf as any).id || activeFile.path] = 'markdown';
614 |           this.setMarkdownView(activeView.leaf);
615 |         } else if (fileIsKanban) {
616 |           const activeView = app.workspace.getActiveViewOfType(MarkdownView);
617 | 
618 |           if (activeView) {
619 |             this.kanbanFileModes[(activeView.leaf as any).id || activeFile.path] = kanbanViewType;
620 |             this.setKanbanView(activeView.leaf);
621 |           }
622 |         }
623 |       },
624 |     });
625 | 
626 |     this.addCommand({
627 |       id: 'convert-to-kanban',
628 |       name: t('Convert empty note to Kanban'),
629 |       checkCallback: (checking) => {
630 |         const activeView = app.workspace.getActiveViewOfType(MarkdownView);
631 | 
632 |         if (!activeView) return false;
633 | 
634 |         const isFileEmpty = activeView.file.stat.size === 0;
635 | 
636 |         if (checking) return isFileEmpty;
637 |         if (isFileEmpty) {
638 |           app.vault
639 |             .modify(activeView.file, basicFrontmatter)
640 |             .then(() => {
641 |               this.setKanbanView(activeView.leaf);
642 |             })
643 |             .catch((e) => console.error(e));
644 |         }
645 |       },
646 |     });
647 | 
648 |     this.addCommand({
649 |       id: 'add-kanban-lane',
650 |       name: t('Add a list'),
651 |       checkCallback: (checking) => {
652 |         const view = app.workspace.getActiveViewOfType(KanbanView);
653 | 
654 |         if (checking) {
655 |           return view && view instanceof KanbanView;
656 |         }
657 | 
658 |         if (view && view instanceof KanbanView) {
659 |           view.emitter.emit('showLaneForm', undefined);
660 |         }
661 |       },
662 |     });
663 | 
664 |     this.addCommand({
665 |       id: 'view-board',
666 |       name: t('View as board'),
667 |       checkCallback: (checking) => {
668 |         const view = app.workspace.getActiveViewOfType(KanbanView);
669 | 
670 |         if (checking) {
671 |           return view && view instanceof KanbanView;
672 |         }
673 | 
674 |         if (view && view instanceof KanbanView) {
675 |           view.setView('board');
676 |         }
677 |       },
678 |     });
679 | 
680 |     this.addCommand({
681 |       id: 'view-table',
682 |       name: t('View as table'),
683 |       checkCallback: (checking) => {
684 |         const view = app.workspace.getActiveViewOfType(KanbanView);
685 | 
686 |         if (checking) {
687 |           return view && view instanceof KanbanView;
688 |         }
689 | 
690 |         if (view && view instanceof KanbanView) {
691 |           view.setView('table');
692 |         }
693 |       },
694 |     });
695 | 
696 |     this.addCommand({
697 |       id: 'view-list',
698 |       name: t('View as list'),
699 |       checkCallback: (checking) => {
700 |         const view = app.workspace.getActiveViewOfType(KanbanView);
701 | 
702 |         if (checking) {
703 |           return view && view instanceof KanbanView;
704 |         }
705 | 
706 |         if (view && view instanceof KanbanView) {
707 |           view.setView('list');
708 |         }
709 |       },
710 |     });
711 | 
712 |     this.addCommand({
713 |       id: 'open-board-settings',
714 |       name: t('Open board settings'),
715 |       checkCallback: (checking) => {
716 |         const view = app.workspace.getActiveViewOfType(KanbanView);
717 | 
718 |         if (!view) return false;
719 |         if (checking) return true;
720 | 
721 |         view.getBoardSettings();
722 |       },
723 |     });
724 |   }
725 | 
726 |   registerMonkeyPatches() {
727 |     const self = this;
728 | 
729 |     this.app.workspace.onLayoutReady(() => {
730 |       this.register(
731 |         around((app as any).commands, {
732 |           executeCommand(next) {
733 |             return function (command: any) {
734 |               const view = app.workspace.getActiveViewOfType(KanbanView);
735 | 
736 |               if (view && command?.id) {
737 |                 view.emitter.emit('hotkey', { commandId: command.id });
738 |               }
739 | 
740 |               return next.call(this, command);
741 |             };
742 |           },
743 |         })
744 |       );
745 |     });
746 | 
747 |     this.register(
748 |       around(this.app.workspace, {
749 |         // eslint-disable-next-line @typescript-eslint/ban-ts-comment
750 |         // @ts-ignore
751 |         setActiveLeaf(next) {
752 |           return function (...args) {
753 |             next.apply(this, args);
754 |             const view = this.getActiveViewOfType(KanbanView);
755 |             if (view?.activeEditor) {
756 |               this.activeEditor = view.activeEditor;
757 |             }
758 |           };
759 |         },
760 |       })
761 |     );
762 | 
763 |     // Monkey patch WorkspaceLeaf to open Kanbans with KanbanView by default
764 |     this.register(
765 |       around(WorkspaceLeaf.prototype, {
766 |         // Kanbans can be viewed as markdown or kanban, and we keep track of the mode
767 |         // while the file is open. When the file closes, we no longer need to keep track of it.
768 |         detach(next) {
769 |           return function () {
770 |             const state = this.view?.getState();
771 | 
772 |             if (state?.file && self.kanbanFileModes[this.id || state.file]) {
773 |               delete self.kanbanFileModes[this.id || state.file];
774 |             }
775 | 
776 |             return next.apply(this);
777 |           };
778 |         },
779 | 
780 |         setViewState(next) {
781 |           return function (state: ViewState, ...rest: any[]) {
782 |             if (
783 |               // Don't force kanban mode during shutdown
784 |               self._loaded &&
785 |               // If we have a markdown file
786 |               state.type === 'markdown' &&
787 |               state.state?.file &&
788 |               // And the current mode of the file is not set to markdown
789 |               self.kanbanFileModes[this.id || state.state.file] !== 'markdown'
790 |             ) {
791 |               // Then check for the kanban frontMatterKey
792 |               const cache = self.app.metadataCache.getCache(state.state.file);
793 | 
794 |               if (cache?.frontmatter && cache.frontmatter[frontmatterKey]) {
795 |                 // If we have it, force the view type to kanban
796 |                 const newState = {
797 |                   ...state,
798 |                   type: kanbanViewType,
799 |                 };
800 | 
801 |                 self.kanbanFileModes[state.state.file] = kanbanViewType;
802 | 
803 |                 return next.apply(this, [newState, ...rest]);
804 |               }
805 |             }
806 | 
807 |             return next.apply(this, [state, ...rest]);
808 |           };
809 |         },
810 |       })
811 |     );
812 |   }
813 | }
814 | 


--------------------------------------------------------------------------------
/src/parsers/List.ts:
--------------------------------------------------------------------------------
 1 | import { isPlainObject } from 'is-plain-object';
 2 | import { TFile } from 'obsidian';
 3 | import { getAPI } from 'obsidian-dataview';
 4 | import { StateManager } from 'src/StateManager';
 5 | import { Board, Item } from 'src/components/types';
 6 | 
 7 | import { diff, diffApply } from '../helpers/patch';
 8 | import { BaseFormat } from './common';
 9 | import {
10 |   astToUnhydratedBoard,
11 |   boardToMd,
12 |   newItem,
13 |   reparseBoard,
14 |   updateItemContent,
15 | } from './formats/list';
16 | import { hydrateBoard, hydratePostOp } from './helpers/hydrateBoard';
17 | import { parseMarkdown } from './parseMarkdown';
18 | 
19 | const generatedKeys: Array<string | number> = [
20 |   'id',
21 |   'date',
22 |   'time',
23 |   'titleSearch',
24 |   'titleSearchRaw',
25 |   'file',
26 | ];
27 | 
28 | export class ListFormat implements BaseFormat {
29 |   stateManager: StateManager;
30 | 
31 |   constructor(stateManager: StateManager) {
32 |     this.stateManager = stateManager;
33 |   }
34 | 
35 |   newItem(content: string, checkChar: string, forceEdit?: boolean) {
36 |     return newItem(this.stateManager, content, checkChar, forceEdit);
37 |   }
38 | 
39 |   updateItemContent(item: Item, content: string) {
40 |     return updateItemContent(this.stateManager, item, content);
41 |   }
42 | 
43 |   boardToMd(board: Board) {
44 |     return boardToMd(board);
45 |   }
46 | 
47 |   mdToBoard(md: string) {
48 |     const { ast, settings, frontmatter } = parseMarkdown(this.stateManager, md);
49 |     const newBoard = astToUnhydratedBoard(this.stateManager, settings, frontmatter, ast, md);
50 |     const { state } = this.stateManager;
51 |     const dv = getAPI();
52 | 
53 |     if (!this.stateManager.hasError() && state) {
54 |       const ops = diff(
55 |         state,
56 |         newBoard,
57 |         (path) => {
58 |           return generatedKeys.includes(path.last());
59 |         },
60 |         (val: any) => {
61 |           if (!val) return String(val);
62 |           if (val instanceof TFile) return val.path;
63 |           if (isPlainObject(val) || Array.isArray(val)) return String(val);
64 |           if (dv && !dv.value.isObject(val)) return dv.value.toString(val);
65 |           return String(val);
66 |         }
67 |       );
68 | 
69 |       const patchedBoard = diffApply(state, ops) as Board;
70 | 
71 |       return hydratePostOp(this.stateManager, patchedBoard, ops);
72 |     }
73 | 
74 |     return hydrateBoard(this.stateManager, newBoard);
75 |   }
76 | 
77 |   reparseBoard() {
78 |     return reparseBoard(this.stateManager, this.stateManager.state);
79 |   }
80 | }
81 | 


--------------------------------------------------------------------------------
/src/parsers/common.ts:
--------------------------------------------------------------------------------
  1 | import { App, TFile, moment } from 'obsidian';
  2 | import { KanbanSettings } from 'src/Settings';
  3 | import { StateManager } from 'src/StateManager';
  4 | import { anyToString } from 'src/components/Item/MetadataTable';
  5 | import { Board, FileMetadata, Item } from 'src/components/types';
  6 | import { defaultSort } from 'src/helpers/util';
  7 | import { t } from 'src/lang/helpers';
  8 | 
  9 | export const frontmatterKey = 'kanban-plugin';
 10 | 
 11 | export enum ParserFormats {
 12 |   List,
 13 | }
 14 | 
 15 | export interface BaseFormat {
 16 |   newItem(content: string, checkChar: string, forceEdit?: boolean): Item;
 17 |   updateItemContent(item: Item, content: string): Item;
 18 |   boardToMd(board: Board): string;
 19 |   mdToBoard(md: string): Board;
 20 |   reparseBoard(): Board;
 21 | }
 22 | 
 23 | export const completeString = `**${t('Complete')}**`;
 24 | export const archiveString = '***';
 25 | export const basicFrontmatter = ['---', '', `${frontmatterKey}: board`, '', '---', '', ''].join(
 26 |   '\n'
 27 | );
 28 | 
 29 | export function settingsToCodeblock(board: Board): string {
 30 |   return [
 31 |     '',
 32 |     '',
 33 |     '%% kanban:settings',
 34 |     '```',
 35 |     JSON.stringify(board.data.settings),
 36 |     '```',
 37 |     '%%',
 38 |   ].join('\n');
 39 | }
 40 | 
 41 | export function getSearchValue(item: Item, stateManager: StateManager) {
 42 |   const fileMetadata = item.data.metadata.fileMetadata;
 43 |   const { titleSearchRaw } = item.data;
 44 | 
 45 |   const searchValue = [titleSearchRaw];
 46 | 
 47 |   if (fileMetadata) {
 48 |     const presentKeys = Object.keys(fileMetadata).filter((k) => {
 49 |       return item.data.metadata.fileMetadataOrder?.includes(k);
 50 |     });
 51 |     if (presentKeys.length) {
 52 |       const keys = anyToString(presentKeys, stateManager);
 53 |       const values = anyToString(
 54 |         presentKeys.map((k) => fileMetadata[k]),
 55 |         stateManager
 56 |       );
 57 | 
 58 |       if (keys) searchValue.push(keys);
 59 |       if (values) searchValue.push(values);
 60 |     }
 61 |   }
 62 | 
 63 |   if (item.data.metadata.time) {
 64 |     searchValue.push(item.data.metadata.time.format('LLLL'));
 65 |     searchValue.push(anyToString(item.data.metadata.time, stateManager));
 66 |   } else if (item.data.metadata.date) {
 67 |     searchValue.push(item.data.metadata.date.format('LLLL'));
 68 |     searchValue.push(anyToString(item.data.metadata.date, stateManager));
 69 |   }
 70 | 
 71 |   return searchValue.join(' ').toLocaleLowerCase();
 72 | }
 73 | 
 74 | export function getDataViewCache(app: App, linkedFile: TFile, sourceFile: TFile) {
 75 |   if (
 76 |     (app as any).plugins.enabledPlugins.has('dataview') &&
 77 |     (app as any).plugins?.plugins?.dataview?.api
 78 |   ) {
 79 |     return (app as any).plugins.plugins.dataview.api.page(linkedFile.path, sourceFile.path);
 80 |   }
 81 | }
 82 | 
 83 | function getPageData(obj: any, path: string) {
 84 |   if (!obj) return null;
 85 |   if (obj[path]) return obj[path];
 86 | 
 87 |   const split = path.split('.');
 88 |   let ctx = obj;
 89 | 
 90 |   for (const p of split) {
 91 |     if (typeof ctx === 'object' && p in ctx) {
 92 |       ctx = ctx[p];
 93 |     } else {
 94 |       ctx = null;
 95 |       break;
 96 |     }
 97 |   }
 98 | 
 99 |   return ctx;
100 | }
101 | 
102 | export function getLinkedPageMetadata(
103 |   stateManager: StateManager,
104 |   linkedFile: TFile | null | undefined
105 | ): { fileMetadata?: FileMetadata; fileMetadataOrder?: string[] } {
106 |   const metaKeys = stateManager.getSetting('metadata-keys');
107 | 
108 |   if (!metaKeys.length) {
109 |     return {};
110 |   }
111 | 
112 |   if (!linkedFile) {
113 |     return {};
114 |   }
115 | 
116 |   const cache = stateManager.app.metadataCache.getFileCache(linkedFile);
117 |   const dataviewCache = getDataViewCache(stateManager.app, linkedFile, stateManager.file);
118 | 
119 |   if (!cache && !dataviewCache) {
120 |     return {};
121 |   }
122 | 
123 |   const metadata: FileMetadata = {};
124 |   const seenTags: { [k: string]: boolean } = {};
125 |   const seenKey: { [k: string]: boolean } = {};
126 |   const order: string[] = [];
127 | 
128 |   let haveData = false;
129 | 
130 |   metaKeys.forEach((k) => {
131 |     if (seenKey[k.metadataKey]) return;
132 | 
133 |     seenKey[k.metadataKey] = true;
134 | 
135 |     if (k.metadataKey === 'tags') {
136 |       let tags = cache?.tags || [];
137 | 
138 |       if (Array.isArray(cache?.frontmatter?.tags)) {
139 |         tags = [].concat(
140 |           tags,
141 |           cache.frontmatter.tags.map((tag: string) => ({ tag: `#${tag}` }))
142 |         );
143 |       }
144 | 
145 |       if (tags?.length === 0) return;
146 | 
147 |       order.push(k.metadataKey);
148 |       metadata.tags = {
149 |         ...k,
150 |         value: tags
151 |           .map((t) => t.tag)
152 |           .filter((t) => {
153 |             if (seenTags[t]) {
154 |               return false;
155 |             }
156 | 
157 |             seenTags[t] = true;
158 |             return true;
159 |           })
160 |           .sort(defaultSort),
161 |       };
162 | 
163 |       haveData = true;
164 |       return;
165 |     }
166 | 
167 |     const dataviewVal = getPageData(dataviewCache, k.metadataKey);
168 |     let cacheVal = getPageData(cache?.frontmatter, k.metadataKey);
169 |     if (
170 |       cacheVal !== null &&
171 |       cacheVal !== undefined &&
172 |       cacheVal !== '' &&
173 |       !(Array.isArray(cacheVal) && cacheVal.length === 0)
174 |     ) {
175 |       if (typeof cacheVal === 'string') {
176 |         if (/^\d{4}-\d{2}-\d{2}/.test(cacheVal)) {
177 |           cacheVal = moment(cacheVal);
178 |         } else if (/^\[\[[^\]]+\]\]$/.test(cacheVal)) {
179 |           const link = (cache.frontmatterLinks || []).find((l) => l.key === k.metadataKey);
180 |           if (link) {
181 |             const file = stateManager.app.metadataCache.getFirstLinkpathDest(
182 |               link.link,
183 |               stateManager.file.path
184 |             );
185 |             if (file) {
186 |               cacheVal = file;
187 |             }
188 |           }
189 |         }
190 |       } else if (Array.isArray(cacheVal)) {
191 |         cacheVal = cacheVal.map<any>((v, i) => {
192 |           if (typeof v === 'string' && /^\[\[[^\]]+\]\]$/.test(v)) {
193 |             const link = (cache.frontmatterLinks || []).find(
194 |               (l) => l.key === k.metadataKey + '.' + i.toString()
195 |             );
196 |             if (link) {
197 |               const file = stateManager.app.metadataCache.getFirstLinkpathDest(
198 |                 link.link,
199 |                 stateManager.file.path
200 |               );
201 |               if (file) {
202 |                 return file;
203 |               }
204 |             }
205 |           }
206 |           return v;
207 |         });
208 |       }
209 | 
210 |       order.push(k.metadataKey);
211 |       metadata[k.metadataKey] = {
212 |         ...k,
213 |         value: cacheVal,
214 |       };
215 |       haveData = true;
216 |     } else if (
217 |       dataviewVal !== undefined &&
218 |       dataviewVal !== null &&
219 |       dataviewVal !== '' &&
220 |       !(Array.isArray(dataviewVal) && dataviewVal.length === 0)
221 |     ) {
222 |       const cachedValue = dataviewCache[k.metadataKey];
223 | 
224 |       order.push(k.metadataKey);
225 |       metadata[k.metadataKey] = {
226 |         ...k,
227 |         value: cachedValue,
228 |       };
229 |       haveData = true;
230 |     }
231 |   });
232 | 
233 |   return {
234 |     fileMetadata: haveData ? metadata : undefined,
235 |     fileMetadataOrder: order,
236 |   };
237 | }
238 | 
239 | export function shouldRefreshBoard(oldSettings: KanbanSettings, newSettings: KanbanSettings) {
240 |   if (!oldSettings && newSettings) {
241 |     return true;
242 |   }
243 | 
244 |   const toCompare: Array<keyof KanbanSettings> = [
245 |     'metadata-keys',
246 |     'date-trigger',
247 |     'time-trigger',
248 |     'link-date-to-daily-note',
249 |     'date-format',
250 |     'time-format',
251 |     'move-dates',
252 |     'move-tags',
253 |     'inline-metadata-position',
254 |     'move-task-metadata',
255 |     'hide-card-count',
256 |     'tag-colors',
257 |     'date-colors',
258 |   ];
259 | 
260 |   return !toCompare.every((k) => {
261 |     return oldSettings[k] === newSettings[k];
262 |   });
263 | }
264 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/blockid.ts:
--------------------------------------------------------------------------------
  1 | import { Extension as FromMarkdownExtension, Token } from 'mdast-util-from-markdown';
  2 | import { markdownLineEnding, markdownSpace } from 'micromark-util-character';
  3 | import { Effects, Extension, State } from 'micromark-util-types';
  4 | 
  5 | import { getSelf } from './helpers';
  6 | 
  7 | export function blockidExtension(): Extension {
  8 |   const name = 'blockid';
  9 |   const startMarker = '^';
 10 | 
 11 |   function tokenize(effects: Effects, ok: State, nok: State) {
 12 |     let data = false;
 13 |     let startMarkerCursor = 0;
 14 | 
 15 |     return start;
 16 | 
 17 |     function start(code: number) {
 18 |       if (code !== startMarker.charCodeAt(startMarkerCursor)) return nok(code);
 19 | 
 20 |       effects.enter(name as any);
 21 |       effects.enter(`${name}Marker` as any);
 22 | 
 23 |       return consumeStart(code);
 24 |     }
 25 | 
 26 |     function consumeStart(code: number) {
 27 |       if (startMarkerCursor === startMarker.length) {
 28 |         effects.exit(`${name}Marker` as any);
 29 |         return consumeData(code);
 30 |       }
 31 | 
 32 |       if (code !== startMarker.charCodeAt(startMarkerCursor)) {
 33 |         return nok(code);
 34 |       }
 35 | 
 36 |       effects.consume(code);
 37 |       startMarkerCursor++;
 38 | 
 39 |       return consumeStart;
 40 |     }
 41 | 
 42 |     function consumeData(code: number) {
 43 |       effects.enter(`${name}Data` as any);
 44 |       effects.enter(`${name}Target` as any);
 45 |       return consumeTarget(code);
 46 |     }
 47 | 
 48 |     function consumeTarget(code: number) {
 49 |       if (markdownSpace(code)) {
 50 |         return nok(code);
 51 |       }
 52 | 
 53 |       if (markdownLineEnding(code) || code === null) {
 54 |         if (!data) return nok(code);
 55 |         effects.exit(`${name}Target` as any);
 56 |         effects.exit(`${name}Data` as any);
 57 |         effects.exit(name as any);
 58 | 
 59 |         return ok(code);
 60 |       }
 61 | 
 62 |       data = true;
 63 |       effects.consume(code);
 64 | 
 65 |       return consumeTarget;
 66 |     }
 67 |   }
 68 | 
 69 |   const call = { tokenize: tokenize };
 70 | 
 71 |   return {
 72 |     text: { [startMarker.charCodeAt(0)]: call },
 73 |   };
 74 | }
 75 | 
 76 | export function blockidFromMarkdown(): FromMarkdownExtension {
 77 |   const name = 'blockid';
 78 | 
 79 |   function enter(token: Token) {
 80 |     this.enter(
 81 |       {
 82 |         type: name,
 83 |         value: null,
 84 |       },
 85 |       token
 86 |     );
 87 |   }
 88 | 
 89 |   function exitTarget(token: Token) {
 90 |     const target = this.sliceSerialize(token);
 91 |     const current = getSelf(this.stack);
 92 | 
 93 |     (current as any).value = target;
 94 |   }
 95 | 
 96 |   function exit(token: Token) {
 97 |     this.exit(token);
 98 |   }
 99 | 
100 |   return {
101 |     enter: {
102 |       [name]: enter,
103 |     },
104 |     exit: {
105 |       [`${name}Target`]: exitTarget,
106 |       [name]: exit,
107 |     },
108 |   };
109 | }
110 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/genericWrapped.ts:
--------------------------------------------------------------------------------
  1 | import { Extension as FromMarkdownExtension, Token } from 'mdast-util-from-markdown';
  2 | import { markdownLineEnding, markdownLineEndingOrSpace } from 'micromark-util-character';
  3 | import { Effects, Extension, State } from 'micromark-util-types';
  4 | 
  5 | import { getSelf } from './helpers';
  6 | 
  7 | export function genericWrappedExtension(
  8 |   name: string,
  9 |   startMarker: string,
 10 |   endMarker: string
 11 | ): Extension {
 12 |   function tokenize(effects: Effects, ok: State, nok: State) {
 13 |     let data = false;
 14 |     let startMarkerCursor = 0;
 15 |     let endMarkerCursor = 0;
 16 | 
 17 |     return start;
 18 | 
 19 |     function start(code: number) {
 20 |       if (code !== startMarker.charCodeAt(startMarkerCursor)) return nok(code);
 21 | 
 22 |       effects.enter(name as any);
 23 |       effects.enter(`${name}Marker` as any);
 24 | 
 25 |       return consumeStart(code);
 26 |     }
 27 | 
 28 |     function consumeStart(code: number) {
 29 |       if (startMarkerCursor === startMarker.length) {
 30 |         effects.exit(`${name}Marker` as any);
 31 |         return consumeData(code);
 32 |       }
 33 | 
 34 |       if (code !== startMarker.charCodeAt(startMarkerCursor)) {
 35 |         return nok(code);
 36 |       }
 37 | 
 38 |       effects.consume(code);
 39 |       startMarkerCursor++;
 40 | 
 41 |       return consumeStart;
 42 |     }
 43 | 
 44 |     function consumeData(code: number) {
 45 |       if (markdownLineEnding(code) || code === null) {
 46 |         return nok(code);
 47 |       }
 48 | 
 49 |       effects.enter(`${name}Data` as any);
 50 |       effects.enter(`${name}Target` as any);
 51 |       return consumeTarget(code);
 52 |     }
 53 | 
 54 |     function consumeTarget(code: number) {
 55 |       if (code === endMarker.charCodeAt(endMarkerCursor)) {
 56 |         if (!data) return nok(code);
 57 |         effects.exit(`${name}Target` as any);
 58 |         effects.exit(`${name}Data` as any);
 59 |         effects.enter(`${name}Marker` as any);
 60 |         return consumeEnd(code);
 61 |       }
 62 | 
 63 |       if (markdownLineEnding(code) || code === null) {
 64 |         return nok(code);
 65 |       }
 66 | 
 67 |       if (!markdownLineEndingOrSpace(code)) {
 68 |         data = true;
 69 |       }
 70 | 
 71 |       effects.consume(code);
 72 | 
 73 |       return consumeTarget;
 74 |     }
 75 | 
 76 |     function consumeEnd(code: number) {
 77 |       if (endMarkerCursor === endMarker.length) {
 78 |         effects.exit(`${name}Marker` as any);
 79 |         effects.exit(name as any);
 80 |         return ok(code);
 81 |       }
 82 | 
 83 |       if (code !== endMarker.charCodeAt(endMarkerCursor)) {
 84 |         return nok(code);
 85 |       }
 86 | 
 87 |       effects.consume(code);
 88 |       endMarkerCursor++;
 89 | 
 90 |       return consumeEnd;
 91 |     }
 92 |   }
 93 | 
 94 |   const call = { tokenize: tokenize };
 95 | 
 96 |   return {
 97 |     text: { [startMarker.charCodeAt(0)]: call },
 98 |   };
 99 | }
100 | 
101 | export function genericWrappedFromMarkdown(
102 |   name: string,
103 |   process?: (str: string, curr: Record<string, any>) => void
104 | ): FromMarkdownExtension {
105 |   function enterWrapped(token: Token) {
106 |     this.enter(
107 |       {
108 |         type: name,
109 |         value: null,
110 |       },
111 |       token
112 |     );
113 |   }
114 | 
115 |   function exitWrappedTarget(token: Token) {
116 |     const target = this.sliceSerialize(token);
117 |     const current = getSelf(this.stack);
118 | 
119 |     (current as any).value = target;
120 | 
121 |     if (process) {
122 |       process(target, current);
123 |     }
124 |   }
125 | 
126 |   function exitWrapped(token: Token) {
127 |     this.exit(token);
128 |   }
129 | 
130 |   return {
131 |     enter: {
132 |       [name]: enterWrapped,
133 |     },
134 |     exit: {
135 |       [`${name}Target`]: exitWrappedTarget,
136 |       [name]: exitWrapped,
137 |     },
138 |   };
139 | }
140 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/helpers.ts:
--------------------------------------------------------------------------------
1 | import { CompileContext } from 'mdast-util-from-markdown';
2 | 
3 | export function getSelf(stack: CompileContext['stack']) {
4 |   return stack[stack.length - 1];
5 | }
6 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/internalMarkdownLink.ts:
--------------------------------------------------------------------------------
 1 | import { Token } from 'mdast-util-from-markdown';
 2 | 
 3 | export function internalMarkdownLinks(
 4 |   process: (node: Record<string, any>, isEmbed: boolean) => void
 5 | ) {
 6 |   function exitLink(token: Token) {
 7 |     process(this.stack[this.stack.length - 1], false);
 8 |     this.exit(token);
 9 |   }
10 | 
11 |   function exitImage(token: Token) {
12 |     process(this.stack[this.stack.length - 1], true);
13 |     this.exit(token);
14 |   }
15 | 
16 |   return {
17 |     exit: {
18 |       link: exitLink,
19 |       image: exitImage,
20 |     },
21 |   };
22 | }
23 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/tag.ts:
--------------------------------------------------------------------------------
  1 | import { Extension as FromMarkdownExtension, Token } from 'mdast-util-from-markdown';
  2 | import { markdownLineEndingOrSpace } from 'micromark-util-character';
  3 | import { Effects, Extension, State } from 'micromark-util-types';
  4 | 
  5 | import { getSelf } from './helpers';
  6 | 
  7 | export function tagExtension(): Extension {
  8 |   const name = 'hashtag';
  9 |   const hashCharCode = '#'.charCodeAt(0);
 10 | 
 11 |   function tokenize(effects: Effects, ok: State, nok: State) {
 12 |     let data = false;
 13 |     let startMarkerCursor = 0;
 14 |     const self = this;
 15 | 
 16 |     return start;
 17 | 
 18 |     function start(code: number) {
 19 |       if (
 20 |         code !== hashCharCode ||
 21 |         (self.previous !== null && !/\s/.test(String.fromCharCode(self.previous)))
 22 |       ) {
 23 |         return nok(code);
 24 |       }
 25 | 
 26 |       effects.enter(name as any);
 27 |       effects.enter(`${name}Marker` as any);
 28 | 
 29 |       return consumeStart(code);
 30 |     }
 31 | 
 32 |     function consumeStart(code: number) {
 33 |       if (startMarkerCursor === 1) {
 34 |         effects.exit(`${name}Marker` as any);
 35 |         return consumeData(code);
 36 |       }
 37 | 
 38 |       if (code !== hashCharCode) {
 39 |         return nok(code);
 40 |       }
 41 | 
 42 |       effects.consume(code);
 43 |       startMarkerCursor++;
 44 | 
 45 |       return consumeStart;
 46 |     }
 47 | 
 48 |     function consumeData(code: number) {
 49 |       effects.enter(`${name}Data` as any);
 50 |       effects.enter(`${name}Target` as any);
 51 |       return consumeTarget(code);
 52 |     }
 53 | 
 54 |     function consumeTarget(code: number) {
 55 |       if (
 56 |         code === null ||
 57 |         markdownLineEndingOrSpace(code) ||
 58 |         /[\u2000-\u206F\u2E00-\u2E7F'!"#$%&()*+,.:;<=>?@^`{|}~[\]\\\s\n\r]/.test(
 59 |           String.fromCharCode(code)
 60 |         )
 61 |       ) {
 62 |         if (!data) return nok(code);
 63 |         effects.exit(`${name}Target` as any);
 64 |         effects.exit(`${name}Data` as any);
 65 |         effects.exit(name as any);
 66 | 
 67 |         return ok(code);
 68 |       }
 69 | 
 70 |       data = true;
 71 |       effects.consume(code);
 72 | 
 73 |       return consumeTarget;
 74 |     }
 75 |   }
 76 | 
 77 |   const call = { tokenize: tokenize };
 78 | 
 79 |   return {
 80 |     text: { [hashCharCode]: call },
 81 |   };
 82 | }
 83 | 
 84 | export function tagFromMarkdown(): FromMarkdownExtension {
 85 |   const name = 'hashtag';
 86 | 
 87 |   function enterTag(token: Token) {
 88 |     this.enter(
 89 |       {
 90 |         type: name,
 91 |         value: null,
 92 |       },
 93 |       token
 94 |     );
 95 |   }
 96 | 
 97 |   function exitTagTarget(token: Token) {
 98 |     const target = this.sliceSerialize(token);
 99 |     const current = getSelf(this.stack);
100 | 
101 |     (current as any).value = target;
102 |   }
103 | 
104 |   function exitTag(token: Token) {
105 |     this.exit(token);
106 |   }
107 | 
108 |   return {
109 |     enter: {
110 |       [name]: enterTag,
111 |     },
112 |     exit: {
113 |       [`${name}Target`]: exitTagTarget,
114 |       [name]: exitTag,
115 |     },
116 |   };
117 | }
118 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/taskList.ts:
--------------------------------------------------------------------------------
  1 | import { factorySpace } from 'micromark-factory-space';
  2 | import { markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';
  3 | import { codes } from 'micromark-util-symbol/codes.js';
  4 | import { types } from 'micromark-util-symbol/types.js';
  5 | import { Effects, Extension, State, Token } from 'micromark-util-types';
  6 | 
  7 | const tasklistCheck = { tokenize: tokenizeTasklistCheck };
  8 | 
  9 | export const gfmTaskListItem: Extension = {
 10 |   text: { [codes.leftSquareBracket]: tasklistCheck },
 11 | };
 12 | 
 13 | function tokenizeTasklistCheck(effects: Effects, ok: State, nok: State) {
 14 |   const self = this;
 15 | 
 16 |   return open;
 17 | 
 18 |   function open(code: number) {
 19 |     if (
 20 |       // Exit if there’s stuff before.
 21 |       self.previous !== codes.eof ||
 22 |       // Exit if not in the first content that is the first child of a list
 23 |       // item.
 24 |       !self._gfmTasklistFirstContentOfListItem
 25 |     ) {
 26 |       return nok(code);
 27 |     }
 28 | 
 29 |     effects.enter('taskListCheck' as any);
 30 |     effects.enter('taskListCheckMarker' as any);
 31 |     effects.consume(code);
 32 |     effects.exit('taskListCheckMarker' as any);
 33 |     return inside;
 34 |   }
 35 | 
 36 |   /** @type {State} */
 37 |   function inside(code: number) {
 38 |     if (markdownSpace(code)) {
 39 |       effects.enter('taskListCheckValueUnchecked' as any);
 40 |       effects.consume(code);
 41 |       effects.exit('taskListCheckValueUnchecked' as any);
 42 |       return close;
 43 |     }
 44 | 
 45 |     if (code !== codes.rightSquareBracket) {
 46 |       effects.enter('taskListCheckValueChecked' as any);
 47 |       effects.consume(code);
 48 |       effects.exit('taskListCheckValueChecked' as any);
 49 |       return close;
 50 |     }
 51 | 
 52 |     return nok(code);
 53 |   }
 54 | 
 55 |   /** @type {State} */
 56 |   function close(code: number) {
 57 |     if (code === codes.rightSquareBracket) {
 58 |       effects.enter('taskListCheckMarker' as any);
 59 |       effects.consume(code);
 60 |       effects.exit('taskListCheckMarker' as any);
 61 |       effects.exit('taskListCheck' as any);
 62 |       return effects.check({ tokenize: spaceThenNonSpace }, ok, nok);
 63 |     }
 64 | 
 65 |     return nok(code);
 66 |   }
 67 | }
 68 | 
 69 | /** @type {Tokenizer} */
 70 | function spaceThenNonSpace(effects: Effects, ok: State, nok: State) {
 71 |   const self = this;
 72 | 
 73 |   return factorySpace(effects, after, types.whitespace);
 74 | 
 75 |   /** @type {State} */
 76 |   function after(code: number) {
 77 |     const tail = self.events[self.events.length - 1];
 78 | 
 79 |     return tail &&
 80 |       tail[1].type === types.whitespace &&
 81 |       code !== codes.eof &&
 82 |       !markdownLineEndingOrSpace(code)
 83 |       ? ok(code)
 84 |       : nok(code);
 85 |   }
 86 | }
 87 | 
 88 | /** @type {FromMarkdownExtension} */
 89 | export const gfmTaskListItemFromMarkdown = {
 90 |   exit: {
 91 |     taskListCheckValueChecked: exitCheck,
 92 |     taskListCheckValueUnchecked: exitCheck,
 93 |     paragraph: exitParagraphWithTaskListItem,
 94 |   },
 95 | };
 96 | 
 97 | /** @type {FromMarkdownHandle} */
 98 | function exitCheck(token: Token) {
 99 |   const node = /** @type {ListItem} */ this.stack[this.stack.length - 2];
100 |   // We’re always in a paragraph, in a list item.
101 |   node.checked = token.type === ('taskListCheckValueChecked' as any);
102 |   node.checkChar = this.sliceSerialize(token);
103 | }
104 | 
105 | /** @type {FromMarkdownHandle} */
106 | function exitParagraphWithTaskListItem(token: Token) {
107 |   const parent = /** @type {Parent} */ this.stack[this.stack.length - 2];
108 |   const node = /** @type {Paragraph} */ this.stack[this.stack.length - 1];
109 |   const siblings = parent.children;
110 |   const head = node.children[0];
111 |   let index = -1;
112 |   /** @type {Paragraph|undefined} */
113 |   let firstParaghraph;
114 | 
115 |   if (
116 |     parent &&
117 |     parent.type === 'listItem' &&
118 |     typeof parent.checked === 'boolean' &&
119 |     head &&
120 |     head.type === 'text'
121 |   ) {
122 |     while (++index < siblings.length) {
123 |       const sibling = siblings[index];
124 |       if (sibling.type === 'paragraph') {
125 |         firstParaghraph = sibling;
126 |         break;
127 |       }
128 |     }
129 | 
130 |     if (firstParaghraph === node) {
131 |       // Must start with a space or a tab.
132 |       head.value = head.value.slice(1);
133 | 
134 |       if (head.value.length === 0) {
135 |         node.children.shift();
136 |       } else if (node.position && head.position && typeof head.position.start.offset === 'number') {
137 |         head.position.start.column++;
138 |         head.position.start.offset++;
139 |         node.position.start = Object.assign({}, head.position.start);
140 |       }
141 |     }
142 |   }
143 | 
144 |   this.exit(token);
145 | }
146 | 


--------------------------------------------------------------------------------
/src/parsers/extensions/types.ts:
--------------------------------------------------------------------------------
 1 | import { Parent } from 'mdast';
 2 | import { FileMetadata } from 'src/components/types';
 3 | 
 4 | import { FileAccessor } from '../helpers/parser';
 5 | 
 6 | export interface ValueNode extends Parent {
 7 |   value: string;
 8 | }
 9 | 
10 | export interface DateNode extends ValueNode {
11 |   date: string;
12 | }
13 | 
14 | export interface TimeNode extends ValueNode {
15 |   time: string;
16 | }
17 | 
18 | export interface FileNode extends ValueNode {
19 |   fileAccessor: FileAccessor;
20 |   fileMetadata?: FileMetadata;
21 |   fileMetadataOrder?: string[];
22 | }
23 | 


--------------------------------------------------------------------------------
/src/parsers/formats/list.ts:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { Content, List, Parent, Root } from 'mdast';
  3 | import { ListItem } from 'mdast-util-from-markdown/lib';
  4 | import { toString } from 'mdast-util-to-string';
  5 | import { stringifyYaml } from 'obsidian';
  6 | import { KanbanSettings } from 'src/Settings';
  7 | import { StateManager } from 'src/StateManager';
  8 | import { generateInstanceId } from 'src/components/helpers';
  9 | import {
 10 |   Board,
 11 |   BoardTemplate,
 12 |   Item,
 13 |   ItemData,
 14 |   ItemTemplate,
 15 |   Lane,
 16 |   LaneTemplate,
 17 | } from 'src/components/types';
 18 | import { laneTitleWithMaxItems } from 'src/helpers';
 19 | import { defaultSort } from 'src/helpers/util';
 20 | import { t } from 'src/lang/helpers';
 21 | import { visit } from 'unist-util-visit';
 22 | 
 23 | import { archiveString, completeString, settingsToCodeblock } from '../common';
 24 | import { DateNode, FileNode, TimeNode, ValueNode } from '../extensions/types';
 25 | import {
 26 |   ContentBoundary,
 27 |   getNextOfType,
 28 |   getNodeContentBoundary,
 29 |   getPrevSibling,
 30 |   getStringFromBoundary,
 31 | } from '../helpers/ast';
 32 | import { hydrateItem, preprocessTitle } from '../helpers/hydrateBoard';
 33 | import { extractInlineFields, taskFields } from '../helpers/inlineMetadata';
 34 | import {
 35 |   addBlockId,
 36 |   dedentNewLines,
 37 |   executeDeletion,
 38 |   indentNewLines,
 39 |   markRangeForDeletion,
 40 |   parseLaneTitle,
 41 |   removeBlockId,
 42 |   replaceBrs,
 43 |   replaceNewLines,
 44 | } from '../helpers/parser';
 45 | import { parseFragment } from '../parseMarkdown';
 46 | 
 47 | interface TaskItem extends ListItem {
 48 |   checkChar?: string;
 49 | }
 50 | 
 51 | export function listItemToItemData(stateManager: StateManager, md: string, item: TaskItem) {
 52 |   const moveTags = stateManager.getSetting('move-tags');
 53 |   const moveDates = stateManager.getSetting('move-dates');
 54 | 
 55 |   const startNode = item.children.first();
 56 |   const endNode = item.children.last();
 57 | 
 58 |   const start =
 59 |     startNode.type === 'paragraph'
 60 |       ? getNodeContentBoundary(startNode).start
 61 |       : startNode.position.start.offset;
 62 |   const end =
 63 |     endNode.type === 'paragraph'
 64 |       ? getNodeContentBoundary(endNode).end
 65 |       : endNode.position.end.offset;
 66 |   const itemBoundary: ContentBoundary = { start, end };
 67 | 
 68 |   let itemContent = getStringFromBoundary(md, itemBoundary);
 69 | 
 70 |   // Handle empty task
 71 |   if (itemContent === '[' + (item.checked ? item.checkChar : ' ') + ']') {
 72 |     itemContent = '';
 73 |   }
 74 | 
 75 |   let title = itemContent;
 76 |   let titleSearch = '';
 77 | 
 78 |   visit(
 79 |     item,
 80 |     ['text', 'wikilink', 'embedWikilink', 'image', 'inlineCode', 'code', 'hashtag'],
 81 |     (node: any, i, parent) => {
 82 |       if (node.type === 'hashtag') {
 83 |         if (!parent.children.first()?.value?.startsWith('```')) {
 84 |           titleSearch += ' #' + node.value;
 85 |         }
 86 |       } else {
 87 |         titleSearch += node.value || node.alt || '';
 88 |       }
 89 |     }
 90 |   );
 91 | 
 92 |   const itemData: ItemData = {
 93 |     titleRaw: removeBlockId(dedentNewLines(replaceBrs(itemContent))),
 94 |     blockId: undefined,
 95 |     title: '',
 96 |     titleSearch,
 97 |     titleSearchRaw: titleSearch,
 98 |     metadata: {
 99 |       dateStr: undefined,
100 |       date: undefined,
101 |       time: undefined,
102 |       timeStr: undefined,
103 |       tags: [],
104 |       fileAccessor: undefined,
105 |       file: undefined,
106 |       fileMetadata: undefined,
107 |       fileMetadataOrder: undefined,
108 |     },
109 |     checked: item.checked,
110 |     checkChar: item.checked ? item.checkChar || ' ' : ' ',
111 |   };
112 | 
113 |   visit(
114 |     item,
115 |     (node) => {
116 |       return node.type !== 'paragraph';
117 |     },
118 |     (node, i, parent) => {
119 |       const genericNode = node as ValueNode;
120 | 
121 |       if (genericNode.type === 'blockid') {
122 |         itemData.blockId = genericNode.value;
123 |         return true;
124 |       }
125 | 
126 |       if (
127 |         genericNode.type === 'hashtag' &&
128 |         !(parent.children.first() as any)?.value?.startsWith('```')
129 |       ) {
130 |         if (!itemData.metadata.tags) {
131 |           itemData.metadata.tags = [];
132 |         }
133 | 
134 |         itemData.metadata.tags.push('#' + genericNode.value);
135 | 
136 |         if (moveTags) {
137 |           title = markRangeForDeletion(title, {
138 |             start: node.position.start.offset - itemBoundary.start,
139 |             end: node.position.end.offset - itemBoundary.start,
140 |           });
141 |         }
142 |         return true;
143 |       }
144 | 
145 |       if (genericNode.type === 'date' || genericNode.type === 'dateLink') {
146 |         itemData.metadata.dateStr = (genericNode as DateNode).date;
147 | 
148 |         if (moveDates) {
149 |           title = markRangeForDeletion(title, {
150 |             start: node.position.start.offset - itemBoundary.start,
151 |             end: node.position.end.offset - itemBoundary.start,
152 |           });
153 |         }
154 |         return true;
155 |       }
156 | 
157 |       if (genericNode.type === 'time') {
158 |         itemData.metadata.timeStr = (genericNode as TimeNode).time;
159 |         if (moveDates) {
160 |           title = markRangeForDeletion(title, {
161 |             start: node.position.start.offset - itemBoundary.start,
162 |             end: node.position.end.offset - itemBoundary.start,
163 |           });
164 |         }
165 |         return true;
166 |       }
167 | 
168 |       if (genericNode.type === 'embedWikilink') {
169 |         itemData.metadata.fileAccessor = (genericNode as FileNode).fileAccessor;
170 |         return true;
171 |       }
172 | 
173 |       if (genericNode.type === 'wikilink') {
174 |         itemData.metadata.fileAccessor = (genericNode as FileNode).fileAccessor;
175 |         itemData.metadata.fileMetadata = (genericNode as FileNode).fileMetadata;
176 |         itemData.metadata.fileMetadataOrder = (genericNode as FileNode).fileMetadataOrder;
177 |         return true;
178 |       }
179 | 
180 |       if (genericNode.type === 'link' && (genericNode as FileNode).fileAccessor) {
181 |         itemData.metadata.fileAccessor = (genericNode as FileNode).fileAccessor;
182 |         itemData.metadata.fileMetadata = (genericNode as FileNode).fileMetadata;
183 |         itemData.metadata.fileMetadataOrder = (genericNode as FileNode).fileMetadataOrder;
184 |         return true;
185 |       }
186 | 
187 |       if (genericNode.type === 'embedLink') {
188 |         itemData.metadata.fileAccessor = (genericNode as FileNode).fileAccessor;
189 |         return true;
190 |       }
191 |     }
192 |   );
193 | 
194 |   itemData.title = preprocessTitle(stateManager, dedentNewLines(executeDeletion(title)));
195 | 
196 |   const firstLineEnd = itemData.title.indexOf('\n');
197 |   const inlineFields = extractInlineFields(itemData.title, true);
198 | 
199 |   if (inlineFields?.length) {
200 |     const inlineMetadata = (itemData.metadata.inlineMetadata = inlineFields.reduce((acc, curr) => {
201 |       if (!taskFields.has(curr.key)) acc.push(curr);
202 |       else if (firstLineEnd <= 0 || curr.end < firstLineEnd) acc.push(curr);
203 | 
204 |       return acc;
205 |     }, []));
206 | 
207 |     const moveTaskData = stateManager.getSetting('move-task-metadata');
208 |     const moveMetadata = stateManager.getSetting('inline-metadata-position') !== 'body';
209 | 
210 |     if (moveTaskData || moveMetadata) {
211 |       let title = itemData.title;
212 |       for (const item of [...inlineMetadata].reverse()) {
213 |         const isTask = taskFields.has(item.key);
214 | 
215 |         if (isTask && !moveTaskData) continue;
216 |         if (!isTask && !moveMetadata) continue;
217 | 
218 |         title = title.slice(0, item.start) + title.slice(item.end);
219 |       }
220 | 
221 |       itemData.title = title;
222 |     }
223 |   }
224 | 
225 |   itemData.metadata.tags?.sort(defaultSort);
226 | 
227 |   return itemData;
228 | }
229 | 
230 | function isArchiveLane(child: Content, children: Content[], currentIndex: number) {
231 |   if (child.type !== 'heading' || toString(child, { includeImageAlt: false }) !== t('Archive')) {
232 |     return false;
233 |   }
234 | 
235 |   const prev = getPrevSibling(children, currentIndex);
236 | 
237 |   return prev && prev.type === 'thematicBreak';
238 | }
239 | 
240 | export function astToUnhydratedBoard(
241 |   stateManager: StateManager,
242 |   settings: KanbanSettings,
243 |   frontmatter: Record<string, any>,
244 |   root: Root,
245 |   md: string
246 | ): Board {
247 |   const lanes: Lane[] = [];
248 |   const archive: Item[] = [];
249 |   root.children.forEach((child, index) => {
250 |     if (child.type === 'heading') {
251 |       const isArchive = isArchiveLane(child, root.children, index);
252 |       const headingBoundary = getNodeContentBoundary(child as Parent);
253 |       const title = getStringFromBoundary(md, headingBoundary);
254 | 
255 |       let shouldMarkItemsComplete = false;
256 | 
257 |       const list = getNextOfType(root.children, index, 'list', (child) => {
258 |         if (child.type === 'heading') return false;
259 | 
260 |         if (child.type === 'paragraph') {
261 |           const childStr = toString(child);
262 | 
263 |           if (childStr.startsWith('%% kanban:settings')) {
264 |             return false;
265 |           }
266 | 
267 |           if (childStr === t('Complete')) {
268 |             shouldMarkItemsComplete = true;
269 |             return true;
270 |           }
271 |         }
272 | 
273 |         return true;
274 |       });
275 | 
276 |       if (isArchive && list) {
277 |         archive.push(
278 |           ...(list as List).children.map((listItem) => {
279 |             return {
280 |               ...ItemTemplate,
281 |               id: generateInstanceId(),
282 |               data: listItemToItemData(stateManager, md, listItem),
283 |             };
284 |           })
285 |         );
286 | 
287 |         return;
288 |       }
289 | 
290 |       if (!list) {
291 |         lanes.push({
292 |           ...LaneTemplate,
293 |           children: [],
294 |           id: generateInstanceId(),
295 |           data: {
296 |             ...parseLaneTitle(title),
297 |             shouldMarkItemsComplete,
298 |           },
299 |         });
300 |       } else {
301 |         lanes.push({
302 |           ...LaneTemplate,
303 |           children: (list as List).children.map((listItem) => {
304 |             const data = listItemToItemData(stateManager, md, listItem);
305 |             return {
306 |               ...ItemTemplate,
307 |               id: generateInstanceId(),
308 |               data,
309 |             };
310 |           }),
311 |           id: generateInstanceId(),
312 |           data: {
313 |             ...parseLaneTitle(title),
314 |             shouldMarkItemsComplete,
315 |           },
316 |         });
317 |       }
318 |     }
319 |   });
320 | 
321 |   return {
322 |     ...BoardTemplate,
323 |     id: stateManager.file.path,
324 |     children: lanes,
325 |     data: {
326 |       settings,
327 |       frontmatter,
328 |       archive,
329 |       isSearching: false,
330 |       errors: [],
331 |     },
332 |   };
333 | }
334 | 
335 | export function updateItemContent(stateManager: StateManager, oldItem: Item, newContent: string) {
336 |   const md = `- [${oldItem.data.checkChar}] ${addBlockId(indentNewLines(newContent), oldItem)}`;
337 | 
338 |   const ast = parseFragment(stateManager, md);
339 |   const itemData = listItemToItemData(stateManager, md, (ast.children[0] as List).children[0]);
340 |   const newItem = update(oldItem, {
341 |     data: {
342 |       $set: itemData,
343 |     },
344 |   });
345 | 
346 |   try {
347 |     hydrateItem(stateManager, newItem);
348 |   } catch (e) {
349 |     console.error(e);
350 |   }
351 | 
352 |   return newItem;
353 | }
354 | 
355 | export function newItem(
356 |   stateManager: StateManager,
357 |   newContent: string,
358 |   checkChar: string,
359 |   forceEdit?: boolean
360 | ) {
361 |   const md = `- [${checkChar}] ${indentNewLines(newContent)}`;
362 |   const ast = parseFragment(stateManager, md);
363 |   const itemData = listItemToItemData(stateManager, md, (ast.children[0] as List).children[0]);
364 | 
365 |   itemData.forceEditMode = !!forceEdit;
366 | 
367 |   const newItem: Item = {
368 |     ...ItemTemplate,
369 |     id: generateInstanceId(),
370 |     data: itemData,
371 |   };
372 | 
373 |   try {
374 |     hydrateItem(stateManager, newItem);
375 |   } catch (e) {
376 |     console.error(e);
377 |   }
378 | 
379 |   return newItem;
380 | }
381 | 
382 | export function reparseBoard(stateManager: StateManager, board: Board) {
383 |   try {
384 |     return update(board, {
385 |       children: {
386 |         $set: board.children.map((lane) => {
387 |           return update(lane, {
388 |             children: {
389 |               $set: lane.children.map((item) => {
390 |                 return updateItemContent(stateManager, item, item.data.titleRaw);
391 |               }),
392 |             },
393 |           });
394 |         }),
395 |       },
396 |     });
397 |   } catch (e) {
398 |     stateManager.setError(e);
399 |     throw e;
400 |   }
401 | }
402 | 
403 | function itemToMd(item: Item) {
404 |   return `- [${item.data.checkChar}] ${addBlockId(indentNewLines(item.data.titleRaw), item)}`;
405 | }
406 | 
407 | function laneToMd(lane: Lane) {
408 |   const lines: string[] = [];
409 | 
410 |   lines.push(`## ${replaceNewLines(laneTitleWithMaxItems(lane.data.title, lane.data.maxItems))}`);
411 | 
412 |   lines.push('');
413 | 
414 |   if (lane.data.shouldMarkItemsComplete) {
415 |     lines.push(completeString);
416 |   }
417 | 
418 |   lane.children.forEach((item) => {
419 |     lines.push(itemToMd(item));
420 |   });
421 | 
422 |   lines.push('');
423 |   lines.push('');
424 |   lines.push('');
425 | 
426 |   return lines.join('\n');
427 | }
428 | 
429 | function archiveToMd(archive: Item[]) {
430 |   if (archive.length) {
431 |     const lines: string[] = [archiveString, '', `## ${t('Archive')}`, ''];
432 | 
433 |     archive.forEach((item) => {
434 |       lines.push(itemToMd(item));
435 |     });
436 | 
437 |     return lines.join('\n');
438 |   }
439 | 
440 |   return '';
441 | }
442 | 
443 | export function boardToMd(board: Board) {
444 |   const lanes = board.children.reduce((md, lane) => {
445 |     return md + laneToMd(lane);
446 |   }, '');
447 | 
448 |   const frontmatter = ['---', '', stringifyYaml(board.data.frontmatter), '---', '', ''].join('\n');
449 | 
450 |   return frontmatter + lanes + archiveToMd(board.data.archive) + settingsToCodeblock(board);
451 | }
452 | 


--------------------------------------------------------------------------------
/src/parsers/helpers/ast.ts:
--------------------------------------------------------------------------------
 1 | import { Content, Parent } from 'mdast';
 2 | 
 3 | export interface ContentBoundary {
 4 |   start: number;
 5 |   end: number;
 6 | }
 7 | 
 8 | export function getNodeContentBoundary(node: Parent): ContentBoundary {
 9 |   if (node.children.length === 0) return null;
10 |   const last = node.children.length - 1;
11 | 
12 |   if ((node.children[last] as any).type === 'blockid') {
13 |     if (last === 0) {
14 |       return {
15 |         start: node.children[0].position.start.offset,
16 |         end: node.children[0].position.start.offset,
17 |       };
18 |     }
19 | 
20 |     return {
21 |       start: node.children[0].position.start.offset,
22 |       end: node.children[last - 1].position.end.offset,
23 |     };
24 |   }
25 | 
26 |   return {
27 |     start: node.children[0].position.start.offset,
28 |     end: node.children[last].position.end.offset,
29 |   };
30 | }
31 | 
32 | export function getStringFromBoundary(md: string, boundary: ContentBoundary) {
33 |   if (!boundary) return '';
34 | 
35 |   return md.slice(boundary.start, boundary.end);
36 | }
37 | 
38 | export function getPrevSibling(children: Content[], currentIndex: number) {
39 |   if (currentIndex <= 0) return null;
40 |   return children[currentIndex - 1];
41 | }
42 | 
43 | export function getNextSibling(children: Content[], currentIndex: number) {
44 |   if (currentIndex === children.length - 1) return null;
45 |   return children[currentIndex + 1];
46 | }
47 | 
48 | export function getNextOfType(
49 |   children: Content[],
50 |   currentIndex: number,
51 |   type: string,
52 |   shouldContinue: (child: Content) => boolean = () => true
53 | ) {
54 |   for (let i = currentIndex + 1, len = children.length; i < len; i++) {
55 |     const child = children[i];
56 | 
57 |     if (type === child.type) {
58 |       return child;
59 |     }
60 | 
61 |     if (!shouldContinue(child)) {
62 |       return null;
63 |     }
64 |   }
65 | 
66 |   return null;
67 | }
68 | 


--------------------------------------------------------------------------------
/src/parsers/helpers/hydrateBoard.ts:
--------------------------------------------------------------------------------
  1 | import { moment } from 'obsidian';
  2 | import { StateManager } from 'src/StateManager';
  3 | import { c, escapeRegExpStr, getDateColorFn } from 'src/components/helpers';
  4 | import { Board, DataTypes, DateColor, Item, Lane } from 'src/components/types';
  5 | import { Path } from 'src/dnd/types';
  6 | import { getEntityFromPath } from 'src/dnd/util/data';
  7 | import { Op } from 'src/helpers/patch';
  8 | 
  9 | import { getSearchValue } from '../common';
 10 | 
 11 | export function hydrateLane(stateManager: StateManager, lane: Lane) {
 12 |   return lane;
 13 | }
 14 | 
 15 | export function preprocessTitle(stateManager: StateManager, title: string) {
 16 |   const getDateColor = getDateColorFn(stateManager.getSetting('date-colors'));
 17 |   const dateTrigger = stateManager.getSetting('date-trigger');
 18 |   const dateFormat = stateManager.getSetting('date-format');
 19 |   const dateDisplayFormat = stateManager.getSetting('date-display-format');
 20 |   const timeTrigger = stateManager.getSetting('time-trigger');
 21 |   const timeFormat = stateManager.getSetting('time-format');
 22 | 
 23 |   const { app } = stateManager;
 24 | 
 25 |   let date: moment.Moment;
 26 |   let dateColor: DateColor;
 27 |   const getWrapperStyles = (baseClass: string) => {
 28 |     let wrapperStyle = '';
 29 |     if (dateColor) {
 30 |       if (dateColor.backgroundColor) {
 31 |         baseClass += ' has-background';
 32 |         wrapperStyle = ` style="--date-color: ${dateColor.color}; --date-background-color: ${dateColor.backgroundColor};"`;
 33 |       } else {
 34 |         wrapperStyle = ` style="--date-color: ${dateColor.color};"`;
 35 |       }
 36 |     }
 37 |     return { wrapperClass: baseClass, wrapperStyle };
 38 |   };
 39 | 
 40 |   title = title.replace(
 41 |     new RegExp(`(^|\\s)${escapeRegExpStr(dateTrigger)}\\[\\[([^\\]]+)\\]\\]`, 'g'),
 42 |     (match, space, content) => {
 43 |       const parsed = moment(content, dateFormat);
 44 |       if (!parsed.isValid()) return match;
 45 |       date = parsed;
 46 |       const linkPath = app.metadataCache.getFirstLinkpathDest(content, stateManager.file.path);
 47 |       if (!dateColor) dateColor = getDateColor(parsed);
 48 |       const { wrapperClass, wrapperStyle } = getWrapperStyles(c('preview-date-wrapper'));
 49 |       return `${space}<span data-date="${date.toISOString()}" class="${wrapperClass} ${c('date')} ${c('preview-date-link')}"${wrapperStyle}><a class="${c('preview-date')} internal-link" data-href="${linkPath?.path ?? content}" href="${linkPath?.path ?? content}" target="_blank" rel="noopener">${parsed.format(dateDisplayFormat)}</a></span>`;
 50 |     }
 51 |   );
 52 |   title = title.replace(
 53 |     new RegExp(`(^|\\s)${escapeRegExpStr(dateTrigger)}\\[([^\\]]+)\\]\\([^)]+\\)`, 'g'),
 54 |     (match, space, content) => {
 55 |       const parsed = moment(content, dateFormat);
 56 |       if (!parsed.isValid()) return match;
 57 |       date = parsed;
 58 |       const linkPath = app.metadataCache.getFirstLinkpathDest(content, stateManager.file.path);
 59 |       if (!dateColor) dateColor = getDateColor(parsed);
 60 |       const { wrapperClass, wrapperStyle } = getWrapperStyles(c('preview-date-wrapper'));
 61 |       return `${space}<span data-date="${date.toISOString()}" class="${wrapperClass} ${c('date')} ${c('preview-date-link')}"${wrapperStyle}><a class="${c('preview-date')} internal-link" data-href="${linkPath?.path ?? content}" href="${linkPath?.path ?? content}" target="_blank" rel="noopener">${parsed.format(dateDisplayFormat)}</a></span>`;
 62 |     }
 63 |   );
 64 |   title = title.replace(
 65 |     new RegExp(`(^|\\s)${escapeRegExpStr(dateTrigger)}{([^}]+)}`, 'g'),
 66 |     (match, space, content) => {
 67 |       const parsed = moment(content, dateFormat);
 68 |       if (!parsed.isValid()) return match;
 69 |       date = parsed;
 70 |       if (!dateColor) dateColor = getDateColor(parsed);
 71 |       const { wrapperClass, wrapperStyle } = getWrapperStyles(c('preview-date-wrapper'));
 72 |       return `${space}<span data-date="${date.toISOString()}" class="${wrapperClass} ${c('date')}"${wrapperStyle}><span class="${c('preview-date')} ${c('item-metadata-date')}">${parsed.format(dateDisplayFormat)}</span></span>`;
 73 |     }
 74 |   );
 75 | 
 76 |   title = title.replace(
 77 |     new RegExp(`(^|\\s)${escapeRegExpStr(timeTrigger)}{([^}]+)}`, 'g'),
 78 |     (match, space, content) => {
 79 |       const parsed = moment(content, timeFormat);
 80 |       if (!parsed.isValid()) return match;
 81 | 
 82 |       if (!date) {
 83 |         date = parsed;
 84 |         date.year(1970);
 85 |       } else {
 86 |         date.hour(parsed.hour());
 87 |         date.minute(parsed.minute());
 88 |         date.second(parsed.second());
 89 |       }
 90 | 
 91 |       const { wrapperClass, wrapperStyle } = getWrapperStyles(c('preview-time-wrapper'));
 92 |       return `${space}<span data-date="${date.toISOString()}" class="${wrapperClass} ${c('date')}"${wrapperStyle}><span class="${c('preview-time')} ${c('item-metadata-time')}">${parsed.format(timeFormat)}</span></span>`;
 93 |     }
 94 |   );
 95 | 
 96 |   return title;
 97 | }
 98 | 
 99 | export function hydrateItem(stateManager: StateManager, item: Item) {
100 |   const { dateStr, timeStr, fileAccessor } = item.data.metadata;
101 | 
102 |   if (dateStr) {
103 |     item.data.metadata.date = moment(dateStr, stateManager.getSetting('date-format'));
104 |   }
105 | 
106 |   if (timeStr) {
107 |     let time = moment(timeStr, stateManager.getSetting('time-format'));
108 | 
109 |     if (item.data.metadata.date) {
110 |       const date = item.data.metadata.date;
111 | 
112 |       date.hour(time.hour());
113 |       date.minute(time.minute());
114 |       date.second(time.second());
115 | 
116 |       time = date.clone();
117 |     }
118 | 
119 |     item.data.metadata.time = time;
120 |   }
121 | 
122 |   if (fileAccessor) {
123 |     const file = stateManager.app.metadataCache.getFirstLinkpathDest(
124 |       fileAccessor.target,
125 |       stateManager.file.path
126 |     );
127 | 
128 |     if (file) {
129 |       item.data.metadata.file = file;
130 |     }
131 |   }
132 | 
133 |   item.data.titleSearch = getSearchValue(item, stateManager);
134 | 
135 |   return item;
136 | }
137 | 
138 | export function hydrateBoard(stateManager: StateManager, board: Board): Board {
139 |   try {
140 |     board.children.map((lane) => {
141 |       hydrateLane(stateManager, lane);
142 |       lane.children.map((item) => {
143 |         return hydrateItem(stateManager, item);
144 |       });
145 |     });
146 |   } catch (e) {
147 |     stateManager.setError(e);
148 |     throw e;
149 |   }
150 | 
151 |   return board;
152 | }
153 | 
154 | function opAffectsHydration(op: Op) {
155 |   return (
156 |     (op.op === 'add' || op.op === 'replace') &&
157 |     ['title', 'titleRaw', 'dateStr', 'timeStr', /\d$/, /\/fileAccessor\/.+$/].some((postFix) => {
158 |       if (typeof postFix === 'string') {
159 |         return op.path.last().toString().endsWith(postFix);
160 |       } else {
161 |         return postFix.test(op.path.last().toString());
162 |       }
163 |     })
164 |   );
165 | }
166 | 
167 | export function hydratePostOp(stateManager: StateManager, board: Board, ops: Op[]): Board {
168 |   const seen: Record<string, boolean> = {};
169 |   const toHydrate = ops.reduce((paths, op) => {
170 |     if (!opAffectsHydration(op)) {
171 |       return paths;
172 |     }
173 | 
174 |     const path = op.path.reduce((path, segment) => {
175 |       if (typeof segment === 'number') {
176 |         path.push(segment);
177 |       }
178 | 
179 |       return path;
180 |     }, [] as Path);
181 | 
182 |     const key = path.join(',');
183 | 
184 |     if (!seen[key]) {
185 |       seen[key] = true;
186 |       paths.push(path);
187 |     }
188 | 
189 |     return paths;
190 |   }, [] as Path[]);
191 | 
192 |   toHydrate.map((path) => {
193 |     const entity = getEntityFromPath(board, path);
194 | 
195 |     if (entity.type === DataTypes.Lane) {
196 |       return hydrateLane(stateManager, entity);
197 |     }
198 | 
199 |     if (entity.type === DataTypes.Item) {
200 |       return hydrateItem(stateManager, entity);
201 |     }
202 |   });
203 | 
204 |   return board;
205 | }
206 | 


--------------------------------------------------------------------------------
/src/parsers/helpers/inlineMetadata.ts:
--------------------------------------------------------------------------------
  1 | /*
  2 | This code is modified from https://github.com/blacksmithgu/obsidian-dataview
  3 | and https://github.com/obsidian-tasks-group/obsidian-tasks
  4 | 
  5 | Dataview is licensed as such:
  6 | MIT License
  7 | 
  8 | Copyright (c) 2021 Michael Brenan
  9 | 
 10 | Permission is hereby granted, free of charge, to any person obtaining a copy
 11 | of this software and associated documentation files (the "Software"), to deal
 12 | in the Software without restriction, including without limitation the rights
 13 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 14 | copies of the Software, and to permit persons to whom the Software is
 15 | furnished to do so, subject to the following conditions:
 16 | 
 17 | The above copyright notice and this permission notice shall be included in all
 18 | copies or substantial portions of the Software.
 19 | 
 20 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 21 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 22 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 23 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 24 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 25 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 26 | SOFTWARE.
 27 | 
 28 | Tasks is licensed as such:
 29 | MIT License
 30 | 
 31 | Copyright (c) 2021 Martin Schenck and Clare Macrae
 32 | 
 33 | Permission is hereby granted, free of charge, to any person obtaining a copy
 34 | of this software and associated documentation files (the "Software"), to deal
 35 | in the Software without restriction, including without limitation the rights
 36 | to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 37 | copies of the Software, and to permit persons to whom the Software is
 38 | furnished to do so, subject to the following conditions:
 39 | 
 40 | The above copyright notice and this permission notice shall be included in all
 41 | copies or substantial portions of the Software.
 42 | 
 43 | THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 44 | IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 45 | FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 46 | AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 47 | LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 48 | OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 49 | SOFTWARE.
 50 | */
 51 | import { TFile } from 'obsidian';
 52 | import { RRule } from 'rrule';
 53 | import { Item } from 'src/components/types';
 54 | import { t } from 'src/lang/helpers';
 55 | 
 56 | export enum Priority {
 57 |   Highest = '0',
 58 |   High = '1',
 59 |   Medium = '2',
 60 |   None = '3',
 61 |   Low = '4',
 62 |   Lowest = '5',
 63 | }
 64 | 
 65 | export const DEFAULT_SYMBOLS = {
 66 |   prioritySymbols: {
 67 |     Highest: '🔺',
 68 |     High: '⏫',
 69 |     Medium: '🔼',
 70 |     Low: '🔽',
 71 |     Lowest: '⏬',
 72 |     None: '',
 73 |   },
 74 |   startDateSymbol: '🛫',
 75 |   createdDateSymbol: '➕',
 76 |   scheduledDateSymbol: '⏳',
 77 |   dueDateSymbol: '📅',
 78 |   doneDateSymbol: '✅',
 79 |   cancelledDateSymbol: '❌',
 80 |   recurrenceSymbol: '🔁',
 81 |   dependsOnSymbol: '⛔',
 82 |   idSymbol: '🆔',
 83 | } as const;
 84 | 
 85 | export function lableToIcon(label: string, value: any) {
 86 |   switch (label) {
 87 |     case 'priority':
 88 |       return priorityToIcon(value);
 89 |     case 'start':
 90 |       return DEFAULT_SYMBOLS.startDateSymbol;
 91 |     case 'created':
 92 |       return DEFAULT_SYMBOLS.createdDateSymbol;
 93 |     case 'scheduled':
 94 |       return DEFAULT_SYMBOLS.scheduledDateSymbol;
 95 |     case 'due':
 96 |       return DEFAULT_SYMBOLS.dueDateSymbol;
 97 |     case 'completion':
 98 |       return DEFAULT_SYMBOLS.doneDateSymbol;
 99 |     case 'cancelled':
100 |       return DEFAULT_SYMBOLS.cancelledDateSymbol;
101 |     case 'repeat':
102 |       return DEFAULT_SYMBOLS.recurrenceSymbol;
103 |     case 'dependsOn':
104 |       return DEFAULT_SYMBOLS.dependsOnSymbol;
105 |     case 'id':
106 |       return DEFAULT_SYMBOLS.idSymbol;
107 |   }
108 | 
109 |   return label;
110 | }
111 | 
112 | export function lableToName(label: string) {
113 |   switch (label) {
114 |     case 'priority':
115 |       return t('Priority');
116 |     case 'start':
117 |       return t('Start');
118 |     case 'created':
119 |       return t('Created');
120 |     case 'scheduled':
121 |       return t('Scheduled');
122 |     case 'due':
123 |       return t('Due');
124 |     case 'completion':
125 |       return t('Done');
126 |     case 'cancelled':
127 |       return t('Cancelled');
128 |     case 'repeat':
129 |       return t('Recurrence');
130 |     case 'dependsOn':
131 |       return t('Depends on');
132 |     case 'id':
133 |       return t('ID');
134 |   }
135 | 
136 |   return label;
137 | }
138 | 
139 | export function priorityToIcon(p: Priority) {
140 |   switch (p) {
141 |     case Priority.Highest:
142 |       return DEFAULT_SYMBOLS.prioritySymbols.Highest;
143 |     case Priority.High:
144 |       return DEFAULT_SYMBOLS.prioritySymbols.High;
145 |     case Priority.Medium:
146 |       return DEFAULT_SYMBOLS.prioritySymbols.Medium;
147 |     case Priority.Low:
148 |       return DEFAULT_SYMBOLS.prioritySymbols.Low;
149 |     case Priority.Lowest:
150 |       return DEFAULT_SYMBOLS.prioritySymbols.Lowest;
151 |   }
152 |   return null;
153 | }
154 | 
155 | export function iconToPriority(icon: string) {
156 |   switch (icon) {
157 |     case DEFAULT_SYMBOLS.prioritySymbols.Highest:
158 |       return Priority.Highest;
159 |     case DEFAULT_SYMBOLS.prioritySymbols.High:
160 |       return Priority.High;
161 |     case DEFAULT_SYMBOLS.prioritySymbols.Medium:
162 |       return Priority.Medium;
163 |     case DEFAULT_SYMBOLS.prioritySymbols.Low:
164 |       return Priority.Low;
165 |     case DEFAULT_SYMBOLS.prioritySymbols.Lowest:
166 |       return Priority.Lowest;
167 |   }
168 |   return null;
169 | }
170 | 
171 | export function getTasksPlugin() {
172 |   if (!(app as any).plugins.enabledPlugins.has('obsidian-tasks-plugin')) {
173 |     return null;
174 |   }
175 | 
176 |   return (app as any).plugins.plugins['obsidian-tasks-plugin'];
177 | }
178 | 
179 | function getTasksPluginSettings() {
180 |   return (app as any).workspace.editorSuggest.suggests.find(
181 |     (s: any) => s.settings && s.settings.taskFormat
182 |   )?.settings;
183 | }
184 | 
185 | export function getTaskStatusDone(): string {
186 |   const settings = getTasksPluginSettings();
187 |   const statuses = settings?.statusSettings;
188 |   if (!statuses) return 'x';
189 | 
190 |   let done = statuses.coreStatuses?.find((s: any) => s.type === 'DONE');
191 |   if (!done) done = statuses.customStatuses?.find((s: any) => s.type === 'DONE');
192 |   if (!done) return 'x';
193 | 
194 |   return done.symbol;
195 | }
196 | 
197 | export function getTaskStatusPreDone(): string {
198 |   const settings = getTasksPluginSettings();
199 |   const statuses = settings?.statusSettings;
200 |   if (!statuses) return ' ';
201 | 
202 |   const done = getTaskStatusDone();
203 | 
204 |   let preDone = statuses.coreStatuses?.find((s: any) => s.nextStatusSymbol === done);
205 |   if (!preDone) preDone = statuses.customStatuses?.find((s: any) => s.nextStatusSymbol === done);
206 |   if (!preDone) return ' ';
207 | 
208 |   return preDone.symbol;
209 | }
210 | 
211 | export function toggleTaskString(item: string, file: TFile): string | null {
212 |   const plugin = getTasksPlugin();
213 |   if (!plugin) return null;
214 |   return plugin.apiV1?.executeToggleTaskDoneCommand?.(item, file.path) ?? null;
215 | }
216 | 
217 | export function toggleTask(item: Item, file: TFile): [string[], string[], number] | null {
218 |   const plugin = getTasksPlugin();
219 |   if (!plugin) {
220 |     return null;
221 |   }
222 | 
223 |   const prefix = `- [${item.data.checkChar}] `;
224 |   const originalLines = item.data.titleRaw.split(/\n\r?/g);
225 | 
226 |   const taskSettings = getTasksPluginSettings();
227 |   const recurrenceOnNextLine = !!taskSettings?.recurrenceOnNextLine;
228 | 
229 |   let which = 0;
230 |   const result = plugin.apiV1?.executeToggleTaskDoneCommand?.(prefix + originalLines[0], file.path);
231 |   if (!result) return null;
232 | 
233 |   const checkChars: string[] = [];
234 |   const resultLines = result.split(/\n/g).map((line: string, index: number) => {
235 |     if (recurrenceOnNextLine && index === 0) {
236 |       which = index;
237 |     } else if (!recurrenceOnNextLine && index > 0) {
238 |       which = index;
239 |     }
240 | 
241 |     const match = line.match(/^- \[([^\]]+)\]/);
242 |     if (match?.[1]) checkChars.push(match[1]);
243 | 
244 |     return [line.replace(/^- \[[^\]]+\] */, ''), ...originalLines.slice(1)].join('\n');
245 |   });
246 | 
247 |   return [resultLines, checkChars, which];
248 | }
249 | 
250 | /** A parsed inline field. */
251 | export interface InlineField {
252 |   /** The raw parsed key. */
253 |   key: string;
254 |   /** The raw value of the field. */
255 |   value: string;
256 |   /** The start column of the field. */
257 |   start: number;
258 |   /** The start column of the *value* for the field. */
259 |   startValue: number;
260 |   /** The end column of the field. */
261 |   end: number;
262 |   /** If this inline field was defined via a wrapping ('[' or '('), then the wrapping that was used. */
263 |   wrapping?: string;
264 | }
265 | 
266 | export const INLINE_FIELD_WRAPPERS: Readonly<Record<string, string>> = Object.freeze({
267 |   '[': ']',
268 |   '(': ')',
269 | });
270 | 
271 | /** Find the '::' separator in an inline field. */
272 | function findSeparator(
273 |   line: string,
274 |   start: number
275 | ): { key: string; valueIndex: number } | undefined {
276 |   const sep = line.indexOf('::', start);
277 |   if (sep < 0) return undefined;
278 | 
279 |   return { key: line.substring(start, sep).trim(), valueIndex: sep + 2 };
280 | }
281 | 
282 | /**
283 |  * Find a matching closing bracket that occurs at or after `start`, respecting nesting and escapes. If found,
284 |  * returns the value contained within and the string index after the end of the value.
285 |  */
286 | function findClosing(
287 |   line: string,
288 |   start: number,
289 |   open: string,
290 |   close: string
291 | ): { value: string; endIndex: number } | undefined {
292 |   let nesting = 0;
293 |   let escaped = false;
294 |   for (let index = start; index < line.length; index++) {
295 |     const char = line.charAt(index);
296 | 
297 |     // Allows for double escapes like '\\' to be rendered normally.
298 |     if (char == '\\') {
299 |       escaped = !escaped;
300 |       continue;
301 |     }
302 | 
303 |     // If escaped, ignore the next character for computing nesting, regardless of what it is.
304 |     if (escaped) {
305 |       escaped = false;
306 |       continue;
307 |     }
308 | 
309 |     if (char == open) nesting++;
310 |     else if (char == close) nesting--;
311 | 
312 |     // Only occurs if we are on a close character and trhere is no more nesting.
313 |     if (nesting < 0) return { value: line.substring(start, index).trim(), endIndex: index + 1 };
314 | 
315 |     escaped = false;
316 |   }
317 | 
318 |   return undefined;
319 | }
320 | 
321 | /** Try to completely parse an inline field starting at the given position. Assuems `start` is on a wrapping character. */
322 | function findSpecificInlineField(line: string, start: number): InlineField | undefined {
323 |   const open = line.charAt(start);
324 | 
325 |   const key = findSeparator(line, start + 1);
326 |   if (key === undefined) return undefined;
327 | 
328 |   // Fail the match if we find any separator characters (not allowed in keys).
329 |   for (const sep of Object.keys(INLINE_FIELD_WRAPPERS).concat(
330 |     Object.values(INLINE_FIELD_WRAPPERS)
331 |   )) {
332 |     if (key.key.includes(sep)) return undefined;
333 |   }
334 | 
335 |   const value = findClosing(line, key.valueIndex, open, INLINE_FIELD_WRAPPERS[open]);
336 |   if (value === undefined) return undefined;
337 | 
338 |   return {
339 |     key: key.key,
340 |     value: value.value,
341 |     start: start,
342 |     startValue: key.valueIndex,
343 |     end: value.endIndex,
344 |     wrapping: open,
345 |   };
346 | }
347 | 
348 | const priorityRegex = /([🔺⏫🔼🔽⏬])\uFE0F?/u;
349 | const startDateRegex = /🛫 *(\d{4}-\d{2}-\d{2})/u;
350 | const createdDateRegex = /➕ *(\d{4}-\d{2}-\d{2})/u;
351 | const scheduledDateRegex = /[⏳⌛] *(\d{4}-\d{2}-\d{2})/u;
352 | const dueDateRegex = /[📅📆🗓] *(\d{4}-\d{2}-\d{2})/u;
353 | const doneDateRegex = /✅ *(\d{4}-\d{2}-\d{2})/u;
354 | const cancelledDateRegex = /❌ *(\d{4}-\d{2}-\d{2})/u;
355 | const dependsOnRegex = /⛔\uFE0F? *([a-zA-Z0-9-_]+)/u;
356 | const idRegex = /🆔 *([a-zA-Z0-9-_]+)/u;
357 | const recurrenceRegex = /🔁 *([a-zA-Z0-9; !]+)/u;
358 | 
359 | export const taskFields = new Set([
360 |   'priority',
361 |   'start',
362 |   'created',
363 |   'scheduled',
364 |   'due',
365 |   'completion',
366 |   'cancelled',
367 |   'id',
368 |   'dependsOn',
369 |   'repeat',
370 | ]);
371 | 
372 | export const EMOJI_REGEXES = [
373 |   { regex: priorityRegex, key: 'priority' },
374 |   { regex: startDateRegex, key: 'start' },
375 |   { regex: createdDateRegex, key: 'created' },
376 |   { regex: scheduledDateRegex, key: 'scheduled' },
377 |   { regex: dueDateRegex, key: 'due' },
378 |   { regex: doneDateRegex, key: 'completion' },
379 |   { regex: cancelledDateRegex, key: 'cancelled' },
380 |   { regex: idRegex, key: 'id' },
381 |   { regex: dependsOnRegex, key: 'dependsOn' },
382 |   { regex: recurrenceRegex, key: 'repeat' },
383 | ];
384 | 
385 | /** Parse special completed/due/done task fields which are marked via emoji. */
386 | function extractSpecialTaskFields(line: string): InlineField[] {
387 |   const results: InlineField[] = [];
388 | 
389 |   for (const { regex, key } of EMOJI_REGEXES) {
390 |     const match = regex.exec(line);
391 |     if (!match) continue;
392 | 
393 |     let value = match[1];
394 |     let end = match.index + match[0].length;
395 | 
396 |     if (key === 'priority') value = iconToPriority(value);
397 |     else if (key === 'repeat') {
398 |       const originalLen = value.length;
399 |       value = RRule.fromText(value).toText();
400 |       end -= originalLen - value.length;
401 |     }
402 | 
403 |     results.push({
404 |       key,
405 |       value,
406 |       start: match.index,
407 |       startValue: match.index + 1,
408 |       end,
409 |       wrapping: 'emoji-shorthand',
410 |     });
411 |   }
412 | 
413 |   return results;
414 | }
415 | 
416 | export function extractInlineFields(
417 |   line: string,
418 |   includeTaskFields: boolean = false
419 | ): InlineField[] | null {
420 |   const dv = getDataviewPlugin();
421 |   const tasks = getTasksPlugin();
422 | 
423 |   let fields: InlineField[] = [];
424 |   if (dv) {
425 |     for (const wrapper of Object.keys(INLINE_FIELD_WRAPPERS)) {
426 |       let foundIndex = line.indexOf(wrapper);
427 |       while (foundIndex >= 0) {
428 |         const parsedField = findSpecificInlineField(line, foundIndex);
429 |         if (!parsedField) {
430 |           foundIndex = line.indexOf(wrapper, foundIndex + 1);
431 |           continue;
432 |         }
433 | 
434 |         fields.push(parsedField);
435 |         foundIndex = line.indexOf(wrapper, parsedField.end);
436 |       }
437 |     }
438 |   }
439 | 
440 |   if (tasks && includeTaskFields) fields = fields.concat(extractSpecialTaskFields(line));
441 | 
442 |   fields.sort((a, b) => a.start - b.start);
443 | 
444 |   const filteredFields: InlineField[] = [];
445 |   for (let i = 0; i < fields.length; i++) {
446 |     const f = fields[i];
447 |     if (i == 0 || filteredFields[filteredFields.length - 1].end < f.start) {
448 |       filteredFields.push(f);
449 |     }
450 |   }
451 | 
452 |   return filteredFields;
453 | }
454 | 
455 | export function getDataviewPlugin() {
456 |   if (!(app as any).plugins.enabledPlugins.has('dataview')) {
457 |     return null;
458 |   }
459 | 
460 |   return (app as any).plugins.plugins['dataview'];
461 | }
462 | 


--------------------------------------------------------------------------------
/src/parsers/helpers/parser.ts:
--------------------------------------------------------------------------------
 1 | import { Stat } from 'obsidian';
 2 | import { Item } from 'src/components/types';
 3 | 
 4 | export interface FileAccessor {
 5 |   isEmbed: boolean;
 6 |   target: string;
 7 |   stats?: Stat;
 8 | }
 9 | 
10 | export function markRangeForDeletion(str: string, range: { start: number; end: number }): string {
11 |   const len = str.length;
12 | 
13 |   let start = range.start;
14 |   while (start > 0 && str[start - 1] === ' ') start--;
15 | 
16 |   let end = range.end;
17 |   while (end < len - 1 && str[end + 1] === ' ') end++;
18 | 
19 |   return str.slice(0, start) + '\u0000'.repeat(end - start) + str.slice(end);
20 | }
21 | 
22 | export function executeDeletion(str: string) {
23 |   return str.replace(/ *\0+ */g, ' ').trim();
24 | }
25 | 
26 | export function replaceNewLines(str: string) {
27 |   return str.trim().replace(/(?:\r\n|\n)/g, '<br>');
28 | }
29 | 
30 | export function replaceBrs(str: string) {
31 |   return str.replace(/<br>/g, '\n').trim();
32 | }
33 | 
34 | export function indentNewLines(str: string) {
35 |   const useTab = (app.vault as any).getConfig('useTab');
36 |   return str.trim().replace(/(?:\r\n|\n)/g, useTab ? '\n\t' : '\n    ');
37 | }
38 | 
39 | export function addBlockId(str: string, item: Item) {
40 |   if (!item.data.blockId) return str;
41 | 
42 |   const lines = str.split(/(?:\r\n|\n)/g);
43 |   lines[0] += ' ^' + item.data.blockId;
44 | 
45 |   return lines.join('\n');
46 | }
47 | 
48 | export function removeBlockId(str: string) {
49 |   const lines = str.split(/(?:\r\n|\n)/g);
50 | 
51 |   lines[0] = lines[0].replace(/\s+\^([a-zA-Z0-9-]+)$/, '');
52 | 
53 |   return lines.join('\n');
54 | }
55 | 
56 | export function dedentNewLines(str: string) {
57 |   return str.trim().replace(/(?:\r\n|\n)(?: {4}|\t)/g, '\n');
58 | }
59 | 
60 | export function parseLaneTitle(str: string) {
61 |   str = replaceBrs(str);
62 | 
63 |   const match = str.match(/^(.*?)\s*\((\d+)\)$/);
64 |   if (match == null) return { title: str, maxItems: 0 };
65 | 
66 |   return { title: match[1], maxItems: Number(match[2]) };
67 | }
68 | 


--------------------------------------------------------------------------------
/src/parsers/parseMarkdown.ts:
--------------------------------------------------------------------------------
  1 | import { fromMarkdown } from 'mdast-util-from-markdown';
  2 | import { frontmatterFromMarkdown } from 'mdast-util-frontmatter';
  3 | import { frontmatter } from 'micromark-extension-frontmatter';
  4 | import { parseYaml } from 'obsidian';
  5 | import { KanbanSettings, settingKeyLookup } from 'src/Settings';
  6 | import { StateManager } from 'src/StateManager';
  7 | import { getNormalizedPath } from 'src/helpers/renderMarkdown';
  8 | 
  9 | import { frontmatterKey, getLinkedPageMetadata } from './common';
 10 | import { blockidExtension, blockidFromMarkdown } from './extensions/blockid';
 11 | import { genericWrappedExtension, genericWrappedFromMarkdown } from './extensions/genericWrapped';
 12 | import { internalMarkdownLinks } from './extensions/internalMarkdownLink';
 13 | import { tagExtension, tagFromMarkdown } from './extensions/tag';
 14 | import { gfmTaskListItem, gfmTaskListItemFromMarkdown } from './extensions/taskList';
 15 | import { FileAccessor } from './helpers/parser';
 16 | 
 17 | function extractFrontmatter(md: string) {
 18 |   let frontmatterStart = -1;
 19 |   let openDashCount = 0;
 20 | 
 21 |   for (let i = 0, len = md.length; i < len; i++) {
 22 |     if (openDashCount < 3) {
 23 |       if (md[i] === '-') {
 24 |         openDashCount++;
 25 |         continue;
 26 |       } else {
 27 |         throw new Error('Error parsing frontmatter');
 28 |       }
 29 |     }
 30 | 
 31 |     if (frontmatterStart < 0) frontmatterStart = i;
 32 | 
 33 |     if (md[i] === '-' && /[\r\n]/.test(md[i - 1]) && md[i + 1] === '-' && md[i + 2] === '-') {
 34 |       return parseYaml(md.slice(frontmatterStart, i - 1).trim());
 35 |     }
 36 |   }
 37 | }
 38 | 
 39 | function extractSettingsFooter(md: string) {
 40 |   let hasEntered = false;
 41 |   let openTickCount = 0;
 42 |   let settingsEnd = -1;
 43 | 
 44 |   for (let i = md.length - 1; i >= 0; i--) {
 45 |     if (!hasEntered && /[`%\n\r]/.test(md[i])) {
 46 |       if (md[i] === '`') {
 47 |         openTickCount++;
 48 | 
 49 |         if (openTickCount === 3) {
 50 |           hasEntered = true;
 51 |           settingsEnd = i - 1;
 52 |         }
 53 |       }
 54 |       continue;
 55 |     } else if (!hasEntered) {
 56 |       return {};
 57 |     }
 58 | 
 59 |     if (md[i] === '`' && md[i - 1] === '`' && md[i - 2] === '`' && /[\r\n]/.test(md[i - 3])) {
 60 |       return JSON.parse(md.slice(i + 1, settingsEnd).trim());
 61 |     }
 62 |   }
 63 | }
 64 | 
 65 | function getExtensions(stateManager: StateManager) {
 66 |   return [
 67 |     gfmTaskListItem,
 68 |     genericWrappedExtension('date', `${stateManager.getSetting('date-trigger')}{`, '}'),
 69 |     genericWrappedExtension('dateLink', `${stateManager.getSetting('date-trigger')}[[`, ']]'),
 70 |     genericWrappedExtension('time', `${stateManager.getSetting('time-trigger')}{`, '}'),
 71 |     genericWrappedExtension('embedWikilink', '![[', ']]'),
 72 |     genericWrappedExtension('wikilink', '[[', ']]'),
 73 |     tagExtension(),
 74 |     blockidExtension(),
 75 |   ];
 76 | }
 77 | 
 78 | function getMdastExtensions(stateManager: StateManager) {
 79 |   return [
 80 |     gfmTaskListItemFromMarkdown,
 81 |     genericWrappedFromMarkdown('date', (text, node) => {
 82 |       if (!text) return;
 83 |       node.date = text;
 84 |     }),
 85 |     genericWrappedFromMarkdown('dateLink', (text, node) => {
 86 |       if (!text) return;
 87 |       node.date = text;
 88 |     }),
 89 |     genericWrappedFromMarkdown('time', (text, node) => {
 90 |       if (!text) return;
 91 |       node.time = text;
 92 |     }),
 93 |     genericWrappedFromMarkdown('embedWikilink', (text, node) => {
 94 |       if (!text) return;
 95 | 
 96 |       const normalizedPath = getNormalizedPath(text);
 97 | 
 98 |       const file = stateManager.app.metadataCache.getFirstLinkpathDest(
 99 |         normalizedPath.root,
100 |         stateManager.file.path
101 |       );
102 | 
103 |       node.fileAccessor = {
104 |         target: normalizedPath.root,
105 |         isEmbed: true,
106 |         stats: file?.stat,
107 |       } as FileAccessor;
108 |     }),
109 |     genericWrappedFromMarkdown('wikilink', (text, node) => {
110 |       if (!text) return;
111 | 
112 |       const normalizedPath = getNormalizedPath(text);
113 | 
114 |       const file = stateManager.app.metadataCache.getFirstLinkpathDest(
115 |         normalizedPath.root,
116 |         stateManager.file.path
117 |       );
118 | 
119 |       node.fileAccessor = {
120 |         target: normalizedPath.root,
121 |         isEmbed: false,
122 |       } as FileAccessor;
123 | 
124 |       if (file) {
125 |         const metadata = getLinkedPageMetadata(stateManager, file);
126 | 
127 |         node.fileMetadata = metadata.fileMetadata;
128 |         node.fileMetadataOrder = metadata.fileMetadataOrder;
129 |       }
130 |     }),
131 |     internalMarkdownLinks((node, isEmbed) => {
132 |       if (!node.url || /:\/\//.test(node.url) || !/.md$/.test(node.url)) {
133 |         return;
134 |       }
135 | 
136 |       const file = stateManager.app.metadataCache.getFirstLinkpathDest(
137 |         decodeURIComponent(node.url),
138 |         stateManager.file.path
139 |       );
140 | 
141 |       if (isEmbed) {
142 |         node.type = 'embedLink';
143 |         node.fileAccessor = {
144 |           target: decodeURIComponent(node.url),
145 |           isEmbed: true,
146 |           stats: file.stat,
147 |         } as FileAccessor;
148 |       } else {
149 |         node.fileAccessor = {
150 |           target: decodeURIComponent(node.url),
151 |           isEmbed: false,
152 |         } as FileAccessor;
153 | 
154 |         if (file) {
155 |           const metadata = getLinkedPageMetadata(stateManager, file);
156 | 
157 |           node.fileMetadata = metadata.fileMetadata;
158 |           node.fileMetadataOrder = metadata.fileMetadataOrder;
159 |         }
160 |       }
161 |     }),
162 |     tagFromMarkdown(),
163 |     blockidFromMarkdown(),
164 |   ];
165 | }
166 | 
167 | export function parseMarkdown(stateManager: StateManager, md: string) {
168 |   const mdFrontmatter = extractFrontmatter(md);
169 |   const mdSettings = extractSettingsFooter(md);
170 |   const settings = { ...mdSettings };
171 |   const fileFrontmatter: Record<string, any> = {};
172 | 
173 |   Object.keys(mdFrontmatter).forEach((key) => {
174 |     if (key === frontmatterKey) {
175 |       const val = mdFrontmatter[key] === 'basic' ? 'board' : mdFrontmatter[key];
176 |       settings[key] = val;
177 |       fileFrontmatter[key] = val;
178 |     } else if (settingKeyLookup.has(key as keyof KanbanSettings)) {
179 |       settings[key] = mdFrontmatter[key];
180 |     } else {
181 |       fileFrontmatter[key] = mdFrontmatter[key];
182 |     }
183 |   });
184 | 
185 |   stateManager.compileSettings(settings);
186 | 
187 |   return {
188 |     settings,
189 |     frontmatter: fileFrontmatter,
190 |     ast: fromMarkdown(md, {
191 |       extensions: [frontmatter(['yaml']), ...getExtensions(stateManager)],
192 |       mdastExtensions: [frontmatterFromMarkdown(['yaml']), ...getMdastExtensions(stateManager)],
193 |     }),
194 |   };
195 | }
196 | 
197 | export function parseFragment(stateManager: StateManager, md: string) {
198 |   return fromMarkdown(md, {
199 |     extensions: getExtensions(stateManager),
200 |     mdastExtensions: getMdastExtensions(stateManager),
201 |   });
202 | }
203 | 


--------------------------------------------------------------------------------
/src/settingHelpers.ts:
--------------------------------------------------------------------------------
  1 | import Choices, { Choices as IChoices } from 'choices.js';
  2 | import update from 'immutability-helper';
  3 | import { App, Setting, TFile, TFolder, Vault } from 'obsidian';
  4 | 
  5 | import { KanbanSettings, SettingsManager } from './Settings';
  6 | import { getTemplatePlugins } from './components/helpers';
  7 | import { t } from './lang/helpers';
  8 | 
  9 | export const defaultDateTrigger = '@';
 10 | export const defaultTimeTrigger = '@@';
 11 | export const defaultMetadataPosition = 'body';
 12 | 
 13 | export function getFolderChoices(app: App) {
 14 |   const folderList: IChoices.Choice[] = [];
 15 | 
 16 |   Vault.recurseChildren(app.vault.getRoot(), (f) => {
 17 |     if (f instanceof TFolder) {
 18 |       folderList.push({
 19 |         value: f.path,
 20 |         label: f.path,
 21 |         selected: false,
 22 |         disabled: false,
 23 |       });
 24 |     }
 25 |   });
 26 | 
 27 |   return folderList;
 28 | }
 29 | 
 30 | export function getTemplateChoices(app: App, folderStr?: string) {
 31 |   const fileList: IChoices.Choice[] = [];
 32 | 
 33 |   let folder = folderStr ? app.vault.getAbstractFileByPath(folderStr) : null;
 34 | 
 35 |   if (!folder || !(folder instanceof TFolder)) {
 36 |     folder = app.vault.getRoot();
 37 |   }
 38 | 
 39 |   Vault.recurseChildren(folder as TFolder, (f) => {
 40 |     if (f instanceof TFile) {
 41 |       fileList.push({
 42 |         value: f.path,
 43 |         label: f.basename,
 44 |         selected: false,
 45 |         disabled: false,
 46 |       });
 47 |     }
 48 |   });
 49 | 
 50 |   return fileList;
 51 | }
 52 | 
 53 | export function getListOptions(app: App) {
 54 |   const { templateFolder, templatesEnabled, templaterPlugin } = getTemplatePlugins(app);
 55 | 
 56 |   const templateFiles = getTemplateChoices(app, templateFolder);
 57 |   const vaultFolders = getFolderChoices(app);
 58 | 
 59 |   let templateWarning = '';
 60 | 
 61 |   if (!templatesEnabled && !templaterPlugin) {
 62 |     templateWarning = t('Note: No template plugins are currently enabled.');
 63 |   }
 64 | 
 65 |   return {
 66 |     templateFiles,
 67 |     vaultFolders,
 68 |     templateWarning,
 69 |   };
 70 | }
 71 | 
 72 | interface CreateSearchSelectParams {
 73 |   choices: IChoices.Choice[];
 74 |   key: keyof KanbanSettings;
 75 |   warningText?: string;
 76 |   local: boolean;
 77 |   placeHolderStr: string;
 78 |   manager: SettingsManager;
 79 | }
 80 | 
 81 | export function createSearchSelect({
 82 |   choices,
 83 |   key,
 84 |   warningText,
 85 |   local,
 86 |   placeHolderStr,
 87 |   manager,
 88 | }: CreateSearchSelectParams) {
 89 |   return (setting: Setting) => {
 90 |     setting.controlEl.createEl('select', {}, (el) => {
 91 |       // el must be in the dom, so we setTimeout
 92 |       el.win.setTimeout(() => {
 93 |         let list = choices;
 94 | 
 95 |         const [value, globalValue] = manager.getSetting(key, local);
 96 | 
 97 |         let didSetPlaceholder = false;
 98 |         if (globalValue) {
 99 |           const index = list.findIndex((f) => f.value === globalValue);
100 | 
101 |           if (index > -1) {
102 |             didSetPlaceholder = true;
103 |             const choice = choices[index];
104 | 
105 |             list = update(list, {
106 |               $splice: [[index, 1]],
107 |               $unshift: [
108 |                 update(choice, {
109 |                   placeholder: {
110 |                     $set: true,
111 |                   },
112 |                   value: {
113 |                     $set: '',
114 |                   },
115 |                   label: {
116 |                     $apply: (v) => `${v} (${t('default')})`,
117 |                   },
118 |                 }),
119 |               ],
120 |             });
121 |           }
122 |         }
123 | 
124 |         if (!didSetPlaceholder) {
125 |           list = update(list, {
126 |             $unshift: [
127 |               {
128 |                 placeholder: true,
129 |                 value: '',
130 |                 label: placeHolderStr,
131 |                 selected: false,
132 |                 disabled: false,
133 |               },
134 |             ],
135 |           });
136 |         }
137 | 
138 |         const c = new Choices(el, {
139 |           placeholder: true,
140 |           position: 'bottom' as 'auto',
141 |           searchPlaceholderValue: t('Search...'),
142 |           searchEnabled: list.length > 10,
143 |           choices: list,
144 |         }).setChoiceByValue('');
145 | 
146 |         if (value && typeof value === 'string' && list.findIndex((f) => f.value === value) > -1) {
147 |           c.setChoiceByValue(value);
148 |         }
149 | 
150 |         const onChange = (e: CustomEvent) => {
151 |           const val = e.detail.value;
152 | 
153 |           if (val) {
154 |             manager.applySettingsUpdate({
155 |               [key]: {
156 |                 $set: val,
157 |               },
158 |             });
159 |           } else {
160 |             manager.applySettingsUpdate({
161 |               $unset: [key],
162 |             });
163 |           }
164 |         };
165 | 
166 |         el.addEventListener('change', onChange);
167 | 
168 |         manager.cleanupFns.push(() => {
169 |           c.destroy();
170 |           el.removeEventListener('change', onChange);
171 |         });
172 |       });
173 | 
174 |       if (warningText) {
175 |         setting.descEl.createDiv({}, (div) => {
176 |           div.createEl('strong', { text: warningText });
177 |         });
178 |       }
179 |     });
180 |   };
181 | }
182 | 


--------------------------------------------------------------------------------
/src/settings/DateColorSettings.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import update from 'immutability-helper';
  3 | import { moment } from 'obsidian';
  4 | import Preact from 'preact/compat';
  5 | 
  6 | import { Icon } from '../components/Icon/Icon';
  7 | import { c, generateInstanceId } from '../components/helpers';
  8 | import { DateColor, DateColorSetting, DateColorSettingTemplate } from '../components/types';
  9 | import { getParentBodyElement } from '../dnd/util/getWindow';
 10 | import { t } from '../lang/helpers';
 11 | import { ColorPickerInput } from './TagColorSettings';
 12 | 
 13 | interface ItemProps {
 14 |   dateColorKey: DateColor;
 15 |   deleteKey: () => void;
 16 |   updateKey: (newKey: DateColor) => void;
 17 |   defaultColors: { color: string; backgroundColor: string };
 18 |   getTimeFormat: () => string;
 19 |   getDateFormat: () => string;
 20 | }
 21 | 
 22 | function Item({
 23 |   dateColorKey,
 24 |   deleteKey,
 25 |   updateKey,
 26 |   defaultColors,
 27 |   getTimeFormat,
 28 |   getDateFormat,
 29 | }: ItemProps) {
 30 |   let defaultSelectorValue = 'between';
 31 | 
 32 |   if (dateColorKey.isToday) defaultSelectorValue = 'today';
 33 |   if (dateColorKey.isBefore) defaultSelectorValue = 'before';
 34 |   if (dateColorKey.isAfter) defaultSelectorValue = 'after';
 35 | 
 36 |   return (
 37 |     <div className={c('setting-item-wrapper')}>
 38 |       <div className={c('setting-item')}>
 39 |         <div className={`${c('setting-controls-wrapper')} ${c('tag-color-input')}`}>
 40 |           <div>
 41 |             <div>
 42 |               <div className={c('setting-item-label')}>{t('Date is')}</div>
 43 |             </div>
 44 |             <div className={c('date-color-config')}>
 45 |               <select
 46 |                 className="dropdown"
 47 |                 defaultValue={defaultSelectorValue}
 48 |                 onChange={(e) => {
 49 |                   const clone = {
 50 |                     ...dateColorKey,
 51 |                   };
 52 |                   delete clone.isAfter;
 53 |                   delete clone.isBefore;
 54 |                   delete clone.isToday;
 55 | 
 56 |                   switch ((e.target as HTMLSelectElement).value) {
 57 |                     case 'today':
 58 |                       clone.isToday = true;
 59 |                       break;
 60 |                     case 'before':
 61 |                       clone.isBefore = true;
 62 |                       break;
 63 |                     case 'after':
 64 |                       clone.isAfter = true;
 65 |                       break;
 66 |                   }
 67 | 
 68 |                   updateKey(clone);
 69 |                 }}
 70 |               >
 71 |                 <option value="between">{t('Between now and')}</option>
 72 |                 <option value="today">{t('Today')}</option>
 73 |                 <option value="after">{t('After now')}</option>
 74 |                 <option value="before">{t('Before now')}</option>
 75 |               </select>
 76 |               {!dateColorKey.isToday && !dateColorKey.isAfter && !dateColorKey.isBefore && (
 77 |                 <>
 78 |                   <input
 79 |                     type="number"
 80 |                     value={dateColorKey.distance}
 81 |                     onChange={(e) => {
 82 |                       updateKey({
 83 |                         ...dateColorKey,
 84 |                         distance: parseInt((e.target as HTMLInputElement).value),
 85 |                       });
 86 |                     }}
 87 |                   />
 88 |                   <select
 89 |                     className="dropdown"
 90 |                     defaultValue={dateColorKey.unit}
 91 |                     onChange={(e) => {
 92 |                       updateKey({
 93 |                         ...dateColorKey,
 94 |                         unit: (e.target as HTMLSelectElement).value as any,
 95 |                       });
 96 |                     }}
 97 |                   >
 98 |                     <option value="hours">Hours</option>
 99 |                     <option value="days">Days</option>
100 |                     <option value="weeks">Weeks</option>
101 |                     <option value="months">Months</option>
102 |                   </select>
103 |                   <select
104 |                     className="dropdown"
105 |                     defaultValue={dateColorKey.direction}
106 |                     onChange={(e) => {
107 |                       updateKey({
108 |                         ...dateColorKey,
109 |                         direction: (e.target as HTMLSelectElement).value as any,
110 |                       });
111 |                     }}
112 |                   >
113 |                     <option value="after">{t('After now')}</option>
114 |                     <option value="before">{t('Before now')}</option>
115 |                   </select>
116 |                 </>
117 |               )}
118 |             </div>
119 | 
120 |             <div className={c('date-color-config')}>
121 |               <div>
122 |                 <div className={c('setting-item-label')}>{t('Background color')}</div>
123 |                 <ColorPickerInput
124 |                   color={dateColorKey.backgroundColor}
125 |                   setColor={(color) => {
126 |                     updateKey({
127 |                       ...dateColorKey,
128 |                       backgroundColor: color,
129 |                     });
130 |                   }}
131 |                   defaultColor={defaultColors.backgroundColor}
132 |                 />
133 |               </div>
134 |               <div>
135 |                 <div className={c('setting-item-label')}>{t('Text color')}</div>
136 |                 <ColorPickerInput
137 |                   color={dateColorKey.color}
138 |                   setColor={(color) => {
139 |                     updateKey({
140 |                       ...dateColorKey,
141 |                       color: color,
142 |                     });
143 |                   }}
144 |                   defaultColor={defaultColors.color}
145 |                 />
146 |               </div>
147 |             </div>
148 |           </div>
149 |           <div>
150 |             <div className={c('date-color-wrapper')}>
151 |               <div className={c('item-metadata')}>
152 |                 <span
153 |                   style={{
154 |                     '--date-color': dateColorKey.color,
155 |                     '--date-background-color': dateColorKey.backgroundColor,
156 |                   }}
157 |                   className={classcat([
158 |                     c('item-metadata-date-wrapper'),
159 |                     c('date'),
160 |                     { 'has-background': !!dateColorKey?.backgroundColor },
161 |                   ])}
162 |                 >
163 |                   <span className={c('item-metadata-date is-button')}>
164 |                     {moment().format(getDateFormat())}
165 |                   </span>{' '}
166 |                   <span className={c('item-metadata-time is-button')}>
167 |                     {moment().format(getTimeFormat())}
168 |                   </span>
169 |                 </span>
170 |               </div>
171 |             </div>
172 |           </div>
173 |         </div>
174 |         <div className={c('setting-button-wrapper')}>
175 |           <div className="clickable-icon" onClick={deleteKey} aria-label={t('Delete')}>
176 |             <Icon name="lucide-trash-2" />
177 |           </div>
178 |         </div>
179 |       </div>
180 |     </div>
181 |   );
182 | }
183 | 
184 | interface DateSettingsProps {
185 |   dataKeys: DateColorSetting[];
186 |   onChange: (settings: DateColorSetting[]) => void;
187 |   portalContainer: HTMLElement;
188 |   getTimeFormat: () => string;
189 |   getDateFormat: () => string;
190 | }
191 | 
192 | function DateSettings({ dataKeys, onChange, getTimeFormat, getDateFormat }: DateSettingsProps) {
193 |   const [keys, setKeys] = Preact.useState(dataKeys);
194 |   const defaultColors = Preact.useMemo(() => {
195 |     const wrapper = createDiv(c('item-metadata'));
196 |     const date = wrapper.createSpan(c('item-metadata-date'));
197 | 
198 |     wrapper.style.position = 'absolute';
199 |     wrapper.style.visibility = 'hidden';
200 | 
201 |     activeDocument.body.append(wrapper);
202 | 
203 |     const props = activeWindow.getComputedStyle(date);
204 |     const color = props.getPropertyValue('color').trim();
205 |     const backgroundColor = props.getPropertyValue('background-color').trim();
206 | 
207 |     wrapper.remove();
208 | 
209 |     return {
210 |       color,
211 |       backgroundColor,
212 |     };
213 |   }, []);
214 | 
215 |   const updateKeys = (keys: DateColorSetting[]) => {
216 |     onChange(keys);
217 |     setKeys(keys);
218 |   };
219 | 
220 |   const newKey = () => {
221 |     updateKeys(
222 |       update(keys, {
223 |         $push: [
224 |           {
225 |             ...DateColorSettingTemplate,
226 |             id: generateInstanceId(),
227 |             data: {
228 |               isToday: false,
229 |               distance: 1,
230 |               unit: 'days',
231 |               direction: 'after',
232 |             },
233 |           },
234 |         ],
235 |       })
236 |     );
237 |   };
238 | 
239 |   const deleteKey = (i: number) => {
240 |     updateKeys(
241 |       update(keys, {
242 |         $splice: [[i, 1]],
243 |       })
244 |     );
245 |   };
246 | 
247 |   const updateDateColor = (i: number) => (newDateKey: DateColor) => {
248 |     updateKeys(
249 |       update(keys, {
250 |         [i]: {
251 |           data: {
252 |             $set: newDateKey,
253 |           },
254 |         },
255 |       })
256 |     );
257 |   };
258 | 
259 |   return (
260 |     <div className={c('date-color-input-wrapper')}>
261 |       <div className="setting-item-info">
262 |         <div className="setting-item-name">{t('Display date colors')}</div>
263 |         <div className="setting-item-description">
264 |           {t('Set colors for dates displayed in cards based on the rules below.')}
265 |         </div>
266 |       </div>
267 |       <div>
268 |         {keys.map((key, index) => (
269 |           <Item
270 |             key={key.id}
271 |             dateColorKey={key.data}
272 |             deleteKey={() => deleteKey(index)}
273 |             updateKey={updateDateColor(index)}
274 |             defaultColors={defaultColors}
275 |             getTimeFormat={getTimeFormat}
276 |             getDateFormat={getDateFormat}
277 |           />
278 |         ))}
279 |       </div>
280 |       <button className={c('add-tag-color-button')} onClick={newKey}>
281 |         {t('Add date color')}
282 |       </button>
283 |     </div>
284 |   );
285 | }
286 | 
287 | export function renderDateSettings(
288 |   containerEl: HTMLElement,
289 |   keys: DateColorSetting[],
290 |   onChange: (key: DateColorSetting[]) => void,
291 |   getDateFormat: () => string,
292 |   getTimeFormat: () => string
293 | ) {
294 |   Preact.render(
295 |     <DateSettings
296 |       dataKeys={keys}
297 |       onChange={onChange}
298 |       portalContainer={getParentBodyElement(containerEl)}
299 |       getDateFormat={getDateFormat}
300 |       getTimeFormat={getTimeFormat}
301 |     />,
302 |     containerEl
303 |   );
304 | }
305 | 
306 | export function cleanUpDateSettings(containerEl: HTMLElement) {
307 |   Preact.unmountComponentAtNode(containerEl);
308 | }
309 | 


--------------------------------------------------------------------------------
/src/settings/MetadataSettings.tsx:
--------------------------------------------------------------------------------
  1 | import update from 'immutability-helper';
  2 | import { JSX, createPortal, render, unmountComponentAtNode } from 'preact/compat';
  3 | import { Dispatch, StateUpdater, useContext, useEffect, useRef, useState } from 'preact/hooks';
  4 | 
  5 | import { Icon } from '../components/Icon/Icon';
  6 | import { c, generateInstanceId, noop, useIMEInputProps } from '../components/helpers';
  7 | import { DataTypes, MetadataSetting, MetadataSettingTemplate } from '../components/types';
  8 | import { DndContext } from '../dnd/components/DndContext';
  9 | import { DragOverlay } from '../dnd/components/DragOverlay';
 10 | import { Droppable } from '../dnd/components/Droppable';
 11 | import { DndScope } from '../dnd/components/Scope';
 12 | import { SortPlaceholder } from '../dnd/components/SortPlaceholder';
 13 | import { Sortable } from '../dnd/components/Sortable';
 14 | import { DndManagerContext } from '../dnd/components/context';
 15 | import { useDragHandle } from '../dnd/managers/DragManager';
 16 | import { Entity } from '../dnd/types';
 17 | import { getParentBodyElement, getParentWindow } from '../dnd/util/getWindow';
 18 | import { t } from '../lang/helpers';
 19 | 
 20 | interface ItemProps {
 21 |   itemIndex: number;
 22 |   isStatic?: boolean;
 23 |   item: MetadataSetting;
 24 |   deleteKey: () => void;
 25 |   toggleShouldHideLabel: () => void;
 26 |   toggleContainsMarkdown: () => void;
 27 |   updateKey: (value: string) => void;
 28 |   updateLabel: (value: string) => void;
 29 | }
 30 | 
 31 | function Item({
 32 |   isStatic,
 33 |   itemIndex,
 34 |   item,
 35 |   toggleShouldHideLabel,
 36 |   toggleContainsMarkdown,
 37 |   deleteKey,
 38 |   updateKey,
 39 |   updateLabel,
 40 | }: ItemProps) {
 41 |   const elementRef = useRef<HTMLDivElement>(null);
 42 |   const measureRef = useRef<HTMLDivElement>(null);
 43 |   const dragHandleRef = useRef<HTMLDivElement>(null);
 44 | 
 45 |   const bindHandle = useDragHandle(measureRef, dragHandleRef);
 46 | 
 47 |   const body = (
 48 |     <div className={c('setting-controls-wrapper')}>
 49 |       <div className={c('setting-input-wrapper')}>
 50 |         <div>
 51 |           <div className={c('setting-item-label')}>{t('Metadata key')}</div>
 52 |           <input
 53 |             type="text"
 54 |             value={item.data.metadataKey}
 55 |             onChange={(e) => updateKey((e.target as HTMLInputElement).value)}
 56 |           />
 57 |         </div>
 58 |         <div>
 59 |           <div className={c('setting-item-label')}>{t('Display label')}</div>
 60 |           <input
 61 |             type="text"
 62 |             value={item.data.label}
 63 |             onChange={(e) => updateLabel((e.target as HTMLInputElement).value)}
 64 |           />
 65 |         </div>
 66 |       </div>
 67 |       <div className={c('setting-toggle-wrapper')}>
 68 |         <div>
 69 |           <div
 70 |             className={`checkbox-container ${item.data.shouldHideLabel ? 'is-enabled' : ''}`}
 71 |             onClick={toggleShouldHideLabel}
 72 |             aria-label={t('Hide label')}
 73 |           />
 74 |           <div className={c('setting-item-label')}>{t('Hide label')}</div>
 75 |         </div>
 76 |         <div>
 77 |           <div
 78 |             className={`checkbox-container ${item.data.containsMarkdown ? 'is-enabled' : ''}`}
 79 |             onClick={toggleContainsMarkdown}
 80 |             aria-label={t('Field contains markdown')}
 81 |           />
 82 |           <div className={c('setting-item-label')}>{t('Field contains markdown')}</div>
 83 |         </div>
 84 |       </div>
 85 |     </div>
 86 |   );
 87 | 
 88 |   return (
 89 |     <div ref={measureRef} className={c('setting-item-wrapper')}>
 90 |       <div ref={elementRef} className={c('setting-item')}>
 91 |         {isStatic ? (
 92 |           body
 93 |         ) : (
 94 |           <Droppable
 95 |             elementRef={elementRef}
 96 |             measureRef={measureRef}
 97 |             id={item.id}
 98 |             index={itemIndex}
 99 |             data={item}
100 |           >
101 |             {body}
102 |           </Droppable>
103 |         )}
104 |         <div className={c('setting-button-wrapper')}>
105 |           <div className="clickable-icon" onClick={deleteKey} aria-label={t('Delete')}>
106 |             <Icon name="lucide-trash-2" />
107 |           </div>
108 |           <div
109 |             className="mobile-option-setting-drag-icon clickable-icon"
110 |             aria-label={t('Drag to rearrange')}
111 |             ref={bindHandle}
112 |           >
113 |             <Icon name="lucide-grip-horizontal" />
114 |           </div>
115 |         </div>
116 |       </div>
117 |     </div>
118 |   );
119 | }
120 | 
121 | interface MetadataSettingsProps {
122 |   dataKeys: MetadataSetting[];
123 |   scrollEl: HTMLElement;
124 |   onChange(keys: MetadataSetting[]): void;
125 |   portalContainer: HTMLElement;
126 | }
127 | 
128 | interface UseKeyModifiersParams {
129 |   onChange(keys: MetadataSetting[]): void;
130 |   inputValue: string;
131 |   keys: MetadataSetting[];
132 |   setKeys: Dispatch<StateUpdater<MetadataSetting[]>>;
133 |   win: Window;
134 | }
135 | 
136 | function useKeyModifiers({ onChange, inputValue, keys, setKeys }: UseKeyModifiersParams) {
137 |   const updateKeys = (keys: MetadataSetting[]) => {
138 |     onChange(keys);
139 |     setKeys(keys);
140 |   };
141 | 
142 |   return {
143 |     updateKey: (i: number) => (value: string) => {
144 |       updateKeys(
145 |         update(keys, {
146 |           [i]: {
147 |             data: {
148 |               metadataKey: {
149 |                 $set: value,
150 |               },
151 |             },
152 |           },
153 |         })
154 |       );
155 |     },
156 | 
157 |     updateLabel: (i: number) => (value: string) => {
158 |       updateKeys(
159 |         update(keys, {
160 |           [i]: {
161 |             data: {
162 |               label: {
163 |                 $set: value,
164 |               },
165 |             },
166 |           },
167 |         })
168 |       );
169 |     },
170 | 
171 |     toggleShouldHideLabel: (i: number) => () => {
172 |       updateKeys(
173 |         update(keys, {
174 |           [i]: {
175 |             data: {
176 |               $toggle: ['shouldHideLabel'],
177 |             },
178 |           },
179 |         })
180 |       );
181 |     },
182 | 
183 |     toggleContainsMarkdown: (i: number) => () => {
184 |       updateKeys(
185 |         update(keys, {
186 |           [i]: {
187 |             data: {
188 |               $toggle: ['containsMarkdown'],
189 |             },
190 |           },
191 |         })
192 |       );
193 |     },
194 | 
195 |     deleteKey: (i: number) => () => {
196 |       updateKeys(
197 |         update(keys, {
198 |           $splice: [[i, 1]],
199 |         })
200 |       );
201 |     },
202 | 
203 |     newKey: () => {
204 |       updateKeys(
205 |         update(keys, {
206 |           $push: [
207 |             {
208 |               ...MetadataSettingTemplate,
209 |               id: generateInstanceId(),
210 |               data: {
211 |                 metadataKey: inputValue,
212 |                 label: '',
213 |                 shouldHideLabel: false,
214 |                 containsMarkdown: false,
215 |               },
216 |             },
217 |           ],
218 |         })
219 |       );
220 |     },
221 | 
222 |     moveKey: (drag: Entity, drop: Entity) => {
223 |       const dragPath = drag.getPath();
224 |       const dropPath = drop.getPath();
225 | 
226 |       const dragIndex = dragPath[dragPath.length - 1];
227 |       const dropIndex = dropPath[dropPath.length - 1];
228 | 
229 |       if (dragIndex === dropIndex) {
230 |         return;
231 |       }
232 | 
233 |       const clone = keys.slice();
234 |       const [removed] = clone.splice(dragIndex, 1);
235 |       clone.splice(dropIndex, 0, removed);
236 | 
237 |       updateKeys(clone);
238 |     },
239 |   };
240 | }
241 | 
242 | const accepts = [DataTypes.MetadataSetting];
243 | 
244 | interface OverlayProps {
245 |   keys: MetadataSetting[];
246 |   portalContainer: HTMLElement;
247 | }
248 | 
249 | function Overlay({ keys, portalContainer }: OverlayProps) {
250 |   return createPortal(
251 |     <DragOverlay>
252 |       {(entity, styles) => {
253 |         const path = entity.getPath();
254 |         const index = path[0];
255 |         const item = keys[index];
256 | 
257 |         return (
258 |           <div className={c('drag-container')} style={styles}>
259 |             <Item
260 |               item={item}
261 |               itemIndex={index}
262 |               updateKey={noop}
263 |               updateLabel={noop}
264 |               toggleShouldHideLabel={noop}
265 |               toggleContainsMarkdown={noop}
266 |               deleteKey={noop}
267 |               isStatic={true}
268 |             />
269 |           </div>
270 |         );
271 |       }}
272 |     </DragOverlay>,
273 |     portalContainer
274 |   );
275 | }
276 | 
277 | function RespondToScroll({ scrollEl }: { scrollEl: HTMLElement }): JSX.Element {
278 |   const dndManager = useContext(DndManagerContext);
279 | 
280 |   useEffect(() => {
281 |     let debounce = 0;
282 | 
283 |     const onScroll = () => {
284 |       scrollEl.win.clearTimeout(debounce);
285 |       debounce = scrollEl.win.setTimeout(() => {
286 |         dndManager.hitboxEntities.forEach((entity) => {
287 |           entity.recalcInitial();
288 |         });
289 |       }, 100);
290 |     };
291 | 
292 |     scrollEl.addEventListener('scroll', onScroll, {
293 |       passive: true,
294 |       capture: false,
295 |     });
296 | 
297 |     return () => {
298 |       scrollEl.removeEventListener('scroll', onScroll);
299 |     };
300 |   }, [scrollEl, dndManager]);
301 | 
302 |   return null;
303 | }
304 | 
305 | function MetadataSettings(props: MetadataSettingsProps) {
306 |   const [keys, setKeys] = useState(props.dataKeys);
307 |   const [inputValue, setInputValue] = useState('');
308 |   const { getShouldIMEBlockAction, ...inputProps } = useIMEInputProps();
309 |   const win = getParentWindow(props.scrollEl);
310 | 
311 |   const {
312 |     updateKey,
313 |     updateLabel,
314 |     toggleShouldHideLabel,
315 |     toggleContainsMarkdown,
316 |     deleteKey,
317 |     newKey,
318 |     moveKey,
319 |   } = useKeyModifiers({
320 |     onChange: props.onChange,
321 |     inputValue,
322 |     keys,
323 |     setKeys,
324 |     win,
325 |   });
326 | 
327 |   return (
328 |     <>
329 |       <DndContext win={win} onDrop={moveKey}>
330 |         <RespondToScroll scrollEl={props.scrollEl} />
331 |         <DndScope>
332 |           <Sortable axis="vertical">
333 |             {keys.map((k, i) => {
334 |               return (
335 |                 <Item
336 |                   key={k.id}
337 |                   item={k}
338 |                   itemIndex={i}
339 |                   updateKey={updateKey(i)}
340 |                   updateLabel={updateLabel(i)}
341 |                   toggleShouldHideLabel={toggleShouldHideLabel(i)}
342 |                   toggleContainsMarkdown={toggleContainsMarkdown(i)}
343 |                   deleteKey={deleteKey(i)}
344 |                 />
345 |               );
346 |             })}
347 |             <SortPlaceholder accepts={accepts} index={keys.length} />
348 |           </Sortable>
349 |         </DndScope>
350 |         <Overlay keys={keys} portalContainer={props.portalContainer} />
351 |       </DndContext>
352 |       <div className={c('setting-key-input-wrapper')}>
353 |         <input
354 |           placeholder={t('Metadata key')}
355 |           type="text"
356 |           value={inputValue}
357 |           onChange={(e) => setInputValue((e.target as HTMLInputElement).value)}
358 |           onKeyDown={(e) => {
359 |             if (getShouldIMEBlockAction()) return;
360 | 
361 |             if (e.key === 'Enter') {
362 |               newKey();
363 |               setInputValue('');
364 |               return;
365 |             }
366 | 
367 |             if (e.key === 'Escape') {
368 |               setInputValue('');
369 |               (e.target as HTMLInputElement).blur();
370 |             }
371 |           }}
372 |           {...inputProps}
373 |         />
374 |         <button
375 |           onClick={() => {
376 |             newKey();
377 |             setInputValue('');
378 |           }}
379 |         >
380 |           {t('Add key')}
381 |         </button>
382 |       </div>
383 |     </>
384 |   );
385 | }
386 | 
387 | export function renderMetadataSettings(
388 |   containerEl: HTMLElement,
389 |   scrollEl: HTMLElement,
390 |   keys: MetadataSetting[],
391 |   onChange: (key: MetadataSetting[]) => void
392 | ) {
393 |   render(
394 |     <MetadataSettings
395 |       dataKeys={keys}
396 |       scrollEl={scrollEl}
397 |       onChange={onChange}
398 |       portalContainer={getParentBodyElement(containerEl)}
399 |     />,
400 |     containerEl
401 |   );
402 | }
403 | 
404 | export function cleanupMetadataSettings(containerEl: HTMLElement) {
405 |   unmountComponentAtNode(containerEl);
406 | }
407 | 


--------------------------------------------------------------------------------
/src/settings/TagColorSettings.tsx:
--------------------------------------------------------------------------------
  1 | import { colord } from 'colord';
  2 | import update from 'immutability-helper';
  3 | import {
  4 |   render,
  5 |   unmountComponentAtNode,
  6 |   useCallback,
  7 |   useEffect,
  8 |   useMemo,
  9 |   useState,
 10 | } from 'preact/compat';
 11 | import { RgbaStringColorPicker } from 'react-colorful';
 12 | import useOnclickOutside from 'react-cool-onclickoutside';
 13 | 
 14 | import { Icon } from '../components/Icon/Icon';
 15 | import { c, generateInstanceId } from '../components/helpers';
 16 | import { TagColor, TagColorSetting, TagColorSettingTemplate } from '../components/types';
 17 | import { getParentBodyElement } from '../dnd/util/getWindow';
 18 | import { t } from '../lang/helpers';
 19 | 
 20 | interface ItemProps {
 21 |   defaultColors: { color: string; backgroundColor: string };
 22 |   deleteKey: () => void;
 23 |   tagColorKey: TagColor;
 24 |   updateKey: (tagKey: string, color: string, backgroundColor: string) => void;
 25 | }
 26 | 
 27 | export function colorToRgbaString(color: string) {
 28 |   const parsed = colord(color);
 29 | 
 30 |   if (!parsed.isValid()) {
 31 |     return null;
 32 |   }
 33 | 
 34 |   const rgba = parsed.toRgb();
 35 |   return {
 36 |     rgba: `rgba(${rgba.r}, ${rgba.g}, ${rgba.b}, ${rgba.a})`,
 37 |     hexa: parsed.toHex(),
 38 |   };
 39 | }
 40 | 
 41 | export interface ColorPickerInputProps {
 42 |   color?: string;
 43 |   setColor: (color: string) => void;
 44 |   defaultColor: string;
 45 | }
 46 | 
 47 | export function ColorPickerInput({ color, setColor, defaultColor }: ColorPickerInputProps) {
 48 |   const [localRGB, setLocalRGB] = useState(color || defaultColor);
 49 |   const [localHEX, setLocalHEX] = useState(color || defaultColor);
 50 |   const [isPickerVisible, setIsPickerVisible] = useState(false);
 51 |   const onChange = useCallback(
 52 |     (newColor: string) => {
 53 |       const normalized = colorToRgbaString(newColor || defaultColor);
 54 |       if (normalized) {
 55 |         setLocalHEX(normalized.hexa);
 56 |         setLocalRGB(normalized.rgba);
 57 |         setColor(normalized.rgba);
 58 |       }
 59 |     },
 60 |     [setColor]
 61 |   );
 62 | 
 63 |   useEffect(() => {
 64 |     if (!color || !defaultColor) return;
 65 | 
 66 |     const normalized = colorToRgbaString(color || defaultColor);
 67 |     if (normalized) {
 68 |       setLocalRGB(normalized.rgba);
 69 |       setLocalHEX(normalized.hexa);
 70 |     }
 71 |   }, []);
 72 | 
 73 |   const clickOutsideRef = useOnclickOutside(() => {
 74 |     setIsPickerVisible(false);
 75 |   });
 76 | 
 77 |   return (
 78 |     <div ref={clickOutsideRef} className={c('color-picker-wrapper')}>
 79 |       {isPickerVisible && (
 80 |         <div className={c('color-picker')}>
 81 |           <RgbaStringColorPicker color={localRGB} onChange={onChange} />
 82 |         </div>
 83 |       )}
 84 |       <input
 85 |         type="text"
 86 |         value={localHEX}
 87 |         onChange={(e) => onChange((e.target as HTMLInputElement).value)}
 88 |         onFocus={() => {
 89 |           setIsPickerVisible(true);
 90 |         }}
 91 |       />
 92 |     </div>
 93 |   );
 94 | }
 95 | 
 96 | function Item({ tagColorKey, deleteKey, updateKey, defaultColors }: ItemProps) {
 97 |   return (
 98 |     <div className={c('setting-item-wrapper')}>
 99 |       <div className={c('setting-item')}>
100 |         <div className={`${c('setting-controls-wrapper')} ${c('tag-color-input')}`}>
101 |           <div className={c('setting-input-wrapper')}>
102 |             <div>
103 |               <div className={c('setting-item-label')}>{t('Tag')}</div>
104 |               <input
105 |                 type="text"
106 |                 placeholder="#tag"
107 |                 value={tagColorKey.tagKey}
108 |                 onChange={(e) => {
109 |                   const val = e.currentTarget.value;
110 |                   updateKey(
111 |                     val[0] === '#' ? val : '#' + val,
112 |                     tagColorKey.color,
113 |                     tagColorKey.backgroundColor
114 |                   );
115 |                 }}
116 |               />
117 |             </div>
118 |             <div>
119 |               <div className={c('setting-item-label')}>{t('Background color')}</div>
120 |               <ColorPickerInput
121 |                 color={tagColorKey.backgroundColor}
122 |                 setColor={(color) => {
123 |                   updateKey(tagColorKey.tagKey, tagColorKey.color, color);
124 |                 }}
125 |                 defaultColor={defaultColors.backgroundColor}
126 |               />
127 |             </div>
128 |             <div>
129 |               <div className={c('setting-item-label')}>{t('Text color')}</div>
130 |               <ColorPickerInput
131 |                 color={tagColorKey.color}
132 |                 setColor={(color) => {
133 |                   updateKey(tagColorKey.tagKey, color, tagColorKey.backgroundColor);
134 |                 }}
135 |                 defaultColor={defaultColors.color}
136 |               />
137 |             </div>
138 |           </div>
139 |           <div className={c('setting-toggle-wrapper')}>
140 |             <div>
141 |               <div className={c('item-tags')}>
142 |                 <a className={`tag ${c('item-tag')}`}>#tag1</a>
143 |                 <a
144 |                   className={`tag ${c('item-tag')}`}
145 |                   style={{
146 |                     '--tag-color': tagColorKey.color,
147 |                     '--tag-background': tagColorKey.backgroundColor,
148 |                   }}
149 |                 >
150 |                   {tagColorKey.tagKey || '#tag'}
151 |                 </a>
152 |                 <a className={`tag ${c('item-tag')}`}>#tag2</a>
153 |               </div>
154 |             </div>
155 |           </div>
156 |         </div>
157 |         <div className={c('setting-button-wrapper')}>
158 |           <div className="clickable-icon" onClick={deleteKey} aria-label={t('Delete')}>
159 |             <Icon name="lucide-trash-2" />
160 |           </div>
161 |         </div>
162 |       </div>
163 |     </div>
164 |   );
165 | }
166 | 
167 | interface TagSettingsProps {
168 |   dataKeys: TagColorSetting[];
169 |   onChange: (settings: TagColorSetting[]) => void;
170 |   portalContainer: HTMLElement;
171 | }
172 | 
173 | function TagSettings({ dataKeys, onChange }: TagSettingsProps) {
174 |   const [keys, setKeys] = useState(dataKeys);
175 |   const defaultColors = useMemo(() => {
176 |     const wrapper = createDiv(c('item-tags'));
177 |     const tag = wrapper.createEl('a', c('item-tag'));
178 | 
179 |     wrapper.style.position = 'absolute';
180 |     wrapper.style.visibility = 'hidden';
181 | 
182 |     activeDocument.body.append(wrapper);
183 | 
184 |     const props = activeWindow.getComputedStyle(tag);
185 |     const color = props.getPropertyValue('color').trim();
186 |     const backgroundColor = props.getPropertyValue('background-color').trim();
187 | 
188 |     wrapper.remove();
189 | 
190 |     return {
191 |       color,
192 |       backgroundColor,
193 |     };
194 |   }, []);
195 | 
196 |   const updateKeys = (keys: TagColorSetting[]) => {
197 |     onChange(keys);
198 |     setKeys(keys);
199 |   };
200 | 
201 |   const newKey = () => {
202 |     updateKeys(
203 |       update(keys, {
204 |         $push: [
205 |           {
206 |             ...TagColorSettingTemplate,
207 |             id: generateInstanceId(),
208 |             data: {
209 |               tagKey: '',
210 |               color: '',
211 |               backgroundColor: '',
212 |             },
213 |           },
214 |         ],
215 |       })
216 |     );
217 |   };
218 | 
219 |   const deleteKey = (i: number) => {
220 |     updateKeys(
221 |       update(keys, {
222 |         $splice: [[i, 1]],
223 |       })
224 |     );
225 |   };
226 | 
227 |   const updateTagColor =
228 |     (i: number) => (tagKey: string, color: string, backgroundColor: string) => {
229 |       updateKeys(
230 |         update(keys, {
231 |           [i]: {
232 |             data: {
233 |               tagKey: {
234 |                 $set: tagKey,
235 |               },
236 |               color: {
237 |                 $set: color,
238 |               },
239 |               backgroundColor: {
240 |                 $set: backgroundColor,
241 |               },
242 |             },
243 |           },
244 |         })
245 |       );
246 |     };
247 | 
248 |   return (
249 |     <div className={c('tag-color-input-wrapper')}>
250 |       <div className="setting-item-info">
251 |         <div className="setting-item-name">{t('Tag colors')}</div>
252 |         <div className="setting-item-description">
253 |           {t('Set colors for tags displayed in cards.')}
254 |         </div>
255 |       </div>
256 |       <div>
257 |         {keys.map((key, index) => (
258 |           <Item
259 |             key={key.id}
260 |             tagColorKey={key.data}
261 |             deleteKey={() => deleteKey(index)}
262 |             updateKey={updateTagColor(index)}
263 |             defaultColors={defaultColors}
264 |           />
265 |         ))}
266 |       </div>
267 |       <button
268 |         className={c('add-tag-color-button')}
269 |         onClick={() => {
270 |           newKey();
271 |         }}
272 |       >
273 |         {t('Add tag color')}
274 |       </button>
275 |     </div>
276 |   );
277 | }
278 | 
279 | export function renderTagSettings(
280 |   containerEl: HTMLElement,
281 |   keys: TagColorSetting[],
282 |   onChange: (key: TagColorSetting[]) => void
283 | ) {
284 |   render(
285 |     <TagSettings
286 |       dataKeys={keys}
287 |       onChange={onChange}
288 |       portalContainer={getParentBodyElement(containerEl)}
289 |     />,
290 |     containerEl
291 |   );
292 | }
293 | 
294 | export function cleanUpTagSettings(containerEl: HTMLElement) {
295 |   unmountComponentAtNode(containerEl);
296 | }
297 | 


--------------------------------------------------------------------------------
/src/settings/TagSortSettings.tsx:
--------------------------------------------------------------------------------
  1 | import classcat from 'classcat';
  2 | import update from 'immutability-helper';
  3 | import { JSX, createPortal, render, unmountComponentAtNode } from 'preact/compat';
  4 | import { Dispatch, StateUpdater, useContext, useEffect, useRef, useState } from 'preact/hooks';
  5 | 
  6 | import { Icon } from '../components/Icon/Icon';
  7 | import { c, generateInstanceId, noop, useIMEInputProps } from '../components/helpers';
  8 | import { DataTypes, TagSortSetting, TagSortSettingTemplate } from '../components/types';
  9 | import { DndContext } from '../dnd/components/DndContext';
 10 | import { DragOverlay } from '../dnd/components/DragOverlay';
 11 | import { Droppable } from '../dnd/components/Droppable';
 12 | import { DndScope } from '../dnd/components/Scope';
 13 | import { SortPlaceholder } from '../dnd/components/SortPlaceholder';
 14 | import { Sortable } from '../dnd/components/Sortable';
 15 | import { DndManagerContext } from '../dnd/components/context';
 16 | import { useDragHandle } from '../dnd/managers/DragManager';
 17 | import { Entity } from '../dnd/types';
 18 | import { getParentBodyElement, getParentWindow } from '../dnd/util/getWindow';
 19 | import { t } from '../lang/helpers';
 20 | 
 21 | interface ItemProps {
 22 |   tagIndex: number;
 23 |   isStatic?: boolean;
 24 |   tag: TagSortSetting;
 25 |   deleteTag: () => void;
 26 |   updateTag: (value: string) => void;
 27 | }
 28 | 
 29 | interface TagSortSettingsProps {
 30 |   tags: TagSortSetting[];
 31 |   scrollEl: HTMLElement;
 32 |   onChange(tags: TagSortSetting[]): void;
 33 |   portalContainer: HTMLElement;
 34 | }
 35 | 
 36 | interface UseKeyModifiersParams {
 37 |   onChange(tags: TagSortSetting[]): void;
 38 |   inputValue: string;
 39 |   tags: TagSortSetting[];
 40 |   setTags: Dispatch<StateUpdater<TagSortSetting[]>>;
 41 |   win: Window;
 42 | }
 43 | 
 44 | function Item({ isStatic, tagIndex, tag, deleteTag, updateTag }: ItemProps) {
 45 |   const elementRef = useRef<HTMLDivElement>(null);
 46 |   const measureRef = useRef<HTMLDivElement>(null);
 47 |   const dragHandleRef = useRef<HTMLDivElement>(null);
 48 | 
 49 |   const bindHandle = useDragHandle(measureRef, dragHandleRef);
 50 | 
 51 |   const body = (
 52 |     <div className={c('setting-controls-wrapper')}>
 53 |       <div className={c('setting-input-wrapper')}>
 54 |         <div>
 55 |           <input
 56 |             type="text"
 57 |             value={tag.data.tag}
 58 |             onChange={(e) => updateTag((e.target as HTMLInputElement).value)}
 59 |           />
 60 |         </div>
 61 |       </div>
 62 |     </div>
 63 |   );
 64 | 
 65 |   return (
 66 |     <div ref={measureRef} className={c('setting-item-wrapper')}>
 67 |       <div ref={elementRef} className={c('setting-item')}>
 68 |         {isStatic ? (
 69 |           body
 70 |         ) : (
 71 |           <Droppable
 72 |             elementRef={elementRef}
 73 |             measureRef={measureRef}
 74 |             id={tag.id}
 75 |             index={tagIndex}
 76 |             data={tag}
 77 |           >
 78 |             {body}
 79 |           </Droppable>
 80 |         )}
 81 |         <div className={c('setting-button-wrapper')}>
 82 |           <div className="clickable-icon" onClick={deleteTag} aria-label={t('Delete')}>
 83 |             <Icon name="lucide-trash-2" />
 84 |           </div>
 85 |           <div
 86 |             className="mobile-option-setting-drag-icon clickable-icon"
 87 |             aria-label={t('Drag to rearrange')}
 88 |             ref={bindHandle}
 89 |           >
 90 |             <Icon name="lucide-grip-horizontal" />
 91 |           </div>
 92 |         </div>
 93 |       </div>
 94 |     </div>
 95 |   );
 96 | }
 97 | 
 98 | function useKeyModifiers({ onChange, inputValue, tags, setTags }: UseKeyModifiersParams) {
 99 |   const updateKeys = (tags: TagSortSetting[]) => {
100 |     onChange(tags);
101 |     setTags(tags);
102 |   };
103 | 
104 |   return {
105 |     updateTag: (i: number) => (value: string) => {
106 |       updateKeys(
107 |         update(tags, {
108 |           [i]: {
109 |             data: {
110 |               tag: {
111 |                 $set: value,
112 |               },
113 |             },
114 |           },
115 |         })
116 |       );
117 |     },
118 | 
119 |     deleteTag: (i: number) => () => {
120 |       updateKeys(
121 |         update(tags, {
122 |           $splice: [[i, 1]],
123 |         })
124 |       );
125 |     },
126 | 
127 |     newTag: () => {
128 |       updateKeys(
129 |         update(tags, {
130 |           $push: [
131 |             {
132 |               ...TagSortSettingTemplate,
133 |               id: generateInstanceId(),
134 |               data: {
135 |                 tag: inputValue,
136 |               },
137 |             },
138 |           ],
139 |         })
140 |       );
141 |     },
142 | 
143 |     moveTag: (drag: Entity, drop: Entity) => {
144 |       const dragPath = drag.getPath();
145 |       const dropPath = drop.getPath();
146 | 
147 |       const dragIndex = dragPath[dragPath.length - 1];
148 |       const dropIndex = dropPath[dropPath.length - 1];
149 | 
150 |       if (dragIndex === dropIndex) {
151 |         return;
152 |       }
153 | 
154 |       const clone = tags.slice();
155 |       const [removed] = clone.splice(dragIndex, 1);
156 |       clone.splice(dropIndex, 0, removed);
157 | 
158 |       updateKeys(clone);
159 |     },
160 |   };
161 | }
162 | 
163 | const accepts = [DataTypes.TagSortSetting];
164 | 
165 | interface OverlayProps {
166 |   keys: TagSortSetting[];
167 |   portalContainer: HTMLElement;
168 | }
169 | 
170 | function Overlay({ keys, portalContainer }: OverlayProps) {
171 |   return createPortal(
172 |     <DragOverlay>
173 |       {(entity, styles) => {
174 |         const path = entity.getPath();
175 |         const index = path[0];
176 |         const item = keys[index];
177 | 
178 |         return (
179 |           <div
180 |             className={classcat([c('drag-container'), c('tag-sort-input-wrapper')])}
181 |             style={styles}
182 |           >
183 |             <Item tag={item} tagIndex={index} updateTag={noop} deleteTag={noop} isStatic={true} />
184 |           </div>
185 |         );
186 |       }}
187 |     </DragOverlay>,
188 |     portalContainer
189 |   );
190 | }
191 | 
192 | function RespondToScroll({ scrollEl }: { scrollEl: HTMLElement }): JSX.Element | null {
193 |   const dndManager = useContext(DndManagerContext);
194 | 
195 |   useEffect(() => {
196 |     let debounce = 0;
197 | 
198 |     const onScroll = () => {
199 |       scrollEl.win.clearTimeout(debounce);
200 |       debounce = scrollEl.win.setTimeout(() => {
201 |         dndManager?.hitboxEntities.forEach((entity) => {
202 |           entity.recalcInitial();
203 |         });
204 |       }, 100);
205 |     };
206 | 
207 |     scrollEl.addEventListener('scroll', onScroll, {
208 |       passive: true,
209 |       capture: false,
210 |     });
211 | 
212 |     return () => {
213 |       scrollEl.removeEventListener('scroll', onScroll);
214 |     };
215 |   }, [scrollEl, dndManager]);
216 | 
217 |   return null;
218 | }
219 | 
220 | function TagSettings(props: TagSortSettingsProps) {
221 |   const [tags, setTags] = useState(props.tags);
222 |   const [inputValue, setInputValue] = useState('');
223 |   const { getShouldIMEBlockAction, ...inputProps } = useIMEInputProps();
224 |   const win = getParentWindow(props.scrollEl);
225 | 
226 |   const { updateTag, deleteTag, newTag, moveTag } = useKeyModifiers({
227 |     onChange: props.onChange,
228 |     inputValue,
229 |     tags,
230 |     setTags,
231 |     win,
232 |   });
233 | 
234 |   return (
235 |     <div className={c('tag-sort-input-wrapper')}>
236 |       <div className="setting-item-info">
237 |         <div className="setting-item-name">{t('Tag sort order')}</div>
238 |         <div className="setting-item-description">
239 |           {t('Set an explicit sort order for the specified tags.')}
240 |         </div>
241 |       </div>
242 |       <div>
243 |         <DndContext win={win} onDrop={moveTag}>
244 |           <RespondToScroll scrollEl={props.scrollEl} />
245 |           <DndScope>
246 |             <Sortable axis="vertical">
247 |               {tags.map((k, i) => {
248 |                 return (
249 |                   <Item
250 |                     key={k.id}
251 |                     tag={k}
252 |                     tagIndex={i}
253 |                     updateTag={updateTag(i)}
254 |                     deleteTag={deleteTag(i)}
255 |                   />
256 |                 );
257 |               })}
258 |               <SortPlaceholder accepts={accepts} index={tags.length} />
259 |             </Sortable>
260 |           </DndScope>
261 |           <Overlay keys={tags} portalContainer={props.portalContainer} />
262 |         </DndContext>
263 |       </div>
264 |       <div className={c('setting-key-input-wrapper')}>
265 |         <input
266 |           placeholder="#tag"
267 |           type="text"
268 |           value={inputValue}
269 |           onChange={(e) => {
270 |             const val = (e.target as HTMLInputElement).value;
271 |             setInputValue(val[0] === '#' ? val : '#' + val);
272 |           }}
273 |           onKeyDown={(e) => {
274 |             if (getShouldIMEBlockAction()) return;
275 | 
276 |             if (e.key === 'Enter') {
277 |               newTag();
278 |               setInputValue('');
279 |               return;
280 |             }
281 | 
282 |             if (e.key === 'Escape') {
283 |               setInputValue('');
284 |               (e.target as HTMLInputElement).blur();
285 |             }
286 |           }}
287 |           {...inputProps}
288 |         />
289 |         <button
290 |           onClick={() => {
291 |             newTag();
292 |             setInputValue('');
293 |             return;
294 |           }}
295 |         >
296 |           {t('Add tag')}
297 |         </button>
298 |       </div>
299 |     </div>
300 |   );
301 | }
302 | 
303 | export function renderTagSortSettings(
304 |   containerEl: HTMLElement,
305 |   scrollEl: HTMLElement,
306 |   tags: TagSortSetting[],
307 |   onChange: (key: TagSortSetting[]) => void
308 | ) {
309 |   render(
310 |     <TagSettings
311 |       tags={tags}
312 |       scrollEl={scrollEl}
313 |       onChange={onChange}
314 |       portalContainer={getParentBodyElement(containerEl)}
315 |     />,
316 |     containerEl
317 |   );
318 | }
319 | 
320 | export function cleanUpTagSortSettings(containerEl: HTMLElement) {
321 |   unmountComponentAtNode(containerEl);
322 | }
323 | 


--------------------------------------------------------------------------------
/src/styles.less:
--------------------------------------------------------------------------------
   1 | @import 'choices.js/public/assets/styles/choices.css';
   2 | @import './components/Editor/flatpickr/flatpickr.min.css';
   3 | 
   4 | .workspace-leaf-content[data-type='kanban'] {
   5 |   .view-content {
   6 |     padding: 0;
   7 |   }
   8 | 
   9 |   > .view-header {
  10 |     display: flex !important;
  11 |   }
  12 | }
  13 | 
  14 | .kanban-plugin {
  15 |   --lane-width: 272px;
  16 | }
  17 | 
  18 | .kanban-plugin {
  19 |   contain: content;
  20 |   height: 100%;
  21 |   width: 100%;
  22 |   position: relative;
  23 |   display: flex;
  24 |   flex-direction: column;
  25 | }
  26 | 
  27 | .kanban-plugin,
  28 | .kanban-plugin__drag-container {
  29 |   a.tag {
  30 |     padding-inline: var(--tag-padding-x);
  31 |     padding-block: var(--tag-padding-y);
  32 |   }
  33 | }
  34 | 
  35 | .kanban-plugin__table-wrapper {
  36 |   height: 100%;
  37 |   width: 100%;
  38 |   overflow: auto;
  39 |   padding-block-end: 40px;
  40 | 
  41 |   table {
  42 |     width: fit-content;
  43 |     margin-block: 0;
  44 |     margin-inline: auto;
  45 |     box-shadow: 0 0 0 var(--table-border-width) var(--table-border-color);
  46 |   }
  47 | 
  48 |   tr {
  49 |     width: fit-content;
  50 |   }
  51 | 
  52 |   --table-column-first-border-width: 0;
  53 |   --table-column-last-border-width: 0;
  54 |   --table-row-last-border-width: 0;
  55 | 
  56 |   th,
  57 |   td {
  58 |     text-align: start;
  59 |     vertical-align: top;
  60 |     font-size: 0.875rem;
  61 |     padding: 0 !important;
  62 |     height: 1px;
  63 | 
  64 |     &.mod-has-icon .kanban-plugin__table-cell-wrapper {
  65 |       padding-inline-end: var(--size-2-2);
  66 |     }
  67 | 
  68 |     .kanban-plugin__table-cell-wrapper {
  69 |       height: 100%;
  70 |       padding-inline: var(--size-4-2);
  71 |       padding-block: var(--size-2-2);
  72 |     }
  73 | 
  74 |     .kanban-plugin__item-prefix-button-wrapper input[type='checkbox'] {
  75 |       margin-block: 2px;
  76 |     }
  77 | 
  78 |     &:has(.markdown-source-view) {
  79 |       --background-primary: var(--background-primary-alt);
  80 |       background: var(--background-primary);
  81 |       outline: 2px solid var(--background-modifier-border-focus);
  82 |     }
  83 |   }
  84 | 
  85 |   thead tr > th {
  86 |     height: 1px;
  87 |     background-color: var(--background-primary);
  88 |     position: sticky;
  89 |     top: 0;
  90 |     z-index: 1;
  91 |     overflow: visible;
  92 | 
  93 |     &:nth-child(2n + 2) {
  94 |       background-color: var(--background-primary);
  95 |     }
  96 | 
  97 |     .kanban-plugin__table-cell-wrapper {
  98 |       height: 100%;
  99 |       padding-block: var(--size-2-2);
 100 |       padding-inline: var(--size-4-2) var(--size-2-2);
 101 |       box-shadow: 0 0 0 var(--table-border-width) var(--table-border-color);
 102 |     }
 103 |   }
 104 | 
 105 |   .resizer {
 106 |     position: absolute;
 107 |     top: 0;
 108 |     height: 100%;
 109 |     width: 5px;
 110 |     background: var(--table-selection-border-color);
 111 |     cursor: col-resize;
 112 |     user-select: none;
 113 |     touch-action: none;
 114 |   }
 115 | 
 116 |   .resizer.ltr {
 117 |     right: 0;
 118 |   }
 119 | 
 120 |   .resizer.rtl {
 121 |     left: 0;
 122 |   }
 123 | 
 124 |   .resizer.isResizing {
 125 |     opacity: 1;
 126 |   }
 127 | 
 128 |   @media (hover: hover) {
 129 |     .resizer {
 130 |       opacity: 0;
 131 |     }
 132 | 
 133 |     .resizer:hover {
 134 |       opacity: 1;
 135 |     }
 136 |   }
 137 | 
 138 |   .kanban-plugin__item-tags:not(:empty) {
 139 |     margin-block-start: -5px;
 140 |   }
 141 | 
 142 |   .kanban-plugin__item-metadata-date-relative {
 143 |     display: block;
 144 |   }
 145 | 
 146 |   .kanban-plugin__item-input-wrapper,
 147 |   .cm-table-widget,
 148 |   .kanban-plugin__item-title,
 149 |   .kanban-plugin__item-title-wrapper,
 150 |   .kanban-plugin__item-content-wrapper {
 151 |     height: 100%;
 152 |   }
 153 | 
 154 |   .kanban-plugin__item-title-wrapper {
 155 |     padding: 0;
 156 |   }
 157 | }
 158 | 
 159 | .kanban-plugin {
 160 |   .markdown-source-view.mod-cm6 {
 161 |     display: block;
 162 |     font-size: 0.875rem;
 163 | 
 164 |     .cm-scroller {
 165 |       overflow: visible;
 166 |     }
 167 |   }
 168 | }
 169 | 
 170 | .kanban-plugin__table-header {
 171 |   display: flex;
 172 |   gap: var(--size-4-2);
 173 |   align-items: center;
 174 |   justify-content: space-between;
 175 | }
 176 | 
 177 | .kanban-plugin__table-header-sort {
 178 |   line-height: 1;
 179 |   color: var(--text-faint);
 180 |   padding: 2px;
 181 |   border-radius: 4px;
 182 | 
 183 |   > span {
 184 |     display: flex;
 185 |   }
 186 | 
 187 |   div:hover > & {
 188 |     background-color: var(--background-modifier-hover);
 189 |   }
 190 | }
 191 | 
 192 | .kanban-plugin__cell-flex-wrapper {
 193 |   display: flex;
 194 |   gap: 8px;
 195 |   align-items: flex-start;
 196 |   justify-content: space-between;
 197 | 
 198 |   .lucide-more-vertical {
 199 |     transform: none;
 200 |   }
 201 | }
 202 | 
 203 | .kanban-plugin__icon-wrapper {
 204 |   display: flex;
 205 |   line-height: 1;
 206 |   > .kanban-plugin__icon {
 207 |     display: flex;
 208 |   }
 209 | }
 210 | 
 211 | .kanban-plugin.something-is-dragging {
 212 |   cursor: grabbing;
 213 |   cursor: -webkit-grabbing;
 214 | 
 215 |   * {
 216 |     pointer-events: none;
 217 |   }
 218 | }
 219 | 
 220 | .kanban-plugin__item button,
 221 | .kanban-plugin__lane button,
 222 | .kanban-plugin button {
 223 |   line-height: 1;
 224 |   margin: 0;
 225 |   transition:
 226 |     100ms color,
 227 |     100ms background-color;
 228 | }
 229 | 
 230 | .kanban-plugin__search-wrapper {
 231 |   width: 100%;
 232 |   position: sticky;
 233 |   top: 0;
 234 |   left: 0;
 235 |   padding-block: 10px;
 236 |   padding-inline: 13px;
 237 |   display: flex;
 238 |   justify-content: flex-end;
 239 |   align-items: center;
 240 |   z-index: 2;
 241 |   background-color: var(--background-primary);
 242 | }
 243 | 
 244 | button.kanban-plugin__search-cancel-button {
 245 |   display: flex;
 246 |   line-height: 1;
 247 |   padding: 6px;
 248 |   border: 1px solid var(--background-modifier-border);
 249 |   background: var(--background-secondary-alt);
 250 |   color: var(--text-muted);
 251 |   margin-block: 0;
 252 |   margin-inline: 5px 0;
 253 |   font-size: 16px;
 254 | }
 255 | 
 256 | button.kanban-plugin__search-cancel-button .kanban-plugin__icon {
 257 |   display: flex;
 258 | }
 259 | 
 260 | .kanban-plugin__icon {
 261 |   display: inline-block;
 262 |   line-height: 1;
 263 |   --icon-size: 1em;
 264 | }
 265 | 
 266 | .kanban-plugin__board {
 267 |   display: flex;
 268 |   width: 100%;
 269 |   height: 100%;
 270 | 
 271 |   > div {
 272 |     display: flex;
 273 |     align-items: flex-start;
 274 |     justify-content: flex-start;
 275 |     padding: 1rem;
 276 |     width: fit-content;
 277 |     height: 100%;
 278 |   }
 279 | 
 280 |   &.kanban-plugin__vertical {
 281 |     > div {
 282 |       height: fit-content;
 283 |       width: 100%;
 284 |       flex-direction: column;
 285 |     }
 286 |   }
 287 | }
 288 | 
 289 | .is-mobile .view-content:not(.is-mobile-editing) .kanban-plugin__board > div {
 290 |   padding-bottom: calc(1rem + var(--mobile-navbar-height));
 291 | }
 292 | 
 293 | .kanban-plugin__board.is-adding-lane > div {
 294 |   padding-inline-end: calc(250px + 1rem);
 295 | }
 296 | 
 297 | .kanban-plugin__lane-wrapper {
 298 |   display: flex;
 299 |   flex-shrink: 0;
 300 |   margin-inline-end: 10px;
 301 |   max-height: 100%;
 302 |   width: var(--lane-width);
 303 | 
 304 |   .kanban-plugin__vertical & {
 305 |     margin-block-end: 10px;
 306 |     margin-inline-end: 0;
 307 |   }
 308 | }
 309 | 
 310 | .kanban-plugin__lane {
 311 |   width: 100%;
 312 |   display: flex;
 313 |   flex-direction: column;
 314 |   background-color: var(--background-secondary);
 315 |   border-radius: 6px;
 316 |   border: 1px solid var(--background-modifier-border);
 317 | 
 318 |   .is-dropping > & {
 319 |     background-color: hsla(var(--interactive-accent-hsl), 0.15);
 320 |     border-color: hsla(var(--interactive-accent-hsl), 1);
 321 |     outline: 1px solid hsla(var(--interactive-accent-hsl), 1);
 322 |   }
 323 | }
 324 | 
 325 | .kanban-plugin__placeholder.kanban-plugin__lane-placeholder {
 326 |   height: 100%;
 327 |   flex-grow: 1;
 328 |   margin-inline-end: 5px;
 329 | }
 330 | 
 331 | .kanban-plugin__lane.is-hidden {
 332 |   display: none;
 333 | }
 334 | 
 335 | .kanban-plugin__lane button {
 336 |   padding-block: 8px;
 337 |   padding-inline: 10px;
 338 | }
 339 | 
 340 | .kanban-plugin__lane-form-wrapper {
 341 |   position: absolute;
 342 |   top: 1rem;
 343 |   right: 1rem;
 344 |   width: 250px;
 345 |   background-color: var(--background-secondary);
 346 |   border-radius: 6px;
 347 |   border: 2px solid hsla(var(--interactive-accent-hsl), 0.7);
 348 |   z-index: var(--layer-popover);
 349 |   box-shadow:
 350 |     0px 0.5px 1px 0.5px rgba(0, 0, 0, 0.1),
 351 |     0px 2px 10px rgba(0, 0, 0, 0.1),
 352 |     0px 10px 20px rgba(0, 0, 0, 0.1);
 353 | }
 354 | 
 355 | .kanban-plugin__lane-input {
 356 |   --font-text-size: var(--font-ui-small);
 357 | 
 358 |   padding-block: var(--size-4-1);
 359 |   padding-inline: var(--size-4-2);
 360 |   background-color: var(--background-primary);
 361 |   border-radius: var(--radius-s);
 362 | }
 363 | 
 364 | .kanban-plugin__lane-input-wrapper {
 365 |   padding: 10px;
 366 | }
 367 | 
 368 | .kanban-plugin__item-input-actions,
 369 | .kanban-plugin__lane-input-actions {
 370 |   display: flex;
 371 |   align-items: flex-start;
 372 |   justify-content: flex-start;
 373 |   padding-block: 0 10px;
 374 |   padding-inline: 10px;
 375 |   button {
 376 |     display: block;
 377 |     margin-inline-end: 5px;
 378 |   }
 379 | }
 380 | 
 381 | button.kanban-plugin__item-action-add,
 382 | button.kanban-plugin__lane-action-add {
 383 |   background-color: var(--interactive-accent);
 384 |   color: var(--text-on-accent);
 385 |   &:hover {
 386 |     background-color: var(--interactive-accent-hover);
 387 |   }
 388 | }
 389 | 
 390 | .kanban-plugin__lane-header-wrapper {
 391 |   padding-block: 8px;
 392 |   padding-inline: 8px 12px;
 393 |   display: flex;
 394 |   align-items: center;
 395 |   gap: var(--size-4-1);
 396 |   flex-shrink: 0;
 397 |   flex-grow: 0;
 398 |   border-bottom: 1px solid var(--background-modifier-border);
 399 | 
 400 |   .collapse-horizontal &,
 401 |   .collapse-vertical & {
 402 |     border-bottom: none;
 403 |   }
 404 | }
 405 | 
 406 | .will-prepend .kanban-plugin__lane-header-wrapper {
 407 |   border-bottom: none;
 408 | }
 409 | 
 410 | .kanban-plugin__lane-wrapper.collapse-horizontal {
 411 |   width: auto;
 412 | 
 413 |   .kanban-plugin__lane-header-wrapper {
 414 |     writing-mode: vertical-lr;
 415 |   }
 416 | 
 417 |   .kanban-plugin__lane-header-wrapper {
 418 |     gap: var(--size-4-2);
 419 |   }
 420 | 
 421 |   .kanban-plugin__lane-title-count,
 422 |   .kanban-plugin__lane-title-text {
 423 |     transform: rotate(180deg);
 424 |   }
 425 | 
 426 |   .kanban-plugin__lane-settings-button-wrapper {
 427 |     display: none;
 428 |   }
 429 | }
 430 | 
 431 | .kanban-plugin__lane-wrapper.collapse-vertical {
 432 |   .kanban-plugin__lane-settings-button-wrapper {
 433 |     visibility: hidden;
 434 |   }
 435 | }
 436 | 
 437 | .kanban-plugin__lane-collapse {
 438 |   flex-grow: 0;
 439 |   color: var(--text-faint);
 440 | 
 441 |   > span {
 442 |     display: flex;
 443 |   }
 444 | 
 445 |   .collapse-vertical & {
 446 |     > span {
 447 |       transform: rotate(-90deg);
 448 |     }
 449 |   }
 450 | }
 451 | 
 452 | .kanban-plugin__lane-grip {
 453 |   cursor: grab;
 454 |   flex-grow: 0;
 455 |   color: var(--text-faint);
 456 |   &:active {
 457 |     cursor: grabbing;
 458 |   }
 459 | }
 460 | 
 461 | .kanban-plugin__lane-collapse svg {
 462 |   --icon-size: 1rem;
 463 | }
 464 | 
 465 | .kanban-plugin__lane-grip > svg {
 466 |   height: 1rem;
 467 |   display: block;
 468 | }
 469 | 
 470 | .kanban-plugin__lane-title {
 471 |   font-weight: 600;
 472 |   font-size: 0.875rem;
 473 |   flex-grow: 1;
 474 |   width: 100%;
 475 |   display: flex;
 476 |   flex-direction: column;
 477 | }
 478 | 
 479 | .kanban-plugin__lane-title-text {
 480 |   flex-grow: 1;
 481 | }
 482 | 
 483 | div.kanban-plugin__lane-title-count {
 484 |   border-radius: 3px;
 485 |   color: var(--text-muted);
 486 |   display: block;
 487 |   font-size: 13px;
 488 |   line-height: 1;
 489 |   padding: 4px;
 490 | }
 491 | 
 492 | div.kanban-plugin__lane-title-count.wip-exceeded {
 493 |   font-weight: bold;
 494 |   color: var(--text-normal);
 495 |   background-color: rgba(var(--background-modifier-error-rgb), 0.25);
 496 | }
 497 | 
 498 | .kanban-plugin__table-cell-wrapper .kanban-plugin__lane-menu,
 499 | .kanban-plugin__table-cell-wrapper .kanban-plugin__item-prefix-button,
 500 | .kanban-plugin__item .kanban-plugin__item-prefix-button,
 501 | .kanban-plugin__item .kanban-plugin__item-postfix-button,
 502 | .kanban-plugin__lane .kanban-plugin__lane-settings-button {
 503 |   --icon-stroke: 2.5px;
 504 |   font-size: 13px;
 505 |   line-height: 1;
 506 |   color: var(--text-muted);
 507 |   padding: 4px;
 508 |   display: flex;
 509 |   margin-inline-end: -4px;
 510 | 
 511 |   &.is-enabled {
 512 |     color: var(--text-accent);
 513 |   }
 514 | }
 515 | 
 516 | .kanban-plugin__table-cell-wrapper .kanban-plugin__lane-menu {
 517 |   color: var(--text-faint);
 518 |   margin-inline-start: 2px;
 519 |   margin-inline-end: 0px;
 520 | }
 521 | 
 522 | .kanban-plugin__table-cell-wrapper,
 523 | .kanban-plugin__item {
 524 |   .kanban-plugin__item-prefix-button {
 525 |     margin-inline-end: 4px;
 526 |     margin-inline-start: -4px;
 527 |   }
 528 | 
 529 |   button.kanban-plugin__item-prefix-button {
 530 |     margin-block: 4px;
 531 |     margin-inline: 0 7px;
 532 |     padding: 0;
 533 |   }
 534 | }
 535 | 
 536 | .kanban-plugin__lane-action-wrapper,
 537 | .kanban-plugin__item-edit-archive-button,
 538 | .kanban-plugin__item-settings-actions .kanban-plugin__icon,
 539 | .kanban-plugin__item-edit-archive-button > .kanban-plugin__icon,
 540 | .kanban-plugin__item-prefix-button > .kanban-plugin__icon,
 541 | .kanban-plugin__item-postfix-button > .kanban-plugin__icon,
 542 | .kanban-plugin__lane-settings-button > .kanban-plugin__icon {
 543 |   display: flex;
 544 | }
 545 | 
 546 | .kanban-plugin__lane-settings-button-wrapper {
 547 |   display: flex;
 548 |   gap: 4px;
 549 | }
 550 | 
 551 | button.kanban-plugin__lane-settings-button + button.kanban-plugin__lane-settings-button {
 552 |   margin-inline-start: 2px;
 553 | }
 554 | 
 555 | .kanban-plugin__lane-settings-button svg {
 556 |   width: 1em;
 557 |   height: 1em;
 558 | }
 559 | 
 560 | .kanban-plugin__lane-items-wrapper {
 561 |   margin: 4px;
 562 |   height: 100%;
 563 | }
 564 | 
 565 | .kanban-plugin__lane-items {
 566 |   padding: 4px;
 567 |   margin-block: 0;
 568 |   margin-inline: 4px;
 569 |   display: flex;
 570 |   flex-direction: column;
 571 |   > div {
 572 |     margin-block-start: 4px;
 573 |   }
 574 | }
 575 | 
 576 | .kanban-plugin__lane-items > .kanban-plugin__placeholder {
 577 |   flex-grow: 1;
 578 |   &:only-child {
 579 |     height: 2.55em;
 580 |     border: 3px dashed rgba(var(--text-muted-rgb), 0.1);
 581 |     margin-block-end: 4px;
 582 |     border-radius: 6px;
 583 |     transition: border 200ms ease;
 584 |   }
 585 | }
 586 | 
 587 | .is-sorting .kanban-plugin__lane-items > .kanban-plugin__placeholder:only-child {
 588 |   border-color: hsla(var(--interactive-accent-hsl), 0.6);
 589 | }
 590 | 
 591 | .kanban-plugin__item-button-wrapper {
 592 |   border-top: 1px solid var(--background-modifier-border);
 593 |   padding: 8px;
 594 |   flex-shrink: 0;
 595 |   flex-grow: 0;
 596 |   > button {
 597 |     text-align: left;
 598 |     width: 100%;
 599 |   }
 600 | }
 601 | 
 602 | .kanban-plugin__lane-header-wrapper + .kanban-plugin__item-button-wrapper {
 603 |   border-top: none;
 604 |   border-bottom: 1px solid var(--background-modifier-border);
 605 |   padding-block: 4px 8px;
 606 |   padding-inline: 8px;
 607 | }
 608 | 
 609 | .kanban-plugin__item-form {
 610 |   border-top: 1px solid var(--background-modifier-border);
 611 |   padding: 8px;
 612 |   .kanban-plugin__item-input-wrapper {
 613 |     padding-block: 6px;
 614 |     padding-inline: 8px;
 615 |     border: 1px solid var(--background-modifier-border);
 616 |     background-color: var(--background-primary);
 617 |     border-radius: var(--input-radius);
 618 |     min-height: var(--input-height);
 619 |   }
 620 | }
 621 | 
 622 | .kanban-plugin__lane-header-wrapper + .kanban-plugin__item-form {
 623 |   border-top: none;
 624 |   border-bottom: 1px solid var(--background-modifier-border);
 625 |   padding-block: 4px 8px;
 626 |   padding-inline: 8px;
 627 | }
 628 | 
 629 | .kanban-plugin__item-input-wrapper {
 630 |   --line-height-normal: var(--line-height-tight);
 631 | 
 632 |   display: flex;
 633 |   flex-direction: column;
 634 |   flex-grow: 1;
 635 | }
 636 | 
 637 | .kanban-plugin button.kanban-plugin__item-submit-button {
 638 |   flex-grow: 0;
 639 |   flex-shrink: 1;
 640 |   font-size: 14px;
 641 |   height: auto;
 642 |   line-height: 1;
 643 |   margin-block-start: 5px;
 644 |   width: auto;
 645 | 
 646 |   .is-mobile & {
 647 |     font-size: 12px;
 648 |   }
 649 | }
 650 | 
 651 | .is-mobile .kanban-plugin__lane-form-wrapper {
 652 |   --input-height: auto;
 653 | 
 654 |   button {
 655 |     padding-block: var(--size-4-2);
 656 |   }
 657 | 
 658 |   .markdown-source-view.mod-cm6 {
 659 |     font-size: var(--font-ui-medium);
 660 |   }
 661 | }
 662 | 
 663 | .is-mobile
 664 |   .kanban-plugin
 665 |   .kanban-plugin__lane-input-wrapper
 666 |   button.kanban-plugin__item-submit-button {
 667 |   display: none;
 668 | }
 669 | 
 670 | button.kanban-plugin__new-item-button {
 671 |   background-color: transparent;
 672 |   color: var(--text-muted);
 673 | }
 674 | 
 675 | .kanban-plugin__new-item-button:hover {
 676 |   color: var(--text-on-accent);
 677 |   background-color: var(--interactive-accent-hover);
 678 | }
 679 | 
 680 | .kanban-plugin__drag-container > .kanban-plugin__item-wrapper .kanban-plugin__item {
 681 |   border-color: var(--interactive-accent);
 682 |   box-shadow:
 683 |     var(--shadow-s),
 684 |     0 0 0 2px hsla(var(--interactive-accent-hsl), 0.7);
 685 | }
 686 | 
 687 | .kanban-plugin__item {
 688 |   font-size: 0.875rem;
 689 |   border: 1px solid var(--background-modifier-border);
 690 |   border-radius: var(--input-radius);
 691 |   overflow: hidden;
 692 |   transition: 300ms opacity cubic-bezier(0.25, 1, 0.5, 1);
 693 | 
 694 |   &:has(.markdown-source-view) {
 695 |     outline: 1px solid var(--background-modifier-border-focus);
 696 |     border-color: var(--background-modifier-border-focus);
 697 |   }
 698 | }
 699 | 
 700 | .kanban-plugin__item-content-wrapper {
 701 |   background: var(--background-primary);
 702 | }
 703 | 
 704 | .kanban-plugin__item-title-wrapper {
 705 |   background: var(--background-primary);
 706 |   display: flex;
 707 |   padding-block: 6px;
 708 |   padding-inline: 8px;
 709 |   // align-items: center;
 710 | 
 711 |   &:not(:only-child) {
 712 |     border-bottom: 1px solid var(--background-modifier-border);
 713 |   }
 714 | }
 715 | 
 716 | .kanban-plugin__item-title {
 717 |   width: 100%;
 718 |   line-height: var(--line-height-tight);
 719 |   margin-block-start: 1px;
 720 | }
 721 | 
 722 | .kanban-plugin__meta-value,
 723 | .kanban-plugin__markdown-preview-wrapper {
 724 |   white-space: pre-wrap;
 725 |   white-space: break-spaces;
 726 |   word-break: break-word;
 727 |   overflow-wrap: anywhere;
 728 | 
 729 |   .markdown-preview-view {
 730 |     --file-margins: 0;
 731 |   }
 732 | 
 733 |   --font-text-size: 0.875rem;
 734 |   --line-height-normal: var(--line-height-tight);
 735 |   --p-spacing: var(--size-4-2);
 736 |   --list-indent: 1.75em;
 737 | 
 738 |   &.inline {
 739 |     display: inline-block;
 740 |   }
 741 | 
 742 |   .kanban-plugin__markdown-preview-view {
 743 |     > *:first-child {
 744 |       margin-block-start: 0;
 745 |     }
 746 | 
 747 |     > *:last-child {
 748 |       margin-block-end: 0;
 749 |     }
 750 |   }
 751 | 
 752 |   .markdown-preview-view {
 753 |     width: unset;
 754 |     height: unset;
 755 |     position: unset;
 756 |     overflow-y: unset;
 757 |     overflow-wrap: unset;
 758 |     color: unset;
 759 |     user-select: unset;
 760 |     -webkit-user-select: unset;
 761 |     white-space: normal;
 762 | 
 763 |     // p,
 764 |     // ul,
 765 |     // ol,
 766 |     .markdown-embed,
 767 |     blockquote {
 768 |       padding-inline: var(--size-4-2) 0;
 769 |       padding-block: var(--size-4-1);
 770 |       margin-block-start: var(--p-spacing);
 771 |       margin-block-end: var(--p-spacing);
 772 |     }
 773 |   }
 774 | }
 775 | 
 776 | .kanban-plugin__meta-value {
 777 |   .kanban-plugin__markdown-preview-view {
 778 |     display: inline-flex;
 779 | 
 780 |     > div:first-child > *:first-child {
 781 |       margin-block-start: 0;
 782 |     }
 783 | 
 784 |     > div:last-child > *:last-child {
 785 |       margin-block-end: 0;
 786 |     }
 787 |   }
 788 | }
 789 | 
 790 | .kanban-plugin__embed-link-wrapper {
 791 |   padding: 2px;
 792 |   float: right;
 793 | }
 794 | 
 795 | .kanban-plugin__item-metadata-wrapper:not(:empty) {
 796 |   background-color: var(--background-primary-alt);
 797 |   padding-inline: 8px;
 798 |   padding-block: 6px;
 799 | }
 800 | 
 801 | .kanban-plugin__item-metadata:not(:empty) {
 802 |   padding-block-start: 5px;
 803 |   font-size: 12px;
 804 | 
 805 |   .markdown-preview-view {
 806 |     line-height: var(--line-height-tight);
 807 |     font-size: inherit;
 808 |   }
 809 | }
 810 | 
 811 | .kanban-plugin__item-metadata > span {
 812 |   display: block;
 813 | 
 814 |   &.kanban-plugin__item-metadata-date-wrapper {
 815 |     display: inline-block;
 816 |   }
 817 | }
 818 | 
 819 | .kanban-plugin__item-metadata .is-button {
 820 |   cursor: var(--cursor);
 821 |   &:hover {
 822 |     color: var(--text-normal);
 823 |   }
 824 | }
 825 | 
 826 | .kanban-plugin__item-metadata-date-relative::first-letter {
 827 |   text-transform: uppercase;
 828 | }
 829 | 
 830 | .kanban-plugin__item-metadata a {
 831 |   text-decoration: none;
 832 | }
 833 | 
 834 | .kanban-plugin__item-task-inline-metadata-item,
 835 | .kanban-plugin__item-task-metadata-item {
 836 |   display: inline-flex;
 837 |   margin-block: 3px 0;
 838 |   margin-inline: 0 6px;
 839 |   gap: 4px;
 840 | }
 841 | 
 842 | .kanban-plugin__item-task-inline-metadata-item {
 843 |   padding-inline: 2px;
 844 |   background-color: var(--background-secondary);
 845 |   border-radius: var(--radius-s);
 846 | }
 847 | 
 848 | .kanban-plugin__table-cell-wrapper .kanban-plugin__item-task-inline-metadata-item {
 849 |   background-color: unset;
 850 |   padding-inline: unset;
 851 |   border-radius: unset;
 852 | }
 853 | 
 854 | .kanban-plugin__item-tags:not(:empty) {
 855 |   padding-block-start: 2px;
 856 | }
 857 | 
 858 | .kanban-plugin__item-tag {
 859 |   display: inline-block;
 860 |   margin-inline-end: 4px;
 861 | }
 862 | 
 863 | .kanban-plugin__item-tags .kanban-plugin__item-tag {
 864 |   font-size: 12px;
 865 |   background-color: var(--tag-background, hsla(var(--interactive-accent-hsl), 0.1));
 866 |   color: var(--tag-color, var(--text-accent));
 867 |   margin-block: 3px 0;
 868 |   margin-inline: 0 3px;
 869 | }
 870 | 
 871 | .kanban-plugin__item-tag.is-search-match,
 872 | .kanban-plugin__item-tags .kanban-plugin__item-tag.is-search-match {
 873 |   background-color: var(--text-highlight-bg);
 874 |   color: var(--text-normal);
 875 | }
 876 | 
 877 | .kanban-plugin__meta-table {
 878 |   width: 100%;
 879 |   margin: 0;
 880 |   line-height: var(--line-height-tight);
 881 |   font-size: 0.75rem;
 882 | 
 883 |   .markdown-preview-view {
 884 |     font-size: 0.75rem;
 885 |   }
 886 | 
 887 |   .kanban-plugin__item-tags .kanban-plugin__item-tag {
 888 |     position: relative;
 889 |     inset-block-start: -2px;
 890 |     margin-block: 0 3px;
 891 |   }
 892 | 
 893 |   td {
 894 |     vertical-align: top;
 895 |     padding-block: 3px 0;
 896 |     padding-inline: 0;
 897 |     width: 10%;
 898 |   }
 899 | 
 900 |   td + td {
 901 |     width: 90%;
 902 |   }
 903 | 
 904 |   td:only-child {
 905 |     width: 100%;
 906 |   }
 907 | }
 908 | 
 909 | .kanban-plugin__meta-table td.kanban-plugin__meta-key {
 910 |   white-space: nowrap;
 911 |   padding-inline-end: 5px;
 912 |   color: var(--text-muted);
 913 | }
 914 | 
 915 | .kanban-plugin__meta-table td.kanban-plugin__meta-key.is-search-match > span {
 916 |   background-color: var(--text-highlight-bg);
 917 |   color: var(--text-normal);
 918 | }
 919 | 
 920 | .kanban-plugin__meta-value:not(.mod-array) {
 921 |   white-space: pre-wrap;
 922 |   display: flex;
 923 | }
 924 | 
 925 | .kanban-plugin__meta-value > .is-search-match,
 926 | .kanban-plugin__meta-value.is-search-match {
 927 |   background-color: var(--text-highlight-bg);
 928 |   color: var(--text-normal);
 929 | }
 930 | 
 931 | .kanban-plugin__item-prefix-button-wrapper,
 932 | .kanban-plugin__item-postfix-button-wrapper {
 933 |   display: flex;
 934 |   flex-grow: 0;
 935 |   flex-shrink: 0;
 936 |   align-self: start;
 937 | 
 938 |   > div {
 939 |     display: flex;
 940 |     flex-direction: column;
 941 |     gap: var(--size-4-1);
 942 |   }
 943 | }
 944 | 
 945 | .kanban-plugin__item-prefix-button-wrapper {
 946 |   flex-direction: column;
 947 | }
 948 | 
 949 | .kanban-plugin__item-prefix-button-wrapper .kanban-plugin__item-prefix-button {
 950 |   width: var(--checkbox-size);
 951 |   height: var(--checkbox-size);
 952 | }
 953 | 
 954 | .kanban-plugin__item-prefix-button-wrapper .kanban-plugin__item-prefix-button,
 955 | .kanban-plugin__item-prefix-button-wrapper input[type='checkbox'] {
 956 |   margin-block: 2px;
 957 |   margin-inline: 0px 7px;
 958 |   + button {
 959 |     margin-block-start: 10px;
 960 |   }
 961 | }
 962 | 
 963 | button.kanban-plugin__item-postfix-button {
 964 |   visibility: hidden;
 965 |   opacity: 0;
 966 |   transition: 100ms opacity;
 967 |   display: flex;
 968 |   align-self: flex-start;
 969 | }
 970 | 
 971 | button.kanban-plugin__item-postfix-button.is-enabled,
 972 | .kanban-plugin__item:hover button.kanban-plugin__item-postfix-button {
 973 |   visibility: visible;
 974 |   opacity: 1;
 975 | }
 976 | 
 977 | .kanban-plugin__item-settings-actions {
 978 |   padding: 5px;
 979 |   display: flex;
 980 | }
 981 | 
 982 | .kanban-plugin__item-settings-actions > button {
 983 |   line-height: 1;
 984 |   display: flex;
 985 |   align-items: center;
 986 |   justify-content: center;
 987 |   font-size: 0.75rem;
 988 |   width: 100%;
 989 | }
 990 | 
 991 | .kanban-plugin__lane-action-wrapper button > .kanban-plugin__icon,
 992 | .kanban-plugin__item-settings-actions button > .kanban-plugin__icon {
 993 |   margin-inline-end: 5px;
 994 | }
 995 | 
 996 | .kanban-plugin__item-settings-actions > button:first-child,
 997 | .kanban-plugin__lane-action-wrapper > button:first-child {
 998 |   margin-inline-end: 2.5px;
 999 | }
1000 | 
1001 | .kanban-plugin__item-settings-actions > button:last-child,
1002 | .kanban-plugin__lane-action-wrapper > button:last-child {
1003 |   margin-inline-start: 2.5px;
1004 | }
1005 | 
1006 | .kanban-plugin__archive-lane-button,
1007 | .kanban-plugin__item-button-archive {
1008 |   color: var(--text-muted);
1009 |   border: 1px solid var(--background-modifier-border);
1010 | }
1011 | 
1012 | .kanban-plugin__archive-lane-button:hover,
1013 | .kanban-plugin__item-button-archive:hover {
1014 |   color: var(--text-normal);
1015 | }
1016 | 
1017 | .kanban-plugin__item-button-delete {
1018 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 0.15);
1019 |   color: rgba(var(--background-modifier-error-rgb), 1);
1020 | }
1021 | 
1022 | .kanban-plugin__item-button-delete:hover {
1023 |   background-color: rgba(var(--background-modifier-error-rgb), 0.2);
1024 |   color: var(--text-error);
1025 | }
1026 | 
1027 | .theme-dark .kanban-plugin__item-button-delete {
1028 |   background-color: transparent;
1029 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 1);
1030 |   color: var(--text-error);
1031 | }
1032 | 
1033 | .theme-dark .kanban-plugin__item-button-delete:hover {
1034 |   background-color: rgba(var(--background-modifier-error-rgb), 1);
1035 |   color: var(--text-error);
1036 | }
1037 | 
1038 | .kanban-plugin__checkbox-wrapper {
1039 |   border-top: 1px solid var(--background-modifier-border);
1040 |   border-bottom: 1px solid var(--background-modifier-border);
1041 |   padding: 10px;
1042 |   margin-block-end: 10px;
1043 |   display: flex;
1044 |   align-items: center;
1045 | }
1046 | 
1047 | .kanban-plugin__checkbox-wrapper .checkbox-container {
1048 |   flex-shrink: 0;
1049 |   flex-grow: 0;
1050 |   margin-inline-start: 15px;
1051 | }
1052 | 
1053 | .kanban-plugin__checkbox-label {
1054 |   font-size: 0.8125rem;
1055 |   line-height: var(--line-height-tight);
1056 | }
1057 | 
1058 | .kanban-plugin__lane-setting-wrapper > div {
1059 |   border-top: none;
1060 |   border-bottom: none;
1061 |   padding-block: 10px;
1062 |   padding-inline: 15px;
1063 |   margin-block-end: 0;
1064 | }
1065 | 
1066 | .kanban-plugin__lane-setting-wrapper > div:last-child {
1067 |   border-bottom: 1px solid var(--background-modifier-border);
1068 |   margin-block-end: 10px;
1069 | }
1070 | 
1071 | .kanban-plugin__action-confirm-wrapper {
1072 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 0.2);
1073 |   background-color: rgba(var(--background-modifier-error-rgb), 0.1);
1074 |   border-radius: 4px;
1075 |   padding: 10px;
1076 |   margin-block: 5px;
1077 |   margin-inline: 10px;
1078 | }
1079 | 
1080 | .theme-dark .kanban-plugin__action-confirm-wrapper {
1081 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 1);
1082 | }
1083 | 
1084 | .kanban-plugin__delete-lane-button,
1085 | .kanban-plugin__archive-lane-button {
1086 |   display: flex;
1087 |   align-items: center;
1088 |   justify-content: center;
1089 |   font-size: 0.75rem;
1090 |   width: 50%;
1091 | }
1092 | 
1093 | .kanban-plugin__delete-lane-button {
1094 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 0.15);
1095 |   color: rgba(var(--background-modifier-error-rgb), 1);
1096 | }
1097 | 
1098 | .kanban-plugin__delete-lane-button:hover {
1099 |   background-color: rgba(var(--background-modifier-error-rgb), 0.2);
1100 |   color: var(--text-error);
1101 | }
1102 | 
1103 | .theme-dark .kanban-plugin__delete-lane-button {
1104 |   background-color: transparent;
1105 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 1);
1106 |   color: var(--text-error);
1107 | }
1108 | 
1109 | .theme-dark .kanban-plugin__delete-lane-button:hover {
1110 |   background-color: rgba(var(--background-modifier-error-rgb), 1);
1111 |   color: var(--text-error);
1112 | }
1113 | 
1114 | .kanban-plugin__action-confirm-text {
1115 |   font-size: 0.875rem;
1116 |   color: var(--text-error);
1117 |   margin-block-end: 10px;
1118 |   line-height: var(--line-height-tight);
1119 | }
1120 | 
1121 | button.kanban-plugin__confirm-action-button {
1122 |   border: 1px solid rgba(var(--background-modifier-error-rgb), 0.2);
1123 |   margin-inline-end: 5px;
1124 |   color: var(--text-error);
1125 | 
1126 |   &:hover {
1127 |     background-color: rgba(var(--background-modifier-error-rgb), 0.5);
1128 |   }
1129 | }
1130 | 
1131 | button.kanban-plugin__cancel-action-button {
1132 |   border: 1px solid var(--background-modifier-border);
1133 | }
1134 | 
1135 | .modal.kanban-plugin__board-settings-modal {
1136 |   width: var(--modal-width);
1137 |   height: var(--modal-height);
1138 |   max-height: var(--modal-max-height);
1139 |   max-width: var(--modal-max-width);
1140 |   padding: 0;
1141 |   display: flex;
1142 |   flex-direction: column;
1143 | }
1144 | 
1145 | .modal.kanban-plugin__board-settings-modal .modal-content {
1146 |   padding-block: 30px;
1147 |   padding-inline: 50px;
1148 |   height: 100%;
1149 |   overflow-y: auto;
1150 |   overflow-x: hidden;
1151 |   margin: 0;
1152 | }
1153 | 
1154 | .kanban-plugin__board-settings-modal .setting-item {
1155 |   flex-wrap: wrap;
1156 |   justify-content: space-between;
1157 | }
1158 | 
1159 | .kanban-plugin__board-settings-modal .setting-item-info {
1160 |   max-width: 400px;
1161 |   min-width: 300px;
1162 |   width: 50%;
1163 | }
1164 | 
1165 | .kanban-plugin__board-settings-modal .setting-item-control {
1166 |   min-width: 300px;
1167 |   flex-shrink: 0;
1168 | }
1169 | 
1170 | .kanban-plugin__board-settings-modal .choices {
1171 |   width: 100%;
1172 |   text-align: left;
1173 | }
1174 | 
1175 | .kanban-plugin__board-settings-modal .choices[data-type*='select-one'] .choices__inner {
1176 |   background-color: var(--background-primary);
1177 |   border-color: var(--background-modifier-border);
1178 |   padding: 0;
1179 |   min-height: 0;
1180 | }
1181 | 
1182 | .kanban-plugin__board-settings-modal .choices[data-type*='select-one'] .choices__input {
1183 |   background-color: var(--background-primary);
1184 |   border-bottom-color: var(--background-modifier-border);
1185 |   font-size: 14px;
1186 | }
1187 | 
1188 | .kanban-plugin__board-settings-modal .choices__input {
1189 |   border-radius: 0;
1190 |   border-top: none;
1191 |   border-left: none;
1192 |   border-right: none;
1193 | }
1194 | 
1195 | .kanban-plugin__board-settings-modal .choices__list[role='listbox'] {
1196 |   overflow-x: hidden;
1197 | }
1198 | 
1199 | .kanban-plugin__board-settings-modal .choices__list--single {
1200 |   padding-block: 4px;
1201 |   padding-inline: 6px 20px;
1202 | }
1203 | 
1204 | .kanban-plugin__board-settings-modal .is-open .choices__list--dropdown,
1205 | .kanban-plugin__board-settings-modal .choices__list--dropdown {
1206 |   background-color: var(--background-primary);
1207 |   border-color: var(--background-modifier-border);
1208 |   word-break: normal;
1209 |   max-height: 200px;
1210 |   display: flex;
1211 |   flex-direction: column;
1212 | }
1213 | 
1214 | .kanban-plugin__board-settings-modal .choices__list--dropdown .choices__item--selectable:after {
1215 |   display: none;
1216 | }
1217 | 
1218 | .kanban-plugin__board-settings-modal .choices__list--dropdown .choices__item--selectable {
1219 |   padding-block: 4px;
1220 |   padding-inline: 6px;
1221 | }
1222 | 
1223 | .kanban-plugin__board-settings-modal .choices__list--dropdown .choices__item.is-highlighted {
1224 |   background-color: var(--background-primary-alt);
1225 | }
1226 | 
1227 | .kanban-plugin__board-settings-modal .choices__placeholder {
1228 |   opacity: 1;
1229 |   color: var(--text-muted);
1230 | }
1231 | 
1232 | .kanban-plugin__board-settings-modal .error {
1233 |   border-color: var(--background-modifier-error-hover) !important;
1234 | }
1235 | 
1236 | .kanban-plugin__date-picker {
1237 |   position: absolute;
1238 |   z-index: var(--layer-popover);
1239 | 
1240 |   --cell-size: 2.4em;
1241 | }
1242 | 
1243 | .kanban-plugin__date-picker .flatpickr-input {
1244 |   width: 0;
1245 |   height: 0;
1246 |   opacity: 0;
1247 |   border: none;
1248 |   padding: 0;
1249 |   display: block;
1250 |   margin-block-end: -1px;
1251 | }
1252 | 
1253 | .kanban-plugin__date-picker .flatpickr-current-month {
1254 |   color: var(--text-normal);
1255 |   font-weight: 600;
1256 |   font-size: inherit;
1257 |   width: 100%;
1258 |   position: static;
1259 |   height: auto;
1260 |   display: flex;
1261 |   align-items: center;
1262 |   justify-content: center;
1263 |   padding: 0;
1264 | }
1265 | 
1266 | .kanban-plugin__date-picker .flatpickr-current-month .numInputWrapper span.arrowUp:after {
1267 |   border-bottom-color: var(--text-normal);
1268 | }
1269 | 
1270 | .kanban-plugin__date-picker .flatpickr-current-month .numInputWrapper span.arrowDown:after {
1271 |   border-top-color: var(--text-normal);
1272 | }
1273 | 
1274 | .flatpickr-months .flatpickr-prev-month svg path,
1275 | .flatpickr-months .flatpickr-next-month svg path {
1276 |   fill: currentColor;
1277 | }
1278 | 
1279 | .kanban-plugin__date-picker .flatpickr-calendar {
1280 |   border-radius: var(--radius-m);
1281 |   font-size: 13px;
1282 |   overflow: hidden;
1283 |   background-color: var(--background-primary);
1284 |   width: calc(var(--cell-size) * 7 + 8px);
1285 |   box-shadow:
1286 |     0 0 0 1px var(--background-modifier-border),
1287 |     0px 15px 25px rgba(0, 0, 0, 0.2);
1288 | 
1289 |   &.inline {
1290 |     top: 0;
1291 |   }
1292 | }
1293 | 
1294 | .kanban-plugin__date-picker .flatpickr-months {
1295 |   font-size: 13px;
1296 |   padding-block: 2px 4px;
1297 |   padding-inline: 2px;
1298 |   align-items: center;
1299 | }
1300 | 
1301 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-current-month input.cur-year,
1302 | .kanban-plugin__date-picker .flatpickr-months select {
1303 |   border-radius: 4px;
1304 |   padding: 4px;
1305 | }
1306 | 
1307 | .kanban-plugin__date-picker .flatpickr-months .numInputWrapper {
1308 |   border-radius: 4px;
1309 | }
1310 | 
1311 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-month {
1312 |   width: 100%;
1313 |   height: auto;
1314 | }
1315 | 
1316 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-prev-month,
1317 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-next-month {
1318 |   color: var(--text-normal);
1319 |   fill: currentColor;
1320 |   border-radius: 4px;
1321 |   display: flex;
1322 |   align-items: center;
1323 |   justify-content: center;
1324 |   line-height: 1;
1325 |   height: auto;
1326 |   padding: 5px;
1327 |   position: static;
1328 |   flex-shrink: 0;
1329 | }
1330 | 
1331 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-prev-month:hover,
1332 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-next-month:hover {
1333 |   background-color: var(--background-primary-alt);
1334 |   color: var(--text-normal);
1335 | }
1336 | 
1337 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-prev-month:hover svg,
1338 | .kanban-plugin__date-picker .flatpickr-months .flatpickr-next-month:hover svg {
1339 |   fill: currentColor;
1340 | }
1341 | 
1342 | .kanban-plugin__date-picker .flatpickr-current-month .flatpickr-monthDropdown-months {
1343 |   box-shadow: none;
1344 |   color: var(--text-normal);
1345 |   font-weight: inherit;
1346 |   margin-inline-end: 5px;
1347 | }
1348 | 
1349 | .kanban-plugin__date-picker .flatpickr-current-month input.cur-year {
1350 |   color: var(--text-normal);
1351 |   font-weight: inherit;
1352 | }
1353 | 
1354 | .kanban-plugin__date-picker .flatpickr-weekdays {
1355 |   height: auto;
1356 |   padding-block: 8px 12px;
1357 |   padding-inline: 0;
1358 | }
1359 | 
1360 | .kanban-plugin__date-picker span.flatpickr-weekday {
1361 |   font-weight: 400;
1362 |   color: var(--text-muted);
1363 | }
1364 | 
1365 | .kanban-plugin__date-picker .flatpickr-innerContainer {
1366 |   padding: 4px;
1367 | }
1368 | 
1369 | .kanban-plugin__date-picker .flatpickr-day {
1370 |   color: var(--text-normal);
1371 |   display: inline-flex;
1372 |   align-items: center;
1373 |   justify-content: center;
1374 |   width: var(--cell-size);
1375 |   height: var(--cell-size);
1376 |   line-height: 1;
1377 |   border-radius: 6px;
1378 | }
1379 | 
1380 | .kanban-plugin__date-picker .flatpickr-day.today {
1381 |   border-color: var(--interactive-accent);
1382 | }
1383 | 
1384 | .kanban-plugin__date-picker .flatpickr-day.today:hover {
1385 |   color: var(--text-normal);
1386 |   border-color: var(--interactive-accent);
1387 |   background-color: var(--background-primary-alt);
1388 | }
1389 | 
1390 | .kanban-plugin__date-picker .flatpickr-day.selected {
1391 |   border-color: var(--interactive-accent);
1392 |   background-color: var(--interactive-accent);
1393 |   color: var(--text-on-accent);
1394 | }
1395 | 
1396 | .kanban-plugin__date-picker .flatpickr-day.selected:hover {
1397 |   border-color: var(--interactive-accent);
1398 |   background-color: var(--interactive-accent);
1399 | }
1400 | 
1401 | .kanban-plugin__date-picker .flatpickr-days {
1402 |   width: calc(var(--cell-size) * 7);
1403 | }
1404 | 
1405 | .kanban-plugin__date-picker .dayContainer {
1406 |   width: calc(var(--cell-size) * 7);
1407 |   min-width: calc(var(--cell-size) * 7);
1408 |   max-width: calc(var(--cell-size) * 7);
1409 | }
1410 | 
1411 | .kanban-plugin__date-picker .flatpickr-day.inRange,
1412 | .kanban-plugin__date-picker .flatpickr-day.prevMonthDay.inRange,
1413 | .kanban-plugin__date-picker .flatpickr-day.nextMonthDay.inRange,
1414 | .kanban-plugin__date-picker .flatpickr-day.today.inRange,
1415 | .kanban-plugin__date-picker .flatpickr-day.prevMonthDay.today.inRange,
1416 | .kanban-plugin__date-picker .flatpickr-day.nextMonthDay.today.inRange,
1417 | .kanban-plugin__date-picker .flatpickr-day:hover,
1418 | .kanban-plugin__date-picker .flatpickr-day.prevMonthDay:hover,
1419 | .kanban-plugin__date-picker .flatpickr-day.nextMonthDay:hover,
1420 | .kanban-plugin__date-picker .flatpickr-day:focus,
1421 | .kanban-plugin__date-picker .flatpickr-day.prevMonthDay:focus,
1422 | .kanban-plugin__date-picker .flatpickr-day.nextMonthDay:focus {
1423 |   background-color: var(--background-primary-alt);
1424 |   border-color: var(--background-primary-alt);
1425 | }
1426 | 
1427 | .kanban-plugin__date-picker .flatpickr-day.flatpickr-disabled,
1428 | .kanban-plugin__date-picker .flatpickr-day.flatpickr-disabled:hover,
1429 | .kanban-plugin__date-picker .flatpickr-day.prevMonthDay,
1430 | .kanban-plugin__date-picker .flatpickr-day.nextMonthDay,
1431 | .kanban-plugin__date-picker .flatpickr-day.notAllowed,
1432 | .kanban-plugin__date-picker .flatpickr-day.notAllowed.prevMonthDay,
1433 | .kanban-plugin__date-picker .flatpickr-day.notAllowed.nextMonthDay {
1434 |   color: var(--text-faint);
1435 | }
1436 | 
1437 | .kanban-plugin__time-picker {
1438 |   position: absolute;
1439 |   max-height: 250px;
1440 |   overflow: auto;
1441 |   border-radius: 4px;
1442 |   border: 1px solid var(--background-modifier-border);
1443 |   box-shadow: 0 2px 8px var(--background-modifier-box-shadow);
1444 |   background: var(--background-primary);
1445 |   color: var(--text-normal);
1446 |   font-size: 14px;
1447 |   z-index: var(--layer-menu);
1448 | }
1449 | 
1450 | .kanban-plugin__time-picker-item {
1451 |   display: flex;
1452 |   align-items: center;
1453 |   color: var(--text-muted);
1454 |   cursor: var(--cursor);
1455 |   line-height: 1;
1456 |   padding-block: 6px;
1457 |   padding-inline: 8px;
1458 | }
1459 | 
1460 | .kanban-plugin__time-picker-check {
1461 |   visibility: hidden;
1462 |   display: inline-flex;
1463 |   margin-inline-end: 5px;
1464 | }
1465 | 
1466 | .kanban-plugin__time-picker-item.is-hour {
1467 |   color: var(--text-normal);
1468 |   font-weight: 600;
1469 | }
1470 | 
1471 | .kanban-plugin__time-picker-item.is-selected .kanban-plugin__time-picker-check {
1472 |   visibility: visible;
1473 | }
1474 | 
1475 | .kanban-plugin__time-picker-item:hover,
1476 | .kanban-plugin__time-picker-item.is-selected {
1477 |   background: var(--background-secondary);
1478 | }
1479 | 
1480 | .kanban-plugin mark {
1481 |   background-color: var(--text-highlight-bg);
1482 | }
1483 | 
1484 | .kanban-plugin__draggable-setting-container {
1485 |   border-top: 0;
1486 |   padding: 0;
1487 |   flex-direction: column;
1488 |   > div {
1489 |     width: 100%;
1490 |     margin-inline-end: 0 !important;
1491 |   }
1492 | }
1493 | 
1494 | .kanban-plugin__setting-item-wrapper {
1495 |   border-top: 1px solid var(--background-modifier-border);
1496 | }
1497 | 
1498 | .kanban-plugin__draggable-setting-container > .kanban-plugin__placeholder {
1499 |   border-top: 1px solid var(--background-modifier-border);
1500 | }
1501 | 
1502 | .kanban-plugin__setting-item {
1503 |   background-color: var(--background-secondary);
1504 |   width: 100%;
1505 |   font-size: 16px;
1506 |   display: flex;
1507 |   align-items: flex-start;
1508 |   padding: 12px;
1509 |   color: var(--text-muted);
1510 | }
1511 | 
1512 | .kanban-plugin__drag-container .kanban-plugin__setting-item {
1513 |   border: 1px solid hsla(var(--interactive-accent-hsl), 0.8);
1514 |   box-shadow:
1515 |     0px 15px 25px rgba(0, 0, 0, 0.2),
1516 |     0 0 0 2px hsla(var(--interactive-accent-hsl), 0.8);
1517 | }
1518 | 
1519 | .kanban-plugin__setting-controls-wrapper {
1520 |   flex-grow: 1;
1521 |   flex-shrink: 1;
1522 | }
1523 | 
1524 | .kanban-plugin__setting-input-wrapper {
1525 |   display: flex;
1526 |   flex-wrap: wrap;
1527 |   margin-block-end: 1rem;
1528 | 
1529 |   > div {
1530 |     margin-inline-end: 10px;
1531 |   }
1532 | }
1533 | 
1534 | .kanban-plugin__setting-toggle-wrapper {
1535 |   > div {
1536 |     display: flex;
1537 |     align-items: center;
1538 |     line-height: 1;
1539 |     margin-block-end: 10px;
1540 |   }
1541 |   .checkbox-container {
1542 |     margin-inline-end: 10px;
1543 |   }
1544 | }
1545 | 
1546 | .kanban-plugin__setting-button-wrapper {
1547 |   display: flex;
1548 |   justify-content: flex-end;
1549 |   flex-grow: 1;
1550 |   flex-shrink: 0;
1551 |   max-width: 25px;
1552 |   > div {
1553 |     margin-inline-start: 12px;
1554 |   }
1555 | }
1556 | 
1557 | .kanban-plugin__setting-key-input-wrapper {
1558 |   margin-block: 1rem;
1559 |   margin-inline: 0;
1560 |   > input {
1561 |     margin-inline-end: 10px;
1562 |   }
1563 | }
1564 | 
1565 | .kanban-plugin__date-color-input-wrapper,
1566 | .kanban-plugin__tag-sort-input-wrapper,
1567 | .kanban-plugin__tag-color-input-wrapper {
1568 |   display: flex;
1569 |   flex-direction: column;
1570 |   flex-grow: 1;
1571 |   gap: 1rem;
1572 | }
1573 | 
1574 | .kanban-plugin__tag-sort-input-wrapper {
1575 |   .kanban-plugin__setting-key-input-wrapper {
1576 |     margin-block-start: 0;
1577 |   }
1578 |   .kanban-plugin__setting-input-wrapper {
1579 |     margin: 0;
1580 |   }
1581 | }
1582 | 
1583 | .kanban-plugin__add-tag-color-button {
1584 |   align-self: baseline;
1585 |   margin: 0;
1586 | }
1587 | 
1588 | .kanban-plugin__date-color-wrapper,
1589 | .kanban-plugin__tag-color-input .kanban-plugin__item-tags {
1590 |   background-color: var(--background-primary);
1591 |   padding: 10px;
1592 |   margin: 0;
1593 |   border-radius: 4px;
1594 | }
1595 | 
1596 | .kanban-plugin__tag-color-input .kanban-plugin__item-tag {
1597 |   margin-block-start: 0;
1598 |   font-size: 13px;
1599 |   font-weight: 500;
1600 |   line-height: 1.5;
1601 | }
1602 | 
1603 | .kanban-plugin__date-color-input-wrapper input[type='number'] {
1604 |   width: 75px;
1605 |   padding-block: 0.6em;
1606 |   padding-inline: 0.8em;
1607 |   height: auto;
1608 |   border-radius: 0.5em;
1609 | }
1610 | 
1611 | .kanban-plugin__date-color-input-wrapper .kanban-plugin__setting-item-label {
1612 |   margin-block-end: 0;
1613 | }
1614 | 
1615 | .kanban-plugin__date-color-config {
1616 |   padding-block: 0 10px;
1617 |   padding-inline: 0;
1618 |   display: flex;
1619 |   flex-wrap: wrap;
1620 |   gap: 5px;
1621 |   align-items: center;
1622 | }
1623 | 
1624 | .kanban-plugin__date-color-wrapper {
1625 |   display: inline-block;
1626 |   margin-block-start: 10px;
1627 | }
1628 | 
1629 | .kanban-plugin__date-color-wrapper .kanban-plugin__item-metadata {
1630 |   padding: 0;
1631 | }
1632 | 
1633 | .kanban-plugin__metadata-setting-desc {
1634 |   font-size: 14px;
1635 | }
1636 | 
1637 | .kanban-plugin__setting-button-spacer {
1638 |   visibility: hidden;
1639 | }
1640 | 
1641 | .kanban-plugin__setting-item-label {
1642 |   font-size: 12px;
1643 |   font-weight: bold;
1644 |   margin-block-end: 5px;
1645 | }
1646 | 
1647 | .kanban-plugin__setting-toggle-wrapper .kanban-plugin__setting-item-label {
1648 |   margin-block-end: 0;
1649 | }
1650 | 
1651 | .kanban-plugin__hitbox {
1652 |   border: 2px dashed tomato;
1653 | }
1654 | 
1655 | .kanban-plugin__placeholder {
1656 |   flex-grow: 0;
1657 |   flex-shrink: 0;
1658 |   width: 0;
1659 |   height: 0;
1660 |   pointer-events: none;
1661 | }
1662 | 
1663 | .kanban-plugin__placeholder[data-axis='horizontal'] {
1664 |   height: 100%;
1665 | }
1666 | 
1667 | .kanban-plugin__placeholder[data-axis='vertical'] {
1668 |   width: 100%;
1669 | }
1670 | 
1671 | body:not(.native-scrollbars) .kanban-plugin__scroll-container::-webkit-scrollbar {
1672 |   background-color: transparent;
1673 |   width: 16px;
1674 |   height: 16px;
1675 | }
1676 | 
1677 | body:not(.native-scrollbars) .kanban-plugin__scroll-container::-webkit-scrollbar-thumb {
1678 |   border: 4px solid transparent;
1679 |   background-clip: content-box;
1680 | }
1681 | 
1682 | .kanban-plugin__scroll-container {
1683 |   will-change: transform;
1684 | }
1685 | 
1686 | .kanban-plugin__scroll-container.kanban-plugin__horizontal {
1687 |   overflow-y: hidden;
1688 |   overflow-x: auto;
1689 | }
1690 | 
1691 | .kanban-plugin__scroll-container.kanban-plugin__vertical {
1692 |   overflow-y: auto;
1693 |   overflow-x: hidden;
1694 | }
1695 | 
1696 | .kanban-plugin__drag-container {
1697 |   contain: layout size;
1698 |   z-index: 10000;
1699 |   pointer-events: none;
1700 |   position: fixed;
1701 |   top: 0;
1702 |   left: 0;
1703 | }
1704 | 
1705 | .kanban-plugin__loading {
1706 |   width: 100%;
1707 |   height: 100%;
1708 |   display: flex;
1709 |   justify-content: center;
1710 |   align-items: center;
1711 | }
1712 | 
1713 | .sk-pulse {
1714 |   width: 60px;
1715 |   height: 60px;
1716 |   background-color: var(--text-faint);
1717 |   border-radius: 100%;
1718 |   animation: sk-pulse 1.2s infinite cubic-bezier(0.455, 0.03, 0.515, 0.955);
1719 | }
1720 | 
1721 | @keyframes sk-pulse {
1722 |   0% {
1723 |     transform: scale(0);
1724 |   }
1725 |   100% {
1726 |     transform: scale(1);
1727 |     opacity: 0;
1728 |   }
1729 | }
1730 | 
1731 | .kanban-plugin__color-picker-wrapper {
1732 |   position: relative;
1733 | }
1734 | 
1735 | .kanban-plugin__color-picker {
1736 |   position: absolute;
1737 |   top: -5px;
1738 |   left: 0;
1739 |   transform: translate(0, -100%);
1740 | }
1741 | 
1742 | .kanban-plugin__date,
1743 | .cm-kanban-time-wrapper,
1744 | .cm-kanban-date-wrapper {
1745 |   display: inline-block;
1746 |   color: var(--date-color);
1747 |   border-radius: var(--radius-s);
1748 |   background-color: var(--date-background-color, rgba(var(--mono-rgb-100), 0.05));
1749 | 
1750 |   &:hover {
1751 |     background-color: var(--date-background-color, rgba(var(--mono-rgb-100), 0.1));
1752 |   }
1753 | 
1754 |   &.kanban-plugin__preview-date-link {
1755 |     --link-decoration: none;
1756 |     --link-unresolved-decoration-style: unset;
1757 |   }
1758 | 
1759 |   > span,
1760 |   > a {
1761 |     padding-inline: var(--size-2-1);
1762 |   }
1763 | }
1764 | 
1765 | .completion .kanban-plugin__date.has-background {
1766 |   color: inherit;
1767 |   background-color: transparent;
1768 |   &:hover {
1769 |     background-color: transparent;
1770 |   }
1771 | }
1772 | 
1773 | .is-date .kanban-plugin__date:not(.has-background) {
1774 |   background-color: transparent;
1775 |   &:hover {
1776 |     background-color: transparent;
1777 |   }
1778 | }
1779 | 
1780 | .kanban-plugin__meta-value {
1781 |   .kanban-plugin__date:hover {
1782 |     background-color: var(--date-background-color, rgba(var(--mono-rgb-100), 0.05));
1783 |   }
1784 | }
1785 | 


--------------------------------------------------------------------------------
/src/types.d.ts:
--------------------------------------------------------------------------------
  1 | type HTMLAttributes<T extends EventTarget> = import('preact/compat').HTMLAttributes<T> &
  2 |   AriaAttributes;
  3 | 
  4 | declare const Fragment: import('preact').FunctionComponent<Record<string, never>>;
  5 | 
  6 | declare function h(
  7 |   type: string,
  8 |   props:
  9 |     | (import('preact/src/jsx').JSXInternal.HTMLAttributes &
 10 |         import('preact/src/jsx').JSXInternal.SVGAttributes &
 11 |         Record<string, any>)
 12 |     | null,
 13 |   ...children: import('preact').ComponentChildren[]
 14 | ): import('preact').VNode<any>;
 15 | declare function h<P>(
 16 |   type: import('preact').ComponentType<P>,
 17 |   props: (import('preact').Attributes & P) | null,
 18 |   ...children: import('preact').ComponentChildren[]
 19 | ): import('preact').VNode<any>;
 20 | 
 21 | type Booleanish = boolean | 'true' | 'false';
 22 | 
 23 | interface AriaAttributes {
 24 |   /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
 25 |   'aria-activedescendant'?: string | undefined;
 26 |   /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
 27 |   'aria-atomic'?: Booleanish | undefined;
 28 |   /**
 29 |    * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
 30 |    * presented if they are made.
 31 |    */
 32 |   'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both' | undefined;
 33 |   /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
 34 |   'aria-busy'?: Booleanish | undefined;
 35 |   /**
 36 |    * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
 37 |    * @see aria-pressed @see aria-selected.
 38 |    */
 39 |   'aria-checked'?: boolean | 'false' | 'mixed' | 'true' | undefined;
 40 |   /**
 41 |    * Defines the total number of columns in a table, grid, or treegrid.
 42 |    * @see aria-colindex.
 43 |    */
 44 |   'aria-colcount'?: number | undefined;
 45 |   /**
 46 |    * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
 47 |    * @see aria-colcount @see aria-colspan.
 48 |    */
 49 |   'aria-colindex'?: number | undefined;
 50 |   /**
 51 |    * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
 52 |    * @see aria-colindex @see aria-rowspan.
 53 |    */
 54 |   'aria-colspan'?: number | undefined;
 55 |   /**
 56 |    * Identifies the element (or elements) whose contents or presence are controlled by the current element.
 57 |    * @see aria-owns.
 58 |    */
 59 |   'aria-controls'?: string | undefined;
 60 |   /** Indicates the element that represents the current item within a container or set of related elements. */
 61 |   'aria-current'?:
 62 |     | boolean
 63 |     | 'false'
 64 |     | 'true'
 65 |     | 'page'
 66 |     | 'step'
 67 |     | 'location'
 68 |     | 'date'
 69 |     | 'time'
 70 |     | undefined;
 71 |   /**
 72 |    * Identifies the element (or elements) that describes the object.
 73 |    * @see aria-labelledby
 74 |    */
 75 |   'aria-describedby'?: string | undefined;
 76 |   /**
 77 |    * Identifies the element that provides a detailed, extended description for the object.
 78 |    * @see aria-describedby.
 79 |    */
 80 |   'aria-details'?: string | undefined;
 81 |   /**
 82 |    * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
 83 |    * @see aria-hidden @see aria-readonly.
 84 |    */
 85 |   'aria-disabled'?: Booleanish | undefined;
 86 |   /**
 87 |    * Indicates what functions can be performed when a dragged object is released on the drop target.
 88 |    * @deprecated in ARIA 1.1
 89 |    */
 90 |   'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup' | undefined;
 91 |   /**
 92 |    * Identifies the element that provides an error message for the object.
 93 |    * @see aria-invalid @see aria-describedby.
 94 |    */
 95 |   'aria-errormessage'?: string | undefined;
 96 |   /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
 97 |   'aria-expanded'?: Booleanish | undefined;
 98 |   /**
 99 |    * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
100 |    * allows assistive technology to override the general default of reading in document source order.
101 |    */
102 |   'aria-flowto'?: string | undefined;
103 |   /**
104 |    * Indicates an element's "grabbed" state in a drag-and-drop operation.
105 |    * @deprecated in ARIA 1.1
106 |    */
107 |   'aria-grabbed'?: Booleanish | undefined;
108 |   /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
109 |   'aria-haspopup'?:
110 |     | boolean
111 |     | 'false'
112 |     | 'true'
113 |     | 'menu'
114 |     | 'listbox'
115 |     | 'tree'
116 |     | 'grid'
117 |     | 'dialog'
118 |     | undefined;
119 |   /**
120 |    * Indicates whether the element is exposed to an accessibility API.
121 |    * @see aria-disabled.
122 |    */
123 |   'aria-hidden'?: Booleanish | undefined;
124 |   /**
125 |    * Indicates the entered value does not conform to the format expected by the application.
126 |    * @see aria-errormessage.
127 |    */
128 |   'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling' | undefined;
129 |   /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
130 |   'aria-keyshortcuts'?: string | undefined;
131 |   /**
132 |    * Defines a string value that labels the current element.
133 |    * @see aria-labelledby.
134 |    */
135 |   'aria-label'?: string | undefined;
136 |   /**
137 |    * Identifies the element (or elements) that labels the current element.
138 |    * @see aria-describedby.
139 |    */
140 |   'aria-labelledby'?: string | undefined;
141 |   /** Defines the hierarchical level of an element within a structure. */
142 |   'aria-level'?: number | undefined;
143 |   /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
144 |   'aria-live'?: 'off' | 'assertive' | 'polite' | undefined;
145 |   /** Indicates whether an element is modal when displayed. */
146 |   'aria-modal'?: Booleanish | undefined;
147 |   /** Indicates whether a text box accepts multiple lines of input or only a single line. */
148 |   'aria-multiline'?: Booleanish | undefined;
149 |   /** Indicates that the user may select more than one item from the current selectable descendants. */
150 |   'aria-multiselectable'?: Booleanish | undefined;
151 |   /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
152 |   'aria-orientation'?: 'horizontal' | 'vertical' | undefined;
153 |   /**
154 |    * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
155 |    * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
156 |    * @see aria-controls.
157 |    */
158 |   'aria-owns'?: string | undefined;
159 |   /**
160 |    * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
161 |    * A hint could be a sample value or a brief description of the expected format.
162 |    */
163 |   'aria-placeholder'?: string | undefined;
164 |   /**
165 |    * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
166 |    * @see aria-setsize.
167 |    */
168 |   'aria-posinset'?: number | undefined;
169 |   /**
170 |    * Indicates the current "pressed" state of toggle buttons.
171 |    * @see aria-checked @see aria-selected.
172 |    */
173 |   'aria-pressed'?: boolean | 'false' | 'mixed' | 'true' | undefined;
174 |   /**
175 |    * Indicates that the element is not editable, but is otherwise operable.
176 |    * @see aria-disabled.
177 |    */
178 |   'aria-readonly'?: Booleanish | undefined;
179 |   /**
180 |    * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
181 |    * @see aria-atomic.
182 |    */
183 |   'aria-relevant'?:
184 |     | 'additions'
185 |     | 'additions removals'
186 |     | 'additions text'
187 |     | 'all'
188 |     | 'removals'
189 |     | 'removals additions'
190 |     | 'removals text'
191 |     | 'text'
192 |     | 'text additions'
193 |     | 'text removals'
194 |     | undefined;
195 |   /** Indicates that user input is required on the element before a form may be submitted. */
196 |   'aria-required'?: Booleanish | undefined;
197 |   /** Defines a human-readable, author-localized description for the role of an element. */
198 |   'aria-roledescription'?: string | undefined;
199 |   /**
200 |    * Defines the total number of rows in a table, grid, or treegrid.
201 |    * @see aria-rowindex.
202 |    */
203 |   'aria-rowcount'?: number | undefined;
204 |   /**
205 |    * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
206 |    * @see aria-rowcount @see aria-rowspan.
207 |    */
208 |   'aria-rowindex'?: number | undefined;
209 |   /**
210 |    * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
211 |    * @see aria-rowindex @see aria-colspan.
212 |    */
213 |   'aria-rowspan'?: number | undefined;
214 |   /**
215 |    * Indicates the current "selected" state of various widgets.
216 |    * @see aria-checked @see aria-pressed.
217 |    */
218 |   'aria-selected'?: Booleanish | undefined;
219 |   /**
220 |    * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
221 |    * @see aria-posinset.
222 |    */
223 |   'aria-setsize'?: number | undefined;
224 |   /** Indicates if items in a table or grid are sorted in ascending or descending order. */
225 |   'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other' | undefined;
226 |   /** Defines the maximum allowed value for a range widget. */
227 |   'aria-valuemax'?: number | undefined;
228 |   /** Defines the minimum allowed value for a range widget. */
229 |   'aria-valuemin'?: number | undefined;
230 |   /**
231 |    * Defines the current value for a range widget.
232 |    * @see aria-valuetext.
233 |    */
234 |   'aria-valuenow'?: number | undefined;
235 |   /** Defines the human readable text alternative of aria-valuenow for a range widget. */
236 |   'aria-valuetext'?: string | undefined;
237 | }
238 | 


--------------------------------------------------------------------------------
/tsconfig.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "compilerOptions": {
 3 |     "allowJs": true,
 4 |     "allowSyntheticDefaultImports": true,
 5 |     "baseUrl": ".",
 6 |     "importHelpers": true,
 7 |     "inlineSourceMap": true,
 8 |     "inlineSources": true,
 9 |     "isolatedModules": true,
10 |     "jsx": "react-jsx",
11 |     "jsxImportSource": "preact",
12 |     "lib": ["dom", "es6", "scripthost", "es2018"],
13 |     "module": "ESNext",
14 |     "moduleResolution": "node",
15 |     "noImplicitAny": true,
16 |     "paths": {
17 |       "react": ["./node_modules/preact/compat/"],
18 |       "react-dom": ["./node_modules/preact/compat/"],
19 |       "react-types": ["./node_modules/@types/react/"]
20 |     },
21 |     "skipLibCheck": true,
22 |     "target": "es2018"
23 |   },
24 |   "include": ["src/*.ts", "src/*.tsx"]
25 | }
26 | 


--------------------------------------------------------------------------------
/version-bump.mjs:
--------------------------------------------------------------------------------
 1 | import { readFileSync, writeFileSync } from "fs";
 2 | 
 3 | const targetVersion = process.env.npm_package_version;
 4 | 
 5 | // read minAppVersion from manifest.json and bump version to target version
 6 | let manifest = JSON.parse(readFileSync("manifest.json", "utf8"));
 7 | const { minAppVersion } = manifest;
 8 | manifest.version = targetVersion;
 9 | writeFileSync("manifest.json", JSON.stringify(manifest, null, "\t") + '\n');
10 | 
11 | // update versions.json with target version and minAppVersion from manifest.json
12 | let versions = JSON.parse(readFileSync("versions.json", "utf8"));
13 | versions[targetVersion] = minAppVersion;
14 | writeFileSync("versions.json", JSON.stringify(versions, null, "\t") + '\n');
15 | 


--------------------------------------------------------------------------------
/versions.json:
--------------------------------------------------------------------------------
 1 | {
 2 | 	"1.5.0": "1.0.0",
 3 | 	"1.4.6": "0.15.3",
 4 | 	"1.3.0": "0.15.3",
 5 | 	"1.2.40": "0.12.11",
 6 | 	"1.0.0": "0.12.11",
 7 | 	"2.0.42-beta": "1.0.0",
 8 | 	"2.0.0": "1.0.0",
 9 | 	"2.0.43": "1.0.0",
10 | 	"2.0.44": "1.0.0",
11 | 	"2.0.45": "1.0.0",
12 | 	"2.0.46": "1.0.0",
13 | 	"2.0.47": "1.0.0",
14 | 	"2.0.48": "1.0.0",
15 | 	"2.0.49": "1.0.0",
16 | 	"2.0.50": "1.0.0",
17 | 	"2.0.51": "1.0.0"
18 | }
19 | 


--------------------------------------------------------------------------------
/yarn.lock:
--------------------------------------------------------------------------------
   1 | # THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
   2 | # yarn lockfile v1
   3 | 
   4 | 
   5 | "@aashutoshrathi/word-wrap@^1.2.3":
   6 |   version "1.2.6"
   7 |   resolved "https://registry.yarnpkg.com/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz#bd9154aec9983f77b3a034ecaa015c2e4201f6cf"
   8 |   integrity sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==
   9 | 
  10 | "@babel/code-frame@^7.0.0":
  11 |   version "7.18.6"
  12 |   resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.18.6.tgz#3b25d38c89600baa2dcc219edfa88a74eb2c427a"
  13 |   integrity sha512-TDCmlK5eOvH+eH7cdAFlNXeVJqWIQ7gW9tY1GJIpUtFb6CmjVyq2VM3u71bOyR8CRihcCgMUYoDNyLXao3+70Q==
  14 |   dependencies:
  15 |     "@babel/highlight" "^7.18.6"
  16 | 
  17 | "@babel/code-frame@^7.22.13":
  18 |   version "7.23.5"
  19 |   resolved "https://registry.yarnpkg.com/@babel/code-frame/-/code-frame-7.23.5.tgz#9009b69a8c602293476ad598ff53e4562e15c244"
  20 |   integrity sha512-CgH3s1a96LipHCmSUmYFPwY7MNx8C3avkq7i4Wl3cfa662ldtUe4VM1TPXX70pfmrlWTb6jLqTYrZyT2ZTJBgA==
  21 |   dependencies:
  22 |     "@babel/highlight" "^7.23.4"
  23 |     chalk "^2.4.2"
  24 | 
  25 | "@babel/generator@7.17.7":
  26 |   version "7.17.7"
  27 |   resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.17.7.tgz#8da2599beb4a86194a3b24df6c085931d9ee45ad"
  28 |   integrity sha512-oLcVCTeIFadUoArDTwpluncplrYBmTCCZZgXCbgNGvOBBiSDDK3eWO4b/+eOTli5tKv1lg+a5/NAXg+nTcei1w==
  29 |   dependencies:
  30 |     "@babel/types" "^7.17.0"
  31 |     jsesc "^2.5.1"
  32 |     source-map "^0.5.0"
  33 | 
  34 | "@babel/generator@^7.23.0":
  35 |   version "7.23.6"
  36 |   resolved "https://registry.yarnpkg.com/@babel/generator/-/generator-7.23.6.tgz#9e1fca4811c77a10580d17d26b57b036133f3c2e"
  37 |   integrity sha512-qrSfCYxYQB5owCmGLbl8XRpX1ytXlpueOb0N0UmQwA073KZxejgQTzAmJezxvpwQD9uGtK2shHdi55QT+MbjIw==
  38 |   dependencies:
  39 |     "@babel/types" "^7.23.6"
  40 |     "@jridgewell/gen-mapping" "^0.3.2"
  41 |     "@jridgewell/trace-mapping" "^0.3.17"
  42 |     jsesc "^2.5.1"
  43 | 
  44 | "@babel/helper-environment-visitor@^7.22.20":
  45 |   version "7.22.20"
  46 |   resolved "https://registry.yarnpkg.com/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.20.tgz#96159db61d34a29dba454c959f5ae4a649ba9167"
  47 |   integrity sha512-zfedSIzFhat/gFhWfHtgWvlec0nqB9YEIVrpuwjruLlXfUSnA8cJB0miHKwqDnQ7d32aKo2xt88/xZptwxbfhA==
  48 | 
  49 | "@babel/helper-function-name@^7.23.0":
  50 |   version "7.23.0"
  51 |   resolved "https://registry.yarnpkg.com/@babel/helper-function-name/-/helper-function-name-7.23.0.tgz#1f9a3cdbd5b2698a670c30d2735f9af95ed52759"
  52 |   integrity sha512-OErEqsrxjZTJciZ4Oo+eoZqeW9UIiOcuYKRJA4ZAgV9myA+pOXhhmpfNCKjEH/auVfEYVFJ6y1Tc4r0eIApqiw==
  53 |   dependencies:
  54 |     "@babel/template" "^7.22.15"
  55 |     "@babel/types" "^7.23.0"
  56 | 
  57 | "@babel/helper-hoist-variables@^7.22.5":
  58 |   version "7.22.5"
  59 |   resolved "https://registry.yarnpkg.com/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz#c01a007dac05c085914e8fb652b339db50d823bb"
  60 |   integrity sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==
  61 |   dependencies:
  62 |     "@babel/types" "^7.22.5"
  63 | 
  64 | "@babel/helper-split-export-declaration@^7.22.6":
  65 |   version "7.22.6"
  66 |   resolved "https://registry.yarnpkg.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz#322c61b7310c0997fe4c323955667f18fcefb91c"
  67 |   integrity sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==
  68 |   dependencies:
  69 |     "@babel/types" "^7.22.5"
  70 | 
  71 | "@babel/helper-string-parser@^7.23.4":
  72 |   version "7.23.4"
  73 |   resolved "https://registry.yarnpkg.com/@babel/helper-string-parser/-/helper-string-parser-7.23.4.tgz#9478c707febcbbe1ddb38a3d91a2e054ae622d83"
  74 |   integrity sha512-803gmbQdqwdf4olxrX4AJyFBV/RTr3rSmOj0rKwesmzlfhYNDEs+/iOcznzpNWlJlIlTJC2QfPFcHB6DlzdVLQ==
  75 | 
  76 | "@babel/helper-validator-identifier@^7.16.7", "@babel/helper-validator-identifier@^7.22.20":
  77 |   version "7.22.20"
  78 |   resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.20.tgz#c4ae002c61d2879e724581d96665583dbc1dc0e0"
  79 |   integrity sha512-Y4OZ+ytlatR8AI+8KZfKuL5urKp7qey08ha31L8b3BwewJAoJamTzyvxPR/5D+KkdJCGPq/+8TukHBlY10FX9A==
  80 | 
  81 | "@babel/helper-validator-identifier@^7.18.6":
  82 |   version "7.18.6"
  83 |   resolved "https://registry.yarnpkg.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.18.6.tgz#9c97e30d31b2b8c72a1d08984f2ca9b574d7a076"
  84 |   integrity sha512-MmetCkz9ej86nJQV+sFCxoGGrUbU3q02kgLciwkrt9QqEB7cP39oKEY0PakknEO0Gu20SskMRi+AYZ3b1TpN9g==
  85 | 
  86 | "@babel/highlight@^7.18.6":
  87 |   version "7.18.6"
  88 |   resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.18.6.tgz#81158601e93e2563795adcbfbdf5d64be3f2ecdf"
  89 |   integrity sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==
  90 |   dependencies:
  91 |     "@babel/helper-validator-identifier" "^7.18.6"
  92 |     chalk "^2.0.0"
  93 |     js-tokens "^4.0.0"
  94 | 
  95 | "@babel/highlight@^7.23.4":
  96 |   version "7.23.4"
  97 |   resolved "https://registry.yarnpkg.com/@babel/highlight/-/highlight-7.23.4.tgz#edaadf4d8232e1a961432db785091207ead0621b"
  98 |   integrity sha512-acGdbYSfp2WheJoJm/EBBBLh/ID8KDc64ISZ9DYtBmC8/Q204PZJLHyzeB5qMzJ5trcOkybd78M4x2KWsUq++A==
  99 |   dependencies:
 100 |     "@babel/helper-validator-identifier" "^7.22.20"
 101 |     chalk "^2.4.2"
 102 |     js-tokens "^4.0.0"
 103 | 
 104 | "@babel/parser@^7.20.5", "@babel/parser@^7.22.15", "@babel/parser@^7.23.0":
 105 |   version "7.23.6"
 106 |   resolved "https://registry.yarnpkg.com/@babel/parser/-/parser-7.23.6.tgz#ba1c9e512bda72a47e285ae42aff9d2a635a9e3b"
 107 |   integrity sha512-Z2uID7YJ7oNvAI20O9X0bblw7Qqs8Q2hFy0R9tAfnfLkp5MW0UH9eUvnDSnFwKZ0AvgS1ucqR4KzvVHgnke1VQ==
 108 | 
 109 | "@babel/runtime@^7.9.2":
 110 |   version "7.18.6"
 111 |   resolved "https://registry.yarnpkg.com/@babel/runtime/-/runtime-7.18.6.tgz#6a1ef59f838debd670421f8c7f2cbb8da9751580"
 112 |   integrity sha512-t9wi7/AW6XtKahAe20Yw0/mMljKq0B1r2fPdvaAdV/KPDZewFXdaaa6K7lxmZBZ8FBNpCiAT6iHPmd6QO9bKfQ==
 113 |   dependencies:
 114 |     regenerator-runtime "^0.13.4"
 115 | 
 116 | "@babel/template@^7.22.15":
 117 |   version "7.22.15"
 118 |   resolved "https://registry.yarnpkg.com/@babel/template/-/template-7.22.15.tgz#09576efc3830f0430f4548ef971dde1350ef2f38"
 119 |   integrity sha512-QPErUVm4uyJa60rkI73qneDacvdvzxshT3kksGqlGWYdOTIUOwJ7RDUL8sGqslY1uXWSL6xMFKEXDS3ox2uF0w==
 120 |   dependencies:
 121 |     "@babel/code-frame" "^7.22.13"
 122 |     "@babel/parser" "^7.22.15"
 123 |     "@babel/types" "^7.22.15"
 124 | 
 125 | "@babel/traverse@7.23.2":
 126 |   version "7.23.2"
 127 |   resolved "https://registry.yarnpkg.com/@babel/traverse/-/traverse-7.23.2.tgz#329c7a06735e144a506bdb2cad0268b7f46f4ad8"
 128 |   integrity sha512-azpe59SQ48qG6nu2CzcMLbxUudtN+dOM9kDbUqGq3HXUJRlo7i8fvPoxQUzYgLZ4cMVmuZgm8vvBpNeRhd6XSw==
 129 |   dependencies:
 130 |     "@babel/code-frame" "^7.22.13"
 131 |     "@babel/generator" "^7.23.0"
 132 |     "@babel/helper-environment-visitor" "^7.22.20"
 133 |     "@babel/helper-function-name" "^7.23.0"
 134 |     "@babel/helper-hoist-variables" "^7.22.5"
 135 |     "@babel/helper-split-export-declaration" "^7.22.6"
 136 |     "@babel/parser" "^7.23.0"
 137 |     "@babel/types" "^7.23.0"
 138 |     debug "^4.1.0"
 139 |     globals "^11.1.0"
 140 | 
 141 | "@babel/types@7.17.0":
 142 |   version "7.17.0"
 143 |   resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.17.0.tgz#a826e368bccb6b3d84acd76acad5c0d87342390b"
 144 |   integrity sha512-TmKSNO4D5rzhL5bjWFcVHHLETzfQ/AmbKpKPOSjlP0WoHZ6L911fgoOKY4Alp/emzG4cHJdyN49zpgkbXFEHHw==
 145 |   dependencies:
 146 |     "@babel/helper-validator-identifier" "^7.16.7"
 147 |     to-fast-properties "^2.0.0"
 148 | 
 149 | "@babel/types@^7.17.0", "@babel/types@^7.22.15", "@babel/types@^7.22.5", "@babel/types@^7.23.0", "@babel/types@^7.23.6":
 150 |   version "7.23.6"
 151 |   resolved "https://registry.yarnpkg.com/@babel/types/-/types-7.23.6.tgz#be33fdb151e1f5a56877d704492c240fc71c7ccd"
 152 |   integrity sha512-+uarb83brBzPKN38NX1MkB6vb6+mwvR6amUulqAE7ccQw1pEl+bCia9TbdG1lsnFP7lZySvUn37CHyXQdfTwzg==
 153 |   dependencies:
 154 |     "@babel/helper-string-parser" "^7.23.4"
 155 |     "@babel/helper-validator-identifier" "^7.22.20"
 156 |     to-fast-properties "^2.0.0"
 157 | 
 158 | "@codemirror/commands@^6.0.0":
 159 |   version "6.3.3"
 160 |   resolved "https://registry.yarnpkg.com/@codemirror/commands/-/commands-6.3.3.tgz#03face5bf5f3de0fc4e09b177b3c91eda2ceb7e9"
 161 |   integrity sha512-dO4hcF0fGT9tu1Pj1D2PvGvxjeGkbC6RGcZw6Qs74TH+Ed1gw98jmUgd2axWvIZEqTeTuFrg1lEB1KV6cK9h1A==
 162 |   dependencies:
 163 |     "@codemirror/language" "^6.0.0"
 164 |     "@codemirror/state" "^6.4.0"
 165 |     "@codemirror/view" "^6.0.0"
 166 |     "@lezer/common" "^1.1.0"
 167 | 
 168 | "@codemirror/language@^6.0.0":
 169 |   version "6.10.1"
 170 |   resolved "https://registry.yarnpkg.com/@codemirror/language/-/language-6.10.1.tgz#428c932a158cb75942387acfe513c1ece1090b05"
 171 |   integrity sha512-5GrXzrhq6k+gL5fjkAwt90nYDmjlzTIJV8THnxNFtNKWotMIlzzN+CpqxqwXOECnUdOndmSeWntVrVcv5axWRQ==
 172 |   dependencies:
 173 |     "@codemirror/state" "^6.0.0"
 174 |     "@codemirror/view" "^6.23.0"
 175 |     "@lezer/common" "^1.1.0"
 176 |     "@lezer/highlight" "^1.0.0"
 177 |     "@lezer/lr" "^1.0.0"
 178 |     style-mod "^4.0.0"
 179 | 
 180 | "@codemirror/language@https://github.com/lishid/cm-language":
 181 |   version "6.10.1"
 182 |   resolved "https://github.com/lishid/cm-language#2644bfc27afda707a7e1f3aedaf3ca7120f63cd9"
 183 |   dependencies:
 184 |     "@codemirror/state" "^6.0.0"
 185 |     "@codemirror/view" "^6.23.0"
 186 |     "@lezer/common" "^1.1.0"
 187 |     "@lezer/highlight" "^1.0.0"
 188 |     "@lezer/lr" "^1.0.0"
 189 |     style-mod "^4.0.0"
 190 | 
 191 | "@codemirror/state@^6.0.0", "@codemirror/state@^6.0.1", "@codemirror/state@^6.4.0":
 192 |   version "6.4.1"
 193 |   resolved "https://registry.yarnpkg.com/@codemirror/state/-/state-6.4.1.tgz#da57143695c056d9a3c38705ed34136e2b68171b"
 194 |   integrity sha512-QkEyUiLhsJoZkbumGZlswmAhA7CBU02Wrz7zvH4SrcifbsqwlXShVXg65f3v/ts57W3dqyamEriMhij1Z3Zz4A==
 195 | 
 196 | "@codemirror/view@^6.0.0", "@codemirror/view@^6.0.1":
 197 |   version "6.26.3"
 198 |   resolved "https://registry.yarnpkg.com/@codemirror/view/-/view-6.26.3.tgz#47aebd49a6ee3c8d36b82046d3bffe6056b8039f"
 199 |   integrity sha512-gmqxkPALZjkgSxIeeweY/wGQXBfwTUaLs8h7OKtSwfbj9Ct3L11lD+u1sS7XHppxFQoMDiMDp07P9f3I2jWOHw==
 200 |   dependencies:
 201 |     "@codemirror/state" "^6.4.0"
 202 |     style-mod "^4.1.0"
 203 |     w3c-keyname "^2.2.4"
 204 | 
 205 | "@codemirror/view@^6.23.0":
 206 |   version "6.26.2"
 207 |   resolved "https://registry.yarnpkg.com/@codemirror/view/-/view-6.26.2.tgz#6df950954cee33933514978c5bbd2da9d546466c"
 208 |   integrity sha512-j6V48PlFC/O7ERAR5vRW5QKDdchzmyyfojDdt+zPsB0YXoWgcjlC1IWjmlYfx08aQZ3HN5BtALcgGgtSKGMe7A==
 209 |   dependencies:
 210 |     "@codemirror/state" "^6.4.0"
 211 |     style-mod "^4.1.0"
 212 |     w3c-keyname "^2.2.4"
 213 | 
 214 | "@esbuild/aix-ppc64@0.19.12":
 215 |   version "0.19.12"
 216 |   resolved "https://registry.yarnpkg.com/@esbuild/aix-ppc64/-/aix-ppc64-0.19.12.tgz#d1bc06aedb6936b3b6d313bf809a5a40387d2b7f"
 217 |   integrity sha512-bmoCYyWdEL3wDQIVbcyzRyeKLgk2WtWLTWz1ZIAZF/EGbNOwSA6ew3PftJ1PqMiOOGu0OyFMzG53L0zqIpPeNA==
 218 | 
 219 | "@esbuild/android-arm64@0.19.12":
 220 |   version "0.19.12"
 221 |   resolved "https://registry.yarnpkg.com/@esbuild/android-arm64/-/android-arm64-0.19.12.tgz#7ad65a36cfdb7e0d429c353e00f680d737c2aed4"
 222 |   integrity sha512-P0UVNGIienjZv3f5zq0DP3Nt2IE/3plFzuaS96vihvD0Hd6H/q4WXUGpCxD/E8YrSXfNyRPbpTq+T8ZQioSuPA==
 223 | 
 224 | "@esbuild/android-arm@0.19.12":
 225 |   version "0.19.12"
 226 |   resolved "https://registry.yarnpkg.com/@esbuild/android-arm/-/android-arm-0.19.12.tgz#b0c26536f37776162ca8bde25e42040c203f2824"
 227 |   integrity sha512-qg/Lj1mu3CdQlDEEiWrlC4eaPZ1KztwGJ9B6J+/6G+/4ewxJg7gqj8eVYWvao1bXrqGiW2rsBZFSX3q2lcW05w==
 228 | 
 229 | "@esbuild/android-x64@0.19.12":
 230 |   version "0.19.12"
 231 |   resolved "https://registry.yarnpkg.com/@esbuild/android-x64/-/android-x64-0.19.12.tgz#cb13e2211282012194d89bf3bfe7721273473b3d"
 232 |   integrity sha512-3k7ZoUW6Q6YqhdhIaq/WZ7HwBpnFBlW905Fa4s4qWJyiNOgT1dOqDiVAQFwBH7gBRZr17gLrlFCRzF6jFh7Kew==
 233 | 
 234 | "@esbuild/darwin-arm64@0.19.12":
 235 |   version "0.19.12"
 236 |   resolved "https://registry.yarnpkg.com/@esbuild/darwin-arm64/-/darwin-arm64-0.19.12.tgz#cbee41e988020d4b516e9d9e44dd29200996275e"
 237 |   integrity sha512-B6IeSgZgtEzGC42jsI+YYu9Z3HKRxp8ZT3cqhvliEHovq8HSX2YX8lNocDn79gCKJXOSaEot9MVYky7AKjCs8g==
 238 | 
 239 | "@esbuild/darwin-x64@0.19.12":
 240 |   version "0.19.12"
 241 |   resolved "https://registry.yarnpkg.com/@esbuild/darwin-x64/-/darwin-x64-0.19.12.tgz#e37d9633246d52aecf491ee916ece709f9d5f4cd"
 242 |   integrity sha512-hKoVkKzFiToTgn+41qGhsUJXFlIjxI/jSYeZf3ugemDYZldIXIxhvwN6erJGlX4t5h417iFuheZ7l+YVn05N3A==
 243 | 
 244 | "@esbuild/freebsd-arm64@0.19.12":
 245 |   version "0.19.12"
 246 |   resolved "https://registry.yarnpkg.com/@esbuild/freebsd-arm64/-/freebsd-arm64-0.19.12.tgz#1ee4d8b682ed363b08af74d1ea2b2b4dbba76487"
 247 |   integrity sha512-4aRvFIXmwAcDBw9AueDQ2YnGmz5L6obe5kmPT8Vd+/+x/JMVKCgdcRwH6APrbpNXsPz+K653Qg8HB/oXvXVukA==
 248 | 
 249 | "@esbuild/freebsd-x64@0.19.12":
 250 |   version "0.19.12"
 251 |   resolved "https://registry.yarnpkg.com/@esbuild/freebsd-x64/-/freebsd-x64-0.19.12.tgz#37a693553d42ff77cd7126764b535fb6cc28a11c"
 252 |   integrity sha512-EYoXZ4d8xtBoVN7CEwWY2IN4ho76xjYXqSXMNccFSx2lgqOG/1TBPW0yPx1bJZk94qu3tX0fycJeeQsKovA8gg==
 253 | 
 254 | "@esbuild/linux-arm64@0.19.12":
 255 |   version "0.19.12"
 256 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-arm64/-/linux-arm64-0.19.12.tgz#be9b145985ec6c57470e0e051d887b09dddb2d4b"
 257 |   integrity sha512-EoTjyYyLuVPfdPLsGVVVC8a0p1BFFvtpQDB/YLEhaXyf/5bczaGeN15QkR+O4S5LeJ92Tqotve7i1jn35qwvdA==
 258 | 
 259 | "@esbuild/linux-arm@0.19.12":
 260 |   version "0.19.12"
 261 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-arm/-/linux-arm-0.19.12.tgz#207ecd982a8db95f7b5279207d0ff2331acf5eef"
 262 |   integrity sha512-J5jPms//KhSNv+LO1S1TX1UWp1ucM6N6XuL6ITdKWElCu8wXP72l9MM0zDTzzeikVyqFE6U8YAV9/tFyj0ti+w==
 263 | 
 264 | "@esbuild/linux-ia32@0.19.12":
 265 |   version "0.19.12"
 266 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-ia32/-/linux-ia32-0.19.12.tgz#d0d86b5ca1562523dc284a6723293a52d5860601"
 267 |   integrity sha512-Thsa42rrP1+UIGaWz47uydHSBOgTUnwBwNq59khgIwktK6x60Hivfbux9iNR0eHCHzOLjLMLfUMLCypBkZXMHA==
 268 | 
 269 | "@esbuild/linux-loong64@0.19.12":
 270 |   version "0.19.12"
 271 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-loong64/-/linux-loong64-0.19.12.tgz#9a37f87fec4b8408e682b528391fa22afd952299"
 272 |   integrity sha512-LiXdXA0s3IqRRjm6rV6XaWATScKAXjI4R4LoDlvO7+yQqFdlr1Bax62sRwkVvRIrwXxvtYEHHI4dm50jAXkuAA==
 273 | 
 274 | "@esbuild/linux-mips64el@0.19.12":
 275 |   version "0.19.12"
 276 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-mips64el/-/linux-mips64el-0.19.12.tgz#4ddebd4e6eeba20b509d8e74c8e30d8ace0b89ec"
 277 |   integrity sha512-fEnAuj5VGTanfJ07ff0gOA6IPsvrVHLVb6Lyd1g2/ed67oU1eFzL0r9WL7ZzscD+/N6i3dWumGE1Un4f7Amf+w==
 278 | 
 279 | "@esbuild/linux-ppc64@0.19.12":
 280 |   version "0.19.12"
 281 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-ppc64/-/linux-ppc64-0.19.12.tgz#adb67dadb73656849f63cd522f5ecb351dd8dee8"
 282 |   integrity sha512-nYJA2/QPimDQOh1rKWedNOe3Gfc8PabU7HT3iXWtNUbRzXS9+vgB0Fjaqr//XNbd82mCxHzik2qotuI89cfixg==
 283 | 
 284 | "@esbuild/linux-riscv64@0.19.12":
 285 |   version "0.19.12"
 286 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-riscv64/-/linux-riscv64-0.19.12.tgz#11bc0698bf0a2abf8727f1c7ace2112612c15adf"
 287 |   integrity sha512-2MueBrlPQCw5dVJJpQdUYgeqIzDQgw3QtiAHUC4RBz9FXPrskyyU3VI1hw7C0BSKB9OduwSJ79FTCqtGMWqJHg==
 288 | 
 289 | "@esbuild/linux-s390x@0.19.12":
 290 |   version "0.19.12"
 291 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-s390x/-/linux-s390x-0.19.12.tgz#e86fb8ffba7c5c92ba91fc3b27ed5a70196c3cc8"
 292 |   integrity sha512-+Pil1Nv3Umes4m3AZKqA2anfhJiVmNCYkPchwFJNEJN5QxmTs1uzyy4TvmDrCRNT2ApwSari7ZIgrPeUx4UZDg==
 293 | 
 294 | "@esbuild/linux-x64@0.19.12":
 295 |   version "0.19.12"
 296 |   resolved "https://registry.yarnpkg.com/@esbuild/linux-x64/-/linux-x64-0.19.12.tgz#5f37cfdc705aea687dfe5dfbec086a05acfe9c78"
 297 |   integrity sha512-B71g1QpxfwBvNrfyJdVDexenDIt1CiDN1TIXLbhOw0KhJzE78KIFGX6OJ9MrtC0oOqMWf+0xop4qEU8JrJTwCg==
 298 | 
 299 | "@esbuild/netbsd-x64@0.19.12":
 300 |   version "0.19.12"
 301 |   resolved "https://registry.yarnpkg.com/@esbuild/netbsd-x64/-/netbsd-x64-0.19.12.tgz#29da566a75324e0d0dd7e47519ba2f7ef168657b"
 302 |   integrity sha512-3ltjQ7n1owJgFbuC61Oj++XhtzmymoCihNFgT84UAmJnxJfm4sYCiSLTXZtE00VWYpPMYc+ZQmB6xbSdVh0JWA==
 303 | 
 304 | "@esbuild/openbsd-x64@0.19.12":
 305 |   version "0.19.12"
 306 |   resolved "https://registry.yarnpkg.com/@esbuild/openbsd-x64/-/openbsd-x64-0.19.12.tgz#306c0acbdb5a99c95be98bdd1d47c916e7dc3ff0"
 307 |   integrity sha512-RbrfTB9SWsr0kWmb9srfF+L933uMDdu9BIzdA7os2t0TXhCRjrQyCeOt6wVxr79CKD4c+p+YhCj31HBkYcXebw==
 308 | 
 309 | "@esbuild/sunos-x64@0.19.12":
 310 |   version "0.19.12"
 311 |   resolved "https://registry.yarnpkg.com/@esbuild/sunos-x64/-/sunos-x64-0.19.12.tgz#0933eaab9af8b9b2c930236f62aae3fc593faf30"
 312 |   integrity sha512-HKjJwRrW8uWtCQnQOz9qcU3mUZhTUQvi56Q8DPTLLB+DawoiQdjsYq+j+D3s9I8VFtDr+F9CjgXKKC4ss89IeA==
 313 | 
 314 | "@esbuild/win32-arm64@0.19.12":
 315 |   version "0.19.12"
 316 |   resolved "https://registry.yarnpkg.com/@esbuild/win32-arm64/-/win32-arm64-0.19.12.tgz#773bdbaa1971b36db2f6560088639ccd1e6773ae"
 317 |   integrity sha512-URgtR1dJnmGvX864pn1B2YUYNzjmXkuJOIqG2HdU62MVS4EHpU2946OZoTMnRUHklGtJdJZ33QfzdjGACXhn1A==
 318 | 
 319 | "@esbuild/win32-ia32@0.19.12":
 320 |   version "0.19.12"
 321 |   resolved "https://registry.yarnpkg.com/@esbuild/win32-ia32/-/win32-ia32-0.19.12.tgz#000516cad06354cc84a73f0943a4aa690ef6fd67"
 322 |   integrity sha512-+ZOE6pUkMOJfmxmBZElNOx72NKpIa/HFOMGzu8fqzQJ5kgf6aTGrcJaFsNiVMH4JKpMipyK+7k0n2UXN7a8YKQ==
 323 | 
 324 | "@esbuild/win32-x64@0.19.12":
 325 |   version "0.19.12"
 326 |   resolved "https://registry.yarnpkg.com/@esbuild/win32-x64/-/win32-x64-0.19.12.tgz#c57c8afbb4054a3ab8317591a0b7320360b444ae"
 327 |   integrity sha512-T1QyPSDCyMXaO3pzBkF96E8xMkiRYbUEZADd29SyPGabqxMViNoii+NcK7eWJAEoU6RZyEm5lVSIjTmcdoB9HA==
 328 | 
 329 | "@eslint-community/eslint-utils@^4.2.0":
 330 |   version "4.4.0"
 331 |   resolved "https://registry.yarnpkg.com/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz#a23514e8fb9af1269d5f7788aa556798d61c6b59"
 332 |   integrity sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==
 333 |   dependencies:
 334 |     eslint-visitor-keys "^3.3.0"
 335 | 
 336 | "@eslint-community/regexpp@^4.4.0", "@eslint-community/regexpp@^4.6.1":
 337 |   version "4.10.0"
 338 |   resolved "https://registry.yarnpkg.com/@eslint-community/regexpp/-/regexpp-4.10.0.tgz#548f6de556857c8bb73bbee70c35dc82a2e74d63"
 339 |   integrity sha512-Cu96Sd2By9mCNTx2iyKOmq10v22jUVQv0lQnlGNy16oE9589yE+QADPbrMGCkA51cKZSg3Pu/aTJVTGfL/qjUA==
 340 | 
 341 | "@eslint/eslintrc@^2.1.4":
 342 |   version "2.1.4"
 343 |   resolved "https://registry.yarnpkg.com/@eslint/eslintrc/-/eslintrc-2.1.4.tgz#388a269f0f25c1b6adc317b5a2c55714894c70ad"
 344 |   integrity sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==
 345 |   dependencies:
 346 |     ajv "^6.12.4"
 347 |     debug "^4.3.2"
 348 |     espree "^9.6.0"
 349 |     globals "^13.19.0"
 350 |     ignore "^5.2.0"
 351 |     import-fresh "^3.2.1"
 352 |     js-yaml "^4.1.0"
 353 |     minimatch "^3.1.2"
 354 |     strip-json-comments "^3.1.1"
 355 | 
 356 | "@eslint/js@8.57.0":
 357 |   version "8.57.0"
 358 |   resolved "https://registry.yarnpkg.com/@eslint/js/-/js-8.57.0.tgz#a5417ae8427873f1dd08b70b3574b453e67b5f7f"
 359 |   integrity sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==
 360 | 
 361 | "@humanwhocodes/config-array@^0.11.14":
 362 |   version "0.11.14"
 363 |   resolved "https://registry.yarnpkg.com/@humanwhocodes/config-array/-/config-array-0.11.14.tgz#d78e481a039f7566ecc9660b4ea7fe6b1fec442b"
 364 |   integrity sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==
 365 |   dependencies:
 366 |     "@humanwhocodes/object-schema" "^2.0.2"
 367 |     debug "^4.3.1"
 368 |     minimatch "^3.0.5"
 369 | 
 370 | "@humanwhocodes/module-importer@^1.0.1":
 371 |   version "1.0.1"
 372 |   resolved "https://registry.yarnpkg.com/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz#af5b2691a22b44be847b0ca81641c5fb6ad0172c"
 373 |   integrity sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==
 374 | 
 375 | "@humanwhocodes/object-schema@^2.0.2":
 376 |   version "2.0.3"
 377 |   resolved "https://registry.yarnpkg.com/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz#4a2868d75d6d6963e423bcf90b7fd1be343409d3"
 378 |   integrity sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==
 379 | 
 380 | "@jridgewell/gen-mapping@^0.3.2":
 381 |   version "0.3.3"
 382 |   resolved "https://registry.yarnpkg.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz#7e02e6eb5df901aaedb08514203b096614024098"
 383 |   integrity sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==
 384 |   dependencies:
 385 |     "@jridgewell/set-array" "^1.0.1"
 386 |     "@jridgewell/sourcemap-codec" "^1.4.10"
 387 |     "@jridgewell/trace-mapping" "^0.3.9"
 388 | 
 389 | "@jridgewell/resolve-uri@^3.0.3":
 390 |   version "3.0.8"
 391 |   resolved "https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.0.8.tgz#687cc2bbf243f4e9a868ecf2262318e2658873a1"
 392 |   integrity sha512-YK5G9LaddzGbcucK4c8h5tWFmMPBvRZ/uyWmN1/SbBdIvqGUdWGkJ5BAaccgs6XbzVLsqbPJrBSFwKv3kT9i7w==
 393 | 
 394 | "@jridgewell/resolve-uri@^3.1.0":
 395 |   version "3.1.1"
 396 |   resolved "https://registry.yarnpkg.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.1.tgz#c08679063f279615a3326583ba3a90d1d82cc721"
 397 |   integrity sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==
 398 | 
 399 | "@jridgewell/set-array@^1.0.1":
 400 |   version "1.1.2"
 401 |   resolved "https://registry.yarnpkg.com/@jridgewell/set-array/-/set-array-1.1.2.tgz#7c6cf998d6d20b914c0a55a91ae928ff25965e72"
 402 |   integrity sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==
 403 | 
 404 | "@jridgewell/sourcemap-codec@^1.4.10":
 405 |   version "1.4.14"
 406 |   resolved "https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz#add4c98d341472a289190b424efbdb096991bb24"
 407 |   integrity sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==
 408 | 
 409 | "@jridgewell/sourcemap-codec@^1.4.14", "@jridgewell/sourcemap-codec@^1.4.15":
 410 |   version "1.4.15"
 411 |   resolved "https://registry.yarnpkg.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz#d7c6e6755c78567a951e04ab52ef0fd26de59f32"
 412 |   integrity sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==
 413 | 
 414 | "@jridgewell/trace-mapping@^0.3.17":
 415 |   version "0.3.20"
 416 |   resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.20.tgz#72e45707cf240fa6b081d0366f8265b0cd10197f"
 417 |   integrity sha512-R8LcPeWZol2zR8mmH3JeKQ6QRCFb7XgUhV9ZlGhHLGyg4wpPiPZNQOOWhFZhxKw8u//yTbNGI42Bx/3paXEQ+Q==
 418 |   dependencies:
 419 |     "@jridgewell/resolve-uri" "^3.1.0"
 420 |     "@jridgewell/sourcemap-codec" "^1.4.14"
 421 | 
 422 | "@jridgewell/trace-mapping@^0.3.9":
 423 |   version "0.3.14"
 424 |   resolved "https://registry.yarnpkg.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.14.tgz#b231a081d8f66796e475ad588a1ef473112701ed"
 425 |   integrity sha512-bJWEfQ9lPTvm3SneWwRFVLzrh6nhjwqw7TUFFBEMzwvg7t7PCDenf2lDwqo4NQXzdpgBXyFgDWnQA+2vkruksQ==
 426 |   dependencies:
 427 |     "@jridgewell/resolve-uri" "^3.0.3"
 428 |     "@jridgewell/sourcemap-codec" "^1.4.10"
 429 | 
 430 | "@lezer/common@^1.0.0", "@lezer/common@^1.1.0":
 431 |   version "1.2.1"
 432 |   resolved "https://registry.yarnpkg.com/@lezer/common/-/common-1.2.1.tgz#198b278b7869668e1bebbe687586e12a42731049"
 433 |   integrity sha512-yemX0ZD2xS/73llMZIK6KplkjIjf2EvAHcinDi/TfJ9hS25G0388+ClHt6/3but0oOxinTcQHJLDXh6w1crzFQ==
 434 | 
 435 | "@lezer/highlight@^1.0.0":
 436 |   version "1.2.0"
 437 |   resolved "https://registry.yarnpkg.com/@lezer/highlight/-/highlight-1.2.0.tgz#e5898c3644208b4b589084089dceeea2966f7780"
 438 |   integrity sha512-WrS5Mw51sGrpqjlh3d4/fOwpEV2Hd3YOkp9DBt4k8XZQcoTHZFB7sx030A6OcahF4J1nDQAa3jXlTVVYH50IFA==
 439 |   dependencies:
 440 |     "@lezer/common" "^1.0.0"
 441 | 
 442 | "@lezer/lr@^1.0.0":
 443 |   version "1.4.0"
 444 |   resolved "https://registry.yarnpkg.com/@lezer/lr/-/lr-1.4.0.tgz#ed52a75dbbfbb0d1eb63710ea84c35ee647cb67e"
 445 |   integrity sha512-Wst46p51km8gH0ZUmeNrtpRYmdlRHUpN1DQd3GFAyKANi8WVz8c2jHYTf1CVScFaCjQw1iO3ZZdqGDxQPRErTg==
 446 |   dependencies:
 447 |     "@lezer/common" "^1.0.0"
 448 | 
 449 | "@nodelib/fs.scandir@2.1.5":
 450 |   version "2.1.5"
 451 |   resolved "https://registry.yarnpkg.com/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz#7619c2eb21b25483f6d167548b4cfd5a7488c3d5"
 452 |   integrity sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==
 453 |   dependencies:
 454 |     "@nodelib/fs.stat" "2.0.5"
 455 |     run-parallel "^1.1.9"
 456 | 
 457 | "@nodelib/fs.stat@2.0.5", "@nodelib/fs.stat@^2.0.2":
 458 |   version "2.0.5"
 459 |   resolved "https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz#5bd262af94e9d25bd1e71b05deed44876a222e8b"
 460 |   integrity sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==
 461 | 
 462 | "@nodelib/fs.walk@^1.2.3", "@nodelib/fs.walk@^1.2.8":
 463 |   version "1.2.8"
 464 |   resolved "https://registry.yarnpkg.com/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz#e95737e8bb6746ddedf69c556953494f196fe69a"
 465 |   integrity sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==
 466 |   dependencies:
 467 |     "@nodelib/fs.scandir" "2.1.5"
 468 |     fastq "^1.6.0"
 469 | 
 470 | "@oclif/command@^1", "@oclif/command@^1.8.15":
 471 |   version "1.8.16"
 472 |   resolved "https://registry.yarnpkg.com/@oclif/command/-/command-1.8.16.tgz#bea46f81b2061b47e1cda318a0b923e62ca4cc0c"
 473 |   integrity sha512-rmVKYEsKzurfRU0xJz+iHelbi1LGlihIWZ7Qvmb/CBz1EkhL7nOkW4SVXmG2dA5Ce0si2gr88i6q4eBOMRNJ1w==
 474 |   dependencies:
 475 |     "@oclif/config" "^1.18.2"
 476 |     "@oclif/errors" "^1.3.5"
 477 |     "@oclif/help" "^1.0.1"
 478 |     "@oclif/parser" "^3.8.6"
 479 |     debug "^4.1.1"
 480 |     semver "^7.3.2"
 481 | 
 482 | "@oclif/config@1.18.2":
 483 |   version "1.18.2"
 484 |   resolved "https://registry.yarnpkg.com/@oclif/config/-/config-1.18.2.tgz#5bfe74a9ba6a8ca3dceb314a81bd9ce2e15ebbfe"
 485 |   integrity sha512-cE3qfHWv8hGRCP31j7fIS7BfCflm/BNZ2HNqHexH+fDrdF2f1D5S8VmXWLC77ffv3oDvWyvE9AZeR0RfmHCCaA==
 486 |   dependencies:
 487 |     "@oclif/errors" "^1.3.3"
 488 |     "@oclif/parser" "^3.8.0"
 489 |     debug "^4.1.1"
 490 |     globby "^11.0.1"
 491 |     is-wsl "^2.1.1"
 492 |     tslib "^2.0.0"
 493 | 
 494 | "@oclif/config@^1", "@oclif/config@^1.18.2":
 495 |   version "1.18.3"
 496 |   resolved "https://registry.yarnpkg.com/@oclif/config/-/config-1.18.3.tgz#ddfc144fdab66b1658c2f1b3478fa7fbfd317e79"
 497 |   integrity sha512-sBpko86IrTscc39EvHUhL+c++81BVTsIZ3ETu/vG+cCdi0N6vb2DoahR67A9FI2CGnxRRHjnTfa3m6LulwNATA==
 498 |   dependencies:
 499 |     "@oclif/errors" "^1.3.5"
 500 |     "@oclif/parser" "^3.8.0"
 501 |     debug "^4.1.1"
 502 |     globby "^11.0.1"
 503 |     is-wsl "^2.1.1"
 504 |     tslib "^2.3.1"
 505 | 
 506 | "@oclif/errors@1.3.5", "@oclif/errors@^1.3.3", "@oclif/errors@^1.3.5":
 507 |   version "1.3.5"
 508 |   resolved "https://registry.yarnpkg.com/@oclif/errors/-/errors-1.3.5.tgz#a1e9694dbeccab10fe2fe15acb7113991bed636c"
 509 |   integrity sha512-OivucXPH/eLLlOT7FkCMoZXiaVYf8I/w1eTAM1+gKzfhALwWTusxEx7wBmW0uzvkSg/9ovWLycPaBgJbM3LOCQ==
 510 |   dependencies:
 511 |     clean-stack "^3.0.0"
 512 |     fs-extra "^8.1"
 513 |     indent-string "^4.0.0"
 514 |     strip-ansi "^6.0.0"
 515 |     wrap-ansi "^7.0.0"
 516 | 
 517 | "@oclif/help@^1.0.1":
 518 |   version "1.0.1"
 519 |   resolved "https://registry.yarnpkg.com/@oclif/help/-/help-1.0.1.tgz#fd96a3dd9fb2314479e6c8584c91b63754a7dff5"
 520 |   integrity sha512-8rsl4RHL5+vBUAKBL6PFI3mj58hjPCp2VYyXD4TAa7IMStikFfOH2gtWmqLzIlxAED2EpD0dfYwo9JJxYsH7Aw==
 521 |   dependencies:
 522 |     "@oclif/config" "1.18.2"
 523 |     "@oclif/errors" "1.3.5"
 524 |     chalk "^4.1.2"
 525 |     indent-string "^4.0.0"
 526 |     lodash "^4.17.21"
 527 |     string-width "^4.2.0"
 528 |     strip-ansi "^6.0.0"
 529 |     widest-line "^3.1.0"
 530 |     wrap-ansi "^6.2.0"
 531 | 
 532 | "@oclif/linewrap@^1.0.0":
 533 |   version "1.0.0"
 534 |   resolved "https://registry.yarnpkg.com/@oclif/linewrap/-/linewrap-1.0.0.tgz#aedcb64b479d4db7be24196384897b5000901d91"
 535 |   integrity sha512-Ups2dShK52xXa8w6iBWLgcjPJWjais6KPJQq3gQ/88AY6BXoTX+MIGFPrWQO1KLMiQfoTpcLnUwloN4brrVUHw==
 536 | 
 537 | "@oclif/parser@^3.8.0", "@oclif/parser@^3.8.6":
 538 |   version "3.8.7"
 539 |   resolved "https://registry.yarnpkg.com/@oclif/parser/-/parser-3.8.7.tgz#236d48db05d0b00157d3b42d31f9dac7550d2a7c"
 540 |   integrity sha512-b11xBmIUK+LuuwVGJpFs4LwQN2xj2cBWj2c4z1FtiXGrJ85h9xV6q+k136Hw0tGg1jQoRXuvuBnqQ7es7vO9/Q==
 541 |   dependencies:
 542 |     "@oclif/errors" "^1.3.5"
 543 |     "@oclif/linewrap" "^1.0.0"
 544 |     chalk "^4.1.0"
 545 |     tslib "^2.3.1"
 546 | 
 547 | "@oclif/plugin-help@^3":
 548 |   version "3.3.1"
 549 |   resolved "https://registry.yarnpkg.com/@oclif/plugin-help/-/plugin-help-3.3.1.tgz#36adb4e0173f741df409bb4b69036d24a53bfb24"
 550 |   integrity sha512-QuSiseNRJygaqAdABYFWn/H1CwIZCp9zp/PLid6yXvy6VcQV7OenEFF5XuYaCvSARe2Tg9r8Jqls5+fw1A9CbQ==
 551 |   dependencies:
 552 |     "@oclif/command" "^1.8.15"
 553 |     "@oclif/config" "1.18.2"
 554 |     "@oclif/errors" "1.3.5"
 555 |     "@oclif/help" "^1.0.1"
 556 |     chalk "^4.1.2"
 557 |     indent-string "^4.0.0"
 558 |     lodash "^4.17.21"
 559 |     string-width "^4.2.0"
 560 |     strip-ansi "^6.0.0"
 561 |     widest-line "^3.1.0"
 562 |     wrap-ansi "^6.2.0"
 563 | 
 564 | "@sindresorhus/is@^0.14.0":
 565 |   version "0.14.0"
 566 |   resolved "https://registry.yarnpkg.com/@sindresorhus/is/-/is-0.14.0.tgz#9fb3a3cf3132328151f353de4632e01e52102bea"
 567 |   integrity sha512-9NET910DNaIPngYnLLPeg+Ogzqsi9uM4mSboU5y6p8S5DzMTVEsJZrawi+BoDNUVBa2DhJqQYUFvMDfgU062LQ==
 568 | 
 569 | "@szmarczak/http-timer@^1.1.2":
 570 |   version "1.1.2"
 571 |   resolved "https://registry.yarnpkg.com/@szmarczak/http-timer/-/http-timer-1.1.2.tgz#b1665e2c461a2cd92f4c1bbf50d5454de0d4b421"
 572 |   integrity sha512-XIB2XbzHTN6ieIjfIMV9hlVcfPU26s2vafYWQcZHWXHOxiaRZYEDKEwdl129Zyg50+foYV2jCgtrqSA6qNuNSA==
 573 |   dependencies:
 574 |     defer-to-connect "^1.0.1"
 575 | 
 576 | "@tanstack/match-sorter-utils@^8.15.1":
 577 |   version "8.15.1"
 578 |   resolved "https://registry.yarnpkg.com/@tanstack/match-sorter-utils/-/match-sorter-utils-8.15.1.tgz#715e028ff43cf79ece10bd5a757047a1016c3bba"
 579 |   integrity sha512-PnVV3d2poenUM31ZbZi/yXkBu3J7kd5k2u51CGwwNojag451AjTH9N6n41yjXz2fpLeewleyLBmNS6+HcGDlXw==
 580 |   dependencies:
 581 |     remove-accents "0.5.0"
 582 | 
 583 | "@tanstack/react-table@^8.11.2":
 584 |   version "8.16.0"
 585 |   resolved "https://registry.yarnpkg.com/@tanstack/react-table/-/react-table-8.16.0.tgz#92151210ff99d6925353d7a2205735d9c31af48c"
 586 |   integrity sha512-rKRjnt8ostqN2fercRVOIH/dq7MAmOENCMvVlKx6P9Iokhh6woBGnIZEkqsY/vEJf1jN3TqLOb34xQGLVRuhAg==
 587 |   dependencies:
 588 |     "@tanstack/table-core" "8.16.0"
 589 | 
 590 | "@tanstack/table-core@8.16.0":
 591 |   version "8.16.0"
 592 |   resolved "https://registry.yarnpkg.com/@tanstack/table-core/-/table-core-8.16.0.tgz#7b58018dd3cec8e0015fe22d6bb24d18d33c891f"
 593 |   integrity sha512-dCG8vQGk4js5v88/k83tTedWOwjGnIyONrKpHpfmSJB8jwFHl8GSu1sBBxbtACVAPtAQgwNxl0rw1d3RqRM1Tg==
 594 | 
 595 | "@trivago/prettier-plugin-sort-imports@^4.3.0":
 596 |   version "4.3.0"
 597 |   resolved "https://registry.yarnpkg.com/@trivago/prettier-plugin-sort-imports/-/prettier-plugin-sort-imports-4.3.0.tgz#725f411646b3942193a37041c84e0b2116339789"
 598 |   integrity sha512-r3n0onD3BTOVUNPhR4lhVK4/pABGpbA7bW3eumZnYdKaHkf1qEC+Mag6DPbGNuuh0eG8AaYj+YqmVHSiGslaTQ==
 599 |   dependencies:
 600 |     "@babel/generator" "7.17.7"
 601 |     "@babel/parser" "^7.20.5"
 602 |     "@babel/traverse" "7.23.2"
 603 |     "@babel/types" "7.17.0"
 604 |     javascript-natural-sort "0.7.1"
 605 |     lodash "^4.17.21"
 606 | 
 607 | "@types/box-intersect@^1.0.0":
 608 |   version "1.0.3"
 609 |   resolved "https://registry.yarnpkg.com/@types/box-intersect/-/box-intersect-1.0.3.tgz#2e72ebaaf58269073c0fc60cf91872dceb8d4cad"
 610 |   integrity sha512-CI5Aw9bypQWj3QyOsMZQmcaPlzxiWBzkovnfUiXC20GTRkod7X3t4dvd0DX242E6itrh5WKLQ19uLyC41Tru7w==
 611 | 
 612 | "@types/codemirror@5.60.8":
 613 |   version "5.60.8"
 614 |   resolved "https://registry.yarnpkg.com/@types/codemirror/-/codemirror-5.60.8.tgz#b647d04b470e8e1836dd84b2879988fc55c9de68"
 615 |   integrity sha512-VjFgDF/eB+Aklcy15TtOTLQeMjTo07k7KAjql8OK5Dirr7a6sJY4T1uVBDuTVG9VEmn1uUsohOpYnVfgC6/jyw==
 616 |   dependencies:
 617 |     "@types/tern" "*"
 618 | 
 619 | "@types/debug@^4.0.0":
 620 |   version "4.1.12"
 621 |   resolved "https://registry.yarnpkg.com/@types/debug/-/debug-4.1.12.tgz#a155f21690871953410df4b6b6f53187f0500917"
 622 |   integrity sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==
 623 |   dependencies:
 624 |     "@types/ms" "*"
 625 | 
 626 | "@types/estree@*":
 627 |   version "1.0.5"
 628 |   resolved "https://registry.yarnpkg.com/@types/estree/-/estree-1.0.5.tgz#a6ce3e556e00fd9895dd872dd172ad0d4bd687f4"
 629 |   integrity sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==
 630 | 
 631 | "@types/jquery@*":
 632 |   version "3.5.29"
 633 |   resolved "https://registry.yarnpkg.com/@types/jquery/-/jquery-3.5.29.tgz#3c06a1f519cd5fc3a7a108971436c00685b5dcea"
 634 |   integrity sha512-oXQQC9X9MOPRrMhPHHOsXqeQDnWeCDT3PelUIg/Oy8FAbzSZtFHRjc7IpbfFVmpLtJ+UOoywpRsuO5Jxjybyeg==
 635 |   dependencies:
 636 |     "@types/sizzle" "*"
 637 | 
 638 | "@types/json-schema@^7.0.9":
 639 |   version "7.0.15"
 640 |   resolved "https://registry.yarnpkg.com/@types/json-schema/-/json-schema-7.0.15.tgz#596a1747233694d50f6ad8a7869fcb6f56cf5841"
 641 |   integrity sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==
 642 | 
 643 | "@types/less@^3.0.6":
 644 |   version "3.0.6"
 645 |   resolved "https://registry.yarnpkg.com/@types/less/-/less-3.0.6.tgz#279b51245ba787c810a0d286226c5900cd5e6765"
 646 |   integrity sha512-PecSzorDGdabF57OBeQO/xFbAkYWo88g4Xvnsx7LRwqLC17I7OoKtA3bQB9uXkY6UkMWCOsA8HSVpaoitscdXw==
 647 | 
 648 | "@types/mark.js@^8.11.5":
 649 |   version "8.11.12"
 650 |   resolved "https://registry.yarnpkg.com/@types/mark.js/-/mark.js-8.11.12.tgz#72d37a0f25755a0b12affcbeb0d24290fd77f522"
 651 |   integrity sha512-244ZnaIBpz4c6xutliAnYVZp6xJlmC569jZqnR3ElO1Y01ooYASSVQEqpd2x0A2UfrgVMs5V9/9tUAdZaDMytQ==
 652 |   dependencies:
 653 |     "@types/jquery" "*"
 654 | 
 655 | "@types/mdast@^3.0.0":
 656 |   version "3.0.15"
 657 |   resolved "https://registry.yarnpkg.com/@types/mdast/-/mdast-3.0.15.tgz#49c524a263f30ffa28b71ae282f813ed000ab9f5"
 658 |   integrity sha512-LnwD+mUEfxWMa1QpDraczIn6k0Ee3SMicuYSSzS6ZYl2gKS09EClnJYGd8Du6rfc5r/GZEk5o1mRb8TaTj03sQ==
 659 |   dependencies:
 660 |     "@types/unist" "^2"
 661 | 
 662 | "@types/ms@*":
 663 |   version "0.7.34"
 664 |   resolved "https://registry.yarnpkg.com/@types/ms/-/ms-0.7.34.tgz#10964ba0dee6ac4cd462e2795b6bebd407303433"
 665 |   integrity sha512-nG96G3Wp6acyAgJqGasjODb+acrI7KltPiRxzHPXnP3NgI28bpQDRv53olbqGXbfcgF5aiiHmO3xpwEpS5Ld9g==
 666 | 
 667 | "@types/node@^14.14.37":
 668 |   version "14.18.21"
 669 |   resolved "https://registry.yarnpkg.com/@types/node/-/node-14.18.21.tgz#0155ee46f6be28b2ff0342ca1a9b9fd4468bef41"
 670 |   integrity sha512-x5W9s+8P4XteaxT/jKF0PSb7XEvo5VmqEWgsMlyeY4ZlLK8I6aH6g5TPPyDlLAep+GYf4kefb7HFyc7PAO3m+Q==
 671 | 
 672 | "@types/parse-json@^4.0.0":
 673 |   version "4.0.0"
 674 |   resolved "https://registry.yarnpkg.com/@types/parse-json/-/parse-json-4.0.0.tgz#2f8bb441434d163b35fb8ffdccd7138927ffb8c0"
 675 |   integrity sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==
 676 | 
 677 | "@types/raf-schd@^4.0.1":
 678 |   version "4.0.3"
 679 |   resolved "https://registry.yarnpkg.com/@types/raf-schd/-/raf-schd-4.0.3.tgz#545c885a45fcb779a3da616dd0774d32b7175be0"
 680 |   integrity sha512-dXFOLpls9K3eXBupCtMhvtbPtWVAkwa5tkqdMj1uVwYBYdPu2kVX1mGVp2qFpfeNNub85B0vzFfxA4URA0TnPA==
 681 | 
 682 | "@types/semver@^7.3.12":
 683 |   version "7.5.6"
 684 |   resolved "https://registry.yarnpkg.com/@types/semver/-/semver-7.5.6.tgz#c65b2bfce1bec346582c07724e3f8c1017a20339"
 685 |   integrity sha512-dn1l8LaMea/IjDoHNd9J52uBbInB796CDffS6VdIxvqYCPSG0V0DzHp76GpaWnlhg88uYyPbXCDIowa86ybd5A==
 686 | 
 687 | "@types/sizzle@*":
 688 |   version "2.3.8"
 689 |   resolved "https://registry.yarnpkg.com/@types/sizzle/-/sizzle-2.3.8.tgz#518609aefb797da19bf222feb199e8f653ff7627"
 690 |   integrity sha512-0vWLNK2D5MT9dg0iOo8GlKguPAU02QjmZitPEsXRuJXU/OGIOt9vT9Fc26wtYuavLxtO45v9PGleoL9Z0k1LHg==
 691 | 
 692 | "@types/tern@*":
 693 |   version "0.23.9"
 694 |   resolved "https://registry.yarnpkg.com/@types/tern/-/tern-0.23.9.tgz#6f6093a4a9af3e6bb8dde528e024924d196b367c"
 695 |   integrity sha512-ypzHFE/wBzh+BlH6rrBgS5I/Z7RD21pGhZ2rltb/+ZrVM1awdZwjx7hE5XfuYgHWk9uvV5HLZN3SloevCAp3Bw==
 696 |   dependencies:
 697 |     "@types/estree" "*"
 698 | 
 699 | "@types/unist@^2", "@types/unist@^2.0.0":
 700 |   version "2.0.10"
 701 |   resolved "https://registry.yarnpkg.com/@types/unist/-/unist-2.0.10.tgz#04ffa7f406ab628f7f7e97ca23e290cd8ab15efc"
 702 |   integrity sha512-IfYcSBWE3hLpBg8+X2SEa8LVkJdJEkT2Ese2aaLs3ptGdVtABxndrMaxuFlQ1qdFf9Q5rDvDpxI3WwgvKFAsQA==
 703 | 
 704 | "@typescript-eslint/eslint-plugin@^5.8.1":
 705 |   version "5.62.0"
 706 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.62.0.tgz#aeef0328d172b9e37d9bab6dbc13b87ed88977db"
 707 |   integrity sha512-TiZzBSJja/LbhNPvk6yc0JrX9XqhQ0hdh6M2svYfsHGejaKFIAGd9MQ+ERIMzLGlN/kZoYIgdxFV0PuljTKXag==
 708 |   dependencies:
 709 |     "@eslint-community/regexpp" "^4.4.0"
 710 |     "@typescript-eslint/scope-manager" "5.62.0"
 711 |     "@typescript-eslint/type-utils" "5.62.0"
 712 |     "@typescript-eslint/utils" "5.62.0"
 713 |     debug "^4.3.4"
 714 |     graphemer "^1.4.0"
 715 |     ignore "^5.2.0"
 716 |     natural-compare-lite "^1.4.0"
 717 |     semver "^7.3.7"
 718 |     tsutils "^3.21.0"
 719 | 
 720 | "@typescript-eslint/parser@^5.8.1":
 721 |   version "5.62.0"
 722 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/parser/-/parser-5.62.0.tgz#1b63d082d849a2fcae8a569248fbe2ee1b8a56c7"
 723 |   integrity sha512-VlJEV0fOQ7BExOsHYAGrgbEiZoi8D+Bl2+f6V2RrXerRSylnp+ZBHmPvaIa8cz0Ajx7WO7Z5RqfgYg7ED1nRhA==
 724 |   dependencies:
 725 |     "@typescript-eslint/scope-manager" "5.62.0"
 726 |     "@typescript-eslint/types" "5.62.0"
 727 |     "@typescript-eslint/typescript-estree" "5.62.0"
 728 |     debug "^4.3.4"
 729 | 
 730 | "@typescript-eslint/scope-manager@5.62.0":
 731 |   version "5.62.0"
 732 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/scope-manager/-/scope-manager-5.62.0.tgz#d9457ccc6a0b8d6b37d0eb252a23022478c5460c"
 733 |   integrity sha512-VXuvVvZeQCQb5Zgf4HAxc04q5j+WrNAtNh9OwCsCgpKqESMTu3tF/jhZ3xG6T4NZwWl65Bg8KuS2uEvhSfLl0w==
 734 |   dependencies:
 735 |     "@typescript-eslint/types" "5.62.0"
 736 |     "@typescript-eslint/visitor-keys" "5.62.0"
 737 | 
 738 | "@typescript-eslint/type-utils@5.62.0":
 739 |   version "5.62.0"
 740 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/type-utils/-/type-utils-5.62.0.tgz#286f0389c41681376cdad96b309cedd17d70346a"
 741 |   integrity sha512-xsSQreu+VnfbqQpW5vnCJdq1Z3Q0U31qiWmRhr98ONQmcp/yhiPJFPq8MXiJVLiksmOKSjIldZzkebzHuCGzew==
 742 |   dependencies:
 743 |     "@typescript-eslint/typescript-estree" "5.62.0"
 744 |     "@typescript-eslint/utils" "5.62.0"
 745 |     debug "^4.3.4"
 746 |     tsutils "^3.21.0"
 747 | 
 748 | "@typescript-eslint/types@5.62.0":
 749 |   version "5.62.0"
 750 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/types/-/types-5.62.0.tgz#258607e60effa309f067608931c3df6fed41fd2f"
 751 |   integrity sha512-87NVngcbVXUahrRTqIK27gD2t5Cu1yuCXxbLcFtCzZGlfyVWWh8mLHkoxzjsB6DDNnvdL+fW8MiwPEJyGJQDgQ==
 752 | 
 753 | "@typescript-eslint/typescript-estree@5.62.0":
 754 |   version "5.62.0"
 755 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/typescript-estree/-/typescript-estree-5.62.0.tgz#7d17794b77fabcac615d6a48fb143330d962eb9b"
 756 |   integrity sha512-CmcQ6uY7b9y694lKdRB8FEel7JbU/40iSAPomu++SjLMntB+2Leay2LO6i8VnJk58MtE9/nQSFIH6jpyRWyYzA==
 757 |   dependencies:
 758 |     "@typescript-eslint/types" "5.62.0"
 759 |     "@typescript-eslint/visitor-keys" "5.62.0"
 760 |     debug "^4.3.4"
 761 |     globby "^11.1.0"
 762 |     is-glob "^4.0.3"
 763 |     semver "^7.3.7"
 764 |     tsutils "^3.21.0"
 765 | 
 766 | "@typescript-eslint/utils@5.62.0":
 767 |   version "5.62.0"
 768 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/utils/-/utils-5.62.0.tgz#141e809c71636e4a75daa39faed2fb5f4b10df86"
 769 |   integrity sha512-n8oxjeb5aIbPFEtmQxQYOLI0i9n5ySBEY/ZEHHZqKQSFnxio1rv6dthascc9dLuwrL0RC5mPCxB7vnAVGAYWAQ==
 770 |   dependencies:
 771 |     "@eslint-community/eslint-utils" "^4.2.0"
 772 |     "@types/json-schema" "^7.0.9"
 773 |     "@types/semver" "^7.3.12"
 774 |     "@typescript-eslint/scope-manager" "5.62.0"
 775 |     "@typescript-eslint/types" "5.62.0"
 776 |     "@typescript-eslint/typescript-estree" "5.62.0"
 777 |     eslint-scope "^5.1.1"
 778 |     semver "^7.3.7"
 779 | 
 780 | "@typescript-eslint/visitor-keys@5.62.0":
 781 |   version "5.62.0"
 782 |   resolved "https://registry.yarnpkg.com/@typescript-eslint/visitor-keys/-/visitor-keys-5.62.0.tgz#2174011917ce582875954ffe2f6912d5931e353e"
 783 |   integrity sha512-07ny+LHRzQXepkGg6w0mFY41fVUNBrL2Roj/++7V1txKugfjm/Ci/qSND03r2RhlJhJYMcTn9AhhSSqQp0Ysyw==
 784 |   dependencies:
 785 |     "@typescript-eslint/types" "5.62.0"
 786 |     eslint-visitor-keys "^3.3.0"
 787 | 
 788 | "@ungap/structured-clone@^1.2.0":
 789 |   version "1.2.0"
 790 |   resolved "https://registry.yarnpkg.com/@ungap/structured-clone/-/structured-clone-1.2.0.tgz#756641adb587851b5ccb3e095daf27ae581c8406"
 791 |   integrity sha512-zuVdFrMJiuCDQUMCzQaD6KL28MjnqqN8XnAqiEq9PNm/hCPTSGfrXCOfwj1ow4LFb/tNymJPwsNbVePc1xFqrQ==
 792 | 
 793 | "@zephraph/procedure@^0.2.0":
 794 |   version "0.2.1"
 795 |   resolved "https://registry.yarnpkg.com/@zephraph/procedure/-/procedure-0.2.1.tgz#0d2ff7e396b643338c8959b321eebc023072c9e4"
 796 |   integrity sha512-8vktxm4LxiGQ/v5/9gWS76pTm5m9ioGDgc0ui9+gZzMhm31607W60fHlPNZv7WQMUf+SzjE4cZli096FLL0WGg==
 797 |   dependencies:
 798 |     endent "^2.0.1"
 799 |     stacktracey "^2.1.7"
 800 |     ts-union-tools "^0.0.1"
 801 | 
 802 | acorn-jsx@^5.3.2:
 803 |   version "5.3.2"
 804 |   resolved "https://registry.yarnpkg.com/acorn-jsx/-/acorn-jsx-5.3.2.tgz#7ed5bb55908b3b2f1bc55c6af1653bada7f07937"
 805 |   integrity sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==
 806 | 
 807 | acorn@^8.9.0:
 808 |   version "8.11.3"
 809 |   resolved "https://registry.yarnpkg.com/acorn/-/acorn-8.11.3.tgz#71e0b14e13a4ec160724b38fb7b0f233b1b81d7a"
 810 |   integrity sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==
 811 | 
 812 | ajv@^6.12.4:
 813 |   version "6.12.6"
 814 |   resolved "https://registry.yarnpkg.com/ajv/-/ajv-6.12.6.tgz#baf5a62e802b07d977034586f8c3baf5adf26df4"
 815 |   integrity sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==
 816 |   dependencies:
 817 |     fast-deep-equal "^3.1.1"
 818 |     fast-json-stable-stringify "^2.0.0"
 819 |     json-schema-traverse "^0.4.1"
 820 |     uri-js "^4.2.2"
 821 | 
 822 | animated-scroll-to@^2.2.0:
 823 |   version "2.3.0"
 824 |   resolved "https://registry.yarnpkg.com/animated-scroll-to/-/animated-scroll-to-2.3.0.tgz#01d7a82db7ace7017eae11c5ebbafd3b0270bced"
 825 |   integrity sha512-PT/5MSKCWQaK2kuOl2HT2KJMuJEvUS4/TgMhWy82c2EmF74/CIkvPBPKOvd8nMYP6Higo7xCn49/iSW9BccMoQ==
 826 | 
 827 | ansi-align@^3.0.0:
 828 |   version "3.0.1"
 829 |   resolved "https://registry.yarnpkg.com/ansi-align/-/ansi-align-3.0.1.tgz#0cdf12e111ace773a86e9a1fad1225c43cb19a59"
 830 |   integrity sha512-IOfwwBF5iczOjp/WeY4YxyjqAFMQoZufdQWDd19SEExbVLNXqvpzSJ/M7Za4/sCPmQ0+GRquoA7bGcINcxew6w==
 831 |   dependencies:
 832 |     string-width "^4.1.0"
 833 | 
 834 | ansi-colors@^4.1.1:
 835 |   version "4.1.3"
 836 |   resolved "https://registry.yarnpkg.com/ansi-colors/-/ansi-colors-4.1.3.tgz#37611340eb2243e70cc604cad35d63270d48781b"
 837 |   integrity sha512-/6w/C21Pm1A7aZitlI5Ni/2J6FFQN8i1Cvz3kHABAAbw93v/NlvKdVOqz7CCWz/3iv/JplRSEEZ83XION15ovw==
 838 | 
 839 | ansi-regex@^5.0.1:
 840 |   version "5.0.1"
 841 |   resolved "https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-5.0.1.tgz#082cb2c89c9fe8659a311a53bd6a4dc5301db304"
 842 |   integrity sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==
 843 | 
 844 | ansi-styles@^3.2.1:
 845 |   version "3.2.1"
 846 |   resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz#41fbb20243e50b12be0f04b8dedbf07520ce841d"
 847 |   integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==
 848 |   dependencies:
 849 |     color-convert "^1.9.0"
 850 | 
 851 | ansi-styles@^4.0.0, ansi-styles@^4.1.0:
 852 |   version "4.3.0"
 853 |   resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-4.3.0.tgz#edd803628ae71c04c85ae7a0906edad34b648937"
 854 |   integrity sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==
 855 |   dependencies:
 856 |     color-convert "^2.0.1"
 857 | 
 858 | argparse@^2.0.1:
 859 |   version "2.0.1"
 860 |   resolved "https://registry.yarnpkg.com/argparse/-/argparse-2.0.1.tgz#246f50f3ca78a3240f6c997e8a9bd1eac49e4b38"
 861 |   integrity sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==
 862 | 
 863 | array-buffer-byte-length@^1.0.1:
 864 |   version "1.0.1"
 865 |   resolved "https://registry.yarnpkg.com/array-buffer-byte-length/-/array-buffer-byte-length-1.0.1.tgz#1e5583ec16763540a27ae52eed99ff899223568f"
 866 |   integrity sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==
 867 |   dependencies:
 868 |     call-bind "^1.0.5"
 869 |     is-array-buffer "^3.0.4"
 870 | 
 871 | array-includes@^3.1.6, array-includes@^3.1.7:
 872 |   version "3.1.8"
 873 |   resolved "https://registry.yarnpkg.com/array-includes/-/array-includes-3.1.8.tgz#5e370cbe172fdd5dd6530c1d4aadda25281ba97d"
 874 |   integrity sha512-itaWrbYbqpGXkGhZPGUulwnhVf5Hpy1xiCFsGqyIGglbBxmG5vSjxQen3/WGOjPpNEv1RtBLKxbmVXm8HpJStQ==
 875 |   dependencies:
 876 |     call-bind "^1.0.7"
 877 |     define-properties "^1.2.1"
 878 |     es-abstract "^1.23.2"
 879 |     es-object-atoms "^1.0.0"
 880 |     get-intrinsic "^1.2.4"
 881 |     is-string "^1.0.7"
 882 | 
 883 | array-union@^2.1.0:
 884 |   version "2.1.0"
 885 |   resolved "https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d"
 886 |   integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==
 887 | 
 888 | array.prototype.findlast@^1.2.4:
 889 |   version "1.2.5"
 890 |   resolved "https://registry.yarnpkg.com/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz#3e4fbcb30a15a7f5bf64cf2faae22d139c2e4904"
 891 |   integrity sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==
 892 |   dependencies:
 893 |     call-bind "^1.0.7"
 894 |     define-properties "^1.2.1"
 895 |     es-abstract "^1.23.2"
 896 |     es-errors "^1.3.0"
 897 |     es-object-atoms "^1.0.0"
 898 |     es-shim-unscopables "^1.0.2"
 899 | 
 900 | array.prototype.flat@^1.3.1:
 901 |   version "1.3.2"
 902 |   resolved "https://registry.yarnpkg.com/array.prototype.flat/-/array.prototype.flat-1.3.2.tgz#1476217df8cff17d72ee8f3ba06738db5b387d18"
 903 |   integrity sha512-djYB+Zx2vLewY8RWlNCUdHjDXs2XOgm602S9E7P/UpHgfeHL00cRiIF+IN/G/aUJ7kGPb6yO/ErDI5V2s8iycA==
 904 |   dependencies:
 905 |     call-bind "^1.0.2"
 906 |     define-properties "^1.2.0"
 907 |     es-abstract "^1.22.1"
 908 |     es-shim-unscopables "^1.0.0"
 909 | 
 910 | array.prototype.flatmap@^1.3.2:
 911 |   version "1.3.2"
 912 |   resolved "https://registry.yarnpkg.com/array.prototype.flatmap/-/array.prototype.flatmap-1.3.2.tgz#c9a7c6831db8e719d6ce639190146c24bbd3e527"
 913 |   integrity sha512-Ewyx0c9PmpcsByhSW4r+9zDU7sGjFc86qf/kKtuSCRdhfbk0SNLLkaT5qvcHnRGgc5NP/ly/y+qkXkqONX54CQ==
 914 |   dependencies:
 915 |     call-bind "^1.0.2"
 916 |     define-properties "^1.2.0"
 917 |     es-abstract "^1.22.1"
 918 |     es-shim-unscopables "^1.0.0"
 919 | 
 920 | array.prototype.toreversed@^1.1.2:
 921 |   version "1.1.2"
 922 |   resolved "https://registry.yarnpkg.com/array.prototype.toreversed/-/array.prototype.toreversed-1.1.2.tgz#b989a6bf35c4c5051e1dc0325151bf8088954eba"
 923 |   integrity sha512-wwDCoT4Ck4Cz7sLtgUmzR5UV3YF5mFHUlbChCzZBQZ+0m2cl/DH3tKgvphv1nKgFsJ48oCSg6p91q2Vm0I/ZMA==
 924 |   dependencies:
 925 |     call-bind "^1.0.2"
 926 |     define-properties "^1.2.0"
 927 |     es-abstract "^1.22.1"
 928 |     es-shim-unscopables "^1.0.0"
 929 | 
 930 | array.prototype.tosorted@^1.1.3:
 931 |   version "1.1.3"
 932 |   resolved "https://registry.yarnpkg.com/array.prototype.tosorted/-/array.prototype.tosorted-1.1.3.tgz#c8c89348337e51b8a3c48a9227f9ce93ceedcba8"
 933 |   integrity sha512-/DdH4TiTmOKzyQbp/eadcCVexiCb36xJg7HshYOYJnNZFDj33GEv0P7GxsynpShhq4OLYJzbGcBDkLsDt7MnNg==
 934 |   dependencies:
 935 |     call-bind "^1.0.5"
 936 |     define-properties "^1.2.1"
 937 |     es-abstract "^1.22.3"
 938 |     es-errors "^1.1.0"
 939 |     es-shim-unscopables "^1.0.2"
 940 | 
 941 | arraybuffer.prototype.slice@^1.0.3:
 942 |   version "1.0.3"
 943 |   resolved "https://registry.yarnpkg.com/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.3.tgz#097972f4255e41bc3425e37dc3f6421cf9aefde6"
 944 |   integrity sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==
 945 |   dependencies:
 946 |     array-buffer-byte-length "^1.0.1"
 947 |     call-bind "^1.0.5"
 948 |     define-properties "^1.2.1"
 949 |     es-abstract "^1.22.3"
 950 |     es-errors "^1.2.1"
 951 |     get-intrinsic "^1.2.3"
 952 |     is-array-buffer "^3.0.4"
 953 |     is-shared-array-buffer "^1.0.2"
 954 | 
 955 | as-table@^1.0.36:
 956 |   version "1.0.55"
 957 |   resolved "https://registry.yarnpkg.com/as-table/-/as-table-1.0.55.tgz#dc984da3937745de902cea1d45843c01bdbbec4f"
 958 |   integrity sha512-xvsWESUJn0JN421Xb9MQw6AsMHRCUknCe0Wjlxvjud80mU4E6hQf1A6NzQKcYNmYw62MfzEtXc+badstZP3JpQ==
 959 |   dependencies:
 960 |     printable-characters "^1.0.42"
 961 | 
 962 | available-typed-arrays@^1.0.7:
 963 |   version "1.0.7"
 964 |   resolved "https://registry.yarnpkg.com/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz#a5cc375d6a03c2efc87a553f3e0b1522def14846"
 965 |   integrity sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==
 966 |   dependencies:
 967 |     possible-typed-array-names "^1.0.0"
 968 | 
 969 | balanced-match@^1.0.0:
 970 |   version "1.0.2"
 971 |   resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.2.tgz#e83e3a7e3f300b34cb9d87f615fa0cbf357690ee"
 972 |   integrity sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==
 973 | 
 974 | bit-twiddle@^1.0.0, bit-twiddle@^1.0.2:
 975 |   version "1.0.2"
 976 |   resolved "https://registry.yarnpkg.com/bit-twiddle/-/bit-twiddle-1.0.2.tgz#0c6c1fabe2b23d17173d9a61b7b7093eb9e1769e"
 977 |   integrity sha512-B9UhK0DKFZhoTFcfvAzhqsjStvGJp9vYWf3+6SNTtdSQnvIgfkHbgHrg/e4+TH71N2GDu8tpmCVoyfrL1d7ntA==
 978 | 
 979 | box-intersect@^1.0.2:
 980 |   version "1.0.2"
 981 |   resolved "https://registry.yarnpkg.com/box-intersect/-/box-intersect-1.0.2.tgz#4693ad63e828868d0654b114e09364d6281f3fbd"
 982 |   integrity sha512-yJeMwlmFPG1gIa7Rs/cGXeI6iOj6Qz5MG5PE61xLKpElUGzmJ4abm+qsLpzxKJFpsSDq742BQEocr8dI2t8Nxw==
 983 |   dependencies:
 984 |     bit-twiddle "^1.0.2"
 985 |     typedarray-pool "^1.1.0"
 986 | 
 987 | boxen@^5.0.0:
 988 |   version "5.1.2"
 989 |   resolved "https://registry.yarnpkg.com/boxen/-/boxen-5.1.2.tgz#788cb686fc83c1f486dfa8a40c68fc2b831d2b50"
 990 |   integrity sha512-9gYgQKXx+1nP8mP7CzFyaUARhg7D3n1dF/FnErWmu9l6JvGpNUN278h0aSb+QjoiKSWG+iZ3uHrcqk0qrY9RQQ==
 991 |   dependencies:
 992 |     ansi-align "^3.0.0"
 993 |     camelcase "^6.2.0"
 994 |     chalk "^4.1.0"
 995 |     cli-boxes "^2.2.1"
 996 |     string-width "^4.2.2"
 997 |     type-fest "^0.20.2"
 998 |     widest-line "^3.1.0"
 999 |     wrap-ansi "^7.0.0"
1000 | 
1001 | brace-expansion@^1.1.7:
1002 |   version "1.1.11"
1003 |   resolved "https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd"
1004 |   integrity sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==
1005 |   dependencies:
1006 |     balanced-match "^1.0.0"
1007 |     concat-map "0.0.1"
1008 | 
1009 | braces@^3.0.2:
1010 |   version "3.0.2"
1011 |   resolved "https://registry.yarnpkg.com/braces/-/braces-3.0.2.tgz#3454e1a462ee8d599e236df336cd9ea4f8afe107"
1012 |   integrity sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==
1013 |   dependencies:
1014 |     fill-range "^7.0.1"
1015 | 
1016 | builtin-modules@^3.3.0:
1017 |   version "3.3.0"
1018 |   resolved "https://registry.yarnpkg.com/builtin-modules/-/builtin-modules-3.3.0.tgz#cae62812b89801e9656336e46223e030386be7b6"
1019 |   integrity sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==
1020 | 
1021 | cacheable-request@^6.0.0:
1022 |   version "6.1.0"
1023 |   resolved "https://registry.yarnpkg.com/cacheable-request/-/cacheable-request-6.1.0.tgz#20ffb8bd162ba4be11e9567d823db651052ca912"
1024 |   integrity sha512-Oj3cAGPCqOZX7Rz64Uny2GYAZNliQSqfbePrgAQ1wKAihYmCUnraBtJtKcGR4xz7wF+LoJC+ssFZvv5BgF9Igg==
1025 |   dependencies:
1026 |     clone-response "^1.0.2"
1027 |     get-stream "^5.1.0"
1028 |     http-cache-semantics "^4.0.0"
1029 |     keyv "^3.0.0"
1030 |     lowercase-keys "^2.0.0"
1031 |     normalize-url "^4.1.0"
1032 |     responselike "^1.0.2"
1033 | 
1034 | call-bind@^1.0.2, call-bind@^1.0.5, call-bind@^1.0.6, call-bind@^1.0.7:
1035 |   version "1.0.7"
1036 |   resolved "https://registry.yarnpkg.com/call-bind/-/call-bind-1.0.7.tgz#06016599c40c56498c18769d2730be242b6fa3b9"
1037 |   integrity sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==
1038 |   dependencies:
1039 |     es-define-property "^1.0.0"
1040 |     es-errors "^1.3.0"
1041 |     function-bind "^1.1.2"
1042 |     get-intrinsic "^1.2.4"
1043 |     set-function-length "^1.2.1"
1044 | 
1045 | callsites@^3.0.0:
1046 |   version "3.1.0"
1047 |   resolved "https://registry.yarnpkg.com/callsites/-/callsites-3.1.0.tgz#b3630abd8943432f54b3f0519238e33cd7df2f73"
1048 |   integrity sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==
1049 | 
1050 | camelcase@^5.0.0:
1051 |   version "5.3.1"
1052 |   resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-5.3.1.tgz#e3c9b31569e106811df242f715725a1f4c494320"
1053 |   integrity sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==
1054 | 
1055 | camelcase@^6.2.0:
1056 |   version "6.3.0"
1057 |   resolved "https://registry.yarnpkg.com/camelcase/-/camelcase-6.3.0.tgz#5685b95eb209ac9c0c177467778c9c84df58ba9a"
1058 |   integrity sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==
1059 | 
1060 | chalk@2.4.2, chalk@^2.0.0, chalk@^2.4.2:
1061 |   version "2.4.2"
1062 |   resolved "https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz#cd42541677a54333cf541a49108c1432b44c9424"
1063 |   integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==
1064 |   dependencies:
1065 |     ansi-styles "^3.2.1"
1066 |     escape-string-regexp "^1.0.5"
1067 |     supports-color "^5.3.0"
1068 | 
1069 | chalk@^4.0.0, chalk@^4.1.0, chalk@^4.1.2:
1070 |   version "4.1.2"
1071 |   resolved "https://registry.yarnpkg.com/chalk/-/chalk-4.1.2.tgz#aac4e2b7734a740867aeb16bf02aad556a1e7a01"
1072 |   integrity sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==
1073 |   dependencies:
1074 |     ansi-styles "^4.1.0"
1075 |     supports-color "^7.1.0"
1076 | 
1077 | character-entities@^2.0.0:
1078 |   version "2.0.2"
1079 |   resolved "https://registry.yarnpkg.com/character-entities/-/character-entities-2.0.2.tgz#2d09c2e72cd9523076ccb21157dff66ad43fcc22"
1080 |   integrity sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==
1081 | 
1082 | choices.js@9.0.1:
1083 |   version "9.0.1"
1084 |   resolved "https://registry.yarnpkg.com/choices.js/-/choices.js-9.0.1.tgz#745fb29af8670428fdc0bf1cc9dfaa404e9d0510"
1085 |   integrity sha512-JgpeDY0Tmg7tqY6jaW/druSklJSt7W68tXFJIw0GSGWmO37SDAL8o60eICNGbzIODjj02VNNtf5h6TgoHDtCsA==
1086 |   dependencies:
1087 |     deepmerge "^4.2.0"
1088 |     fuse.js "^3.4.5"
1089 |     redux "^4.0.4"
1090 | 
1091 | ci-info@^2.0.0:
1092 |   version "2.0.0"
1093 |   resolved "https://registry.yarnpkg.com/ci-info/-/ci-info-2.0.0.tgz#67a9e964be31a51e15e5010d58e6f12834002f46"
1094 |   integrity sha512-5tK7EtrZ0N+OLFMthtqOj4fI2Jeb88C4CAZPu25LDVUgXJ0A3Js4PMGqrn0JU1W0Mh1/Z8wZzYPxqUrXeBboCQ==
1095 | 
1096 | classcat@^5.0.3:
1097 |   version "5.0.5"
1098 |   resolved "https://registry.yarnpkg.com/classcat/-/classcat-5.0.5.tgz#8c209f359a93ac302404a10161b501eba9c09c77"
1099 |   integrity sha512-JhZUT7JFcQy/EzW605k/ktHtncoo9vnyW/2GspNYwFlN1C/WmjuV/xtS04e9SOkL2sTdw0VAZ2UGCcQ9lR6p6w==
1100 | 
1101 | clean-stack@^3.0.0:
1102 |   version "3.0.1"
1103 |   resolved "https://registry.yarnpkg.com/clean-stack/-/clean-stack-3.0.1.tgz#155bf0b2221bf5f4fba89528d24c5953f17fe3a8"
1104 |   integrity sha512-lR9wNiMRcVQjSB3a7xXGLuz4cr4wJuuXlaAEbRutGowQTmlp7R72/DOgN21e8jdwblMWl9UOJMJXarX94pzKdg==
1105 |   dependencies:
1106 |     escape-string-regexp "4.0.0"
1107 | 
1108 | cli-boxes@^2.2.1:
1109 |   version "2.2.1"
1110 |   resolved "https://registry.yarnpkg.com/cli-boxes/-/cli-boxes-2.2.1.tgz#ddd5035d25094fce220e9cab40a45840a440318f"
1111 |   integrity sha512-y4coMcylgSCdVinjiDBuR8PCC2bLjyGTwEmPb9NHR/QaNU6EUOXcTY/s6VjGMD6ENSEaeQYHCY0GNGS5jfMwPw==
1112 | 
1113 | cliui@^6.0.0:
1114 |   version "6.0.0"
1115 |   resolved "https://registry.yarnpkg.com/cliui/-/cliui-6.0.0.tgz#511d702c0c4e41ca156d7d0e96021f23e13225b1"
1116 |   integrity sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==
1117 |   dependencies:
1118 |     string-width "^4.2.0"
1119 |     strip-ansi "^6.0.0"
1120 |     wrap-ansi "^6.2.0"
1121 | 
1122 | clone-response@^1.0.2:
1123 |   version "1.0.2"
1124 |   resolved "https://registry.yarnpkg.com/clone-response/-/clone-response-1.0.2.tgz#d1dc973920314df67fbeb94223b4ee350239e96b"
1125 |   integrity sha512-yjLXh88P599UOyPTFX0POsd7WxnbsVsGohcwzHOLspIhhpalPw1BcqED8NblyZLKcGrL8dTgMlcaZxV2jAD41Q==
1126 |   dependencies:
1127 |     mimic-response "^1.0.0"
1128 | 
1129 | color-convert@^1.9.0:
1130 |   version "1.9.3"
1131 |   resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.9.3.tgz#bb71850690e1f136567de629d2d5471deda4c1e8"
1132 |   integrity sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==
1133 |   dependencies:
1134 |     color-name "1.1.3"
1135 | 
1136 | color-convert@^2.0.1:
1137 |   version "2.0.1"
1138 |   resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-2.0.1.tgz#72d3a68d598c9bdb3af2ad1e84f21d896abd4de3"
1139 |   integrity sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==
1140 |   dependencies:
1141 |     color-name "~1.1.4"
1142 | 
1143 | color-name@1.1.3:
1144 |   version "1.1.3"
1145 |   resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.3.tgz#a7d0558bd89c42f795dd42328f740831ca53bc25"
1146 |   integrity sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==
1147 | 
1148 | color-name@~1.1.4:
1149 |   version "1.1.4"
1150 |   resolved "https://registry.yarnpkg.com/color-name/-/color-name-1.1.4.tgz#c2a09a87acbde69543de6f63fa3995c826c536a2"
1151 |   integrity sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==
1152 | 
1153 | colord@^2.9.3:
1154 |   version "2.9.3"
1155 |   resolved "https://registry.yarnpkg.com/colord/-/colord-2.9.3.tgz#4f8ce919de456f1d5c1c368c307fe20f3e59fb43"
1156 |   integrity sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==
1157 | 
1158 | concat-map@0.0.1:
1159 |   version "0.0.1"
1160 |   resolved "https://registry.yarnpkg.com/concat-map/-/concat-map-0.0.1.tgz#d8a96bd77fd68df7793a73036a3ba0d5405d477b"
1161 |   integrity sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==
1162 | 
1163 | configstore@^5.0.1:
1164 |   version "5.0.1"
1165 |   resolved "https://registry.yarnpkg.com/configstore/-/configstore-5.0.1.tgz#d365021b5df4b98cdd187d6a3b0e3f6a7cc5ed96"
1166 |   integrity sha512-aMKprgk5YhBNyH25hj8wGt2+D52Sw1DRRIzqBwLp2Ya9mFmY8KPvvtvmna8SxVR9JMZ4kzMD68N22vlaRpkeFA==
1167 |   dependencies:
1168 |     dot-prop "^5.2.0"
1169 |     graceful-fs "^4.1.2"
1170 |     make-dir "^3.0.0"
1171 |     unique-string "^2.0.0"
1172 |     write-file-atomic "^3.0.0"
1173 |     xdg-basedir "^4.0.0"
1174 | 
1175 | copy-anything@^2.0.1:
1176 |   version "2.0.6"
1177 |   resolved "https://registry.yarnpkg.com/copy-anything/-/copy-anything-2.0.6.tgz#092454ea9584a7b7ad5573062b2a87f5900fc480"
1178 |   integrity sha512-1j20GZTsvKNkc4BY3NpMOM8tt///wY3FpIzozTOFO2ffuZcV61nojHXVKIy3WM+7ADCy5FVhdZYHYDdgTU0yJw==
1179 |   dependencies:
1180 |     is-what "^3.14.1"
1181 | 
1182 | cosmiconfig@^7.0.0:
1183 |   version "7.0.1"
1184 |   resolved "https://registry.yarnpkg.com/cosmiconfig/-/cosmiconfig-7.0.1.tgz#714d756522cace867867ccb4474c5d01bbae5d6d"
1185 |   integrity sha512-a1YWNUV2HwGimB7dU2s1wUMurNKjpx60HxBB6xUM8Re+2s1g1IIfJvFR0/iCF+XHdE0GMTKTuLR32UQff4TEyQ==
1186 |   dependencies:
1187 |     "@types/parse-json" "^4.0.0"
1188 |     import-fresh "^3.2.1"
1189 |     parse-json "^5.0.0"
1190 |     path-type "^4.0.0"
1191 |     yaml "^1.10.0"
1192 | 
1193 | cross-spawn@^7.0.2, cross-spawn@^7.0.3:
1194 |   version "7.0.3"
1195 |   resolved "https://registry.yarnpkg.com/cross-spawn/-/cross-spawn-7.0.3.tgz#f73a85b9d5d41d045551c177e2882d4ac85728a6"
1196 |   integrity sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==
1197 |   dependencies:
1198 |     path-key "^3.1.0"
1199 |     shebang-command "^2.0.0"
1200 |     which "^2.0.1"
1201 | 
1202 | crypto-random-string@^2.0.0:
1203 |   version "2.0.0"
1204 |   resolved "https://registry.yarnpkg.com/crypto-random-string/-/crypto-random-string-2.0.0.tgz#ef2a7a966ec11083388369baa02ebead229b30d5"
1205 |   integrity sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==
1206 | 
1207 | data-uri-to-buffer@^2.0.0:
1208 |   version "2.0.2"
1209 |   resolved "https://registry.yarnpkg.com/data-uri-to-buffer/-/data-uri-to-buffer-2.0.2.tgz#d296973d5a4897a5dbe31716d118211921f04770"
1210 |   integrity sha512-ND9qDTLc6diwj+Xe5cdAgVTbLVdXbtxTJRXRhli8Mowuaan+0EJOtdqJ0QCHNSSPyoXGx9HX2/VMnKeC34AChA==
1211 | 
1212 | data-view-buffer@^1.0.1:
1213 |   version "1.0.1"
1214 |   resolved "https://registry.yarnpkg.com/data-view-buffer/-/data-view-buffer-1.0.1.tgz#8ea6326efec17a2e42620696e671d7d5a8bc66b2"
1215 |   integrity sha512-0lht7OugA5x3iJLOWFhWK/5ehONdprk0ISXqVFn/NFrDu+cuc8iADFrGQz5BnRK7LLU3JmkbXSxaqX+/mXYtUA==
1216 |   dependencies:
1217 |     call-bind "^1.0.6"
1218 |     es-errors "^1.3.0"
1219 |     is-data-view "^1.0.1"
1220 | 
1221 | data-view-byte-length@^1.0.1:
1222 |   version "1.0.1"
1223 |   resolved "https://registry.yarnpkg.com/data-view-byte-length/-/data-view-byte-length-1.0.1.tgz#90721ca95ff280677eb793749fce1011347669e2"
1224 |   integrity sha512-4J7wRJD3ABAzr8wP+OcIcqq2dlUKp4DVflx++hs5h5ZKydWMI6/D/fAot+yh6g2tHh8fLFTvNOaVN357NvSrOQ==
1225 |   dependencies:
1226 |     call-bind "^1.0.7"
1227 |     es-errors "^1.3.0"
1228 |     is-data-view "^1.0.1"
1229 | 
1230 | data-view-byte-offset@^1.0.0:
1231 |   version "1.0.0"
1232 |   resolved "https://registry.yarnpkg.com/data-view-byte-offset/-/data-view-byte-offset-1.0.0.tgz#5e0bbfb4828ed2d1b9b400cd8a7d119bca0ff18a"
1233 |   integrity sha512-t/Ygsytq+R995EJ5PZlD4Cu56sWa8InXySaViRzw9apusqsOO2bQP+SbYzAhR0pFKoB+43lYy8rWban9JSuXnA==
1234 |   dependencies:
1235 |     call-bind "^1.0.6"
1236 |     es-errors "^1.3.0"
1237 |     is-data-view "^1.0.1"
1238 | 
1239 | date-fns@^2.17.0:
1240 |   version "2.28.0"
1241 |   resolved "https://registry.yarnpkg.com/date-fns/-/date-fns-2.28.0.tgz#9570d656f5fc13143e50c975a3b6bbeb46cd08b2"
1242 |   integrity sha512-8d35hViGYx/QH0icHYCeLmsLmMUheMmTyV9Fcm6gvNwdw31yXXH+O85sOBJ+OLnLQMKZowvpKb6FgMIQjcpvQw==
1243 | 
1244 | debug@^4.0.0, debug@^4.1.0, debug@^4.1.1, debug@^4.3.1, debug@^4.3.2, debug@^4.3.4:
1245 |   version "4.3.4"
1246 |   resolved "https://registry.yarnpkg.com/debug/-/debug-4.3.4.tgz#1319f6579357f2338d3337d2cdd4914bb5dcc865"
1247 |   integrity sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==
1248 |   dependencies:
1249 |     ms "2.1.2"
1250 | 
1251 | decamelize@^1.2.0:
1252 |   version "1.2.0"
1253 |   resolved "https://registry.yarnpkg.com/decamelize/-/decamelize-1.2.0.tgz#f6534d15148269b20352e7bee26f501f9a191290"
1254 |   integrity sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==
1255 | 
1256 | decode-named-character-reference@^1.0.0:
1257 |   version "1.0.2"
1258 |   resolved "https://registry.yarnpkg.com/decode-named-character-reference/-/decode-named-character-reference-1.0.2.tgz#daabac9690874c394c81e4162a0304b35d824f0e"
1259 |   integrity sha512-O8x12RzrUF8xyVcY0KJowWsmaJxQbmy0/EtnNtHRpsOcT7dFk5W598coHqBVpmWo1oQQfsCqfCmkZN5DJrZVdg==
1260 |   dependencies:
1261 |     character-entities "^2.0.0"
1262 | 
1263 | decompress-response@^3.3.0:
1264 |   version "3.3.0"
1265 |   resolved "https://registry.yarnpkg.com/decompress-response/-/decompress-response-3.3.0.tgz#80a4dd323748384bfa248083622aedec982adff3"
1266 |   integrity sha512-BzRPQuY1ip+qDonAOz42gRm/pg9F768C+npV/4JOsxRC2sq+Rlk+Q4ZCAsOhnIaMrgarILY+RMUIvMmmX1qAEA==
1267 |   dependencies:
1268 |     mimic-response "^1.0.0"
1269 | 
1270 | dedent@^0.7.0:
1271 |   version "0.7.0"
1272 |   resolved "https://registry.yarnpkg.com/dedent/-/dedent-0.7.0.tgz#2495ddbaf6eb874abb0e1be9df22d2e5a544326c"
1273 |   integrity sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==
1274 | 
1275 | deep-extend@^0.6.0:
1276 |   version "0.6.0"
1277 |   resolved "https://registry.yarnpkg.com/deep-extend/-/deep-extend-0.6.0.tgz#c4fa7c95404a17a9c3e8ca7e1537312b736330ac"
1278 |   integrity sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==
1279 | 
1280 | deep-is@^0.1.3:
1281 |   version "0.1.4"
1282 |   resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.4.tgz#a6f2dce612fadd2ef1f519b73551f17e85199831"
1283 |   integrity sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==
1284 | 
1285 | deepmerge@^4.2.0:
1286 |   version "4.2.2"
1287 |   resolved "https://registry.yarnpkg.com/deepmerge/-/deepmerge-4.2.2.tgz#44d2ea3679b8f4d4ffba33f03d865fc1e7bf4955"
1288 |   integrity sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg==
1289 | 
1290 | deepmerge@^4.2.2:
1291 |   version "4.3.1"
1292 |   resolved "https://registry.yarnpkg.com/deepmerge/-/deepmerge-4.3.1.tgz#44b5f2147cd3b00d4b56137685966f26fd25dd4a"
1293 |   integrity sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==
1294 | 
1295 | defer-to-connect@^1.0.1:
1296 |   version "1.1.3"
1297 |   resolved "https://registry.yarnpkg.com/defer-to-connect/-/defer-to-connect-1.1.3.tgz#331ae050c08dcf789f8c83a7b81f0ed94f4ac591"
1298 |   integrity sha512-0ISdNousHvZT2EiFlZeZAHBUvSxmKswVCEf8hW7KWgG4a8MVEu/3Vb6uWYozkjylyCxe0JBIiRB1jV45S70WVQ==
1299 | 
1300 | define-data-property@^1.0.1, define-data-property@^1.1.4:
1301 |   version "1.1.4"
1302 |   resolved "https://registry.yarnpkg.com/define-data-property/-/define-data-property-1.1.4.tgz#894dc141bb7d3060ae4366f6a0107e68fbe48c5e"
1303 |   integrity sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==
1304 |   dependencies:
1305 |     es-define-property "^1.0.0"
1306 |     es-errors "^1.3.0"
1307 |     gopd "^1.0.1"
1308 | 
1309 | define-properties@^1.1.3, define-properties@^1.2.0, define-properties@^1.2.1:
1310 |   version "1.2.1"
1311 |   resolved "https://registry.yarnpkg.com/define-properties/-/define-properties-1.2.1.tgz#10781cc616eb951a80a034bafcaa7377f6af2b6c"
1312 |   integrity sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==
1313 |   dependencies:
1314 |     define-data-property "^1.0.1"
1315 |     has-property-descriptors "^1.0.0"
1316 |     object-keys "^1.1.1"
1317 | 
1318 | dequal@^2.0.0:
1319 |   version "2.0.3"
1320 |   resolved "https://registry.yarnpkg.com/dequal/-/dequal-2.0.3.tgz#2644214f1997d39ed0ee0ece72335490a7ac67be"
1321 |   integrity sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==
1322 | 
1323 | diff@^5.0.0:
1324 |   version "5.1.0"
1325 |   resolved "https://registry.yarnpkg.com/diff/-/diff-5.1.0.tgz#bc52d298c5ea8df9194800224445ed43ffc87e40"
1326 |   integrity sha512-D+mk+qE8VC/PAUrlAU34N+VfXev0ghe5ywmpqrawphmVZc1bEfn56uo9qpyGp1p4xpzOHkSW4ztBd6L7Xx4ACw==
1327 | 
1328 | dir-glob@^3.0.1:
1329 |   version "3.0.1"
1330 |   resolved "https://registry.yarnpkg.com/dir-glob/-/dir-glob-3.0.1.tgz#56dbf73d992a4a93ba1584f4534063fd2e41717f"
1331 |   integrity sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==
1332 |   dependencies:
1333 |     path-type "^4.0.0"
1334 | 
1335 | doctrine@^2.1.0:
1336 |   version "2.1.0"
1337 |   resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-2.1.0.tgz#5cd01fc101621b42c4cd7f5d1a66243716d3f39d"
1338 |   integrity sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==
1339 |   dependencies:
1340 |     esutils "^2.0.2"
1341 | 
1342 | doctrine@^3.0.0:
1343 |   version "3.0.0"
1344 |   resolved "https://registry.yarnpkg.com/doctrine/-/doctrine-3.0.0.tgz#addebead72a6574db783639dc87a121773973961"
1345 |   integrity sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==
1346 |   dependencies:
1347 |     esutils "^2.0.2"
1348 | 
1349 | dot-prop@^5.2.0:
1350 |   version "5.3.0"
1351 |   resolved "https://registry.yarnpkg.com/dot-prop/-/dot-prop-5.3.0.tgz#90ccce708cd9cd82cc4dc8c3ddd9abdd55b20e88"
1352 |   integrity sha512-QM8q3zDe58hqUqjraQOmzZ1LIH9SWQJTlEKCH4kJ2oQvLZk7RbQXvtDM2XEq3fwkV9CCvvH4LA0AV+ogFsBM2Q==
1353 |   dependencies:
1354 |     is-obj "^2.0.0"
1355 | 
1356 | dup@^1.0.0:
1357 |   version "1.0.0"
1358 |   resolved "https://registry.yarnpkg.com/dup/-/dup-1.0.0.tgz#51fc5ac685f8196469df0b905e934b20af5b4029"
1359 |   integrity sha512-Bz5jxMMC0wgp23Zm15ip1x8IhYRqJvF3nFC0UInJUDkN1z4uNPk9jTnfCUJXbOGiQ1JbXLQsiV41Fb+HXcj5BA==
1360 | 
1361 | duplexer3@^0.1.4:
1362 |   version "0.1.4"
1363 |   resolved "https://registry.yarnpkg.com/duplexer3/-/duplexer3-0.1.4.tgz#ee01dd1cac0ed3cbc7fdbea37dc0a8f1ce002ce2"
1364 |   integrity sha512-CEj8FwwNA4cVH2uFCoHUrmojhYh1vmCdOaneKJXwkeY1i9jnlslVo9dx+hQ5Hl9GnH/Bwy/IjxAyOePyPKYnzA==
1365 | 
1366 | emoji-regex@^10.0.0:
1367 |   version "10.3.0"
1368 |   resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-10.3.0.tgz#76998b9268409eb3dae3de989254d456e70cfe23"
1369 |   integrity sha512-QpLs9D9v9kArv4lfDEgg1X/gN5XLnf/A6l9cs8SPZLRZR3ZkY9+kwIQTxm+fsSej5UMYGE8fdoaZVIBlqG0XTw==
1370 | 
1371 | emoji-regex@^8.0.0:
1372 |   version "8.0.0"
1373 |   resolved "https://registry.yarnpkg.com/emoji-regex/-/emoji-regex-8.0.0.tgz#e818fd69ce5ccfcb404594f842963bf53164cc37"
1374 |   integrity sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==
1375 | 
1376 | end-of-stream@^1.1.0:
1377 |   version "1.4.4"
1378 |   resolved "https://registry.yarnpkg.com/end-of-stream/-/end-of-stream-1.4.4.tgz#5ae64a5f45057baf3626ec14da0ca5e4b2431eb0"
1379 |   integrity sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==
1380 |   dependencies:
1381 |     once "^1.4.0"
1382 | 
1383 | endent@^2.0.1:
1384 |   version "2.1.0"
1385 |   resolved "https://registry.yarnpkg.com/endent/-/endent-2.1.0.tgz#5aaba698fb569e5e18e69e1ff7a28ff35373cd88"
1386 |   integrity sha512-r8VyPX7XL8U01Xgnb1CjZ3XV+z90cXIJ9JPE/R9SEC9vpw2P6CfsRPJmp20DppC5N7ZAMCmjYkJIa744Iyg96w==
1387 |   dependencies:
1388 |     dedent "^0.7.0"
1389 |     fast-json-parse "^1.0.3"
1390 |     objectorarray "^1.0.5"
1391 | 
1392 | errno@^0.1.1:
1393 |   version "0.1.8"
1394 |   resolved "https://registry.yarnpkg.com/errno/-/errno-0.1.8.tgz#8bb3e9c7d463be4976ff888f76b4809ebc2e811f"
1395 |   integrity sha512-dJ6oBr5SQ1VSd9qkk7ByRgb/1SH4JZjCHSW/mr63/QcXO9zLVxvJ6Oy13nio03rxpSnVDDjFor75SjVeZWPW/A==
1396 |   dependencies:
1397 |     prr "~1.0.1"
1398 | 
1399 | error-ex@^1.3.1:
1400 |   version "1.3.2"
1401 |   resolved "https://registry.yarnpkg.com/error-ex/-/error-ex-1.3.2.tgz#b4ac40648107fdcdcfae242f428bea8a14d4f1bf"
1402 |   integrity sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==
1403 |   dependencies:
1404 |     is-arrayish "^0.2.1"
1405 | 
1406 | es-abstract@^1.22.1, es-abstract@^1.22.3, es-abstract@^1.23.0, es-abstract@^1.23.1, es-abstract@^1.23.2:
1407 |   version "1.23.3"
1408 |   resolved "https://registry.yarnpkg.com/es-abstract/-/es-abstract-1.23.3.tgz#8f0c5a35cd215312573c5a27c87dfd6c881a0aa0"
1409 |   integrity sha512-e+HfNH61Bj1X9/jLc5v1owaLYuHdeHHSQlkhCBiTK8rBvKaULl/beGMxwrMXjpYrv4pz22BlY570vVePA2ho4A==
1410 |   dependencies:
1411 |     array-buffer-byte-length "^1.0.1"
1412 |     arraybuffer.prototype.slice "^1.0.3"
1413 |     available-typed-arrays "^1.0.7"
1414 |     call-bind "^1.0.7"
1415 |     data-view-buffer "^1.0.1"
1416 |     data-view-byte-length "^1.0.1"
1417 |     data-view-byte-offset "^1.0.0"
1418 |     es-define-property "^1.0.0"
1419 |     es-errors "^1.3.0"
1420 |     es-object-atoms "^1.0.0"
1421 |     es-set-tostringtag "^2.0.3"
1422 |     es-to-primitive "^1.2.1"
1423 |     function.prototype.name "^1.1.6"
1424 |     get-intrinsic "^1.2.4"
1425 |     get-symbol-description "^1.0.2"
1426 |     globalthis "^1.0.3"
1427 |     gopd "^1.0.1"
1428 |     has-property-descriptors "^1.0.2"
1429 |     has-proto "^1.0.3"
1430 |     has-symbols "^1.0.3"
1431 |     hasown "^2.0.2"
1432 |     internal-slot "^1.0.7"
1433 |     is-array-buffer "^3.0.4"
1434 |     is-callable "^1.2.7"
1435 |     is-data-view "^1.0.1"
1436 |     is-negative-zero "^2.0.3"
1437 |     is-regex "^1.1.4"
1438 |     is-shared-array-buffer "^1.0.3"
1439 |     is-string "^1.0.7"
1440 |     is-typed-array "^1.1.13"
1441 |     is-weakref "^1.0.2"
1442 |     object-inspect "^1.13.1"
1443 |     object-keys "^1.1.1"
1444 |     object.assign "^4.1.5"
1445 |     regexp.prototype.flags "^1.5.2"
1446 |     safe-array-concat "^1.1.2"
1447 |     safe-regex-test "^1.0.3"
1448 |     string.prototype.trim "^1.2.9"
1449 |     string.prototype.trimend "^1.0.8"
1450 |     string.prototype.trimstart "^1.0.8"
1451 |     typed-array-buffer "^1.0.2"
1452 |     typed-array-byte-length "^1.0.1"
1453 |     typed-array-byte-offset "^1.0.2"
1454 |     typed-array-length "^1.0.6"
1455 |     unbox-primitive "^1.0.2"
1456 |     which-typed-array "^1.1.15"
1457 | 
1458 | es-define-property@^1.0.0:
1459 |   version "1.0.0"
1460 |   resolved "https://registry.yarnpkg.com/es-define-property/-/es-define-property-1.0.0.tgz#c7faefbdff8b2696cf5f46921edfb77cc4ba3845"
1461 |   integrity sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==
1462 |   dependencies:
1463 |     get-intrinsic "^1.2.4"
1464 | 
1465 | es-errors@^1.1.0, es-errors@^1.2.1, es-errors@^1.3.0:
1466 |   version "1.3.0"
1467 |   resolved "https://registry.yarnpkg.com/es-errors/-/es-errors-1.3.0.tgz#05f75a25dab98e4fb1dcd5e1472c0546d5057c8f"
1468 |   integrity sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==
1469 | 
1470 | es-iterator-helpers@^1.0.17:
1471 |   version "1.0.18"
1472 |   resolved "https://registry.yarnpkg.com/es-iterator-helpers/-/es-iterator-helpers-1.0.18.tgz#4d3424f46b24df38d064af6fbbc89274e29ea69d"
1473 |   integrity sha512-scxAJaewsahbqTYrGKJihhViaM6DDZDDoucfvzNbK0pOren1g/daDQ3IAhzn+1G14rBG7w+i5N+qul60++zlKA==
1474 |   dependencies:
1475 |     call-bind "^1.0.7"
1476 |     define-properties "^1.2.1"
1477 |     es-abstract "^1.23.0"
1478 |     es-errors "^1.3.0"
1479 |     es-set-tostringtag "^2.0.3"
1480 |     function-bind "^1.1.2"
1481 |     get-intrinsic "^1.2.4"
1482 |     globalthis "^1.0.3"
1483 |     has-property-descriptors "^1.0.2"
1484 |     has-proto "^1.0.3"
1485 |     has-symbols "^1.0.3"
1486 |     internal-slot "^1.0.7"
1487 |     iterator.prototype "^1.1.2"
1488 |     safe-array-concat "^1.1.2"
1489 | 
1490 | es-object-atoms@^1.0.0:
1491 |   version "1.0.0"
1492 |   resolved "https://registry.yarnpkg.com/es-object-atoms/-/es-object-atoms-1.0.0.tgz#ddb55cd47ac2e240701260bc2a8e31ecb643d941"
1493 |   integrity sha512-MZ4iQ6JwHOBQjahnjwaC1ZtIBH+2ohjamzAO3oaHcXYup7qxjF2fixyH+Q71voWHeOkI2q/TnJao/KfXYIZWbw==
1494 |   dependencies:
1495 |     es-errors "^1.3.0"
1496 | 
1497 | es-set-tostringtag@^2.0.3:
1498 |   version "2.0.3"
1499 |   resolved "https://registry.yarnpkg.com/es-set-tostringtag/-/es-set-tostringtag-2.0.3.tgz#8bb60f0a440c2e4281962428438d58545af39777"
1500 |   integrity sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==
1501 |   dependencies:
1502 |     get-intrinsic "^1.2.4"
1503 |     has-tostringtag "^1.0.2"
1504 |     hasown "^2.0.1"
1505 | 
1506 | es-shim-unscopables@^1.0.0, es-shim-unscopables@^1.0.2:
1507 |   version "1.0.2"
1508 |   resolved "https://registry.yarnpkg.com/es-shim-unscopables/-/es-shim-unscopables-1.0.2.tgz#1f6942e71ecc7835ed1c8a83006d8771a63a3763"
1509 |   integrity sha512-J3yBRXCzDu4ULnQwxyToo/OjdMx6akgVC7K6few0a7F/0wLtmKKN7I73AH5T2836UuXRqN7Qg+IIUw/+YJksRw==
1510 |   dependencies:
1511 |     hasown "^2.0.0"
1512 | 
1513 | es-to-primitive@^1.2.1:
1514 |   version "1.2.1"
1515 |   resolved "https://registry.yarnpkg.com/es-to-primitive/-/es-to-primitive-1.2.1.tgz#e55cd4c9cdc188bcefb03b366c736323fc5c898a"
1516 |   integrity sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==
1517 |   dependencies:
1518 |     is-callable "^1.1.4"
1519 |     is-date-object "^1.0.1"
1520 |     is-symbol "^1.0.2"
1521 | 
1522 | esbuild-plugin-less@^1.3.1:
1523 |   version "1.3.3"
1524 |   resolved "https://registry.yarnpkg.com/esbuild-plugin-less/-/esbuild-plugin-less-1.3.3.tgz#cf886d8822b2b61f56f5f5ac6e17a29712a63510"
1525 |   integrity sha512-dYXuCtLh0Jm0Uci45w4Hlel4ajkawIQva1MxrLyaarcrEtSxUZWoaZuiLzr/dDzT/p+wRKobbop5Tp8yALSfGw==
1526 |   dependencies:
1527 |     "@types/less" "^3.0.6"
1528 |     less "^4.2.0"
1529 | 
1530 | esbuild@^0.12.6:
1531 |   version "0.12.29"
1532 |   resolved "https://registry.yarnpkg.com/esbuild/-/esbuild-0.12.29.tgz#be602db7c4dc78944a9dbde0d1ea19d36c1f882d"
1533 |   integrity sha512-w/XuoBCSwepyiZtIRsKsetiLDUVGPVw1E/R3VTFSecIy8UR7Cq3SOtwKHJMFoVqqVG36aGkzh4e8BvpO1Fdc7g==
1534 | 
1535 | esbuild@^0.19.11:
1536 |   version "0.19.12"
1537 |   resolved "https://registry.yarnpkg.com/esbuild/-/esbuild-0.19.12.tgz#dc82ee5dc79e82f5a5c3b4323a2a641827db3e04"
1538 |   integrity sha512-aARqgq8roFBj054KvQr5f1sFu0D65G+miZRCuJyJ0G13Zwx7vRar5Zhn2tkQNzIXcBrNVsv/8stehpj+GAjgbg==
1539 |   optionalDependencies:
1540 |     "@esbuild/aix-ppc64" "0.19.12"
1541 |     "@esbuild/android-arm" "0.19.12"
1542 |     "@esbuild/android-arm64" "0.19.12"
1543 |     "@esbuild/android-x64" "0.19.12"
1544 |     "@esbuild/darwin-arm64" "0.19.12"
1545 |     "@esbuild/darwin-x64" "0.19.12"
1546 |     "@esbuild/freebsd-arm64" "0.19.12"
1547 |     "@esbuild/freebsd-x64" "0.19.12"
1548 |     "@esbuild/linux-arm" "0.19.12"
1549 |     "@esbuild/linux-arm64" "0.19.12"
1550 |     "@esbuild/linux-ia32" "0.19.12"
1551 |     "@esbuild/linux-loong64" "0.19.12"
1552 |     "@esbuild/linux-mips64el" "0.19.12"
1553 |     "@esbuild/linux-ppc64" "0.19.12"
1554 |     "@esbuild/linux-riscv64" "0.19.12"
1555 |     "@esbuild/linux-s390x" "0.19.12"
1556 |     "@esbuild/linux-x64" "0.19.12"
1557 |     "@esbuild/netbsd-x64" "0.19.12"
1558 |     "@esbuild/openbsd-x64" "0.19.12"
1559 |     "@esbuild/sunos-x64" "0.19.12"
1560 |     "@esbuild/win32-arm64" "0.19.12"
1561 |     "@esbuild/win32-ia32" "0.19.12"
1562 |     "@esbuild/win32-x64" "0.19.12"
1563 | 
1564 | escape-goat@^2.0.0:
1565 |   version "2.1.1"
1566 |   resolved "https://registry.yarnpkg.com/escape-goat/-/escape-goat-2.1.1.tgz#1b2dc77003676c457ec760b2dc68edb648188675"
1567 |   integrity sha512-8/uIhbG12Csjy2JEW7D9pHbreaVaS/OpN3ycnyvElTdwM5n6GY6W6e2IPemfvGZeUMqZ9A/3GqIZMgKnBhAw/Q==
1568 | 
1569 | escape-string-regexp@4.0.0, escape-string-regexp@^4.0.0:
1570 |   version "4.0.0"
1571 |   resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz#14ba83a5d373e3d311e5afca29cf5bfad965bf34"
1572 |   integrity sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==
1573 | 
1574 | escape-string-regexp@^1.0.5:
1575 |   version "1.0.5"
1576 |   resolved "https://registry.yarnpkg.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz#1b61c0562190a8dff6ae3bb2cf0200ca130b86d4"
1577 |   integrity sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==
1578 | 
1579 | eslint-plugin-react@^7.33.2:
1580 |   version "7.34.1"
1581 |   resolved "https://registry.yarnpkg.com/eslint-plugin-react/-/eslint-plugin-react-7.34.1.tgz#6806b70c97796f5bbfb235a5d3379ece5f4da997"
1582 |   integrity sha512-N97CxlouPT1AHt8Jn0mhhN2RrADlUAsk1/atcT2KyA/l9Q/E6ll7OIGwNumFmWfZ9skV3XXccYS19h80rHtgkw==
1583 |   dependencies:
1584 |     array-includes "^3.1.7"
1585 |     array.prototype.findlast "^1.2.4"
1586 |     array.prototype.flatmap "^1.3.2"
1587 |     array.prototype.toreversed "^1.1.2"
1588 |     array.prototype.tosorted "^1.1.3"
1589 |     doctrine "^2.1.0"
1590 |     es-iterator-helpers "^1.0.17"
1591 |     estraverse "^5.3.0"
1592 |     jsx-ast-utils "^2.4.1 || ^3.0.0"
1593 |     minimatch "^3.1.2"
1594 |     object.entries "^1.1.7"
1595 |     object.fromentries "^2.0.7"
1596 |     object.hasown "^1.1.3"
1597 |     object.values "^1.1.7"
1598 |     prop-types "^15.8.1"
1599 |     resolve "^2.0.0-next.5"
1600 |     semver "^6.3.1"
1601 |     string.prototype.matchall "^4.0.10"
1602 | 
1603 | eslint-scope@^5.1.1:
1604 |   version "5.1.1"
1605 |   resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-5.1.1.tgz#e786e59a66cb92b3f6c1fb0d508aab174848f48c"
1606 |   integrity sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==
1607 |   dependencies:
1608 |     esrecurse "^4.3.0"
1609 |     estraverse "^4.1.1"
1610 | 
1611 | eslint-scope@^7.2.2:
1612 |   version "7.2.2"
1613 |   resolved "https://registry.yarnpkg.com/eslint-scope/-/eslint-scope-7.2.2.tgz#deb4f92563390f32006894af62a22dba1c46423f"
1614 |   integrity sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==
1615 |   dependencies:
1616 |     esrecurse "^4.3.0"
1617 |     estraverse "^5.2.0"
1618 | 
1619 | eslint-visitor-keys@^3.3.0, eslint-visitor-keys@^3.4.1, eslint-visitor-keys@^3.4.3:
1620 |   version "3.4.3"
1621 |   resolved "https://registry.yarnpkg.com/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz#0cd72fe8550e3c2eae156a96a4dddcd1c8ac5800"
1622 |   integrity sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==
1623 | 
1624 | eslint@^8.56.0:
1625 |   version "8.57.0"
1626 |   resolved "https://registry.yarnpkg.com/eslint/-/eslint-8.57.0.tgz#c786a6fd0e0b68941aaf624596fb987089195668"
1627 |   integrity sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==
1628 |   dependencies:
1629 |     "@eslint-community/eslint-utils" "^4.2.0"
1630 |     "@eslint-community/regexpp" "^4.6.1"
1631 |     "@eslint/eslintrc" "^2.1.4"
1632 |     "@eslint/js" "8.57.0"
1633 |     "@humanwhocodes/config-array" "^0.11.14"
1634 |     "@humanwhocodes/module-importer" "^1.0.1"
1635 |     "@nodelib/fs.walk" "^1.2.8"
1636 |     "@ungap/structured-clone" "^1.2.0"
1637 |     ajv "^6.12.4"
1638 |     chalk "^4.0.0"
1639 |     cross-spawn "^7.0.2"
1640 |     debug "^4.3.2"
1641 |     doctrine "^3.0.0"
1642 |     escape-string-regexp "^4.0.0"
1643 |     eslint-scope "^7.2.2"
1644 |     eslint-visitor-keys "^3.4.3"
1645 |     espree "^9.6.1"
1646 |     esquery "^1.4.2"
1647 |     esutils "^2.0.2"
1648 |     fast-deep-equal "^3.1.3"
1649 |     file-entry-cache "^6.0.1"
1650 |     find-up "^5.0.0"
1651 |     glob-parent "^6.0.2"
1652 |     globals "^13.19.0"
1653 |     graphemer "^1.4.0"
1654 |     ignore "^5.2.0"
1655 |     imurmurhash "^0.1.4"
1656 |     is-glob "^4.0.0"
1657 |     is-path-inside "^3.0.3"
1658 |     js-yaml "^4.1.0"
1659 |     json-stable-stringify-without-jsonify "^1.0.1"
1660 |     levn "^0.4.1"
1661 |     lodash.merge "^4.6.2"
1662 |     minimatch "^3.1.2"
1663 |     natural-compare "^1.4.0"
1664 |     optionator "^0.9.3"
1665 |     strip-ansi "^6.0.1"
1666 |     text-table "^0.2.0"
1667 | 
1668 | espree@^9.6.0, espree@^9.6.1:
1669 |   version "9.6.1"
1670 |   resolved "https://registry.yarnpkg.com/espree/-/espree-9.6.1.tgz#a2a17b8e434690a5432f2f8018ce71d331a48c6f"
1671 |   integrity sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==
1672 |   dependencies:
1673 |     acorn "^8.9.0"
1674 |     acorn-jsx "^5.3.2"
1675 |     eslint-visitor-keys "^3.4.1"
1676 | 
1677 | esquery@^1.4.2:
1678 |   version "1.5.0"
1679 |   resolved "https://registry.yarnpkg.com/esquery/-/esquery-1.5.0.tgz#6ce17738de8577694edd7361c57182ac8cb0db0b"
1680 |   integrity sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==
1681 |   dependencies:
1682 |     estraverse "^5.1.0"
1683 | 
1684 | esrecurse@^4.3.0:
1685 |   version "4.3.0"
1686 |   resolved "https://registry.yarnpkg.com/esrecurse/-/esrecurse-4.3.0.tgz#7ad7964d679abb28bee72cec63758b1c5d2c9921"
1687 |   integrity sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==
1688 |   dependencies:
1689 |     estraverse "^5.2.0"
1690 | 
1691 | estraverse@^4.1.1:
1692 |   version "4.3.0"
1693 |   resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.3.0.tgz#398ad3f3c5a24948be7725e83d11a7de28cdbd1d"
1694 |   integrity sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==
1695 | 
1696 | estraverse@^5.1.0, estraverse@^5.2.0, estraverse@^5.3.0:
1697 |   version "5.3.0"
1698 |   resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-5.3.0.tgz#2eea5290702f26ab8fe5370370ff86c965d21123"
1699 |   integrity sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==
1700 | 
1701 | esutils@^2.0.2:
1702 |   version "2.0.3"
1703 |   resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
1704 |   integrity sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==
1705 | 
1706 | eventemitter3@^5.0.1:
1707 |   version "5.0.1"
1708 |   resolved "https://registry.yarnpkg.com/eventemitter3/-/eventemitter3-5.0.1.tgz#53f5ffd0a492ac800721bb42c66b841de96423c4"
1709 |   integrity sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==
1710 | 
1711 | execa@^5.0.0:
1712 |   version "5.1.1"
1713 |   resolved "https://registry.yarnpkg.com/execa/-/execa-5.1.1.tgz#f80ad9cbf4298f7bd1d4c9555c21e93741c411dd"
1714 |   integrity sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==
1715 |   dependencies:
1716 |     cross-spawn "^7.0.3"
1717 |     get-stream "^6.0.0"
1718 |     human-signals "^2.1.0"
1719 |     is-stream "^2.0.0"
1720 |     merge-stream "^2.0.0"
1721 |     npm-run-path "^4.0.1"
1722 |     onetime "^5.1.2"
1723 |     signal-exit "^3.0.3"
1724 |     strip-final-newline "^2.0.0"
1725 | 
1726 | fast-deep-equal@^3.1.1, fast-deep-equal@^3.1.3:
1727 |   version "3.1.3"
1728 |   resolved "https://registry.yarnpkg.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz#3a7d56b559d6cbc3eb512325244e619a65c6c525"
1729 |   integrity sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==
1730 | 
1731 | fast-glob@^3.2.9:
1732 |   version "3.3.2"
1733 |   resolved "https://registry.yarnpkg.com/fast-glob/-/fast-glob-3.3.2.tgz#a904501e57cfdd2ffcded45e99a54fef55e46129"
1734 |   integrity sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==
1735 |   dependencies:
1736 |     "@nodelib/fs.stat" "^2.0.2"
1737 |     "@nodelib/fs.walk" "^1.2.3"
1738 |     glob-parent "^5.1.2"
1739 |     merge2 "^1.3.0"
1740 |     micromatch "^4.0.4"
1741 | 
1742 | fast-json-parse@^1.0.3:
1743 |   version "1.0.3"
1744 |   resolved "https://registry.yarnpkg.com/fast-json-parse/-/fast-json-parse-1.0.3.tgz#43e5c61ee4efa9265633046b770fb682a7577c4d"
1745 |   integrity sha512-FRWsaZRWEJ1ESVNbDWmsAlqDk96gPQezzLghafp5J4GUKjbCz3OkAHuZs5TuPEtkbVQERysLp9xv6c24fBm8Aw==
1746 | 
1747 | fast-json-patch@^3.1.0:
1748 |   version "3.1.1"
1749 |   resolved "https://registry.yarnpkg.com/fast-json-patch/-/fast-json-patch-3.1.1.tgz#85064ea1b1ebf97a3f7ad01e23f9337e72c66947"
1750 |   integrity sha512-vf6IHUX2SBcA+5/+4883dsIjpBTqmfBjmYiWK1savxQmFk4JfBMLa7ynTYOs1Rolp/T1betJxHiGD3g1Mn8lUQ==
1751 | 
1752 | fast-json-stable-stringify@^2.0.0:
1753 |   version "2.1.0"
1754 |   resolved "https://registry.yarnpkg.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz#874bf69c6f404c2b5d99c481341399fd55892633"
1755 |   integrity sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==
1756 | 
1757 | fast-levenshtein@^2.0.6:
1758 |   version "2.0.6"
1759 |   resolved "https://registry.yarnpkg.com/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz#3d8a5c66883a16a30ca8643e851f19baa7797917"
1760 |   integrity sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==
1761 | 
1762 | fastq@^1.6.0:
1763 |   version "1.17.1"
1764 |   resolved "https://registry.yarnpkg.com/fastq/-/fastq-1.17.1.tgz#2a523f07a4e7b1e81a42b91b8bf2254107753b47"
1765 |   integrity sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==
1766 |   dependencies:
1767 |     reusify "^1.0.4"
1768 | 
1769 | fault@^2.0.0:
1770 |   version "2.0.1"
1771 |   resolved "https://registry.yarnpkg.com/fault/-/fault-2.0.1.tgz#d47ca9f37ca26e4bd38374a7c500b5a384755b6c"
1772 |   integrity sha512-WtySTkS4OKev5JtpHXnib4Gxiurzh5NCGvWrFaZ34m6JehfTUhKZvn9njTfw48t6JumVQOmrKqpmGcdwxnhqBQ==
1773 |   dependencies:
1774 |     format "^0.2.0"
1775 | 
1776 | file-entry-cache@^6.0.1:
1777 |   version "6.0.1"
1778 |   resolved "https://registry.yarnpkg.com/file-entry-cache/-/file-entry-cache-6.0.1.tgz#211b2dd9659cb0394b073e7323ac3c933d522027"
1779 |   integrity sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==
1780 |   dependencies:
1781 |     flat-cache "^3.0.4"
1782 | 
1783 | file-selector@^0.2.4:
1784 |   version "0.2.4"
1785 |   resolved "https://registry.yarnpkg.com/file-selector/-/file-selector-0.2.4.tgz#7b98286f9dbb9925f420130ea5ed0a69238d4d80"
1786 |   integrity sha512-ZDsQNbrv6qRi1YTDOEWzf5J2KjZ9KMI1Q2SGeTkCJmNNW25Jg4TW4UMcmoqcg4WrAyKRcpBXdbWRxkfrOzVRbA==
1787 |   dependencies:
1788 |     tslib "^2.0.3"
1789 | 
1790 | fill-range@^7.0.1:
1791 |   version "7.0.1"
1792 |   resolved "https://registry.yarnpkg.com/fill-range/-/fill-range-7.0.1.tgz#1919a6a7c75fe38b2c7c77e5198535da9acdda40"
1793 |   integrity sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==
1794 |   dependencies:
1795 |     to-regex-range "^5.0.1"
1796 | 
1797 | find-up@^4.1.0:
1798 |   version "4.1.0"
1799 |   resolved "https://registry.yarnpkg.com/find-up/-/find-up-4.1.0.tgz#97afe7d6cdc0bc5928584b7c8d7b16e8a9aa5d19"
1800 |   integrity sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==
1801 |   dependencies:
1802 |     locate-path "^5.0.0"
1803 |     path-exists "^4.0.0"
1804 | 
1805 | find-up@^5.0.0:
1806 |   version "5.0.0"
1807 |   resolved "https://registry.yarnpkg.com/find-up/-/find-up-5.0.0.tgz#4c92819ecb7083561e4f4a240a86be5198f536fc"
1808 |   integrity sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==
1809 |   dependencies:
1810 |     locate-path "^6.0.0"
1811 |     path-exists "^4.0.0"
1812 | 
1813 | flat-cache@^3.0.4:
1814 |   version "3.2.0"
1815 |   resolved "https://registry.yarnpkg.com/flat-cache/-/flat-cache-3.2.0.tgz#2c0c2d5040c99b1632771a9d105725c0115363ee"
1816 |   integrity sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==
1817 |   dependencies:
1818 |     flatted "^3.2.9"
1819 |     keyv "^4.5.3"
1820 |     rimraf "^3.0.2"
1821 | 
1822 | flatted@^3.2.9:
1823 |   version "3.3.1"
1824 |   resolved "https://registry.yarnpkg.com/flatted/-/flatted-3.3.1.tgz#21db470729a6734d4997002f439cb308987f567a"
1825 |   integrity sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==
1826 | 
1827 | for-each@^0.3.3:
1828 |   version "0.3.3"
1829 |   resolved "https://registry.yarnpkg.com/for-each/-/for-each-0.3.3.tgz#69b447e88a0a5d32c3e7084f3f1710034b21376e"
1830 |   integrity sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==
1831 |   dependencies:
1832 |     is-callable "^1.1.3"
1833 | 
1834 | format@^0.2.0:
1835 |   version "0.2.2"
1836 |   resolved "https://registry.yarnpkg.com/format/-/format-0.2.2.tgz#d6170107e9efdc4ed30c9dc39016df942b5cb58b"
1837 |   integrity sha512-wzsgA6WOq+09wrU1tsJ09udeR/YZRaeArL9e1wPbFg3GG2yDnC2ldKpxs4xunpFF9DgqCqOIra3bc1HWrJ37Ww==
1838 | 
1839 | fs-extra@^8.1:
1840 |   version "8.1.0"
1841 |   resolved "https://registry.yarnpkg.com/fs-extra/-/fs-extra-8.1.0.tgz#49d43c45a88cd9677668cb7be1b46efdb8d2e1c0"
1842 |   integrity sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==
1843 |   dependencies:
1844 |     graceful-fs "^4.2.0"
1845 |     jsonfile "^4.0.0"
1846 |     universalify "^0.1.0"
1847 | 
1848 | fs.realpath@^1.0.0:
1849 |   version "1.0.0"
1850 |   resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
1851 |   integrity sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==
1852 | 
1853 | function-bind@^1.1.2:
1854 |   version "1.1.2"
1855 |   resolved "https://registry.yarnpkg.com/function-bind/-/function-bind-1.1.2.tgz#2c02d864d97f3ea6c8830c464cbd11ab6eab7a1c"
1856 |   integrity sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==
1857 | 
1858 | function.prototype.name@^1.1.5, function.prototype.name@^1.1.6:
1859 |   version "1.1.6"
1860 |   resolved "https://registry.yarnpkg.com/function.prototype.name/-/function.prototype.name-1.1.6.tgz#cdf315b7d90ee77a4c6ee216c3c3362da07533fd"
1861 |   integrity sha512-Z5kx79swU5P27WEayXM1tBi5Ze/lbIyiNgU3qyXUOf9b2rgXYyF9Dy9Cx+IQv/Lc8WCG6L82zwUPpSS9hGehIg==
1862 |   dependencies:
1863 |     call-bind "^1.0.2"
1864 |     define-properties "^1.2.0"
1865 |     es-abstract "^1.22.1"
1866 |     functions-have-names "^1.2.3"
1867 | 
1868 | functions-have-names@^1.2.3:
1869 |   version "1.2.3"
1870 |   resolved "https://registry.yarnpkg.com/functions-have-names/-/functions-have-names-1.2.3.tgz#0404fe4ee2ba2f607f0e0ec3c80bae994133b834"
1871 |   integrity sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==
1872 | 
1873 | fuse.js@^3.4.5:
1874 |   version "3.6.1"
1875 |   resolved "https://registry.yarnpkg.com/fuse.js/-/fuse.js-3.6.1.tgz#7de85fdd6e1b3377c23ce010892656385fd9b10c"
1876 |   integrity sha512-hT9yh/tiinkmirKrlv4KWOjztdoZo1mx9Qh4KvWqC7isoXwdUY3PNWUxceF4/qO9R6riA2C29jdTOeQOIROjgw==
1877 | 
1878 | get-caller-file@^2.0.1:
1879 |   version "2.0.5"
1880 |   resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
1881 |   integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
1882 | 
1883 | get-intrinsic@^1.1.3, get-intrinsic@^1.2.1, get-intrinsic@^1.2.3, get-intrinsic@^1.2.4:
1884 |   version "1.2.4"
1885 |   resolved "https://registry.yarnpkg.com/get-intrinsic/-/get-intrinsic-1.2.4.tgz#e385f5a4b5227d449c3eabbad05494ef0abbeadd"
1886 |   integrity sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==
1887 |   dependencies:
1888 |     es-errors "^1.3.0"
1889 |     function-bind "^1.1.2"
1890 |     has-proto "^1.0.1"
1891 |     has-symbols "^1.0.3"
1892 |     hasown "^2.0.0"
1893 | 
1894 | get-source@^2.0.12:
1895 |   version "2.0.12"
1896 |   resolved "https://registry.yarnpkg.com/get-source/-/get-source-2.0.12.tgz#0b47d57ea1e53ce0d3a69f4f3d277eb8047da944"
1897 |   integrity sha512-X5+4+iD+HoSeEED+uwrQ07BOQr0kEDFMVqqpBuI+RaZBpBpHCuXxo70bjar6f0b0u/DQJsJ7ssurpP0V60Az+w==
1898 |   dependencies:
1899 |     data-uri-to-buffer "^2.0.0"
1900 |     source-map "^0.6.1"
1901 | 
1902 | get-stream@^4.1.0:
1903 |   version "4.1.0"
1904 |   resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-4.1.0.tgz#c1b255575f3dc21d59bfc79cd3d2b46b1c3a54b5"
1905 |   integrity sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==
1906 |   dependencies:
1907 |     pump "^3.0.0"
1908 | 
1909 | get-stream@^5.1.0:
1910 |   version "5.2.0"
1911 |   resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-5.2.0.tgz#4966a1795ee5ace65e706c4b7beb71257d6e22d3"
1912 |   integrity sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==
1913 |   dependencies:
1914 |     pump "^3.0.0"
1915 | 
1916 | get-stream@^6.0.0:
1917 |   version "6.0.1"
1918 |   resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-6.0.1.tgz#a262d8eef67aced57c2852ad6167526a43cbf7b7"
1919 |   integrity sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==
1920 | 
1921 | get-symbol-description@^1.0.2:
1922 |   version "1.0.2"
1923 |   resolved "https://registry.yarnpkg.com/get-symbol-description/-/get-symbol-description-1.0.2.tgz#533744d5aa20aca4e079c8e5daf7fd44202821f5"
1924 |   integrity sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==
1925 |   dependencies:
1926 |     call-bind "^1.0.5"
1927 |     es-errors "^1.3.0"
1928 |     get-intrinsic "^1.2.4"
1929 | 
1930 | glob-parent@^5.1.2:
1931 |   version "5.1.2"
1932 |   resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.2.tgz#869832c58034fe68a4093c17dc15e8340d8401c4"
1933 |   integrity sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==
1934 |   dependencies:
1935 |     is-glob "^4.0.1"
1936 | 
1937 | glob-parent@^6.0.2:
1938 |   version "6.0.2"
1939 |   resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-6.0.2.tgz#6d237d99083950c79290f24c7642a3de9a28f9e3"
1940 |   integrity sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==
1941 |   dependencies:
1942 |     is-glob "^4.0.3"
1943 | 
1944 | glob@^7.1.3:
1945 |   version "7.2.3"
1946 |   resolved "https://registry.yarnpkg.com/glob/-/glob-7.2.3.tgz#b8df0fb802bbfa8e89bd1d938b4e16578ed44f2b"
1947 |   integrity sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==
1948 |   dependencies:
1949 |     fs.realpath "^1.0.0"
1950 |     inflight "^1.0.4"
1951 |     inherits "2"
1952 |     minimatch "^3.1.1"
1953 |     once "^1.3.0"
1954 |     path-is-absolute "^1.0.0"
1955 | 
1956 | global-dirs@^3.0.0:
1957 |   version "3.0.0"
1958 |   resolved "https://registry.yarnpkg.com/global-dirs/-/global-dirs-3.0.0.tgz#70a76fe84ea315ab37b1f5576cbde7d48ef72686"
1959 |   integrity sha512-v8ho2DS5RiCjftj1nD9NmnfaOzTdud7RRnVd9kFNOjqZbISlx5DQ+OrTkywgd0dIt7oFCvKetZSHoHcP3sDdiA==
1960 |   dependencies:
1961 |     ini "2.0.0"
1962 | 
1963 | globals@^11.1.0:
1964 |   version "11.12.0"
1965 |   resolved "https://registry.yarnpkg.com/globals/-/globals-11.12.0.tgz#ab8795338868a0babd8525758018c2a7eb95c42e"
1966 |   integrity sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==
1967 | 
1968 | globals@^13.19.0:
1969 |   version "13.24.0"
1970 |   resolved "https://registry.yarnpkg.com/globals/-/globals-13.24.0.tgz#8432a19d78ce0c1e833949c36adb345400bb1171"
1971 |   integrity sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==
1972 |   dependencies:
1973 |     type-fest "^0.20.2"
1974 | 
1975 | globalthis@^1.0.3:
1976 |   version "1.0.3"
1977 |   resolved "https://registry.yarnpkg.com/globalthis/-/globalthis-1.0.3.tgz#5852882a52b80dc301b0660273e1ed082f0b6ccf"
1978 |   integrity sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==
1979 |   dependencies:
1980 |     define-properties "^1.1.3"
1981 | 
1982 | globby@^11.0.1, globby@^11.1.0:
1983 |   version "11.1.0"
1984 |   resolved "https://registry.yarnpkg.com/globby/-/globby-11.1.0.tgz#bd4be98bb042f83d796f7e3811991fbe82a0d34b"
1985 |   integrity sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==
1986 |   dependencies:
1987 |     array-union "^2.1.0"
1988 |     dir-glob "^3.0.1"
1989 |     fast-glob "^3.2.9"
1990 |     ignore "^5.2.0"
1991 |     merge2 "^1.4.1"
1992 |     slash "^3.0.0"
1993 | 
1994 | gopd@^1.0.1:
1995 |   version "1.0.1"
1996 |   resolved "https://registry.yarnpkg.com/gopd/-/gopd-1.0.1.tgz#29ff76de69dac7489b7c0918a5788e56477c332c"
1997 |   integrity sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==
1998 |   dependencies:
1999 |     get-intrinsic "^1.1.3"
2000 | 
2001 | got@^9.6.0:
2002 |   version "9.6.0"
2003 |   resolved "https://registry.yarnpkg.com/got/-/got-9.6.0.tgz#edf45e7d67f99545705de1f7bbeeeb121765ed85"
2004 |   integrity sha512-R7eWptXuGYxwijs0eV+v3o6+XH1IqVK8dJOEecQfTmkncw9AV4dcw/Dhxi8MdlqPthxxpZyizMzyg8RTmEsG+Q==
2005 |   dependencies:
2006 |     "@sindresorhus/is" "^0.14.0"
2007 |     "@szmarczak/http-timer" "^1.1.2"
2008 |     cacheable-request "^6.0.0"
2009 |     decompress-response "^3.3.0"
2010 |     duplexer3 "^0.1.4"
2011 |     get-stream "^4.1.0"
2012 |     lowercase-keys "^1.0.1"
2013 |     mimic-response "^1.0.1"
2014 |     p-cancelable "^1.0.0"
2015 |     to-readable-stream "^1.0.0"
2016 |     url-parse-lax "^3.0.0"
2017 | 
2018 | graceful-fs@^4.1.2:
2019 |   version "4.2.11"
2020 |   resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.11.tgz#4183e4e8bf08bb6e05bbb2f7d2e0c8f712ca40e3"
2021 |   integrity sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==
2022 | 
2023 | graceful-fs@^4.1.6, graceful-fs@^4.2.0:
2024 |   version "4.2.10"
2025 |   resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.10.tgz#147d3a006da4ca3ce14728c7aefc287c367d7a6c"
2026 |   integrity sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==
2027 | 
2028 | graphemer@^1.4.0:
2029 |   version "1.4.0"
2030 |   resolved "https://registry.yarnpkg.com/graphemer/-/graphemer-1.4.0.tgz#fb2f1d55e0e3a1849aeffc90c4fa0dd53a0e66c6"
2031 |   integrity sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==
2032 | 
2033 | has-bigints@^1.0.1, has-bigints@^1.0.2:
2034 |   version "1.0.2"
2035 |   resolved "https://registry.yarnpkg.com/has-bigints/-/has-bigints-1.0.2.tgz#0871bd3e3d51626f6ca0966668ba35d5602d6eaa"
2036 |   integrity sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==
2037 | 
2038 | has-flag@^3.0.0:
2039 |   version "3.0.0"
2040 |   resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
2041 |   integrity sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==
2042 | 
2043 | has-flag@^4.0.0:
2044 |   version "4.0.0"
2045 |   resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-4.0.0.tgz#944771fd9c81c81265c4d6941860da06bb59479b"
2046 |   integrity sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==
2047 | 
2048 | has-property-descriptors@^1.0.0, has-property-descriptors@^1.0.2:
2049 |   version "1.0.2"
2050 |   resolved "https://registry.yarnpkg.com/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz#963ed7d071dc7bf5f084c5bfbe0d1b6222586854"
2051 |   integrity sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==
2052 |   dependencies:
2053 |     es-define-property "^1.0.0"
2054 | 
2055 | has-proto@^1.0.1, has-proto@^1.0.3:
2056 |   version "1.0.3"
2057 |   resolved "https://registry.yarnpkg.com/has-proto/-/has-proto-1.0.3.tgz#b31ddfe9b0e6e9914536a6ab286426d0214f77fd"
2058 |   integrity sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==
2059 | 
2060 | has-symbols@^1.0.2, has-symbols@^1.0.3:
2061 |   version "1.0.3"
2062 |   resolved "https://registry.yarnpkg.com/has-symbols/-/has-symbols-1.0.3.tgz#bb7b2c4349251dce87b125f7bdf874aa7c8b39f8"
2063 |   integrity sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==
2064 | 
2065 | has-tostringtag@^1.0.0, has-tostringtag@^1.0.2:
2066 |   version "1.0.2"
2067 |   resolved "https://registry.yarnpkg.com/has-tostringtag/-/has-tostringtag-1.0.2.tgz#2cdc42d40bef2e5b4eeab7c01a73c54ce7ab5abc"
2068 |   integrity sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==
2069 |   dependencies:
2070 |     has-symbols "^1.0.3"
2071 | 
2072 | has-yarn@^2.1.0:
2073 |   version "2.1.0"
2074 |   resolved "https://registry.yarnpkg.com/has-yarn/-/has-yarn-2.1.0.tgz#137e11354a7b5bf11aa5cb649cf0c6f3ff2b2e77"
2075 |   integrity sha512-UqBRqi4ju7T+TqGNdqAO0PaSVGsDGJUBQvk9eUWNGRY1CFGDzYhLWoM7JQEemnlvVcv/YEmc2wNW8BC24EnUsw==
2076 | 
2077 | hasown@^2.0.0, hasown@^2.0.1, hasown@^2.0.2:
2078 |   version "2.0.2"
2079 |   resolved "https://registry.yarnpkg.com/hasown/-/hasown-2.0.2.tgz#003eaf91be7adc372e84ec59dc37252cedb80003"
2080 |   integrity sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==
2081 |   dependencies:
2082 |     function-bind "^1.1.2"
2083 | 
2084 | http-cache-semantics@^4.0.0:
2085 |   version "4.1.0"
2086 |   resolved "https://registry.yarnpkg.com/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz#49e91c5cbf36c9b94bcfcd71c23d5249ec74e390"
2087 |   integrity sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ==
2088 | 
2089 | human-signals@^2.1.0:
2090 |   version "2.1.0"
2091 |   resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-2.1.0.tgz#dc91fcba42e4d06e4abaed33b3e7a3c02f514ea0"
2092 |   integrity sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==
2093 | 
2094 | iconv-lite@^0.6.3:
2095 |   version "0.6.3"
2096 |   resolved "https://registry.yarnpkg.com/iconv-lite/-/iconv-lite-0.6.3.tgz#a52f80bf38da1952eb5c681790719871a1a72501"
2097 |   integrity sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==
2098 |   dependencies:
2099 |     safer-buffer ">= 2.1.2 < 3.0.0"
2100 | 
2101 | ignore@^5.2.0:
2102 |   version "5.3.1"
2103 |   resolved "https://registry.yarnpkg.com/ignore/-/ignore-5.3.1.tgz#5073e554cd42c5b33b394375f538b8593e34d4ef"
2104 |   integrity sha512-5Fytz/IraMjqpwfd34ke28PTVMjZjJG2MPn5t7OE4eUCUNf8BAa7b5WUS9/Qvr6mwOQS7Mk6vdsMno5he+T8Xw==
2105 | 
2106 | image-size@~0.5.0:
2107 |   version "0.5.5"
2108 |   resolved "https://registry.yarnpkg.com/image-size/-/image-size-0.5.5.tgz#09dfd4ab9d20e29eb1c3e80b8990378df9e3cb9c"
2109 |   integrity sha512-6TDAlDPZxUFCv+fuOkIoXT/V/f3Qbq8e37p+YOiYrUv3v9cc3/6x78VdfPgFVaB9dZYeLUfKgHRebpkm/oP2VQ==
2110 | 
2111 | immediate@~3.0.5:
2112 |   version "3.0.6"
2113 |   resolved "https://registry.yarnpkg.com/immediate/-/immediate-3.0.6.tgz#9db1dbd0faf8de6fbe0f5dd5e56bb606280de69b"
2114 |   integrity sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==
2115 | 
2116 | immutability-helper@^3.1.1:
2117 |   version "3.1.1"
2118 |   resolved "https://registry.yarnpkg.com/immutability-helper/-/immutability-helper-3.1.1.tgz#2b86b2286ed3b1241c9e23b7b21e0444f52f77b7"
2119 |   integrity sha512-Q0QaXjPjwIju/28TsugCHNEASwoCcJSyJV3uO1sOIQGI0jKgm9f41Lvz0DZj3n46cNCyAZTsEYoY4C2bVRUzyQ==
2120 | 
2121 | immutable-json-patch@^1.1.2:
2122 |   version "1.1.2"
2123 |   resolved "https://registry.yarnpkg.com/immutable-json-patch/-/immutable-json-patch-1.1.2.tgz#7031f73018543061c8bf1c23489015a3e00acc60"
2124 |   integrity sha512-Jy9TQ7iQtzTV7BYURuecEWuX/b8M3z0xDClmUe8O05vc2DSaXY3pR2CCC/wTXsRkQ7XMe5Yc8n2gYigiLU0+NA==
2125 | 
2126 | import-fresh@^3.2.1:
2127 |   version "3.3.0"
2128 |   resolved "https://registry.yarnpkg.com/import-fresh/-/import-fresh-3.3.0.tgz#37162c25fcb9ebaa2e6e53d5b4d88ce17d9e0c2b"
2129 |   integrity sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==
2130 |   dependencies:
2131 |     parent-module "^1.0.0"
2132 |     resolve-from "^4.0.0"
2133 | 
2134 | import-lazy@^2.1.0:
2135 |   version "2.1.0"
2136 |   resolved "https://registry.yarnpkg.com/import-lazy/-/import-lazy-2.1.0.tgz#05698e3d45c88e8d7e9d92cb0584e77f096f3e43"
2137 |   integrity sha512-m7ZEHgtw69qOGw+jwxXkHlrlIPdTGkyh66zXZ1ajZbxkDBNjSY/LGbmjc7h0s2ELsUDTAhFr55TrPSSqJGPG0A==
2138 | 
2139 | imurmurhash@^0.1.4:
2140 |   version "0.1.4"
2141 |   resolved "https://registry.yarnpkg.com/imurmurhash/-/imurmurhash-0.1.4.tgz#9218b9b2b928a238b13dc4fb6b6d576f231453ea"
2142 |   integrity sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==
2143 | 
2144 | indent-string@^4.0.0:
2145 |   version "4.0.0"
2146 |   resolved "https://registry.yarnpkg.com/indent-string/-/indent-string-4.0.0.tgz#624f8f4497d619b2d9768531d58f4122854d7251"
2147 |   integrity sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==
2148 | 
2149 | inflight@^1.0.4:
2150 |   version "1.0.6"
2151 |   resolved "https://registry.yarnpkg.com/inflight/-/inflight-1.0.6.tgz#49bd6331d7d02d0c09bc910a1075ba8165b56df9"
2152 |   integrity sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==
2153 |   dependencies:
2154 |     once "^1.3.0"
2155 |     wrappy "1"
2156 | 
2157 | inherits@2:
2158 |   version "2.0.4"
2159 |   resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.4.tgz#0fa2c64f932917c3433a0ded55363aae37416b7c"
2160 |   integrity sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==
2161 | 
2162 | ini@2.0.0:
2163 |   version "2.0.0"
2164 |   resolved "https://registry.yarnpkg.com/ini/-/ini-2.0.0.tgz#e5fd556ecdd5726be978fa1001862eacb0a94bc5"
2165 |   integrity sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==
2166 | 
2167 | ini@~1.3.0:
2168 |   version "1.3.8"
2169 |   resolved "https://registry.yarnpkg.com/ini/-/ini-1.3.8.tgz#a29da425b48806f34767a4efce397269af28432c"
2170 |   integrity sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==
2171 | 
2172 | internal-slot@^1.0.7:
2173 |   version "1.0.7"
2174 |   resolved "https://registry.yarnpkg.com/internal-slot/-/internal-slot-1.0.7.tgz#c06dcca3ed874249881007b0a5523b172a190802"
2175 |   integrity sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==
2176 |   dependencies:
2177 |     es-errors "^1.3.0"
2178 |     hasown "^2.0.0"
2179 |     side-channel "^1.0.4"
2180 | 
2181 | is-array-buffer@^3.0.4:
2182 |   version "3.0.4"
2183 |   resolved "https://registry.yarnpkg.com/is-array-buffer/-/is-array-buffer-3.0.4.tgz#7a1f92b3d61edd2bc65d24f130530ea93d7fae98"
2184 |   integrity sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==
2185 |   dependencies:
2186 |     call-bind "^1.0.2"
2187 |     get-intrinsic "^1.2.1"
2188 | 
2189 | is-arrayish@^0.2.1:
2190 |   version "0.2.1"
2191 |   resolved "https://registry.yarnpkg.com/is-arrayish/-/is-arrayish-0.2.1.tgz#77c99840527aa8ecb1a8ba697b80645a7a926a9d"
2192 |   integrity sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==
2193 | 
2194 | is-async-function@^2.0.0:
2195 |   version "2.0.0"
2196 |   resolved "https://registry.yarnpkg.com/is-async-function/-/is-async-function-2.0.0.tgz#8e4418efd3e5d3a6ebb0164c05ef5afb69aa9646"
2197 |   integrity sha512-Y1JXKrfykRJGdlDwdKlLpLyMIiWqWvuSd17TvZk68PLAOGOoF4Xyav1z0Xhoi+gCYjZVeC5SI+hYFOfvXmGRCA==
2198 |   dependencies:
2199 |     has-tostringtag "^1.0.0"
2200 | 
2201 | is-bigint@^1.0.1:
2202 |   version "1.0.4"
2203 |   resolved "https://registry.yarnpkg.com/is-bigint/-/is-bigint-1.0.4.tgz#08147a1875bc2b32005d41ccd8291dffc6691df3"
2204 |   integrity sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==
2205 |   dependencies:
2206 |     has-bigints "^1.0.1"
2207 | 
2208 | is-boolean-object@^1.1.0:
2209 |   version "1.1.2"
2210 |   resolved "https://registry.yarnpkg.com/is-boolean-object/-/is-boolean-object-1.1.2.tgz#5c6dc200246dd9321ae4b885a114bb1f75f63719"
2211 |   integrity sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==
2212 |   dependencies:
2213 |     call-bind "^1.0.2"
2214 |     has-tostringtag "^1.0.0"
2215 | 
2216 | is-callable@^1.1.3, is-callable@^1.1.4, is-callable@^1.2.7:
2217 |   version "1.2.7"
2218 |   resolved "https://registry.yarnpkg.com/is-callable/-/is-callable-1.2.7.tgz#3bc2a85ea742d9e36205dcacdd72ca1fdc51b055"
2219 |   integrity sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==
2220 | 
2221 | is-ci@^2.0.0:
2222 |   version "2.0.0"
2223 |   resolved "https://registry.yarnpkg.com/is-ci/-/is-ci-2.0.0.tgz#6bc6334181810e04b5c22b3d589fdca55026404c"
2224 |   integrity sha512-YfJT7rkpQB0updsdHLGWrvhBJfcfzNNawYDNIyQXJz0IViGf75O8EBPKSdvw2rF+LGCsX4FZ8tcr3b19LcZq4w==
2225 |   dependencies:
2226 |     ci-info "^2.0.0"
2227 | 
2228 | is-core-module@^2.13.0:
2229 |   version "2.13.1"
2230 |   resolved "https://registry.yarnpkg.com/is-core-module/-/is-core-module-2.13.1.tgz#ad0d7532c6fea9da1ebdc82742d74525c6273384"
2231 |   integrity sha512-hHrIjvZsftOsvKSn2TRYl63zvxsgE0K+0mYMoH6gD4omR5IWB2KynivBQczo3+wF1cCkjzvptnI9Q0sPU66ilw==
2232 |   dependencies:
2233 |     hasown "^2.0.0"
2234 | 
2235 | is-data-view@^1.0.1:
2236 |   version "1.0.1"
2237 |   resolved "https://registry.yarnpkg.com/is-data-view/-/is-data-view-1.0.1.tgz#4b4d3a511b70f3dc26d42c03ca9ca515d847759f"
2238 |   integrity sha512-AHkaJrsUVW6wq6JS8y3JnM/GJF/9cf+k20+iDzlSaJrinEo5+7vRiteOSwBhHRiAyQATN1AmY4hwzxJKPmYf+w==
2239 |   dependencies:
2240 |     is-typed-array "^1.1.13"
2241 | 
2242 | is-date-object@^1.0.1, is-date-object@^1.0.5:
2243 |   version "1.0.5"
2244 |   resolved "https://registry.yarnpkg.com/is-date-object/-/is-date-object-1.0.5.tgz#0841d5536e724c25597bf6ea62e1bd38298df31f"
2245 |   integrity sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==
2246 |   dependencies:
2247 |     has-tostringtag "^1.0.0"
2248 | 
2249 | is-docker@^2.0.0:
2250 |   version "2.2.1"
2251 |   resolved "https://registry.yarnpkg.com/is-docker/-/is-docker-2.2.1.tgz#33eeabe23cfe86f14bde4408a02c0cfb853acdaa"
2252 |   integrity sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==
2253 | 
2254 | is-extglob@^2.1.1:
2255 |   version "2.1.1"
2256 |   resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
2257 |   integrity sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==
2258 | 
2259 | is-finalizationregistry@^1.0.2:
2260 |   version "1.0.2"
2261 |   resolved "https://registry.yarnpkg.com/is-finalizationregistry/-/is-finalizationregistry-1.0.2.tgz#c8749b65f17c133313e661b1289b95ad3dbd62e6"
2262 |   integrity sha512-0by5vtUJs8iFQb5TYUHHPudOR+qXYIMKtiUzvLIZITZUjknFmziyBJuLhVRc+Ds0dREFlskDNJKYIdIzu/9pfw==
2263 |   dependencies:
2264 |     call-bind "^1.0.2"
2265 | 
2266 | is-fullwidth-code-point@^3.0.0:
2267 |   version "3.0.0"
2268 |   resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz#f116f8064fe90b3f7844a38997c0b75051269f1d"
2269 |   integrity sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==
2270 | 
2271 | is-generator-function@^1.0.10:
2272 |   version "1.0.10"
2273 |   resolved "https://registry.yarnpkg.com/is-generator-function/-/is-generator-function-1.0.10.tgz#f1558baf1ac17e0deea7c0415c438351ff2b3c72"
2274 |   integrity sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==
2275 |   dependencies:
2276 |     has-tostringtag "^1.0.0"
2277 | 
2278 | is-glob@^4.0.0, is-glob@^4.0.1, is-glob@^4.0.3:
2279 |   version "4.0.3"
2280 |   resolved "https://registry.yarnpkg.com/is-glob/-/is-glob-4.0.3.tgz#64f61e42cbbb2eec2071a9dac0b28ba1e65d5084"
2281 |   integrity sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==
2282 |   dependencies:
2283 |     is-extglob "^2.1.1"
2284 | 
2285 | is-installed-globally@^0.4.0:
2286 |   version "0.4.0"
2287 |   resolved "https://registry.yarnpkg.com/is-installed-globally/-/is-installed-globally-0.4.0.tgz#9a0fd407949c30f86eb6959ef1b7994ed0b7b520"
2288 |   integrity sha512-iwGqO3J21aaSkC7jWnHP/difazwS7SFeIqxv6wEtLU8Y5KlzFTjyqcSIT0d8s4+dDhKytsk9PJZ2BkS5eZwQRQ==
2289 |   dependencies:
2290 |     global-dirs "^3.0.0"
2291 |     is-path-inside "^3.0.2"
2292 | 
2293 | is-map@^2.0.3:
2294 |   version "2.0.3"
2295 |   resolved "https://registry.yarnpkg.com/is-map/-/is-map-2.0.3.tgz#ede96b7fe1e270b3c4465e3a465658764926d62e"
2296 |   integrity sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==
2297 | 
2298 | is-negative-zero@^2.0.3:
2299 |   version "2.0.3"
2300 |   resolved "https://registry.yarnpkg.com/is-negative-zero/-/is-negative-zero-2.0.3.tgz#ced903a027aca6381b777a5743069d7376a49747"
2301 |   integrity sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==
2302 | 
2303 | is-npm@^5.0.0:
2304 |   version "5.0.0"
2305 |   resolved "https://registry.yarnpkg.com/is-npm/-/is-npm-5.0.0.tgz#43e8d65cc56e1b67f8d47262cf667099193f45a8"
2306 |   integrity sha512-WW/rQLOazUq+ST/bCAVBp/2oMERWLsR7OrKyt052dNDk4DHcDE0/7QSXITlmi+VBcV13DfIbysG3tZJm5RfdBA==
2307 | 
2308 | is-number-object@^1.0.4:
2309 |   version "1.0.7"
2310 |   resolved "https://registry.yarnpkg.com/is-number-object/-/is-number-object-1.0.7.tgz#59d50ada4c45251784e9904f5246c742f07a42fc"
2311 |   integrity sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==
2312 |   dependencies:
2313 |     has-tostringtag "^1.0.0"
2314 | 
2315 | is-number@^7.0.0:
2316 |   version "7.0.0"
2317 |   resolved "https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b"
2318 |   integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==
2319 | 
2320 | is-obj@^2.0.0:
2321 |   version "2.0.0"
2322 |   resolved "https://registry.yarnpkg.com/is-obj/-/is-obj-2.0.0.tgz#473fb05d973705e3fd9620545018ca8e22ef4982"
2323 |   integrity sha512-drqDG3cbczxxEJRoOXcOjtdp1J/lyp1mNn0xaznRs8+muBhgQcrnbspox5X5fOw0HnMnbfDzvnEMEtqDEJEo8w==
2324 | 
2325 | is-path-inside@^3.0.2, is-path-inside@^3.0.3:
2326 |   version "3.0.3"
2327 |   resolved "https://registry.yarnpkg.com/is-path-inside/-/is-path-inside-3.0.3.tgz#d231362e53a07ff2b0e0ea7fed049161ffd16283"
2328 |   integrity sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==
2329 | 
2330 | is-plain-object@^5.0.0:
2331 |   version "5.0.0"
2332 |   resolved "https://registry.yarnpkg.com/is-plain-object/-/is-plain-object-5.0.0.tgz#4427f50ab3429e9025ea7d52e9043a9ef4159344"
2333 |   integrity sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==
2334 | 
2335 | is-regex@^1.1.4:
2336 |   version "1.1.4"
2337 |   resolved "https://registry.yarnpkg.com/is-regex/-/is-regex-1.1.4.tgz#eef5663cd59fa4c0ae339505323df6854bb15958"
2338 |   integrity sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==
2339 |   dependencies:
2340 |     call-bind "^1.0.2"
2341 |     has-tostringtag "^1.0.0"
2342 | 
2343 | is-set@^2.0.3:
2344 |   version "2.0.3"
2345 |   resolved "https://registry.yarnpkg.com/is-set/-/is-set-2.0.3.tgz#8ab209ea424608141372ded6e0cb200ef1d9d01d"
2346 |   integrity sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==
2347 | 
2348 | is-shared-array-buffer@^1.0.2, is-shared-array-buffer@^1.0.3:
2349 |   version "1.0.3"
2350 |   resolved "https://registry.yarnpkg.com/is-shared-array-buffer/-/is-shared-array-buffer-1.0.3.tgz#1237f1cba059cdb62431d378dcc37d9680181688"
2351 |   integrity sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==
2352 |   dependencies:
2353 |     call-bind "^1.0.7"
2354 | 
2355 | is-stream@^2.0.0:
2356 |   version "2.0.1"
2357 |   resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.1.tgz#fac1e3d53b97ad5a9d0ae9cef2389f5810a5c077"
2358 |   integrity sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==
2359 | 
2360 | is-string@^1.0.5, is-string@^1.0.7:
2361 |   version "1.0.7"
2362 |   resolved "https://registry.yarnpkg.com/is-string/-/is-string-1.0.7.tgz#0dd12bf2006f255bb58f695110eff7491eebc0fd"
2363 |   integrity sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==
2364 |   dependencies:
2365 |     has-tostringtag "^1.0.0"
2366 | 
2367 | is-symbol@^1.0.2, is-symbol@^1.0.3:
2368 |   version "1.0.4"
2369 |   resolved "https://registry.yarnpkg.com/is-symbol/-/is-symbol-1.0.4.tgz#a6dac93b635b063ca6872236de88910a57af139c"
2370 |   integrity sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==
2371 |   dependencies:
2372 |     has-symbols "^1.0.2"
2373 | 
2374 | is-typed-array@^1.1.13:
2375 |   version "1.1.13"
2376 |   resolved "https://registry.yarnpkg.com/is-typed-array/-/is-typed-array-1.1.13.tgz#d6c5ca56df62334959322d7d7dd1cca50debe229"
2377 |   integrity sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==
2378 |   dependencies:
2379 |     which-typed-array "^1.1.14"
2380 | 
2381 | is-typedarray@^1.0.0:
2382 |   version "1.0.0"
2383 |   resolved "https://registry.yarnpkg.com/is-typedarray/-/is-typedarray-1.0.0.tgz#e479c80858df0c1b11ddda6940f96011fcda4a9a"
2384 |   integrity sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==
2385 | 
2386 | is-weakmap@^2.0.2:
2387 |   version "2.0.2"
2388 |   resolved "https://registry.yarnpkg.com/is-weakmap/-/is-weakmap-2.0.2.tgz#bf72615d649dfe5f699079c54b83e47d1ae19cfd"
2389 |   integrity sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==
2390 | 
2391 | is-weakref@^1.0.2:
2392 |   version "1.0.2"
2393 |   resolved "https://registry.yarnpkg.com/is-weakref/-/is-weakref-1.0.2.tgz#9529f383a9338205e89765e0392efc2f100f06f2"
2394 |   integrity sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==
2395 |   dependencies:
2396 |     call-bind "^1.0.2"
2397 | 
2398 | is-weakset@^2.0.3:
2399 |   version "2.0.3"
2400 |   resolved "https://registry.yarnpkg.com/is-weakset/-/is-weakset-2.0.3.tgz#e801519df8c0c43e12ff2834eead84ec9e624007"
2401 |   integrity sha512-LvIm3/KWzS9oRFHugab7d+M/GcBXuXX5xZkzPmN+NxihdQlZUQ4dWuSV1xR/sq6upL1TJEDrfBgRepHFdBtSNQ==
2402 |   dependencies:
2403 |     call-bind "^1.0.7"
2404 |     get-intrinsic "^1.2.4"
2405 | 
2406 | is-what@^3.14.1:
2407 |   version "3.14.1"
2408 |   resolved "https://registry.yarnpkg.com/is-what/-/is-what-3.14.1.tgz#e1222f46ddda85dead0fd1c9df131760e77755c1"
2409 |   integrity sha512-sNxgpk9793nzSs7bA6JQJGeIuRBQhAaNGG77kzYQgMkrID+lS6SlK07K5LaptscDlSaIgH+GPFzf+d75FVxozA==
2410 | 
2411 | is-wsl@^2.1.1:
2412 |   version "2.2.0"
2413 |   resolved "https://registry.yarnpkg.com/is-wsl/-/is-wsl-2.2.0.tgz#74a4c76e77ca9fd3f932f290c17ea326cd157271"
2414 |   integrity sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==
2415 |   dependencies:
2416 |     is-docker "^2.0.0"
2417 | 
2418 | is-yarn-global@^0.3.0:
2419 |   version "0.3.0"
2420 |   resolved "https://registry.yarnpkg.com/is-yarn-global/-/is-yarn-global-0.3.0.tgz#d502d3382590ea3004893746754c89139973e232"
2421 |   integrity sha512-VjSeb/lHmkoyd8ryPVIKvOCn4D1koMqY+vqyjjUfc3xyKtP4dYOxM44sZrnqQSzSds3xyOrUTLTC9LVCVgLngw==
2422 | 
2423 | isarray@^2.0.5:
2424 |   version "2.0.5"
2425 |   resolved "https://registry.yarnpkg.com/isarray/-/isarray-2.0.5.tgz#8af1e4c1221244cc62459faf38940d4e644a5723"
2426 |   integrity sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==
2427 | 
2428 | isexe@^2.0.0:
2429 |   version "2.0.0"
2430 |   resolved "https://registry.yarnpkg.com/isexe/-/isexe-2.0.0.tgz#e8fbf374dc556ff8947a10dcb0572d633f2cfa10"
2431 |   integrity sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==
2432 | 
2433 | iterator.prototype@^1.1.2:
2434 |   version "1.1.2"
2435 |   resolved "https://registry.yarnpkg.com/iterator.prototype/-/iterator.prototype-1.1.2.tgz#5e29c8924f01916cb9335f1ff80619dcff22b0c0"
2436 |   integrity sha512-DR33HMMr8EzwuRL8Y9D3u2BMj8+RqSE850jfGu59kS7tbmPLzGkZmVSfyCFSDxuZiEY6Rzt3T2NA/qU+NwVj1w==
2437 |   dependencies:
2438 |     define-properties "^1.2.1"
2439 |     get-intrinsic "^1.2.1"
2440 |     has-symbols "^1.0.3"
2441 |     reflect.getprototypeof "^1.0.4"
2442 |     set-function-name "^2.0.1"
2443 | 
2444 | javascript-natural-sort@0.7.1:
2445 |   version "0.7.1"
2446 |   resolved "https://registry.yarnpkg.com/javascript-natural-sort/-/javascript-natural-sort-0.7.1.tgz#f9e2303d4507f6d74355a73664d1440fb5a0ef59"
2447 |   integrity sha512-nO6jcEfZWQXDhOiBtG2KvKyEptz7RVbpGP4vTD2hLBdmNQSsCiicO2Ioinv6UI4y9ukqnBpy+XZ9H6uLNgJTlw==
2448 | 
2449 | "js-tokens@^3.0.0 || ^4.0.0", js-tokens@^4.0.0:
2450 |   version "4.0.0"
2451 |   resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
2452 |   integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
2453 | 
2454 | js-yaml@^4.1.0:
2455 |   version "4.1.0"
2456 |   resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-4.1.0.tgz#c1fb65f8f5017901cdd2c951864ba18458a10602"
2457 |   integrity sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==
2458 |   dependencies:
2459 |     argparse "^2.0.1"
2460 | 
2461 | jsesc@^2.5.1:
2462 |   version "2.5.2"
2463 |   resolved "https://registry.yarnpkg.com/jsesc/-/jsesc-2.5.2.tgz#80564d2e483dacf6e8ef209650a67df3f0c283a4"
2464 |   integrity sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==
2465 | 
2466 | json-buffer@3.0.0:
2467 |   version "3.0.0"
2468 |   resolved "https://registry.yarnpkg.com/json-buffer/-/json-buffer-3.0.0.tgz#5b1f397afc75d677bde8bcfc0e47e1f9a3d9a898"
2469 |   integrity sha512-CuUqjv0FUZIdXkHPI8MezCnFCdaTAacej1TZYulLoAg1h/PhwkdXFN4V/gzY4g+fMBCOV2xF+rp7t2XD2ns/NQ==
2470 | 
2471 | json-buffer@3.0.1:
2472 |   version "3.0.1"
2473 |   resolved "https://registry.yarnpkg.com/json-buffer/-/json-buffer-3.0.1.tgz#9338802a30d3b6605fbe0613e094008ca8c05a13"
2474 |   integrity sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==
2475 | 
2476 | json-parse-even-better-errors@^2.3.0:
2477 |   version "2.3.1"
2478 |   resolved "https://registry.yarnpkg.com/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz#7c47805a94319928e05777405dc12e1f7a4ee02d"
2479 |   integrity sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==
2480 | 
2481 | json-schema-traverse@^0.4.1:
2482 |   version "0.4.1"
2483 |   resolved "https://registry.yarnpkg.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz#69f6a87d9513ab8bb8fe63bdb0979c448e684660"
2484 |   integrity sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==
2485 | 
2486 | json-stable-stringify-without-jsonify@^1.0.1:
2487 |   version "1.0.1"
2488 |   resolved "https://registry.yarnpkg.com/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz#9db7b59496ad3f3cfef30a75142d2d930ad72651"
2489 |   integrity sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==
2490 | 
2491 | jsonfile@^4.0.0:
2492 |   version "4.0.0"
2493 |   resolved "https://registry.yarnpkg.com/jsonfile/-/jsonfile-4.0.0.tgz#8771aae0799b64076b76640fca058f9c10e33ecb"
2494 |   integrity sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==
2495 |   optionalDependencies:
2496 |     graceful-fs "^4.1.6"
2497 | 
2498 | "jsx-ast-utils@^2.4.1 || ^3.0.0":
2499 |   version "3.3.5"
2500 |   resolved "https://registry.yarnpkg.com/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz#4766bd05a8e2a11af222becd19e15575e52a853a"
2501 |   integrity sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==
2502 |   dependencies:
2503 |     array-includes "^3.1.6"
2504 |     array.prototype.flat "^1.3.1"
2505 |     object.assign "^4.1.4"
2506 |     object.values "^1.1.6"
2507 | 
2508 | keyv@^3.0.0:
2509 |   version "3.1.0"
2510 |   resolved "https://registry.yarnpkg.com/keyv/-/keyv-3.1.0.tgz#ecc228486f69991e49e9476485a5be1e8fc5c4d9"
2511 |   integrity sha512-9ykJ/46SN/9KPM/sichzQ7OvXyGDYKGTaDlKMGCAlg2UK8KRy4jb0d8sFc+0Tt0YYnThq8X2RZgCg74RPxgcVA==
2512 |   dependencies:
2513 |     json-buffer "3.0.0"
2514 | 
2515 | keyv@^4.5.3:
2516 |   version "4.5.4"
2517 |   resolved "https://registry.yarnpkg.com/keyv/-/keyv-4.5.4.tgz#a879a99e29452f942439f2a405e3af8b31d4de93"
2518 |   integrity sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==
2519 |   dependencies:
2520 |     json-buffer "3.0.1"
2521 | 
2522 | kleur@^3.0.3:
2523 |   version "3.0.3"
2524 |   resolved "https://registry.yarnpkg.com/kleur/-/kleur-3.0.3.tgz#a79c9ecc86ee1ce3fa6206d1216c501f147fc07e"
2525 |   integrity sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==
2526 | 
2527 | kleur@^4.0.3:
2528 |   version "4.1.5"
2529 |   resolved "https://registry.yarnpkg.com/kleur/-/kleur-4.1.5.tgz#95106101795f7050c6c650f350c683febddb1780"
2530 |   integrity sha512-o+NO+8WrRiQEE4/7nwRJhN1HWpVmJm511pBHUxPLtp0BUISzlBplORYSmTclCnJvQq2tKu/sgl3xVpkc7ZWuQQ==
2531 | 
2532 | latest-version@^5.1.0:
2533 |   version "5.1.0"
2534 |   resolved "https://registry.yarnpkg.com/latest-version/-/latest-version-5.1.0.tgz#119dfe908fe38d15dfa43ecd13fa12ec8832face"
2535 |   integrity sha512-weT+r0kTkRQdCdYCNtkMwWXQTMEswKrFBkm4ckQOMVhhqhIMI1UT2hMj+1iigIhgSZm5gTmrRXBNoGUgaTY1xA==
2536 |   dependencies:
2537 |     package-json "^6.3.0"
2538 | 
2539 | less@^4.2.0:
2540 |   version "4.2.0"
2541 |   resolved "https://registry.yarnpkg.com/less/-/less-4.2.0.tgz#cbefbfaa14a4cd388e2099b2b51f956e1465c450"
2542 |   integrity sha512-P3b3HJDBtSzsXUl0im2L7gTO5Ubg8mEN6G8qoTS77iXxXX4Hvu4Qj540PZDvQ8V6DmX6iXo98k7Md0Cm1PrLaA==
2543 |   dependencies:
2544 |     copy-anything "^2.0.1"
2545 |     parse-node-version "^1.0.1"
2546 |     tslib "^2.3.0"
2547 |   optionalDependencies:
2548 |     errno "^0.1.1"
2549 |     graceful-fs "^4.1.2"
2550 |     image-size "~0.5.0"
2551 |     make-dir "^2.1.0"
2552 |     mime "^1.4.1"
2553 |     needle "^3.1.0"
2554 |     source-map "~0.6.0"
2555 | 
2556 | levn@^0.4.1:
2557 |   version "0.4.1"
2558 |   resolved "https://registry.yarnpkg.com/levn/-/levn-0.4.1.tgz#ae4562c007473b932a6200d403268dd2fffc6ade"
2559 |   integrity sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==
2560 |   dependencies:
2561 |     prelude-ls "^1.2.1"
2562 |     type-check "~0.4.0"
2563 | 
2564 | lie@3.1.1:
2565 |   version "3.1.1"
2566 |   resolved "https://registry.yarnpkg.com/lie/-/lie-3.1.1.tgz#9a436b2cc7746ca59de7a41fa469b3efb76bd87e"
2567 |   integrity sha512-RiNhHysUjhrDQntfYSfY4MU24coXXdEOgw9WGcKHNeEwffDYbF//u87M1EWaMGzuFoSbqW0C9C6lEEhDOAswfw==
2568 |   dependencies:
2569 |     immediate "~3.0.5"
2570 | 
2571 | lines-and-columns@^1.1.6:
2572 |   version "1.2.4"
2573 |   resolved "https://registry.yarnpkg.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz#eca284f75d2965079309dc0ad9255abb2ebc1632"
2574 |   integrity sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==
2575 | 
2576 | localforage@^1.10.0:
2577 |   version "1.10.0"
2578 |   resolved "https://registry.yarnpkg.com/localforage/-/localforage-1.10.0.tgz#5c465dc5f62b2807c3a84c0c6a1b1b3212781dd4"
2579 |   integrity sha512-14/H1aX7hzBBmmh7sGPd+AOMkkIrHM3Z1PAyGgZigA1H1p5O5ANnMyWzvpAETtG68/dC4pC0ncy3+PPGzXZHPg==
2580 |   dependencies:
2581 |     lie "3.1.1"
2582 | 
2583 | locate-path@^5.0.0:
2584 |   version "5.0.0"
2585 |   resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-5.0.0.tgz#1afba396afd676a6d42504d0a67a3a7eb9f62aa0"
2586 |   integrity sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==
2587 |   dependencies:
2588 |     p-locate "^4.1.0"
2589 | 
2590 | locate-path@^6.0.0:
2591 |   version "6.0.0"
2592 |   resolved "https://registry.yarnpkg.com/locate-path/-/locate-path-6.0.0.tgz#55321eb309febbc59c4801d931a72452a681d286"
2593 |   integrity sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==
2594 |   dependencies:
2595 |     p-locate "^5.0.0"
2596 | 
2597 | lodash.merge@^4.6.2:
2598 |   version "4.6.2"
2599 |   resolved "https://registry.yarnpkg.com/lodash.merge/-/lodash.merge-4.6.2.tgz#558aa53b43b661e1925a0afdfa36a9a1085fe57a"
2600 |   integrity sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==
2601 | 
2602 | lodash@^4.17.21:
2603 |   version "4.17.21"
2604 |   resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.21.tgz#679591c564c3bffaae8454cf0b3df370c3d6911c"
2605 |   integrity sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==
2606 | 
2607 | longest-streak@^3.0.0:
2608 |   version "3.1.0"
2609 |   resolved "https://registry.yarnpkg.com/longest-streak/-/longest-streak-3.1.0.tgz#62fa67cd958742a1574af9f39866364102d90cd4"
2610 |   integrity sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==
2611 | 
2612 | loose-envify@^1.4.0:
2613 |   version "1.4.0"
2614 |   resolved "https://registry.yarnpkg.com/loose-envify/-/loose-envify-1.4.0.tgz#71ee51fa7be4caec1a63839f7e682d8132d30caf"
2615 |   integrity sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==
2616 |   dependencies:
2617 |     js-tokens "^3.0.0 || ^4.0.0"
2618 | 
2619 | lowercase-keys@^1.0.0, lowercase-keys@^1.0.1:
2620 |   version "1.0.1"
2621 |   resolved "https://registry.yarnpkg.com/lowercase-keys/-/lowercase-keys-1.0.1.tgz#6f9e30b47084d971a7c820ff15a6c5167b74c26f"
2622 |   integrity sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==
2623 | 
2624 | lowercase-keys@^2.0.0:
2625 |   version "2.0.0"
2626 |   resolved "https://registry.yarnpkg.com/lowercase-keys/-/lowercase-keys-2.0.0.tgz#2603e78b7b4b0006cbca2fbcc8a3202558ac9479"
2627 |   integrity sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==
2628 | 
2629 | lru-cache@^6.0.0:
2630 |   version "6.0.0"
2631 |   resolved "https://registry.yarnpkg.com/lru-cache/-/lru-cache-6.0.0.tgz#6d6fe6570ebd96aaf90fcad1dafa3b2566db3a94"
2632 |   integrity sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==
2633 |   dependencies:
2634 |     yallist "^4.0.0"
2635 | 
2636 | luxon@^3.2.0:
2637 |   version "3.4.4"
2638 |   resolved "https://registry.yarnpkg.com/luxon/-/luxon-3.4.4.tgz#cf20dc27dc532ba41a169c43fdcc0063601577af"
2639 |   integrity sha512-zobTr7akeGHnv7eBOXcRgMeCP6+uyYsczwmeRCauvpvaAltgNyTbLH/+VaEAPUeWBT+1GuNmz4wC/6jtQzbbVA==
2640 | 
2641 | magic-string@^0.30.10:
2642 |   version "0.30.10"
2643 |   resolved "https://registry.yarnpkg.com/magic-string/-/magic-string-0.30.10.tgz#123d9c41a0cb5640c892b041d4cfb3bd0aa4b39e"
2644 |   integrity sha512-iIRwTIf0QKV3UAnYK4PU8uiEc4SRh5jX0mwpIwETPpHdhVM4f53RSwS/vXvN1JhGX+Cs7B8qIq3d6AH49O5fAQ==
2645 |   dependencies:
2646 |     "@jridgewell/sourcemap-codec" "^1.4.15"
2647 | 
2648 | make-dir@^2.1.0:
2649 |   version "2.1.0"
2650 |   resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-2.1.0.tgz#5f0310e18b8be898cc07009295a30ae41e91e6f5"
2651 |   integrity sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==
2652 |   dependencies:
2653 |     pify "^4.0.1"
2654 |     semver "^5.6.0"
2655 | 
2656 | make-dir@^3.0.0:
2657 |   version "3.1.0"
2658 |   resolved "https://registry.yarnpkg.com/make-dir/-/make-dir-3.1.0.tgz#415e967046b3a7f1d185277d84aa58203726a13f"
2659 |   integrity sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==
2660 |   dependencies:
2661 |     semver "^6.0.0"
2662 | 
2663 | mark.js@^8.11.1:
2664 |   version "8.11.1"
2665 |   resolved "https://registry.yarnpkg.com/mark.js/-/mark.js-8.11.1.tgz#180f1f9ebef8b0e638e4166ad52db879beb2ffc5"
2666 |   integrity sha512-1I+1qpDt4idfgLQG+BNWmrqku+7/2bi5nLf4YwF8y8zXvmfiTBY3PV3ZibfrjBueCByROpuBjLLFCajqkgYoLQ==
2667 | 
2668 | mdast-util-from-markdown@^1.0.2:
2669 |   version "1.3.1"
2670 |   resolved "https://registry.yarnpkg.com/mdast-util-from-markdown/-/mdast-util-from-markdown-1.3.1.tgz#9421a5a247f10d31d2faed2a30df5ec89ceafcf0"
2671 |   integrity sha512-4xTO/M8c82qBcnQc1tgpNtubGUW/Y1tBQ1B0i5CtSoelOLKFYlElIr3bvgREYYO5iRqbMY1YuqZng0GVOI8Qww==
2672 |   dependencies:
2673 |     "@types/mdast" "^3.0.0"
2674 |     "@types/unist" "^2.0.0"
2675 |     decode-named-character-reference "^1.0.0"
2676 |     mdast-util-to-string "^3.1.0"
2677 |     micromark "^3.0.0"
2678 |     micromark-util-decode-numeric-character-reference "^1.0.0"
2679 |     micromark-util-decode-string "^1.0.0"
2680 |     micromark-util-normalize-identifier "^1.0.0"
2681 |     micromark-util-symbol "^1.0.0"
2682 |     micromark-util-types "^1.0.0"
2683 |     unist-util-stringify-position "^3.0.0"
2684 |     uvu "^0.5.0"
2685 | 
2686 | mdast-util-frontmatter@^1.0.0:
2687 |   version "1.0.1"
2688 |   resolved "https://registry.yarnpkg.com/mdast-util-frontmatter/-/mdast-util-frontmatter-1.0.1.tgz#79c46d7414eb9d3acabe801ee4a70a70b75e5af1"
2689 |   integrity sha512-JjA2OjxRqAa8wEG8hloD0uTU0kdn8kbtOWpPP94NBkfAlbxn4S8gCGf/9DwFtEeGPXrDcNXdiDjVaRdUFqYokw==
2690 |   dependencies:
2691 |     "@types/mdast" "^3.0.0"
2692 |     mdast-util-to-markdown "^1.3.0"
2693 |     micromark-extension-frontmatter "^1.0.0"
2694 | 
2695 | mdast-util-phrasing@^3.0.0:
2696 |   version "3.0.1"
2697 |   resolved "https://registry.yarnpkg.com/mdast-util-phrasing/-/mdast-util-phrasing-3.0.1.tgz#c7c21d0d435d7fb90956038f02e8702781f95463"
2698 |   integrity sha512-WmI1gTXUBJo4/ZmSk79Wcb2HcjPJBzM1nlI/OUWA8yk2X9ik3ffNbBGsU+09BFmXaL1IBb9fiuvq6/KMiNycSg==
2699 |   dependencies:
2700 |     "@types/mdast" "^3.0.0"
2701 |     unist-util-is "^5.0.0"
2702 | 
2703 | mdast-util-to-markdown@^1.2.6, mdast-util-to-markdown@^1.3.0:
2704 |   version "1.5.0"
2705 |   resolved "https://registry.yarnpkg.com/mdast-util-to-markdown/-/mdast-util-to-markdown-1.5.0.tgz#c13343cb3fc98621911d33b5cd42e7d0731171c6"
2706 |   integrity sha512-bbv7TPv/WC49thZPg3jXuqzuvI45IL2EVAr/KxF0BSdHsU0ceFHOmwQn6evxAh1GaoK/6GQ1wp4R4oW2+LFL/A==
2707 |   dependencies:
2708 |     "@types/mdast" "^3.0.0"
2709 |     "@types/unist" "^2.0.0"
2710 |     longest-streak "^3.0.0"
2711 |     mdast-util-phrasing "^3.0.0"
2712 |     mdast-util-to-string "^3.0.0"
2713 |     micromark-util-decode-string "^1.0.0"
2714 |     unist-util-visit "^4.0.0"
2715 |     zwitch "^2.0.0"
2716 | 
2717 | mdast-util-to-string@^3.0.0, mdast-util-to-string@^3.1.0:
2718 |   version "3.2.0"
2719 |   resolved "https://registry.yarnpkg.com/mdast-util-to-string/-/mdast-util-to-string-3.2.0.tgz#66f7bb6324756741c5f47a53557f0cbf16b6f789"
2720 |   integrity sha512-V4Zn/ncyN1QNSqSBxTrMOLpjr+IKdHl2v3KVLoWmDPscP4r9GcCi71gjgvUV1SFSKh92AjAG4peFuBl2/YgCJg==
2721 |   dependencies:
2722 |     "@types/mdast" "^3.0.0"
2723 | 
2724 | mdast@^3.0.0:
2725 |   version "3.0.0"
2726 |   resolved "https://registry.yarnpkg.com/mdast/-/mdast-3.0.0.tgz#626bce9603ed43fb6fb053245a6e4a17f4457aa8"
2727 |   integrity sha512-xySmf8g4fPKMeC07jXGz971EkLbWAJ83s4US2Tj9lEdnZ142UP5grN73H1Xd3HzrdbU5o9GYYP/y8F9ZSwLE9g==
2728 | 
2729 | merge-stream@^2.0.0:
2730 |   version "2.0.0"
2731 |   resolved "https://registry.yarnpkg.com/merge-stream/-/merge-stream-2.0.0.tgz#52823629a14dd00c9770fb6ad47dc6310f2c1f60"
2732 |   integrity sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==
2733 | 
2734 | merge2@^1.3.0, merge2@^1.4.1:
2735 |   version "1.4.1"
2736 |   resolved "https://registry.yarnpkg.com/merge2/-/merge2-1.4.1.tgz#4368892f885e907455a6fd7dc55c0c9d404990ae"
2737 |   integrity sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==
2738 | 
2739 | micromark-core-commonmark@^1.0.1:
2740 |   version "1.1.0"
2741 |   resolved "https://registry.yarnpkg.com/micromark-core-commonmark/-/micromark-core-commonmark-1.1.0.tgz#1386628df59946b2d39fb2edfd10f3e8e0a75bb8"
2742 |   integrity sha512-BgHO1aRbolh2hcrzL2d1La37V0Aoz73ymF8rAcKnohLy93titmv62E0gP8Hrx9PKcKrqCZ1BbLGbP3bEhoXYlw==
2743 |   dependencies:
2744 |     decode-named-character-reference "^1.0.0"
2745 |     micromark-factory-destination "^1.0.0"
2746 |     micromark-factory-label "^1.0.0"
2747 |     micromark-factory-space "^1.0.0"
2748 |     micromark-factory-title "^1.0.0"
2749 |     micromark-factory-whitespace "^1.0.0"
2750 |     micromark-util-character "^1.0.0"
2751 |     micromark-util-chunked "^1.0.0"
2752 |     micromark-util-classify-character "^1.0.0"
2753 |     micromark-util-html-tag-name "^1.0.0"
2754 |     micromark-util-normalize-identifier "^1.0.0"
2755 |     micromark-util-resolve-all "^1.0.0"
2756 |     micromark-util-subtokenize "^1.0.0"
2757 |     micromark-util-symbol "^1.0.0"
2758 |     micromark-util-types "^1.0.1"
2759 |     uvu "^0.5.0"
2760 | 
2761 | micromark-extension-frontmatter@^1.0.0:
2762 |   version "1.1.1"
2763 |   resolved "https://registry.yarnpkg.com/micromark-extension-frontmatter/-/micromark-extension-frontmatter-1.1.1.tgz#2946643938e491374145d0c9aacc3249e38a865f"
2764 |   integrity sha512-m2UH9a7n3W8VAH9JO9y01APpPKmNNNs71P0RbknEmYSaZU5Ghogv38BYO94AI5Xw6OYfxZRdHZZ2nYjs/Z+SZQ==
2765 |   dependencies:
2766 |     fault "^2.0.0"
2767 |     micromark-util-character "^1.0.0"
2768 |     micromark-util-symbol "^1.0.0"
2769 |     micromark-util-types "^1.0.0"
2770 | 
2771 | micromark-factory-destination@^1.0.0:
2772 |   version "1.1.0"
2773 |   resolved "https://registry.yarnpkg.com/micromark-factory-destination/-/micromark-factory-destination-1.1.0.tgz#eb815957d83e6d44479b3df640f010edad667b9f"
2774 |   integrity sha512-XaNDROBgx9SgSChd69pjiGKbV+nfHGDPVYFs5dOoDd7ZnMAE+Cuu91BCpsY8RT2NP9vo/B8pds2VQNCLiu0zhg==
2775 |   dependencies:
2776 |     micromark-util-character "^1.0.0"
2777 |     micromark-util-symbol "^1.0.0"
2778 |     micromark-util-types "^1.0.0"
2779 | 
2780 | micromark-factory-label@^1.0.0:
2781 |   version "1.1.0"
2782 |   resolved "https://registry.yarnpkg.com/micromark-factory-label/-/micromark-factory-label-1.1.0.tgz#cc95d5478269085cfa2a7282b3de26eb2e2dec68"
2783 |   integrity sha512-OLtyez4vZo/1NjxGhcpDSbHQ+m0IIGnT8BoPamh+7jVlzLJBH98zzuCoUeMxvM6WsNeh8wx8cKvqLiPHEACn0w==
2784 |   dependencies:
2785 |     micromark-util-character "^1.0.0"
2786 |     micromark-util-symbol "^1.0.0"
2787 |     micromark-util-types "^1.0.0"
2788 |     uvu "^0.5.0"
2789 | 
2790 | micromark-factory-space@^1.0.0:
2791 |   version "1.1.0"
2792 |   resolved "https://registry.yarnpkg.com/micromark-factory-space/-/micromark-factory-space-1.1.0.tgz#c8f40b0640a0150751d3345ed885a080b0d15faf"
2793 |   integrity sha512-cRzEj7c0OL4Mw2v6nwzttyOZe8XY/Z8G0rzmWQZTBi/jjwyw/U4uqKtUORXQrR5bAZZnbTI/feRV/R7hc4jQYQ==
2794 |   dependencies:
2795 |     micromark-util-character "^1.0.0"
2796 |     micromark-util-types "^1.0.0"
2797 | 
2798 | micromark-factory-title@^1.0.0:
2799 |   version "1.1.0"
2800 |   resolved "https://registry.yarnpkg.com/micromark-factory-title/-/micromark-factory-title-1.1.0.tgz#dd0fe951d7a0ac71bdc5ee13e5d1465ad7f50ea1"
2801 |   integrity sha512-J7n9R3vMmgjDOCY8NPw55jiyaQnH5kBdV2/UXCtZIpnHH3P6nHUKaH7XXEYuWwx/xUJcawa8plLBEjMPU24HzQ==
2802 |   dependencies:
2803 |     micromark-factory-space "^1.0.0"
2804 |     micromark-util-character "^1.0.0"
2805 |     micromark-util-symbol "^1.0.0"
2806 |     micromark-util-types "^1.0.0"
2807 | 
2808 | micromark-factory-whitespace@^1.0.0:
2809 |   version "1.1.0"
2810 |   resolved "https://registry.yarnpkg.com/micromark-factory-whitespace/-/micromark-factory-whitespace-1.1.0.tgz#798fb7489f4c8abafa7ca77eed6b5745853c9705"
2811 |   integrity sha512-v2WlmiymVSp5oMg+1Q0N1Lxmt6pMhIHD457whWM7/GUlEks1hI9xj5w3zbc4uuMKXGisksZk8DzP2UyGbGqNsQ==
2812 |   dependencies:
2813 |     micromark-factory-space "^1.0.0"
2814 |     micromark-util-character "^1.0.0"
2815 |     micromark-util-symbol "^1.0.0"
2816 |     micromark-util-types "^1.0.0"
2817 | 
2818 | micromark-util-character@^1.0.0, micromark-util-character@^1.1.0:
2819 |   version "1.2.0"
2820 |   resolved "https://registry.yarnpkg.com/micromark-util-character/-/micromark-util-character-1.2.0.tgz#4fedaa3646db249bc58caeb000eb3549a8ca5dcc"
2821 |   integrity sha512-lXraTwcX3yH/vMDaFWCQJP1uIszLVebzUa3ZHdrgxr7KEU/9mL4mVgCpGbyhvNLNlauROiNUq7WN5u7ndbY6xg==
2822 |   dependencies:
2823 |     micromark-util-symbol "^1.0.0"
2824 |     micromark-util-types "^1.0.0"
2825 | 
2826 | micromark-util-chunked@^1.0.0:
2827 |   version "1.1.0"
2828 |   resolved "https://registry.yarnpkg.com/micromark-util-chunked/-/micromark-util-chunked-1.1.0.tgz#37a24d33333c8c69a74ba12a14651fd9ea8a368b"
2829 |   integrity sha512-Ye01HXpkZPNcV6FiyoW2fGZDUw4Yc7vT0E9Sad83+bEDiCJ1uXu0S3mr8WLpsz3HaG3x2q0HM6CTuPdcZcluFQ==
2830 |   dependencies:
2831 |     micromark-util-symbol "^1.0.0"
2832 | 
2833 | micromark-util-classify-character@^1.0.0:
2834 |   version "1.1.0"
2835 |   resolved "https://registry.yarnpkg.com/micromark-util-classify-character/-/micromark-util-classify-character-1.1.0.tgz#6a7f8c8838e8a120c8e3c4f2ae97a2bff9190e9d"
2836 |   integrity sha512-SL0wLxtKSnklKSUplok1WQFoGhUdWYKggKUiqhX+Swala+BtptGCu5iPRc+xvzJ4PXE/hwM3FNXsfEVgoZsWbw==
2837 |   dependencies:
2838 |     micromark-util-character "^1.0.0"
2839 |     micromark-util-symbol "^1.0.0"
2840 |     micromark-util-types "^1.0.0"
2841 | 
2842 | micromark-util-combine-extensions@^1.0.0:
2843 |   version "1.1.0"
2844 |   resolved "https://registry.yarnpkg.com/micromark-util-combine-extensions/-/micromark-util-combine-extensions-1.1.0.tgz#192e2b3d6567660a85f735e54d8ea6e3952dbe84"
2845 |   integrity sha512-Q20sp4mfNf9yEqDL50WwuWZHUrCO4fEyeDCnMGmG5Pr0Cz15Uo7KBs6jq+dq0EgX4DPwwrh9m0X+zPV1ypFvUA==
2846 |   dependencies:
2847 |     micromark-util-chunked "^1.0.0"
2848 |     micromark-util-types "^1.0.0"
2849 | 
2850 | micromark-util-decode-numeric-character-reference@^1.0.0:
2851 |   version "1.1.0"
2852 |   resolved "https://registry.yarnpkg.com/micromark-util-decode-numeric-character-reference/-/micromark-util-decode-numeric-character-reference-1.1.0.tgz#b1e6e17009b1f20bc652a521309c5f22c85eb1c6"
2853 |   integrity sha512-m9V0ExGv0jB1OT21mrWcuf4QhP46pH1KkfWy9ZEezqHKAxkj4mPCy3nIH1rkbdMlChLHX531eOrymlwyZIf2iw==
2854 |   dependencies:
2855 |     micromark-util-symbol "^1.0.0"
2856 | 
2857 | micromark-util-decode-string@^1.0.0:
2858 |   version "1.1.0"
2859 |   resolved "https://registry.yarnpkg.com/micromark-util-decode-string/-/micromark-util-decode-string-1.1.0.tgz#dc12b078cba7a3ff690d0203f95b5d5537f2809c"
2860 |   integrity sha512-YphLGCK8gM1tG1bd54azwyrQRjCFcmgj2S2GoJDNnh4vYtnL38JS8M4gpxzOPNyHdNEpheyWXCTnnTDY3N+NVQ==
2861 |   dependencies:
2862 |     decode-named-character-reference "^1.0.0"
2863 |     micromark-util-character "^1.0.0"
2864 |     micromark-util-decode-numeric-character-reference "^1.0.0"
2865 |     micromark-util-symbol "^1.0.0"
2866 | 
2867 | micromark-util-encode@^1.0.0:
2868 |   version "1.1.0"
2869 |   resolved "https://registry.yarnpkg.com/micromark-util-encode/-/micromark-util-encode-1.1.0.tgz#92e4f565fd4ccb19e0dcae1afab9a173bbeb19a5"
2870 |   integrity sha512-EuEzTWSTAj9PA5GOAs992GzNh2dGQO52UvAbtSOMvXTxv3Criqb6IOzJUBCmEqrrXSblJIJBbFFv6zPxpreiJw==
2871 | 
2872 | micromark-util-html-tag-name@^1.0.0:
2873 |   version "1.2.0"
2874 |   resolved "https://registry.yarnpkg.com/micromark-util-html-tag-name/-/micromark-util-html-tag-name-1.2.0.tgz#48fd7a25826f29d2f71479d3b4e83e94829b3588"
2875 |   integrity sha512-VTQzcuQgFUD7yYztuQFKXT49KghjtETQ+Wv/zUjGSGBioZnkA4P1XXZPT1FHeJA6RwRXSF47yvJ1tsJdoxwO+Q==
2876 | 
2877 | micromark-util-normalize-identifier@^1.0.0:
2878 |   version "1.1.0"
2879 |   resolved "https://registry.yarnpkg.com/micromark-util-normalize-identifier/-/micromark-util-normalize-identifier-1.1.0.tgz#7a73f824eb9f10d442b4d7f120fecb9b38ebf8b7"
2880 |   integrity sha512-N+w5vhqrBihhjdpM8+5Xsxy71QWqGn7HYNUvch71iV2PM7+E3uWGox1Qp90loa1ephtCxG2ftRV/Conitc6P2Q==
2881 |   dependencies:
2882 |     micromark-util-symbol "^1.0.0"
2883 | 
2884 | micromark-util-resolve-all@^1.0.0:
2885 |   version "1.1.0"
2886 |   resolved "https://registry.yarnpkg.com/micromark-util-resolve-all/-/micromark-util-resolve-all-1.1.0.tgz#4652a591ee8c8fa06714c9b54cd6c8e693671188"
2887 |   integrity sha512-b/G6BTMSg+bX+xVCshPTPyAu2tmA0E4X98NSR7eIbeC6ycCqCeE7wjfDIgzEbkzdEVJXRtOG4FbEm/uGbCRouA==
2888 |   dependencies:
2889 |     micromark-util-types "^1.0.0"
2890 | 
2891 | micromark-util-sanitize-uri@^1.0.0:
2892 |   version "1.2.0"
2893 |   resolved "https://registry.yarnpkg.com/micromark-util-sanitize-uri/-/micromark-util-sanitize-uri-1.2.0.tgz#613f738e4400c6eedbc53590c67b197e30d7f90d"
2894 |   integrity sha512-QO4GXv0XZfWey4pYFndLUKEAktKkG5kZTdUNaTAkzbuJxn2tNBOr+QtxR2XpWaMhbImT2dPzyLrPXLlPhph34A==
2895 |   dependencies:
2896 |     micromark-util-character "^1.0.0"
2897 |     micromark-util-encode "^1.0.0"
2898 |     micromark-util-symbol "^1.0.0"
2899 | 
2900 | micromark-util-subtokenize@^1.0.0:
2901 |   version "1.1.0"
2902 |   resolved "https://registry.yarnpkg.com/micromark-util-subtokenize/-/micromark-util-subtokenize-1.1.0.tgz#941c74f93a93eaf687b9054aeb94642b0e92edb1"
2903 |   integrity sha512-kUQHyzRoxvZO2PuLzMt2P/dwVsTiivCK8icYTeR+3WgbuPqfHgPPy7nFKbeqRivBvn/3N3GBiNC+JRTMSxEC7A==
2904 |   dependencies:
2905 |     micromark-util-chunked "^1.0.0"
2906 |     micromark-util-symbol "^1.0.0"
2907 |     micromark-util-types "^1.0.0"
2908 |     uvu "^0.5.0"
2909 | 
2910 | micromark-util-symbol@^1.0.0:
2911 |   version "1.1.0"
2912 |   resolved "https://registry.yarnpkg.com/micromark-util-symbol/-/micromark-util-symbol-1.1.0.tgz#813cd17837bdb912d069a12ebe3a44b6f7063142"
2913 |   integrity sha512-uEjpEYY6KMs1g7QfJ2eX1SQEV+ZT4rUD3UcF6l57acZvLNK7PBZL+ty82Z1qhK1/yXIY4bdx04FKMgR0g4IAag==
2914 | 
2915 | micromark-util-types@^1.0.0, micromark-util-types@^1.0.1:
2916 |   version "1.1.0"
2917 |   resolved "https://registry.yarnpkg.com/micromark-util-types/-/micromark-util-types-1.1.0.tgz#e6676a8cae0bb86a2171c498167971886cb7e283"
2918 |   integrity sha512-ukRBgie8TIAcacscVHSiddHjO4k/q3pnedmzMQ4iwDcK0FtFCohKOlFbaOL/mPgfnPsL3C1ZyxJa4sbWrBl3jg==
2919 | 
2920 | micromark@^3.0.0:
2921 |   version "3.2.0"
2922 |   resolved "https://registry.yarnpkg.com/micromark/-/micromark-3.2.0.tgz#1af9fef3f995ea1ea4ac9c7e2f19c48fd5c006e9"
2923 |   integrity sha512-uD66tJj54JLYq0De10AhWycZWGQNUvDI55xPgk2sQM5kn1JYlhbCMTtEeT27+vAhW2FBQxLlOmS3pmA7/2z4aA==
2924 |   dependencies:
2925 |     "@types/debug" "^4.0.0"
2926 |     debug "^4.0.0"
2927 |     decode-named-character-reference "^1.0.0"
2928 |     micromark-core-commonmark "^1.0.1"
2929 |     micromark-factory-space "^1.0.0"
2930 |     micromark-util-character "^1.0.0"
2931 |     micromark-util-chunked "^1.0.0"
2932 |     micromark-util-combine-extensions "^1.0.0"
2933 |     micromark-util-decode-numeric-character-reference "^1.0.0"
2934 |     micromark-util-encode "^1.0.0"
2935 |     micromark-util-normalize-identifier "^1.0.0"
2936 |     micromark-util-resolve-all "^1.0.0"
2937 |     micromark-util-sanitize-uri "^1.0.0"
2938 |     micromark-util-subtokenize "^1.0.0"
2939 |     micromark-util-symbol "^1.0.0"
2940 |     micromark-util-types "^1.0.1"
2941 |     uvu "^0.5.0"
2942 | 
2943 | micromatch@^4.0.4:
2944 |   version "4.0.5"
2945 |   resolved "https://registry.yarnpkg.com/micromatch/-/micromatch-4.0.5.tgz#bc8999a7cbbf77cdc89f132f6e467051b49090c6"
2946 |   integrity sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==
2947 |   dependencies:
2948 |     braces "^3.0.2"
2949 |     picomatch "^2.3.1"
2950 | 
2951 | mime@^1.4.1:
2952 |   version "1.6.0"
2953 |   resolved "https://registry.yarnpkg.com/mime/-/mime-1.6.0.tgz#32cd9e5c64553bd58d19a568af452acff04981b1"
2954 |   integrity sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==
2955 | 
2956 | mimic-fn@^2.1.0:
2957 |   version "2.1.0"
2958 |   resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b"
2959 |   integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==
2960 | 
2961 | mimic-response@^1.0.0, mimic-response@^1.0.1:
2962 |   version "1.0.1"
2963 |   resolved "https://registry.yarnpkg.com/mimic-response/-/mimic-response-1.0.1.tgz#4923538878eef42063cb8a3e3b0798781487ab1b"
2964 |   integrity sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==
2965 | 
2966 | minimatch@3.0.5:
2967 |   version "3.0.5"
2968 |   resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.5.tgz#4da8f1290ee0f0f8e83d60ca69f8f134068604a3"
2969 |   integrity sha512-tUpxzX0VAzJHjLu0xUfFv1gwVp9ba3IOuRAVH2EGuRW8a5emA2FlACLqiT/lDVtS1W+TGNwqz3sWaNyLgDJWuw==
2970 |   dependencies:
2971 |     brace-expansion "^1.1.7"
2972 | 
2973 | minimatch@^3.0.5, minimatch@^3.1.1, minimatch@^3.1.2:
2974 |   version "3.1.2"
2975 |   resolved "https://registry.yarnpkg.com/minimatch/-/minimatch-3.1.2.tgz#19cd194bfd3e428f049a70817c038d89ab4be35b"
2976 |   integrity sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==
2977 |   dependencies:
2978 |     brace-expansion "^1.1.7"
2979 | 
2980 | minimist@^1.2.0:
2981 |   version "1.2.6"
2982 |   resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.6.tgz#8637a5b759ea0d6e98702cfb3a9283323c93af44"
2983 |   integrity sha512-Jsjnk4bw3YJqYzbdyBiNsPWHPfO++UGG749Cxs6peCu5Xg4nrena6OVxOYxrQTqww0Jmwt+Ref8rggumkTLz9Q==
2984 | 
2985 | moment@2.29.4:
2986 |   version "2.29.4"
2987 |   resolved "https://registry.yarnpkg.com/moment/-/moment-2.29.4.tgz#3dbe052889fe7c1b2ed966fcb3a77328964ef108"
2988 |   integrity sha512-5LC9SOxjSc2HF6vO2CyuTDNivEdoz2IvyJJGj6X8DJ0eFyfszE0QiEd+iXmBvUP3WHxSjFH/vIsA0EN00cgr8w==
2989 | 
2990 | monkey-around@^2.1.0:
2991 |   version "2.3.0"
2992 |   resolved "https://registry.yarnpkg.com/monkey-around/-/monkey-around-2.3.0.tgz#6a2320132496646ed38eaef7ddf9bfef98fd34c6"
2993 |   integrity sha512-QWcCUWjqE/MCk9cXlSKZ1Qc486LD439xw/Ak8Nt6l2PuL9+yrc9TJakt7OHDuOqPRYY4nTWBAEFKn32PE/SfXA==
2994 | 
2995 | mri@^1.1.0:
2996 |   version "1.2.0"
2997 |   resolved "https://registry.yarnpkg.com/mri/-/mri-1.2.0.tgz#6721480fec2a11a4889861115a48b6cbe7cc8f0b"
2998 |   integrity sha512-tzzskb3bG8LvYGFF/mDTpq3jpI6Q9wc3LEmBaghu+DdCssd1FakN7Bc0hVNmEyGq1bq3RgfkCb3cmQLpNPOroA==
2999 | 
3000 | ms@2.1.2:
3001 |   version "2.1.2"
3002 |   resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
3003 |   integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
3004 | 
3005 | natural-compare-lite@^1.4.0:
3006 |   version "1.4.0"
3007 |   resolved "https://registry.yarnpkg.com/natural-compare-lite/-/natural-compare-lite-1.4.0.tgz#17b09581988979fddafe0201e931ba933c96cbb4"
3008 |   integrity sha512-Tj+HTDSJJKaZnfiuw+iaF9skdPpTo2GtEly5JHnWV/hfv2Qj/9RKsGISQtLh2ox3l5EAGw487hnBee0sIJ6v2g==
3009 | 
3010 | natural-compare@^1.4.0:
3011 |   version "1.4.0"
3012 |   resolved "https://registry.yarnpkg.com/natural-compare/-/natural-compare-1.4.0.tgz#4abebfeed7541f2c27acfb29bdbbd15c8d5ba4f7"
3013 |   integrity sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==
3014 | 
3015 | needle@^3.1.0:
3016 |   version "3.3.1"
3017 |   resolved "https://registry.yarnpkg.com/needle/-/needle-3.3.1.tgz#63f75aec580c2e77e209f3f324e2cdf3d29bd049"
3018 |   integrity sha512-6k0YULvhpw+RoLNiQCRKOl09Rv1dPLr8hHnVjHqdolKwDrdNyk+Hmrthi4lIGPPz3r39dLx0hsF5s40sZ3Us4Q==
3019 |   dependencies:
3020 |     iconv-lite "^0.6.3"
3021 |     sax "^1.2.4"
3022 | 
3023 | node-fetch@^2.6.1:
3024 |   version "2.6.7"
3025 |   resolved "https://registry.yarnpkg.com/node-fetch/-/node-fetch-2.6.7.tgz#24de9fba827e3b4ae44dc8b20256a379160052ad"
3026 |   integrity sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==
3027 |   dependencies:
3028 |     whatwg-url "^5.0.0"
3029 | 
3030 | normalize-url@^4.1.0:
3031 |   version "4.5.1"
3032 |   resolved "https://registry.yarnpkg.com/normalize-url/-/normalize-url-4.5.1.tgz#0dd90cf1288ee1d1313b87081c9a5932ee48518a"
3033 |   integrity sha512-9UZCFRHQdNrfTpGg8+1INIg93B6zE0aXMVFkw1WFwvO4SlZywU6aLg5Of0Ap/PgcbSw4LNxvMWXMeugwMCX0AA==
3034 | 
3035 | npm-run-path@^4.0.1:
3036 |   version "4.0.1"
3037 |   resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-4.0.1.tgz#b7ecd1e5ed53da8e37a55e1c2269e0b97ed748ea"
3038 |   integrity sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==
3039 |   dependencies:
3040 |     path-key "^3.0.0"
3041 | 
3042 | object-assign@^4.1.1:
3043 |   version "4.1.1"
3044 |   resolved "https://registry.yarnpkg.com/object-assign/-/object-assign-4.1.1.tgz#2109adc7965887cfc05cbbd442cac8bfbb360863"
3045 |   integrity sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==
3046 | 
3047 | object-inspect@^1.13.1:
3048 |   version "1.13.1"
3049 |   resolved "https://registry.yarnpkg.com/object-inspect/-/object-inspect-1.13.1.tgz#b96c6109324ccfef6b12216a956ca4dc2ff94bc2"
3050 |   integrity sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==
3051 | 
3052 | object-keys@^1.1.1:
3053 |   version "1.1.1"
3054 |   resolved "https://registry.yarnpkg.com/object-keys/-/object-keys-1.1.1.tgz#1c47f272df277f3b1daf061677d9c82e2322c60e"
3055 |   integrity sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==
3056 | 
3057 | object.assign@^4.1.4, object.assign@^4.1.5:
3058 |   version "4.1.5"
3059 |   resolved "https://registry.yarnpkg.com/object.assign/-/object.assign-4.1.5.tgz#3a833f9ab7fdb80fc9e8d2300c803d216d8fdbb0"
3060 |   integrity sha512-byy+U7gp+FVwmyzKPYhW2h5l3crpmGsxl7X2s8y43IgxvG4g3QZ6CffDtsNQy1WsmZpQbO+ybo0AlW7TY6DcBQ==
3061 |   dependencies:
3062 |     call-bind "^1.0.5"
3063 |     define-properties "^1.2.1"
3064 |     has-symbols "^1.0.3"
3065 |     object-keys "^1.1.1"
3066 | 
3067 | object.entries@^1.1.7:
3068 |   version "1.1.8"
3069 |   resolved "https://registry.yarnpkg.com/object.entries/-/object.entries-1.1.8.tgz#bffe6f282e01f4d17807204a24f8edd823599c41"
3070 |   integrity sha512-cmopxi8VwRIAw/fkijJohSfpef5PdN0pMQJN6VC/ZKvn0LIknWD8KtgY6KlQdEc4tIjcQ3HxSMmnvtzIscdaYQ==
3071 |   dependencies:
3072 |     call-bind "^1.0.7"
3073 |     define-properties "^1.2.1"
3074 |     es-object-atoms "^1.0.0"
3075 | 
3076 | object.fromentries@^2.0.7:
3077 |   version "2.0.8"
3078 |   resolved "https://registry.yarnpkg.com/object.fromentries/-/object.fromentries-2.0.8.tgz#f7195d8a9b97bd95cbc1999ea939ecd1a2b00c65"
3079 |   integrity sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==
3080 |   dependencies:
3081 |     call-bind "^1.0.7"
3082 |     define-properties "^1.2.1"
3083 |     es-abstract "^1.23.2"
3084 |     es-object-atoms "^1.0.0"
3085 | 
3086 | object.hasown@^1.1.3:
3087 |   version "1.1.4"
3088 |   resolved "https://registry.yarnpkg.com/object.hasown/-/object.hasown-1.1.4.tgz#e270ae377e4c120cdcb7656ce66884a6218283dc"
3089 |   integrity sha512-FZ9LZt9/RHzGySlBARE3VF+gE26TxR38SdmqOqliuTnl9wrKulaQs+4dee1V+Io8VfxqzAfHu6YuRgUy8OHoTg==
3090 |   dependencies:
3091 |     define-properties "^1.2.1"
3092 |     es-abstract "^1.23.2"
3093 |     es-object-atoms "^1.0.0"
3094 | 
3095 | object.values@^1.1.6, object.values@^1.1.7:
3096 |   version "1.2.0"
3097 |   resolved "https://registry.yarnpkg.com/object.values/-/object.values-1.2.0.tgz#65405a9d92cee68ac2d303002e0b8470a4d9ab1b"
3098 |   integrity sha512-yBYjY9QX2hnRmZHAjG/f13MzmBzxzYgQhFrke06TTyKY5zSTEqkOeukBzIdVA3j3ulu8Qa3MbVFShV7T2RmGtQ==
3099 |   dependencies:
3100 |     call-bind "^1.0.7"
3101 |     define-properties "^1.2.1"
3102 |     es-object-atoms "^1.0.0"
3103 | 
3104 | objectorarray@^1.0.5:
3105 |   version "1.0.5"
3106 |   resolved "https://registry.yarnpkg.com/objectorarray/-/objectorarray-1.0.5.tgz#2c05248bbefabd8f43ad13b41085951aac5e68a5"
3107 |   integrity sha512-eJJDYkhJFFbBBAxeh8xW+weHlkI28n2ZdQV/J/DNfWfSKlGEf2xcfAbZTv3riEXHAhL9SVOTs2pRmXiSTf78xg==
3108 | 
3109 | obsidian-calendar-ui@^0.3.12:
3110 |   version "0.3.12"
3111 |   resolved "https://registry.yarnpkg.com/obsidian-calendar-ui/-/obsidian-calendar-ui-0.3.12.tgz#23ccaf99c81e81fa49ae494c61eab7e71fb61508"
3112 |   integrity sha512-hdoRqCPnukfRgCARgArXaqMQZ+Iai0eY7f0ZsFHHfywpv4gKg3Tx5p47UsLvRO5DD+4knlbrL7Gel57MkfcLTw==
3113 |   dependencies:
3114 |     obsidian-daily-notes-interface "0.8.4"
3115 |     svelte "3.35.0"
3116 |     tslib "2.1.0"
3117 | 
3118 | obsidian-daily-notes-interface@0.8.4:
3119 |   version "0.8.4"
3120 |   resolved "https://registry.yarnpkg.com/obsidian-daily-notes-interface/-/obsidian-daily-notes-interface-0.8.4.tgz#530cec611878c2d2ae94ba868490df5bf17c8ccf"
3121 |   integrity sha512-REKQtAuIOKDbvNH/th1C1gWmJWCP5tRn9T/mfZGZt4Zncgko7McXK0aSKFtEInipvgbZJ2nScivvyLdiWluSMw==
3122 |   dependencies:
3123 |     obsidian obsidianmd/obsidian-api#master
3124 |     tslib "2.1.0"
3125 | 
3126 | obsidian-daily-notes-interface@^0.9.4:
3127 |   version "0.9.4"
3128 |   resolved "https://registry.yarnpkg.com/obsidian-daily-notes-interface/-/obsidian-daily-notes-interface-0.9.4.tgz#df085c5aa4c8c2b2b810185d4d9dc24344cb7604"
3129 |   integrity sha512-PILoRtZUB5wEeGnDQAPMlkVlXwDYoxkLR8Wl4STU2zLNwhcq9kKvQexiXi7sfjGlpTnL+LeAOfEVWyeVndneKg==
3130 |   dependencies:
3131 |     obsidian obsidianmd/obsidian-api#master
3132 |     tslib "2.1.0"
3133 | 
3134 | obsidian-dataview@^0.5.66:
3135 |   version "0.5.66"
3136 |   resolved "https://registry.yarnpkg.com/obsidian-dataview/-/obsidian-dataview-0.5.66.tgz#d82443fb29a6169b929094e77a674faafdb25b09"
3137 |   integrity sha512-5hYF1p4RnBpKS0PqxNJjZDoqAk2XrDZ6H3EQ+JOwcQwkoTMbMPMOH1sw9zg1hV5ZWbh+/uAPCRAI/nmvr68yxw==
3138 |   dependencies:
3139 |     "@codemirror/language" "https://github.com/lishid/cm-language"
3140 |     "@codemirror/state" "^6.0.1"
3141 |     "@codemirror/view" "^6.0.1"
3142 |     emoji-regex "^10.0.0"
3143 |     localforage "^1.10.0"
3144 |     luxon "^3.2.0"
3145 |     obsidian-calendar-ui "^0.3.12"
3146 |     papaparse "^5.3.1"
3147 |     parsimmon "^1.18.0"
3148 |     preact "^10.6.5"
3149 | 
3150 | obsidian-plugin-cli@^0.9.0:
3151 |   version "0.9.0"
3152 |   resolved "https://registry.yarnpkg.com/obsidian-plugin-cli/-/obsidian-plugin-cli-0.9.0.tgz#19843b4ad9c9d349bfb9558cc5237d40f826ea00"
3153 |   integrity sha512-V62+WF+tBFMajBXopO85XwxXAbIAocWwKYPWRNDb2CIIPE5JJJoSVC5ZQ/o2kLP+3A38Om1YUiBtzJ/2kbbm3g==
3154 |   dependencies:
3155 |     "@oclif/command" "^1"
3156 |     "@oclif/config" "^1"
3157 |     "@oclif/plugin-help" "^3"
3158 |     "@zephraph/procedure" "^0.2.0"
3159 |     ansi-colors "^4.1.1"
3160 |     cosmiconfig "^7.0.0"
3161 |     dedent "^0.7.0"
3162 |     esbuild "^0.12.6"
3163 |     obsidian-utils "^0.10.2"
3164 |     prompts "^2.4.0"
3165 |     tslib "^1"
3166 |     update-notifier "^5.1.0"
3167 | 
3168 | obsidian-utils@^0.10.2:
3169 |   version "0.10.2"
3170 |   resolved "https://registry.yarnpkg.com/obsidian-utils/-/obsidian-utils-0.10.2.tgz#a37ca2745c6a20177d78aa2a11ac03ccc6175a28"
3171 |   integrity sha512-LvD098hza7o+WnM7ra39xsvSazrjSLjynDsiMlCAE5Nv/mCcbYex72WeZkZ32TqdXLspTjfiI0pgRhKH4VuNEQ==
3172 |   dependencies:
3173 |     date-fns "^2.17.0"
3174 |     execa "^5.0.0"
3175 |     node-fetch "^2.6.1"
3176 |     which "^2.0.2"
3177 | 
3178 | obsidian@^1.5.7-1:
3179 |   version "1.5.7-1"
3180 |   resolved "https://registry.yarnpkg.com/obsidian/-/obsidian-1.5.7-1.tgz#6e367f015f6a1b6b13204135434bbe3c04d4dfc3"
3181 |   integrity sha512-T5ZRuQ1FnfXqEoakTTHVDYvzUEEoT8zSPnQCW31PVgYwG4D4tZCQfKHN2hTz1ifnCe8upvwa6mBTAP2WUA5Vng==
3182 |   dependencies:
3183 |     "@types/codemirror" "5.60.8"
3184 |     moment "2.29.4"
3185 | 
3186 | obsidian@obsidianmd/obsidian-api#master:
3187 |   version "1.5.7"
3188 |   resolved "https://codeload.github.com/obsidianmd/obsidian-api/tar.gz/8b2eda0f24285636c8aa116972643e5233a23dc1"
3189 |   dependencies:
3190 |     "@types/codemirror" "5.60.8"
3191 |     moment "2.29.4"
3192 | 
3193 | once@^1.3.0, once@^1.3.1, once@^1.4.0:
3194 |   version "1.4.0"
3195 |   resolved "https://registry.yarnpkg.com/once/-/once-1.4.0.tgz#583b1aa775961d4b113ac17d9c50baef9dd76bd1"
3196 |   integrity sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==
3197 |   dependencies:
3198 |     wrappy "1"
3199 | 
3200 | onetime@^5.1.2:
3201 |   version "5.1.2"
3202 |   resolved "https://registry.yarnpkg.com/onetime/-/onetime-5.1.2.tgz#d0e96ebb56b07476df1dd9c4806e5237985ca45e"
3203 |   integrity sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==
3204 |   dependencies:
3205 |     mimic-fn "^2.1.0"
3206 | 
3207 | optionator@^0.9.3:
3208 |   version "0.9.3"
3209 |   resolved "https://registry.yarnpkg.com/optionator/-/optionator-0.9.3.tgz#007397d44ed1872fdc6ed31360190f81814e2c64"
3210 |   integrity sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==
3211 |   dependencies:
3212 |     "@aashutoshrathi/word-wrap" "^1.2.3"
3213 |     deep-is "^0.1.3"
3214 |     fast-levenshtein "^2.0.6"
3215 |     levn "^0.4.1"
3216 |     prelude-ls "^1.2.1"
3217 |     type-check "^0.4.0"
3218 | 
3219 | p-cancelable@^1.0.0:
3220 |   version "1.1.0"
3221 |   resolved "https://registry.yarnpkg.com/p-cancelable/-/p-cancelable-1.1.0.tgz#d078d15a3af409220c886f1d9a0ca2e441ab26cc"
3222 |   integrity sha512-s73XxOZ4zpt1edZYZzvhqFa6uvQc1vwUa0K0BdtIZgQMAJj9IbebH+JkgKZc9h+B05PKHLOTl4ajG1BmNrVZlw==
3223 | 
3224 | p-limit@^2.2.0:
3225 |   version "2.3.0"
3226 |   resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-2.3.0.tgz#3dd33c647a214fdfffd835933eb086da0dc21db1"
3227 |   integrity sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==
3228 |   dependencies:
3229 |     p-try "^2.0.0"
3230 | 
3231 | p-limit@^3.0.2:
3232 |   version "3.1.0"
3233 |   resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-3.1.0.tgz#e1daccbe78d0d1388ca18c64fea38e3e57e3706b"
3234 |   integrity sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==
3235 |   dependencies:
3236 |     yocto-queue "^0.1.0"
3237 | 
3238 | p-locate@^4.1.0:
3239 |   version "4.1.0"
3240 |   resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-4.1.0.tgz#a3428bb7088b3a60292f66919278b7c297ad4f07"
3241 |   integrity sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==
3242 |   dependencies:
3243 |     p-limit "^2.2.0"
3244 | 
3245 | p-locate@^5.0.0:
3246 |   version "5.0.0"
3247 |   resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-5.0.0.tgz#83c8315c6785005e3bd021839411c9e110e6d834"
3248 |   integrity sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==
3249 |   dependencies:
3250 |     p-limit "^3.0.2"
3251 | 
3252 | p-try@^2.0.0:
3253 |   version "2.2.0"
3254 |   resolved "https://registry.yarnpkg.com/p-try/-/p-try-2.2.0.tgz#cb2868540e313d61de58fafbe35ce9004d5540e6"
3255 |   integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==
3256 | 
3257 | package-json@^6.3.0:
3258 |   version "6.5.0"
3259 |   resolved "https://registry.yarnpkg.com/package-json/-/package-json-6.5.0.tgz#6feedaca35e75725876d0b0e64974697fed145b0"
3260 |   integrity sha512-k3bdm2n25tkyxcjSKzB5x8kfVxlMdgsbPr0GkZcwHsLpba6cBjqCt1KlcChKEvxHIcTB1FVMuwoijZ26xex5MQ==
3261 |   dependencies:
3262 |     got "^9.6.0"
3263 |     registry-auth-token "^4.0.0"
3264 |     registry-url "^5.0.0"
3265 |     semver "^6.2.0"
3266 | 
3267 | papaparse@^5.3.1:
3268 |   version "5.4.1"
3269 |   resolved "https://registry.yarnpkg.com/papaparse/-/papaparse-5.4.1.tgz#f45c0f871853578bd3a30f92d96fdcfb6ebea127"
3270 |   integrity sha512-HipMsgJkZu8br23pW15uvo6sib6wne/4woLZPlFf3rpDyMe9ywEXUsuD7+6K9PRkJlVT51j/sCOYDKGGS3ZJrw==
3271 | 
3272 | parent-module@^1.0.0:
3273 |   version "1.0.1"
3274 |   resolved "https://registry.yarnpkg.com/parent-module/-/parent-module-1.0.1.tgz#691d2709e78c79fae3a156622452d00762caaaa2"
3275 |   integrity sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==
3276 |   dependencies:
3277 |     callsites "^3.0.0"
3278 | 
3279 | parse-json@^5.0.0:
3280 |   version "5.2.0"
3281 |   resolved "https://registry.yarnpkg.com/parse-json/-/parse-json-5.2.0.tgz#c76fc66dee54231c962b22bcc8a72cf2f99753cd"
3282 |   integrity sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==
3283 |   dependencies:
3284 |     "@babel/code-frame" "^7.0.0"
3285 |     error-ex "^1.3.1"
3286 |     json-parse-even-better-errors "^2.3.0"
3287 |     lines-and-columns "^1.1.6"
3288 | 
3289 | parse-node-version@^1.0.1:
3290 |   version "1.0.1"
3291 |   resolved "https://registry.yarnpkg.com/parse-node-version/-/parse-node-version-1.0.1.tgz#e2b5dbede00e7fa9bc363607f53327e8b073189b"
3292 |   integrity sha512-3YHlOa/JgH6Mnpr05jP9eDG254US9ek25LyIxZlDItp2iJtwyaXQb57lBYLdT3MowkUFYEV2XXNAYIPlESvJlA==
3293 | 
3294 | parsimmon@^1.18.0:
3295 |   version "1.18.1"
3296 |   resolved "https://registry.yarnpkg.com/parsimmon/-/parsimmon-1.18.1.tgz#d8dd9c28745647d02fc6566f217690897eed7709"
3297 |   integrity sha512-u7p959wLfGAhJpSDJVYXoyMCXWYwHia78HhRBWqk7AIbxdmlrfdp5wX0l3xv/iTSH5HvhN9K7o26hwwpgS5Nmw==
3298 | 
3299 | path-exists@^4.0.0:
3300 |   version "4.0.0"
3301 |   resolved "https://registry.yarnpkg.com/path-exists/-/path-exists-4.0.0.tgz#513bdbe2d3b95d7762e8c1137efa195c6c61b5b3"
3302 |   integrity sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==
3303 | 
3304 | path-is-absolute@^1.0.0:
3305 |   version "1.0.1"
3306 |   resolved "https://registry.yarnpkg.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz#174b9268735534ffbc7ace6bf53a5a9e1b5c5f5f"
3307 |   integrity sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==
3308 | 
3309 | path-key@^3.0.0, path-key@^3.1.0:
3310 |   version "3.1.1"
3311 |   resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
3312 |   integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
3313 | 
3314 | path-parse@^1.0.7:
3315 |   version "1.0.7"
3316 |   resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735"
3317 |   integrity sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==
3318 | 
3319 | path-type@^4.0.0:
3320 |   version "4.0.0"
3321 |   resolved "https://registry.yarnpkg.com/path-type/-/path-type-4.0.0.tgz#84ed01c0a7ba380afe09d90a8c180dcd9d03043b"
3322 |   integrity sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==
3323 | 
3324 | picomatch@^2.3.1:
3325 |   version "2.3.1"
3326 |   resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.3.1.tgz#3ba3833733646d9d3e4995946c1365a67fb07a42"
3327 |   integrity sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==
3328 | 
3329 | pify@^4.0.1:
3330 |   version "4.0.1"
3331 |   resolved "https://registry.yarnpkg.com/pify/-/pify-4.0.1.tgz#4b2cd25c50d598735c50292224fd8c6df41e3231"
3332 |   integrity sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==
3333 | 
3334 | possible-typed-array-names@^1.0.0:
3335 |   version "1.0.0"
3336 |   resolved "https://registry.yarnpkg.com/possible-typed-array-names/-/possible-typed-array-names-1.0.0.tgz#89bb63c6fada2c3e90adc4a647beeeb39cc7bf8f"
3337 |   integrity sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==
3338 | 
3339 | preact@^10.6.5, preact@^10.8.2:
3340 |   version "10.20.2"
3341 |   resolved "https://registry.yarnpkg.com/preact/-/preact-10.20.2.tgz#0b343299a8c020562311cc25db93b3d832ec5e71"
3342 |   integrity sha512-S1d1ernz3KQ+Y2awUxKakpfOg2CEmJmwOP+6igPx6dgr6pgDvenqYviyokWso2rhHvGtTlWWnJDa7RaPbQerTg==
3343 | 
3344 | prelude-ls@^1.2.1:
3345 |   version "1.2.1"
3346 |   resolved "https://registry.yarnpkg.com/prelude-ls/-/prelude-ls-1.2.1.tgz#debc6489d7a6e6b0e7611888cec880337d316396"
3347 |   integrity sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==
3348 | 
3349 | prepend-http@^2.0.0:
3350 |   version "2.0.0"
3351 |   resolved "https://registry.yarnpkg.com/prepend-http/-/prepend-http-2.0.0.tgz#e92434bfa5ea8c19f41cdfd401d741a3c819d897"
3352 |   integrity sha512-ravE6m9Atw9Z/jjttRUZ+clIXogdghyZAuWJ3qEzjT+jI/dL1ifAqhZeC5VHzQp1MSt1+jxKkFNemj/iO7tVUA==
3353 | 
3354 | prettier@^3.1.1:
3355 |   version "3.2.5"
3356 |   resolved "https://registry.yarnpkg.com/prettier/-/prettier-3.2.5.tgz#e52bc3090586e824964a8813b09aba6233b28368"
3357 |   integrity sha512-3/GWa9aOC0YeD7LUfvOG2NiDyhOWRvt1k+rcKhOuYnMY24iiCphgneUfJDyFXd6rZCAnuLBv6UeAULtrhT/F4A==
3358 | 
3359 | printable-characters@^1.0.42:
3360 |   version "1.0.42"
3361 |   resolved "https://registry.yarnpkg.com/printable-characters/-/printable-characters-1.0.42.tgz#3f18e977a9bd8eb37fcc4ff5659d7be90868b3d8"
3362 |   integrity sha512-dKp+C4iXWK4vVYZmYSd0KBH5F/h1HoZRsbJ82AVKRO3PEo8L4lBS/vLwhVtpwwuYcoIsVY+1JYKR268yn480uQ==
3363 | 
3364 | prompts@^2.4.0:
3365 |   version "2.4.2"
3366 |   resolved "https://registry.yarnpkg.com/prompts/-/prompts-2.4.2.tgz#7b57e73b3a48029ad10ebd44f74b01722a4cb069"
3367 |   integrity sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==
3368 |   dependencies:
3369 |     kleur "^3.0.3"
3370 |     sisteransi "^1.0.5"
3371 | 
3372 | prop-types@^15.8.1:
3373 |   version "15.8.1"
3374 |   resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.8.1.tgz#67d87bf1a694f48435cf332c24af10214a3140b5"
3375 |   integrity sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==
3376 |   dependencies:
3377 |     loose-envify "^1.4.0"
3378 |     object-assign "^4.1.1"
3379 |     react-is "^16.13.1"
3380 | 
3381 | prr@~1.0.1:
3382 |   version "1.0.1"
3383 |   resolved "https://registry.yarnpkg.com/prr/-/prr-1.0.1.tgz#d3fc114ba06995a45ec6893f484ceb1d78f5f476"
3384 |   integrity sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw==
3385 | 
3386 | pump@^3.0.0:
3387 |   version "3.0.0"
3388 |   resolved "https://registry.yarnpkg.com/pump/-/pump-3.0.0.tgz#b4a2116815bde2f4e1ea602354e8c75565107a64"
3389 |   integrity sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==
3390 |   dependencies:
3391 |     end-of-stream "^1.1.0"
3392 |     once "^1.3.1"
3393 | 
3394 | punycode@^2.1.0:
3395 |   version "2.3.1"
3396 |   resolved "https://registry.yarnpkg.com/punycode/-/punycode-2.3.1.tgz#027422e2faec0b25e1549c3e1bd8309b9133b6e5"
3397 |   integrity sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==
3398 | 
3399 | pupa@^2.1.1:
3400 |   version "2.1.1"
3401 |   resolved "https://registry.yarnpkg.com/pupa/-/pupa-2.1.1.tgz#f5e8fd4afc2c5d97828faa523549ed8744a20d62"
3402 |   integrity sha512-l1jNAspIBSFqbT+y+5FosojNpVpF94nlI+wDUpqP9enwOTfHx9f0gh5nB96vl+6yTpsJsypeNrwfzPrKuHB41A==
3403 |   dependencies:
3404 |     escape-goat "^2.0.0"
3405 | 
3406 | queue-microtask@^1.2.2:
3407 |   version "1.2.3"
3408 |   resolved "https://registry.yarnpkg.com/queue-microtask/-/queue-microtask-1.2.3.tgz#4929228bbc724dfac43e0efb058caf7b6cfb6243"
3409 |   integrity sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==
3410 | 
3411 | rc@1.2.8, rc@^1.2.8:
3412 |   version "1.2.8"
3413 |   resolved "https://registry.yarnpkg.com/rc/-/rc-1.2.8.tgz#cd924bf5200a075b83c188cd6b9e211b7fc0d3ed"
3414 |   integrity sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==
3415 |   dependencies:
3416 |     deep-extend "^0.6.0"
3417 |     ini "~1.3.0"
3418 |     minimist "^1.2.0"
3419 |     strip-json-comments "~2.0.1"
3420 | 
3421 | react-colorful@^5.6.1:
3422 |   version "5.6.1"
3423 |   resolved "https://registry.yarnpkg.com/react-colorful/-/react-colorful-5.6.1.tgz#7dc2aed2d7c72fac89694e834d179e32f3da563b"
3424 |   integrity sha512-1exovf0uGTGyq5mXQT0zgQ80uvj2PCwvF8zY1RN9/vbJVSjSo3fsB/4L3ObbF7u70NduSiK4xu4Y6q1MHoUGEw==
3425 | 
3426 | react-cool-onclickoutside@^1.6.1:
3427 |   version "1.7.0"
3428 |   resolved "https://registry.yarnpkg.com/react-cool-onclickoutside/-/react-cool-onclickoutside-1.7.0.tgz#abc844e14852220fe15f81d7ef44976d15cd9980"
3429 |   integrity sha512-HVZK2155Unee+enpoHKyYP2UdQK69thw90XAOUCjvJBcgRSgfRPgWWt/W1dYzoGp3+nleAa8SJxF1d4FMA4Qmw==
3430 | 
3431 | "react-dom@npm:@preact/compat", "react@npm:@preact/compat":
3432 |   version "17.1.2"
3433 |   resolved "https://registry.yarnpkg.com/@preact/compat/-/compat-17.1.2.tgz#928756713b07af6faf7812f6a56840d8ce6fed37"
3434 |   integrity sha512-7pOZN9lMDDRQ+6aWvjwTp483KR8/zOpfS83wmOo3zfuLKdngS8/5RLbsFWzFZMGdYlotAhX980hJ75bjOHTwWg==
3435 | 
3436 | react-fast-compare@^3.2.2:
3437 |   version "3.2.2"
3438 |   resolved "https://registry.yarnpkg.com/react-fast-compare/-/react-fast-compare-3.2.2.tgz#929a97a532304ce9fee4bcae44234f1ce2c21d49"
3439 |   integrity sha512-nsO+KSNgo1SbJqJEYRE9ERzo7YtYbou/OqjSQKxV7jcKox7+usiUVZOAC+XnDOABXggQTno0Y1CpVnuWEc1boQ==
3440 | 
3441 | react-is@^16.13.1:
3442 |   version "16.13.1"
3443 |   resolved "https://registry.yarnpkg.com/react-is/-/react-is-16.13.1.tgz#789729a4dc36de2999dc156dd6c1d9c18cea56a4"
3444 |   integrity sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==
3445 | 
3446 | redux@^4.0.4:
3447 |   version "4.2.0"
3448 |   resolved "https://registry.yarnpkg.com/redux/-/redux-4.2.0.tgz#46f10d6e29b6666df758780437651eeb2b969f13"
3449 |   integrity sha512-oSBmcKKIuIR4ME29/AeNUnl5L+hvBq7OaJWzaptTQJAntaPvxIJqfnjbaEiCzzaIz+XmVILfqAM3Ob0aXLPfjA==
3450 |   dependencies:
3451 |     "@babel/runtime" "^7.9.2"
3452 | 
3453 | reflect.getprototypeof@^1.0.4:
3454 |   version "1.0.6"
3455 |   resolved "https://registry.yarnpkg.com/reflect.getprototypeof/-/reflect.getprototypeof-1.0.6.tgz#3ab04c32a8390b770712b7a8633972702d278859"
3456 |   integrity sha512-fmfw4XgoDke3kdI6h4xcUz1dG8uaiv5q9gcEwLS4Pnth2kxT+GZ7YehS1JTMGBQmtV7Y4GFGbs2re2NqhdozUg==
3457 |   dependencies:
3458 |     call-bind "^1.0.7"
3459 |     define-properties "^1.2.1"
3460 |     es-abstract "^1.23.1"
3461 |     es-errors "^1.3.0"
3462 |     get-intrinsic "^1.2.4"
3463 |     globalthis "^1.0.3"
3464 |     which-builtin-type "^1.1.3"
3465 | 
3466 | regenerator-runtime@^0.13.4:
3467 |   version "0.13.9"
3468 |   resolved "https://registry.yarnpkg.com/regenerator-runtime/-/regenerator-runtime-0.13.9.tgz#8925742a98ffd90814988d7566ad30ca3b263b52"
3469 |   integrity sha512-p3VT+cOEgxFsRRA9X4lkI1E+k2/CtnKtU4gcxyaCUreilL/vqI6CdZ3wxVUx3UOUg+gnUOQQcRI7BmSI656MYA==
3470 | 
3471 | regexp.prototype.flags@^1.5.2:
3472 |   version "1.5.2"
3473 |   resolved "https://registry.yarnpkg.com/regexp.prototype.flags/-/regexp.prototype.flags-1.5.2.tgz#138f644a3350f981a858c44f6bb1a61ff59be334"
3474 |   integrity sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==
3475 |   dependencies:
3476 |     call-bind "^1.0.6"
3477 |     define-properties "^1.2.1"
3478 |     es-errors "^1.3.0"
3479 |     set-function-name "^2.0.1"
3480 | 
3481 | registry-auth-token@^4.0.0:
3482 |   version "4.2.2"
3483 |   resolved "https://registry.yarnpkg.com/registry-auth-token/-/registry-auth-token-4.2.2.tgz#f02d49c3668884612ca031419491a13539e21fac"
3484 |   integrity sha512-PC5ZysNb42zpFME6D/XlIgtNGdTl8bBOCw90xQLVMpzuuubJKYDWFAEuUNc+Cn8Z8724tg2SDhDRrkVEsqfDMg==
3485 |   dependencies:
3486 |     rc "1.2.8"
3487 | 
3488 | registry-url@^5.0.0:
3489 |   version "5.1.0"
3490 |   resolved "https://registry.yarnpkg.com/registry-url/-/registry-url-5.1.0.tgz#e98334b50d5434b81136b44ec638d9c2009c5009"
3491 |   integrity sha512-8acYXXTI0AkQv6RAOjE3vOaIXZkT9wo4LOFbBKYQEEnnMNBpKqdUrI6S4NT0KPIo/WVvJ5tE/X5LF/TQUf0ekw==
3492 |   dependencies:
3493 |     rc "^1.2.8"
3494 | 
3495 | remove-accents@0.5.0:
3496 |   version "0.5.0"
3497 |   resolved "https://registry.yarnpkg.com/remove-accents/-/remove-accents-0.5.0.tgz#77991f37ba212afba162e375b627631315bed687"
3498 |   integrity sha512-8g3/Otx1eJaVD12e31UbJj1YzdtVvzH85HV7t+9MJYk/u3XmkOUJ5Ys9wQrf9PCPK8+xn4ymzqYCiZl6QWKn+A==
3499 | 
3500 | replace@^1.2.2:
3501 |   version "1.2.2"
3502 |   resolved "https://registry.yarnpkg.com/replace/-/replace-1.2.2.tgz#880247113a950afa749a297e6d10d4d7bcd27acf"
3503 |   integrity sha512-C4EDifm22XZM2b2JOYe6Mhn+lBsLBAvLbK8drfUQLTfD1KYl/n3VaW/CDju0Ny4w3xTtegBpg8YNSpFJPUDSjA==
3504 |   dependencies:
3505 |     chalk "2.4.2"
3506 |     minimatch "3.0.5"
3507 |     yargs "^15.3.1"
3508 | 
3509 | require-directory@^2.1.1:
3510 |   version "2.1.1"
3511 |   resolved "https://registry.yarnpkg.com/require-directory/-/require-directory-2.1.1.tgz#8c64ad5fd30dab1c976e2344ffe7f792a6a6df42"
3512 |   integrity sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==
3513 | 
3514 | require-main-filename@^2.0.0:
3515 |   version "2.0.0"
3516 |   resolved "https://registry.yarnpkg.com/require-main-filename/-/require-main-filename-2.0.0.tgz#d0b329ecc7cc0f61649f62215be69af54aa8989b"
3517 |   integrity sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==
3518 | 
3519 | resolve-from@^4.0.0:
3520 |   version "4.0.0"
3521 |   resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-4.0.0.tgz#4abcd852ad32dd7baabfe9b40e00a36db5f392e6"
3522 |   integrity sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==
3523 | 
3524 | resolve@^2.0.0-next.5:
3525 |   version "2.0.0-next.5"
3526 |   resolved "https://registry.yarnpkg.com/resolve/-/resolve-2.0.0-next.5.tgz#6b0ec3107e671e52b68cd068ef327173b90dc03c"
3527 |   integrity sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==
3528 |   dependencies:
3529 |     is-core-module "^2.13.0"
3530 |     path-parse "^1.0.7"
3531 |     supports-preserve-symlinks-flag "^1.0.0"
3532 | 
3533 | responselike@^1.0.2:
3534 |   version "1.0.2"
3535 |   resolved "https://registry.yarnpkg.com/responselike/-/responselike-1.0.2.tgz#918720ef3b631c5642be068f15ade5a46f4ba1e7"
3536 |   integrity sha512-/Fpe5guzJk1gPqdJLJR5u7eG/gNY4nImjbRDaVWVMRhne55TCmj2i9Q+54PBRfatRC8v/rIiv9BN0pMd9OV5EQ==
3537 |   dependencies:
3538 |     lowercase-keys "^1.0.0"
3539 | 
3540 | reusify@^1.0.4:
3541 |   version "1.0.4"
3542 |   resolved "https://registry.yarnpkg.com/reusify/-/reusify-1.0.4.tgz#90da382b1e126efc02146e90845a88db12925d76"
3543 |   integrity sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==
3544 | 
3545 | rimraf@^3.0.2:
3546 |   version "3.0.2"
3547 |   resolved "https://registry.yarnpkg.com/rimraf/-/rimraf-3.0.2.tgz#f1a5402ba6220ad52cc1282bac1ae3aa49fd061a"
3548 |   integrity sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==
3549 |   dependencies:
3550 |     glob "^7.1.3"
3551 | 
3552 | rrule@^2.8.1:
3553 |   version "2.8.1"
3554 |   resolved "https://registry.yarnpkg.com/rrule/-/rrule-2.8.1.tgz#e8341a9ce3e68ce5b8da4d502e893cd9f286805e"
3555 |   integrity sha512-hM3dHSBMeaJ0Ktp7W38BJZ7O1zOgaFEsn41PDk+yHoEtfLV+PoJt9E9xAlZiWgf/iqEqionN0ebHFZIDAp+iGw==
3556 |   dependencies:
3557 |     tslib "^2.4.0"
3558 | 
3559 | run-parallel@^1.1.9:
3560 |   version "1.2.0"
3561 |   resolved "https://registry.yarnpkg.com/run-parallel/-/run-parallel-1.2.0.tgz#66d1368da7bdf921eb9d95bd1a9229e7f21a43ee"
3562 |   integrity sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==
3563 |   dependencies:
3564 |     queue-microtask "^1.2.2"
3565 | 
3566 | sade@^1.7.3:
3567 |   version "1.8.1"
3568 |   resolved "https://registry.yarnpkg.com/sade/-/sade-1.8.1.tgz#0a78e81d658d394887be57d2a409bf703a3b2701"
3569 |   integrity sha512-xal3CZX1Xlo/k4ApwCFrHVACi9fBqJ7V+mwhBsuf/1IOKbBy098Fex+Wa/5QMubw09pSZ/u8EY8PWgevJsXp1A==
3570 |   dependencies:
3571 |     mri "^1.1.0"
3572 | 
3573 | safe-array-concat@^1.1.2:
3574 |   version "1.1.2"
3575 |   resolved "https://registry.yarnpkg.com/safe-array-concat/-/safe-array-concat-1.1.2.tgz#81d77ee0c4e8b863635227c721278dd524c20edb"
3576 |   integrity sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==
3577 |   dependencies:
3578 |     call-bind "^1.0.7"
3579 |     get-intrinsic "^1.2.4"
3580 |     has-symbols "^1.0.3"
3581 |     isarray "^2.0.5"
3582 | 
3583 | safe-regex-test@^1.0.3:
3584 |   version "1.0.3"
3585 |   resolved "https://registry.yarnpkg.com/safe-regex-test/-/safe-regex-test-1.0.3.tgz#a5b4c0f06e0ab50ea2c395c14d8371232924c377"
3586 |   integrity sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==
3587 |   dependencies:
3588 |     call-bind "^1.0.6"
3589 |     es-errors "^1.3.0"
3590 |     is-regex "^1.1.4"
3591 | 
3592 | "safer-buffer@>= 2.1.2 < 3.0.0":
3593 |   version "2.1.2"
3594 |   resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
3595 |   integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
3596 | 
3597 | sax@^1.2.4:
3598 |   version "1.3.0"
3599 |   resolved "https://registry.yarnpkg.com/sax/-/sax-1.3.0.tgz#a5dbe77db3be05c9d1ee7785dbd3ea9de51593d0"
3600 |   integrity sha512-0s+oAmw9zLl1V1cS9BtZN7JAd0cW5e0QH4W3LWEK6a4LaLEA2OTpGYWDY+6XasBLtz6wkm3u1xRw95mRuJ59WA==
3601 | 
3602 | semver-diff@^3.1.1:
3603 |   version "3.1.1"
3604 |   resolved "https://registry.yarnpkg.com/semver-diff/-/semver-diff-3.1.1.tgz#05f77ce59f325e00e2706afd67bb506ddb1ca32b"
3605 |   integrity sha512-GX0Ix/CJcHyB8c4ykpHGIAvLyOwOobtM/8d+TQkAd81/bEjgPHrfba41Vpesr7jX/t8Uh+R3EX9eAS5be+jQYg==
3606 |   dependencies:
3607 |     semver "^6.3.0"
3608 | 
3609 | semver@^5.6.0:
3610 |   version "5.7.2"
3611 |   resolved "https://registry.yarnpkg.com/semver/-/semver-5.7.2.tgz#48d55db737c3287cd4835e17fa13feace1c41ef8"
3612 |   integrity sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==
3613 | 
3614 | semver@^6.0.0, semver@^6.2.0, semver@^6.3.0:
3615 |   version "6.3.0"
3616 |   resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.0.tgz#ee0a64c8af5e8ceea67687b133761e1becbd1d3d"
3617 |   integrity sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==
3618 | 
3619 | semver@^6.3.1:
3620 |   version "6.3.1"
3621 |   resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.1.tgz#556d2ef8689146e46dcea4bfdd095f3434dffcb4"
3622 |   integrity sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==
3623 | 
3624 | semver@^7.3.2, semver@^7.3.4:
3625 |   version "7.3.7"
3626 |   resolved "https://registry.yarnpkg.com/semver/-/semver-7.3.7.tgz#12c5b649afdbf9049707796e22a4028814ce523f"
3627 |   integrity sha512-QlYTucUYOews+WeEujDoEGziz4K6c47V/Bd+LjSSYcA94p+DmINdf7ncaUinThfvZyu13lN9OY1XDxt8C0Tw0g==
3628 |   dependencies:
3629 |     lru-cache "^6.0.0"
3630 | 
3631 | semver@^7.3.7:
3632 |   version "7.5.4"
3633 |   resolved "https://registry.yarnpkg.com/semver/-/semver-7.5.4.tgz#483986ec4ed38e1c6c48c34894a9182dbff68a6e"
3634 |   integrity sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==
3635 |   dependencies:
3636 |     lru-cache "^6.0.0"
3637 | 
3638 | set-blocking@^2.0.0:
3639 |   version "2.0.0"
3640 |   resolved "https://registry.yarnpkg.com/set-blocking/-/set-blocking-2.0.0.tgz#045f9782d011ae9a6803ddd382b24392b3d890f7"
3641 |   integrity sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==
3642 | 
3643 | set-function-length@^1.2.1:
3644 |   version "1.2.2"
3645 |   resolved "https://registry.yarnpkg.com/set-function-length/-/set-function-length-1.2.2.tgz#aac72314198eaed975cf77b2c3b6b880695e5449"
3646 |   integrity sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==
3647 |   dependencies:
3648 |     define-data-property "^1.1.4"
3649 |     es-errors "^1.3.0"
3650 |     function-bind "^1.1.2"
3651 |     get-intrinsic "^1.2.4"
3652 |     gopd "^1.0.1"
3653 |     has-property-descriptors "^1.0.2"
3654 | 
3655 | set-function-name@^2.0.1, set-function-name@^2.0.2:
3656 |   version "2.0.2"
3657 |   resolved "https://registry.yarnpkg.com/set-function-name/-/set-function-name-2.0.2.tgz#16a705c5a0dc2f5e638ca96d8a8cd4e1c2b90985"
3658 |   integrity sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==
3659 |   dependencies:
3660 |     define-data-property "^1.1.4"
3661 |     es-errors "^1.3.0"
3662 |     functions-have-names "^1.2.3"
3663 |     has-property-descriptors "^1.0.2"
3664 | 
3665 | shebang-command@^2.0.0:
3666 |   version "2.0.0"
3667 |   resolved "https://registry.yarnpkg.com/shebang-command/-/shebang-command-2.0.0.tgz#ccd0af4f8835fbdc265b82461aaf0c36663f34ea"
3668 |   integrity sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==
3669 |   dependencies:
3670 |     shebang-regex "^3.0.0"
3671 | 
3672 | shebang-regex@^3.0.0:
3673 |   version "3.0.0"
3674 |   resolved "https://registry.yarnpkg.com/shebang-regex/-/shebang-regex-3.0.0.tgz#ae16f1644d873ecad843b0307b143362d4c42172"
3675 |   integrity sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==
3676 | 
3677 | side-channel@^1.0.4, side-channel@^1.0.6:
3678 |   version "1.0.6"
3679 |   resolved "https://registry.yarnpkg.com/side-channel/-/side-channel-1.0.6.tgz#abd25fb7cd24baf45466406b1096b7831c9215f2"
3680 |   integrity sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==
3681 |   dependencies:
3682 |     call-bind "^1.0.7"
3683 |     es-errors "^1.3.0"
3684 |     get-intrinsic "^1.2.4"
3685 |     object-inspect "^1.13.1"
3686 | 
3687 | signal-exit@^3.0.2, signal-exit@^3.0.3:
3688 |   version "3.0.7"
3689 |   resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.7.tgz#a9a1767f8af84155114eaabd73f99273c8f59ad9"
3690 |   integrity sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==
3691 | 
3692 | sisteransi@^1.0.5:
3693 |   version "1.0.5"
3694 |   resolved "https://registry.yarnpkg.com/sisteransi/-/sisteransi-1.0.5.tgz#134d681297756437cc05ca01370d3a7a571075ed"
3695 |   integrity sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==
3696 | 
3697 | slash@^3.0.0:
3698 |   version "3.0.0"
3699 |   resolved "https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
3700 |   integrity sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==
3701 | 
3702 | source-map@^0.5.0:
3703 |   version "0.5.7"
3704 |   resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.5.7.tgz#8a039d2d1021d22d1ea14c80d8ea468ba2ef3fcc"
3705 |   integrity sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==
3706 | 
3707 | source-map@^0.6.1, source-map@~0.6.0:
3708 |   version "0.6.1"
3709 |   resolved "https://registry.yarnpkg.com/source-map/-/source-map-0.6.1.tgz#74722af32e9614e9c287a8d0bbde48b5e2f1a263"
3710 |   integrity sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==
3711 | 
3712 | stacktracey@^2.1.7:
3713 |   version "2.1.8"
3714 |   resolved "https://registry.yarnpkg.com/stacktracey/-/stacktracey-2.1.8.tgz#bf9916020738ce3700d1323b32bd2c91ea71199d"
3715 |   integrity sha512-Kpij9riA+UNg7TnphqjH7/CzctQ/owJGNbFkfEeve4Z4uxT5+JapVLFXcsurIfN34gnTWZNJ/f7NMG0E8JDzTw==
3716 |   dependencies:
3717 |     as-table "^1.0.36"
3718 |     get-source "^2.0.12"
3719 | 
3720 | string-width@^4.0.0, string-width@^4.1.0, string-width@^4.2.0, string-width@^4.2.2:
3721 |   version "4.2.3"
3722 |   resolved "https://registry.yarnpkg.com/string-width/-/string-width-4.2.3.tgz#269c7117d27b05ad2e536830a8ec895ef9c6d010"
3723 |   integrity sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==
3724 |   dependencies:
3725 |     emoji-regex "^8.0.0"
3726 |     is-fullwidth-code-point "^3.0.0"
3727 |     strip-ansi "^6.0.1"
3728 | 
3729 | string.prototype.matchall@^4.0.10:
3730 |   version "4.0.11"
3731 |   resolved "https://registry.yarnpkg.com/string.prototype.matchall/-/string.prototype.matchall-4.0.11.tgz#1092a72c59268d2abaad76582dccc687c0297e0a"
3732 |   integrity sha512-NUdh0aDavY2og7IbBPenWqR9exH+E26Sv8e0/eTe1tltDGZL+GtBkDAnnyBtmekfK6/Dq3MkcGtzXFEd1LQrtg==
3733 |   dependencies:
3734 |     call-bind "^1.0.7"
3735 |     define-properties "^1.2.1"
3736 |     es-abstract "^1.23.2"
3737 |     es-errors "^1.3.0"
3738 |     es-object-atoms "^1.0.0"
3739 |     get-intrinsic "^1.2.4"
3740 |     gopd "^1.0.1"
3741 |     has-symbols "^1.0.3"
3742 |     internal-slot "^1.0.7"
3743 |     regexp.prototype.flags "^1.5.2"
3744 |     set-function-name "^2.0.2"
3745 |     side-channel "^1.0.6"
3746 | 
3747 | string.prototype.trim@^1.2.9:
3748 |   version "1.2.9"
3749 |   resolved "https://registry.yarnpkg.com/string.prototype.trim/-/string.prototype.trim-1.2.9.tgz#b6fa326d72d2c78b6df02f7759c73f8f6274faa4"
3750 |   integrity sha512-klHuCNxiMZ8MlsOihJhJEBJAiMVqU3Z2nEXWfWnIqjN0gEFS9J9+IxKozWWtQGcgoa1WUZzLjKPTr4ZHNFTFxw==
3751 |   dependencies:
3752 |     call-bind "^1.0.7"
3753 |     define-properties "^1.2.1"
3754 |     es-abstract "^1.23.0"
3755 |     es-object-atoms "^1.0.0"
3756 | 
3757 | string.prototype.trimend@^1.0.8:
3758 |   version "1.0.8"
3759 |   resolved "https://registry.yarnpkg.com/string.prototype.trimend/-/string.prototype.trimend-1.0.8.tgz#3651b8513719e8a9f48de7f2f77640b26652b229"
3760 |   integrity sha512-p73uL5VCHCO2BZZ6krwwQE3kCzM7NKmis8S//xEC6fQonchbum4eP6kR4DLEjQFO3Wnj3Fuo8NM0kOSjVdHjZQ==
3761 |   dependencies:
3762 |     call-bind "^1.0.7"
3763 |     define-properties "^1.2.1"
3764 |     es-object-atoms "^1.0.0"
3765 | 
3766 | string.prototype.trimstart@^1.0.8:
3767 |   version "1.0.8"
3768 |   resolved "https://registry.yarnpkg.com/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz#7ee834dda8c7c17eff3118472bb35bfedaa34dde"
3769 |   integrity sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==
3770 |   dependencies:
3771 |     call-bind "^1.0.7"
3772 |     define-properties "^1.2.1"
3773 |     es-object-atoms "^1.0.0"
3774 | 
3775 | strip-ansi@^6.0.0, strip-ansi@^6.0.1:
3776 |   version "6.0.1"
3777 |   resolved "https://registry.yarnpkg.com/strip-ansi/-/strip-ansi-6.0.1.tgz#9e26c63d30f53443e9489495b2105d37b67a85d9"
3778 |   integrity sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==
3779 |   dependencies:
3780 |     ansi-regex "^5.0.1"
3781 | 
3782 | strip-final-newline@^2.0.0:
3783 |   version "2.0.0"
3784 |   resolved "https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz#89b852fb2fcbe936f6f4b3187afb0a12c1ab58ad"
3785 |   integrity sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==
3786 | 
3787 | strip-json-comments@^3.1.1:
3788 |   version "3.1.1"
3789 |   resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-3.1.1.tgz#31f1281b3832630434831c310c01cccda8cbe006"
3790 |   integrity sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==
3791 | 
3792 | strip-json-comments@~2.0.1:
3793 |   version "2.0.1"
3794 |   resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-2.0.1.tgz#3c531942e908c2697c0ec344858c286c7ca0a60a"
3795 |   integrity sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==
3796 | 
3797 | style-mod@^4.0.0, style-mod@^4.1.0:
3798 |   version "4.1.2"
3799 |   resolved "https://registry.yarnpkg.com/style-mod/-/style-mod-4.1.2.tgz#ca238a1ad4786520f7515a8539d5a63691d7bf67"
3800 |   integrity sha512-wnD1HyVqpJUI2+eKZ+eo1UwghftP6yuFheBqqe+bWCotBjC2K1YnteJILRMs3SM4V/0dLEW1SC27MWP5y+mwmw==
3801 | 
3802 | supports-color@^5.3.0:
3803 |   version "5.5.0"
3804 |   resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-5.5.0.tgz#e2e69a44ac8772f78a1ec0b35b689df6530efc8f"
3805 |   integrity sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==
3806 |   dependencies:
3807 |     has-flag "^3.0.0"
3808 | 
3809 | supports-color@^7.1.0:
3810 |   version "7.2.0"
3811 |   resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
3812 |   integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
3813 |   dependencies:
3814 |     has-flag "^4.0.0"
3815 | 
3816 | supports-preserve-symlinks-flag@^1.0.0:
3817 |   version "1.0.0"
3818 |   resolved "https://registry.yarnpkg.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz#6eda4bd344a3c94aea376d4cc31bc77311039e09"
3819 |   integrity sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==
3820 | 
3821 | svelte@3.35.0:
3822 |   version "3.35.0"
3823 |   resolved "https://registry.yarnpkg.com/svelte/-/svelte-3.35.0.tgz#e0d0ba60c4852181c2b4fd851194be6fda493e65"
3824 |   integrity sha512-gknlZkR2sXheu/X+B7dDImwANVvK1R0QGQLd8CNIfxxGPeXBmePnxfzb6fWwTQRsYQG7lYkZXvpXJvxvpsoB7g==
3825 | 
3826 | text-table@^0.2.0:
3827 |   version "0.2.0"
3828 |   resolved "https://registry.yarnpkg.com/text-table/-/text-table-0.2.0.tgz#7f5ee823ae805207c00af2df4a84ec3fcfa570b4"
3829 |   integrity sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==
3830 | 
3831 | to-fast-properties@^2.0.0:
3832 |   version "2.0.0"
3833 |   resolved "https://registry.yarnpkg.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz#dc5e698cbd079265bc73e0377681a4e4e83f616e"
3834 |   integrity sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==
3835 | 
3836 | to-readable-stream@^1.0.0:
3837 |   version "1.0.0"
3838 |   resolved "https://registry.yarnpkg.com/to-readable-stream/-/to-readable-stream-1.0.0.tgz#ce0aa0c2f3df6adf852efb404a783e77c0475771"
3839 |   integrity sha512-Iq25XBt6zD5npPhlLVXGFN3/gyR2/qODcKNNyTMd4vbm39HUaOiAM4PMq0eMVC/Tkxz+Zjdsc55g9yyz+Yq00Q==
3840 | 
3841 | to-regex-range@^5.0.1:
3842 |   version "5.0.1"
3843 |   resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4"
3844 |   integrity sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==
3845 |   dependencies:
3846 |     is-number "^7.0.0"
3847 | 
3848 | tr46@~0.0.3:
3849 |   version "0.0.3"
3850 |   resolved "https://registry.yarnpkg.com/tr46/-/tr46-0.0.3.tgz#8184fd347dac9cdc185992f3a6622e14b9d9ab6a"
3851 |   integrity sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==
3852 | 
3853 | ts-union-tools@^0.0.1:
3854 |   version "0.0.1"
3855 |   resolved "https://registry.yarnpkg.com/ts-union-tools/-/ts-union-tools-0.0.1.tgz#ebe59afacbf5c5ac67b57f4ed9d0dd4c39afe605"
3856 |   integrity sha512-fUrofYJnqbT2Uw5cyJymPcbuVgVgduepTm5Uc3yf/Izc7JKGM49aSz2qxOmvKpM2Y9+9Sv7MV5bCGptJzq6QFQ==
3857 | 
3858 | tslib@2.1.0:
3859 |   version "2.1.0"
3860 |   resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.1.0.tgz#da60860f1c2ecaa5703ab7d39bc05b6bf988b97a"
3861 |   integrity sha512-hcVC3wYEziELGGmEEXue7D75zbwIIVUMWAVbHItGPx0ziyXxrOMQx4rQEVEV45Ut/1IotuEvwqPopzIOkDMf0A==
3862 | 
3863 | tslib@^1, tslib@^1.8.1:
3864 |   version "1.14.1"
3865 |   resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.14.1.tgz#cf2d38bdc34a134bcaf1091c41f6619e2f672d00"
3866 |   integrity sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==
3867 | 
3868 | tslib@^2.0.0, tslib@^2.0.3, tslib@^2.3.1:
3869 |   version "2.4.0"
3870 |   resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.4.0.tgz#7cecaa7f073ce680a05847aa77be941098f36dc3"
3871 |   integrity sha512-d6xOpEDfsi2CZVlPQzGeux8XMwLT9hssAsaPYExaQMuYskwb+x1x7J371tWlbBdWHroy99KnVB6qIkUbs5X3UQ==
3872 | 
3873 | tslib@^2.3.0, tslib@^2.4.0, tslib@^2.6.2:
3874 |   version "2.6.2"
3875 |   resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.6.2.tgz#703ac29425e7b37cd6fd456e92404d46d1f3e4ae"
3876 |   integrity sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==
3877 | 
3878 | tsutils@^3.21.0:
3879 |   version "3.21.0"
3880 |   resolved "https://registry.yarnpkg.com/tsutils/-/tsutils-3.21.0.tgz#b48717d394cea6c1e096983eed58e9d61715b623"
3881 |   integrity sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==
3882 |   dependencies:
3883 |     tslib "^1.8.1"
3884 | 
3885 | type-check@^0.4.0, type-check@~0.4.0:
3886 |   version "0.4.0"
3887 |   resolved "https://registry.yarnpkg.com/type-check/-/type-check-0.4.0.tgz#07b8203bfa7056c0657050e3ccd2c37730bab8f1"
3888 |   integrity sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==
3889 |   dependencies:
3890 |     prelude-ls "^1.2.1"
3891 | 
3892 | type-fest@^0.20.2:
3893 |   version "0.20.2"
3894 |   resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-0.20.2.tgz#1bf207f4b28f91583666cb5fbd327887301cd5f4"
3895 |   integrity sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==
3896 | 
3897 | typed-array-buffer@^1.0.2:
3898 |   version "1.0.2"
3899 |   resolved "https://registry.yarnpkg.com/typed-array-buffer/-/typed-array-buffer-1.0.2.tgz#1867c5d83b20fcb5ccf32649e5e2fc7424474ff3"
3900 |   integrity sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==
3901 |   dependencies:
3902 |     call-bind "^1.0.7"
3903 |     es-errors "^1.3.0"
3904 |     is-typed-array "^1.1.13"
3905 | 
3906 | typed-array-byte-length@^1.0.1:
3907 |   version "1.0.1"
3908 |   resolved "https://registry.yarnpkg.com/typed-array-byte-length/-/typed-array-byte-length-1.0.1.tgz#d92972d3cff99a3fa2e765a28fcdc0f1d89dec67"
3909 |   integrity sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==
3910 |   dependencies:
3911 |     call-bind "^1.0.7"
3912 |     for-each "^0.3.3"
3913 |     gopd "^1.0.1"
3914 |     has-proto "^1.0.3"
3915 |     is-typed-array "^1.1.13"
3916 | 
3917 | typed-array-byte-offset@^1.0.2:
3918 |   version "1.0.2"
3919 |   resolved "https://registry.yarnpkg.com/typed-array-byte-offset/-/typed-array-byte-offset-1.0.2.tgz#f9ec1acb9259f395093e4567eb3c28a580d02063"
3920 |   integrity sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==
3921 |   dependencies:
3922 |     available-typed-arrays "^1.0.7"
3923 |     call-bind "^1.0.7"
3924 |     for-each "^0.3.3"
3925 |     gopd "^1.0.1"
3926 |     has-proto "^1.0.3"
3927 |     is-typed-array "^1.1.13"
3928 | 
3929 | typed-array-length@^1.0.6:
3930 |   version "1.0.6"
3931 |   resolved "https://registry.yarnpkg.com/typed-array-length/-/typed-array-length-1.0.6.tgz#57155207c76e64a3457482dfdc1c9d1d3c4c73a3"
3932 |   integrity sha512-/OxDN6OtAk5KBpGb28T+HZc2M+ADtvRxXrKKbUwtsLgdoxgX13hyy7ek6bFRl5+aBs2yZzB0c4CnQfAtVypW/g==
3933 |   dependencies:
3934 |     call-bind "^1.0.7"
3935 |     for-each "^0.3.3"
3936 |     gopd "^1.0.1"
3937 |     has-proto "^1.0.3"
3938 |     is-typed-array "^1.1.13"
3939 |     possible-typed-array-names "^1.0.0"
3940 | 
3941 | typedarray-pool@^1.1.0:
3942 |   version "1.2.0"
3943 |   resolved "https://registry.yarnpkg.com/typedarray-pool/-/typedarray-pool-1.2.0.tgz#e7e90720144ba02b9ed660438af6f3aacfe33ac3"
3944 |   integrity sha512-YTSQbzX43yvtpfRtIDAYygoYtgT+Rpjuxy9iOpczrjpXLgGoyG7aS5USJXV2d3nn8uHTeb9rXDvzS27zUg5KYQ==
3945 |   dependencies:
3946 |     bit-twiddle "^1.0.0"
3947 |     dup "^1.0.0"
3948 | 
3949 | typedarray-to-buffer@^3.1.5:
3950 |   version "3.1.5"
3951 |   resolved "https://registry.yarnpkg.com/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz#a97ee7a9ff42691b9f783ff1bc5112fe3fca9080"
3952 |   integrity sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==
3953 |   dependencies:
3954 |     is-typedarray "^1.0.0"
3955 | 
3956 | typescript@^5.3.3:
3957 |   version "5.4.5"
3958 |   resolved "https://registry.yarnpkg.com/typescript/-/typescript-5.4.5.tgz#42ccef2c571fdbd0f6718b1d1f5e6e5ef006f611"
3959 |   integrity sha512-vcI4UpRgg81oIRUFwR0WSIHKt11nJ7SAVlYNIu+QpqeyXP+gpQJy/Z4+F0aGxSE4MqwjyXvW/TzgkLAx2AGHwQ==
3960 | 
3961 | unbox-primitive@^1.0.2:
3962 |   version "1.0.2"
3963 |   resolved "https://registry.yarnpkg.com/unbox-primitive/-/unbox-primitive-1.0.2.tgz#29032021057d5e6cdbd08c5129c226dff8ed6f9e"
3964 |   integrity sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==
3965 |   dependencies:
3966 |     call-bind "^1.0.2"
3967 |     has-bigints "^1.0.2"
3968 |     has-symbols "^1.0.3"
3969 |     which-boxed-primitive "^1.0.2"
3970 | 
3971 | unique-string@^2.0.0:
3972 |   version "2.0.0"
3973 |   resolved "https://registry.yarnpkg.com/unique-string/-/unique-string-2.0.0.tgz#39c6451f81afb2749de2b233e3f7c5e8843bd89d"
3974 |   integrity sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==
3975 |   dependencies:
3976 |     crypto-random-string "^2.0.0"
3977 | 
3978 | unist-util-is@^5.0.0:
3979 |   version "5.2.1"
3980 |   resolved "https://registry.yarnpkg.com/unist-util-is/-/unist-util-is-5.2.1.tgz#b74960e145c18dcb6226bc57933597f5486deae9"
3981 |   integrity sha512-u9njyyfEh43npf1M+yGKDGVPbY/JWEemg5nH05ncKPfi+kBbKBJoTdsogMu33uhytuLlv9y0O7GH7fEdwLdLQw==
3982 |   dependencies:
3983 |     "@types/unist" "^2.0.0"
3984 | 
3985 | unist-util-stringify-position@^3.0.0:
3986 |   version "3.0.3"
3987 |   resolved "https://registry.yarnpkg.com/unist-util-stringify-position/-/unist-util-stringify-position-3.0.3.tgz#03ad3348210c2d930772d64b489580c13a7db39d"
3988 |   integrity sha512-k5GzIBZ/QatR8N5X2y+drfpWG8IDBzdnVj6OInRNWm1oXrzydiaAT2OQiA8DPRRZyAKb9b6I2a6PxYklZD0gKg==
3989 |   dependencies:
3990 |     "@types/unist" "^2.0.0"
3991 | 
3992 | unist-util-visit-parents@^5.1.1:
3993 |   version "5.1.3"
3994 |   resolved "https://registry.yarnpkg.com/unist-util-visit-parents/-/unist-util-visit-parents-5.1.3.tgz#b4520811b0ca34285633785045df7a8d6776cfeb"
3995 |   integrity sha512-x6+y8g7wWMyQhL1iZfhIPhDAs7Xwbn9nRosDXl7qoPTSCy0yNxnKc+hWokFifWQIDGi154rdUqKvbCa4+1kLhg==
3996 |   dependencies:
3997 |     "@types/unist" "^2.0.0"
3998 |     unist-util-is "^5.0.0"
3999 | 
4000 | unist-util-visit@^4.0.0, unist-util-visit@^4.1.0:
4001 |   version "4.1.2"
4002 |   resolved "https://registry.yarnpkg.com/unist-util-visit/-/unist-util-visit-4.1.2.tgz#125a42d1eb876283715a3cb5cceaa531828c72e2"
4003 |   integrity sha512-MSd8OUGISqHdVvfY9TPhyK2VdUrPgxkUtWSuMHF6XAAFuL4LokseigBnZtPnJMu+FbynTkFNnFlyjxpVKujMRg==
4004 |   dependencies:
4005 |     "@types/unist" "^2.0.0"
4006 |     unist-util-is "^5.0.0"
4007 |     unist-util-visit-parents "^5.1.1"
4008 | 
4009 | universalify@^0.1.0:
4010 |   version "0.1.2"
4011 |   resolved "https://registry.yarnpkg.com/universalify/-/universalify-0.1.2.tgz#b646f69be3942dabcecc9d6639c80dc105efaa66"
4012 |   integrity sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==
4013 | 
4014 | update-notifier@^5.1.0:
4015 |   version "5.1.0"
4016 |   resolved "https://registry.yarnpkg.com/update-notifier/-/update-notifier-5.1.0.tgz#4ab0d7c7f36a231dd7316cf7729313f0214d9ad9"
4017 |   integrity sha512-ItnICHbeMh9GqUy31hFPrD1kcuZ3rpxDZbf4KUDavXwS0bW5m7SLbDQpGX3UYr072cbrF5hFUs3r5tUsPwjfHw==
4018 |   dependencies:
4019 |     boxen "^5.0.0"
4020 |     chalk "^4.1.0"
4021 |     configstore "^5.0.1"
4022 |     has-yarn "^2.1.0"
4023 |     import-lazy "^2.1.0"
4024 |     is-ci "^2.0.0"
4025 |     is-installed-globally "^0.4.0"
4026 |     is-npm "^5.0.0"
4027 |     is-yarn-global "^0.3.0"
4028 |     latest-version "^5.1.0"
4029 |     pupa "^2.1.1"
4030 |     semver "^7.3.4"
4031 |     semver-diff "^3.1.1"
4032 |     xdg-basedir "^4.0.0"
4033 | 
4034 | uri-js@^4.2.2:
4035 |   version "4.4.1"
4036 |   resolved "https://registry.yarnpkg.com/uri-js/-/uri-js-4.4.1.tgz#9b1a52595225859e55f669d928f88c6c57f2a77e"
4037 |   integrity sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==
4038 |   dependencies:
4039 |     punycode "^2.1.0"
4040 | 
4041 | url-parse-lax@^3.0.0:
4042 |   version "3.0.0"
4043 |   resolved "https://registry.yarnpkg.com/url-parse-lax/-/url-parse-lax-3.0.0.tgz#16b5cafc07dbe3676c1b1999177823d6503acb0c"
4044 |   integrity sha512-NjFKA0DidqPa5ciFcSrXnAltTtzz84ogy+NebPvfEgAck0+TNg4UJ4IN+fB7zRZfbgUf0syOo9MDxFkDSMuFaQ==
4045 |   dependencies:
4046 |     prepend-http "^2.0.0"
4047 | 
4048 | uvu@^0.5.0:
4049 |   version "0.5.6"
4050 |   resolved "https://registry.yarnpkg.com/uvu/-/uvu-0.5.6.tgz#2754ca20bcb0bb59b64e9985e84d2e81058502df"
4051 |   integrity sha512-+g8ENReyr8YsOc6fv/NVJs2vFdHBnBNdfE49rshrTzDWOlUx4Gq7KOS2GD8eqhy2j+Ejq29+SbKH8yjkAqXqoA==
4052 |   dependencies:
4053 |     dequal "^2.0.0"
4054 |     diff "^5.0.0"
4055 |     kleur "^4.0.3"
4056 |     sade "^1.7.3"
4057 | 
4058 | w3c-keyname@^2.2.4:
4059 |   version "2.2.8"
4060 |   resolved "https://registry.yarnpkg.com/w3c-keyname/-/w3c-keyname-2.2.8.tgz#7b17c8c6883d4e8b86ac8aba79d39e880f8869c5"
4061 |   integrity sha512-dpojBhNsCNN7T82Tm7k26A6G9ML3NkhDsnw9n/eoxSRlVBB4CEtIQ/KTCLI2Fwf3ataSXRhYFkQi3SlnFwPvPQ==
4062 | 
4063 | webidl-conversions@^3.0.0:
4064 |   version "3.0.1"
4065 |   resolved "https://registry.yarnpkg.com/webidl-conversions/-/webidl-conversions-3.0.1.tgz#24534275e2a7bc6be7bc86611cc16ae0a5654871"
4066 |   integrity sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==
4067 | 
4068 | whatwg-url@^5.0.0:
4069 |   version "5.0.0"
4070 |   resolved "https://registry.yarnpkg.com/whatwg-url/-/whatwg-url-5.0.0.tgz#966454e8765462e37644d3626f6742ce8b70965d"
4071 |   integrity sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==
4072 |   dependencies:
4073 |     tr46 "~0.0.3"
4074 |     webidl-conversions "^3.0.0"
4075 | 
4076 | which-boxed-primitive@^1.0.2:
4077 |   version "1.0.2"
4078 |   resolved "https://registry.yarnpkg.com/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz#13757bc89b209b049fe5d86430e21cf40a89a8e6"
4079 |   integrity sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==
4080 |   dependencies:
4081 |     is-bigint "^1.0.1"
4082 |     is-boolean-object "^1.1.0"
4083 |     is-number-object "^1.0.4"
4084 |     is-string "^1.0.5"
4085 |     is-symbol "^1.0.3"
4086 | 
4087 | which-builtin-type@^1.1.3:
4088 |   version "1.1.3"
4089 |   resolved "https://registry.yarnpkg.com/which-builtin-type/-/which-builtin-type-1.1.3.tgz#b1b8443707cc58b6e9bf98d32110ff0c2cbd029b"
4090 |   integrity sha512-YmjsSMDBYsM1CaFiayOVT06+KJeXf0o5M/CAd4o1lTadFAtacTUM49zoYxr/oroopFDfhvN6iEcBxUyc3gvKmw==
4091 |   dependencies:
4092 |     function.prototype.name "^1.1.5"
4093 |     has-tostringtag "^1.0.0"
4094 |     is-async-function "^2.0.0"
4095 |     is-date-object "^1.0.5"
4096 |     is-finalizationregistry "^1.0.2"
4097 |     is-generator-function "^1.0.10"
4098 |     is-regex "^1.1.4"
4099 |     is-weakref "^1.0.2"
4100 |     isarray "^2.0.5"
4101 |     which-boxed-primitive "^1.0.2"
4102 |     which-collection "^1.0.1"
4103 |     which-typed-array "^1.1.9"
4104 | 
4105 | which-collection@^1.0.1:
4106 |   version "1.0.2"
4107 |   resolved "https://registry.yarnpkg.com/which-collection/-/which-collection-1.0.2.tgz#627ef76243920a107e7ce8e96191debe4b16c2a0"
4108 |   integrity sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==
4109 |   dependencies:
4110 |     is-map "^2.0.3"
4111 |     is-set "^2.0.3"
4112 |     is-weakmap "^2.0.2"
4113 |     is-weakset "^2.0.3"
4114 | 
4115 | which-module@^2.0.0:
4116 |   version "2.0.0"
4117 |   resolved "https://registry.yarnpkg.com/which-module/-/which-module-2.0.0.tgz#d9ef07dce77b9902b8a3a8fa4b31c3e3f7e6e87a"
4118 |   integrity sha512-B+enWhmw6cjfVC7kS8Pj9pCrKSc5txArRyaYGe088shv/FGWH+0Rjx/xPgtsWfsUtS27FkP697E4DDhgrgoc0Q==
4119 | 
4120 | which-typed-array@^1.1.14, which-typed-array@^1.1.15, which-typed-array@^1.1.9:
4121 |   version "1.1.15"
4122 |   resolved "https://registry.yarnpkg.com/which-typed-array/-/which-typed-array-1.1.15.tgz#264859e9b11a649b388bfaaf4f767df1f779b38d"
4123 |   integrity sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==
4124 |   dependencies:
4125 |     available-typed-arrays "^1.0.7"
4126 |     call-bind "^1.0.7"
4127 |     for-each "^0.3.3"
4128 |     gopd "^1.0.1"
4129 |     has-tostringtag "^1.0.2"
4130 | 
4131 | which@^2.0.1, which@^2.0.2:
4132 |   version "2.0.2"
4133 |   resolved "https://registry.yarnpkg.com/which/-/which-2.0.2.tgz#7c6a8dd0a636a0327e10b59c9286eee93f3f51b1"
4134 |   integrity sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==
4135 |   dependencies:
4136 |     isexe "^2.0.0"
4137 | 
4138 | widest-line@^3.1.0:
4139 |   version "3.1.0"
4140 |   resolved "https://registry.yarnpkg.com/widest-line/-/widest-line-3.1.0.tgz#8292333bbf66cb45ff0de1603b136b7ae1496eca"
4141 |   integrity sha512-NsmoXalsWVDMGupxZ5R08ka9flZjjiLvHVAWYOKtiKM8ujtZWr9cRffak+uSE48+Ob8ObalXpwyeUiyDD6QFgg==
4142 |   dependencies:
4143 |     string-width "^4.0.0"
4144 | 
4145 | wrap-ansi@^6.2.0:
4146 |   version "6.2.0"
4147 |   resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-6.2.0.tgz#e9393ba07102e6c91a3b221478f0257cd2856e53"
4148 |   integrity sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==
4149 |   dependencies:
4150 |     ansi-styles "^4.0.0"
4151 |     string-width "^4.1.0"
4152 |     strip-ansi "^6.0.0"
4153 | 
4154 | wrap-ansi@^7.0.0:
4155 |   version "7.0.0"
4156 |   resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-7.0.0.tgz#67e145cff510a6a6984bdf1152911d69d2eb9e43"
4157 |   integrity sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==
4158 |   dependencies:
4159 |     ansi-styles "^4.0.0"
4160 |     string-width "^4.1.0"
4161 |     strip-ansi "^6.0.0"
4162 | 
4163 | wrappy@1:
4164 |   version "1.0.2"
4165 |   resolved "https://registry.yarnpkg.com/wrappy/-/wrappy-1.0.2.tgz#b5243d8f3ec1aa35f1364605bc0d1036e30ab69f"
4166 |   integrity sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==
4167 | 
4168 | write-file-atomic@^3.0.0:
4169 |   version "3.0.3"
4170 |   resolved "https://registry.yarnpkg.com/write-file-atomic/-/write-file-atomic-3.0.3.tgz#56bd5c5a5c70481cd19c571bd39ab965a5de56e8"
4171 |   integrity sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==
4172 |   dependencies:
4173 |     imurmurhash "^0.1.4"
4174 |     is-typedarray "^1.0.0"
4175 |     signal-exit "^3.0.2"
4176 |     typedarray-to-buffer "^3.1.5"
4177 | 
4178 | xdg-basedir@^4.0.0:
4179 |   version "4.0.0"
4180 |   resolved "https://registry.yarnpkg.com/xdg-basedir/-/xdg-basedir-4.0.0.tgz#4bc8d9984403696225ef83a1573cbbcb4e79db13"
4181 |   integrity sha512-PSNhEJDejZYV7h50BohL09Er9VaIefr2LMAf3OEmpCkjOi34eYyQYAXUTjEQtZJTKcF0E2UKTh+osDLsgNim9Q==
4182 | 
4183 | y18n@^4.0.0:
4184 |   version "4.0.3"
4185 |   resolved "https://registry.yarnpkg.com/y18n/-/y18n-4.0.3.tgz#b5f259c82cd6e336921efd7bfd8bf560de9eeedf"
4186 |   integrity sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==
4187 | 
4188 | yallist@^4.0.0:
4189 |   version "4.0.0"
4190 |   resolved "https://registry.yarnpkg.com/yallist/-/yallist-4.0.0.tgz#9bb92790d9c0effec63be73519e11a35019a3a72"
4191 |   integrity sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==
4192 | 
4193 | yaml@^1.10.0:
4194 |   version "1.10.2"
4195 |   resolved "https://registry.yarnpkg.com/yaml/-/yaml-1.10.2.tgz#2301c5ffbf12b467de8da2333a459e29e7920e4b"
4196 |   integrity sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==
4197 | 
4198 | yargs-parser@^18.1.2:
4199 |   version "18.1.3"
4200 |   resolved "https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-18.1.3.tgz#be68c4975c6b2abf469236b0c870362fab09a7b0"
4201 |   integrity sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==
4202 |   dependencies:
4203 |     camelcase "^5.0.0"
4204 |     decamelize "^1.2.0"
4205 | 
4206 | yargs@^15.3.1:
4207 |   version "15.4.1"
4208 |   resolved "https://registry.yarnpkg.com/yargs/-/yargs-15.4.1.tgz#0d87a16de01aee9d8bec2bfbf74f67851730f4f8"
4209 |   integrity sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==
4210 |   dependencies:
4211 |     cliui "^6.0.0"
4212 |     decamelize "^1.2.0"
4213 |     find-up "^4.1.0"
4214 |     get-caller-file "^2.0.1"
4215 |     require-directory "^2.1.1"
4216 |     require-main-filename "^2.0.0"
4217 |     set-blocking "^2.0.0"
4218 |     string-width "^4.2.0"
4219 |     which-module "^2.0.0"
4220 |     y18n "^4.0.0"
4221 |     yargs-parser "^18.1.2"
4222 | 
4223 | yocto-queue@^0.1.0:
4224 |   version "0.1.0"
4225 |   resolved "https://registry.yarnpkg.com/yocto-queue/-/yocto-queue-0.1.0.tgz#0294eb3dee05028d31ee1a5fa2c556a6aaf10a1b"
4226 |   integrity sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==
4227 | 
4228 | zwitch@^2.0.0:
4229 |   version "2.0.4"
4230 |   resolved "https://registry.yarnpkg.com/zwitch/-/zwitch-2.0.4.tgz#c827d4b0acb76fc3e685a4c6ec2902d51070e9d7"
4231 |   integrity sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==
4232 | 


--------------------------------------------------------------------------------
